// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __EMBER_AF_CALLBACK_PROTOTYPES__
#define __EMBER_AF_CALLBACK_PROTOTYPES__


/**
 * @addtogroup callback Application Framework V2 callback interface Reference
 * This header provides callback function prototypes to interface the
 * developer's application code with the Ember Application Framework.
 * @{
 */


#include "app/framework/include/af-types.h"


/** @name Non-Cluster Related Callbacks */
// @{
/** @brief Add To Current App Tasks
 *
 * This function is only useful to sleepy end devices.  This function will note
 * the passed item as part of a set of tasks the application has outstanding
 * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
 * application behaves with regard to sleeping and polling.  Until the
 * outstanding task is completed, the device may poll more frequently and sleep
 * less often.
 *
 * @param tasks   Ver.: always
 */
void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks);
/** @brief Allow Network Write Attribute
 *
 * This function is called by the application framework before it writes an
 * attribute in response to a write attribute request from an external device.
 * The value passed into this callback is the value to which the attribute is to
 * be set by the framework.
        Example:	In mirroring simple metering data
 * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
 * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
 * attributes on its mirror. The-meter-mirror sample application, located in
 * app/framework/sample-apps, uses this callback to allow the mirrored device to
 * write simple metering attributes on the mirror regardless of the fact that
 * most simple metering attributes are defined as read-only by the ZigBee
 * specification.
        Note:	The ZCL specification does not (as of this
 * writing) specify any permission-level security for writing writeable
 * attributes. As far as the ZCL specification is concerned, if an attribute is
 * writeable, any device that has a link key for the device should be able to
 * write that attribute. Furthermore if an attribute is read only, it should not
 * be written over the air. Thus, if you implement permissions for writing
 * attributes as a feature, you MAY be operating outside the specification. This
 * is unlikely to be a problem for writing read-only attributes, but it may be a
 * problem for attributes that are writeable according to the specification but
 * restricted by the application implementing this callback.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param value   Ver.: always
 * @param type   Ver.: always
 */
EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
                                                                          EmberAfClusterId clusterId,
                                                                          EmberAfAttributeId attributeId,
                                                                          int8u mask,
                                                                          int16u manufacturerCode,
                                                                          int8u* value,
                                                                          int8u type);
/** @brief Check For Sleep
 *
 * This is called by the framework to try and sleep the device.  This call is
 * ignored for non-sleepy devices.  The device may or may not sleep depending on
 * the internal state.  The amount of time it actually slept will be returned.
 *
 */
int32u emberAfCheckForSleepCallback(void);
/** @brief Clear Report Table
 *
 * This function is called by the framework when the application should clear
 * the report table.
 *
 */
EmberStatus emberAfClearReportTableCallback(void);
/** @brief Cluster Init
 *
 * This function is called when a specific cluster is initialized. It gives the
 * application an opportunity to take care of cluster initialization procedures.
 * It is called exactly once for each endpoint where cluster is present.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 */
void emberAfClusterInitCallback(int8u endpoint,
                                EmberAfClusterId clusterId);
/** @brief Cluster Security Custom
 *
 * This callback is fired when determining if APS encryption is required for a
 * cluster outside of the specification's required clusters.  In other words,
 * for the Smart Energy profile this would be a cluster beyond the list that
 * normally requires APS encryption.
 *
 * @param profileId The profile ID  Ver.: always
 * @param clusterId The cluster ID  Ver.: always
 * @param incoming Whether this is an incoming or outgoing message.  Ver.:
 * always
 * @param commandId The ZCL command ID being sent/received.  Ver.: always
 */
boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
                                             EmberAfClusterId clusterId,
                                             boolean incoming,
                                             int8u commandId);
/** @brief Configure Reporting Command
 *
 * This function is called by the application framework when a Configure
 * Reporting command is received from an external device.  The Configure
 * Reporting command contains a series of attribute reporting configuration
 * records.  The application should return TRUE if the message was processed or
 * FALSE if it was not.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfConfigureReportingCommandCallback(const EmberAfClusterCommand * cmd);
/** @brief Configure Reporting Response
 *
 * This function is called by the application framework when a Configure
 * Reporting Response command is received from an external device.  The
 * application should return TRUE if the message was processed or FALSE if it
 * was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of attribute status records.  Ver.:
 * always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
                                                  int8u * buffer,
                                                  int16u bufLen);
/** @brief Default Response
 *
 * This function is called by the application framework when a Default Response
 * command is received from an external device.  The application should return
 * TRUE if the message was processed or FALSE if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param commandId The command identifier to which this is a response.  Ver.:
 * always
 * @param status Specifies either SUCCESS or the nature of the error that was
 * detected in the received command.  Ver.: always
 */
boolean emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
                                       int8u commandId,
                                       EmberAfStatus status);
/** @brief Delivery Status
 *
 * @deprecated This callback has been deprecated and will be removed in a future
 * release. In lieu, the plugin-specific MessageSent callback or the main
 * MessageSent callback should be utilized.
 *
 * @param type   Ver.: always
 * @param status   Ver.: always
 */
void emberAfDeliveryStatusCallback(EmberOutgoingMessageType type,
                                   EmberStatus status);
/** @brief Discover Attributes Response
 *
 * This function is called by the application framework when a Discover
 * Attributes Response or Discover Attributes Extended Response command is
 * received from an external device.  The Discover Attributes Response command
 * contains a boolean indicating if discovery is complete and a list of zero or
 * more attribute identifier/type records. The final argument indicates whether
 * the response is in the extended format or not.  The application should return
 * TRUE if the message was processed or FALSE if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param discoveryComplete Indicates whether there are more attributes to be
 * discovered.  TRUE if there are no more attributes to be discovered.  Ver.:
 * always
 * @param buffer Buffer containing the list of attribute identifier/type
 * records.  Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 * @param extended Indicates whether the response is in the extended format or
 * not.  Ver.: always
 */
boolean emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
                                                  boolean discoveryComplete,
                                                  int8u * buffer,
                                                  int16u bufLen,
                                                  boolean extended);
/** @brief Discover Commands Generated Response
 *
 * This function is called by the framework when Discover Commands Generated
 * Response is received.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param manufacturerCode Manufacturer code  Ver.: always
 * @param discoveryComplete Indicates whether there are more commands to be
 * discovered.  Ver.: always
 * @param commandIds Buffer containing the list of command identifiers.  Ver.:
 * always
 * @param commandIdCount The length of bytes of the list, whish is the same as
 * the number of identifiers.  Ver.: always
 */
boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
                                                         int16u manufacturerCode,
                                                         boolean discoveryComplete,
                                                         int8u * commandIds,
                                                         int16u commandIdCount);
/** @brief Discover Commands Received Response
 *
 * This function is called by the framework when Discover Commands Received
 * Response is received.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param manufacturerCode Manufacturer code  Ver.: always
 * @param discoveryComplete Indicates whether there are more commands to be
 * discovered.  Ver.: always
 * @param commandIds Buffer containing the list of command identifiers.  Ver.:
 * always
 * @param commandIdCount The length of bytes of the list, whish is the same as
 * the number of identifiers.  Ver.: always
 */
boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
                                                        int16u manufacturerCode,
                                                        boolean discoveryComplete,
                                                        int8u * commandIds,
                                                        int16u commandIdCount);
/** @brief Eeprom Init
 *
 * Tells the system to initialize the EEPROM if it is not already initialized.
 *
 */
void emberAfEepromInitCallback(void);
/** @brief Eeprom Note Initialized State
 *
 * Records the state of the EEPROM so that an intelligent driver (like the
 * EEPROM plugin) can re-initialize the driver prior to any calls to it.
 *
 * @param state The state of the EEPROM, false=re-initalization needed,
 * true=no-re-init needed  Ver.: always
 */
void emberAfEepromNoteInitializedStateCallback(boolean state);
/** @brief Eeprom Shutdown
 *
 * Tells the system to shutdown the EEPROM if it is not already shutdown.
 *
 */
void emberAfEepromShutdownCallback(void);
/** @brief External Attribute Read
 *
 * Like emberAfExternalAttributeWriteCallback above, this function is called
 * when the framework needs to read an attribute that is not stored within the
 * Application Framework's data structures.
        All of the important
 * information about the attribute itself is passed as a pointer to an
 * EmberAfAttributeMetadata struct, which is stored within the application and
 * used to manage the attribute. A complete description of the
 * EmberAfAttributeMetadata struct is provided in
 * app/framework/include/af-types.h
        This function assumes that the
 * application is able to read the attribute, write it into the passed buffer,
 * and return immediately. Any attributes that require a state machine for
 * reading and writing are not really candidates for externalization at the
 * present time. The Application Framework does not currently include a state
 * machine for reading or writing attributes that must take place across a
 * series of application ticks. Attributes that cannot be read in a timely
 * manner should be stored within the Application Framework and updated
 * occasionally by the application code from within the
 * emberAfMainTickCallback.
        If the application was successfully able to
 * read the attribute and write it into the passed buffer, it should return a
 * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
 * application was not able to read the attribute.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeMetadata   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param buffer   Ver.: always
 */
EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
                                                   EmberAfClusterId clusterId,
                                                   EmberAfAttributeMetadata * attributeMetadata,
                                                   int16u manufacturerCode,
                                                   int8u * buffer);
/** @brief External Attribute Write
 *
 * This function is called whenever the Application Framework needs to write an
 * attribute which is not stored within the data structures of the Application
 * Framework itself. One of the new features in Version 2 is the ability to
 * store attributes outside the Framework. This is particularly useful for
 * attributes that do not need to be stored because they can be read off the
 * hardware when they are needed, or are stored in some central location used by
 * many modules within the system. In this case, you can indicate that the
 * attribute is stored externally. When the framework needs to write an external
 * attribute, it makes a call to this callback.
        This callback is very
 * useful for host micros which need to store attributes in persistent memory.
 * Because each host micro (used with an Ember NCP) has its own type of
 * persistent memory storage, the Application Framework does not include the
 * ability to mark attributes as stored in flash the way that it does for Ember
 * SoCs like the EM35x. On a host micro, any attributes that need to be stored
 * in persistent memory should be marked as external and accessed through the
 * external read and write callbacks. Any host code associated with the
 * persistent storage should be implemented within this callback.
        All of
 * the important information about the attribute itself is passed as a pointer
 * to an EmberAfAttributeMetadata struct, which is stored within the application
 * and used to manage the attribute. A complete description of the
 * EmberAfAttributeMetadata struct is provided in
 * app/framework/include/af-types.h.
        This function assumes that the
 * application is able to write the attribute and return immediately. Any
 * attributes that require a state machine for reading and writing are not
 * candidates for externalization at the present time. The Application Framework
 * does not currently include a state machine for reading or writing attributes
 * that must take place across a series of application ticks. Attributes that
 * cannot be written immediately should be stored within the Application
 * Framework and updated occasionally by the application code from within the
 * emberAfMainTickCallback.
        If the application was successfully able to
 * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
 * other return value indicates the application was not able to write the
 * attribute.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeMetadata   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param buffer   Ver.: always
 */
EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
                                                    EmberAfClusterId clusterId,
                                                    EmberAfAttributeMetadata * attributeMetadata,
                                                    int16u manufacturerCode,
                                                    int8u * buffer);
/** @brief Find Unused Pan Id And Form
 *
 * This function is called by the framework to search for an unused PAN id and
 * form a new network.  The application should return EMBER_SUCCESS if the
 * operation was initiated successfully.
 *
 */
EmberStatus emberAfFindUnusedPanIdAndFormCallback(void);
/** @brief Get Current App Tasks
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the set of tasks the application has outstanding.  These tasks affect
 * how the application behaves with regard to sleeping and polling.
 *
 */
EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void);
/** @brief Get Current Poll Control
 *
 * This function will retrieve the current poll control that the system is using
 * for the current network.  This is determined by examining all the scheduled
 * events and obtaining the most restrictive poll control context across all
 * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
 * EMBER_AF_LONG_POLL.
 *
 */
EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void);
/** @brief Get Current Poll Interval Ms
 *
 * This function is only useful to end devices.  This function will return the
 * current poll interval (in milliseconds) for the current network.  This
 * interval is the maximum amount of time a child is currently waiting between
 * polls of its parent.
 *
 */
int32u emberAfGetCurrentPollIntervalMsCallback(void);
/** @brief Get Current Poll Interval Qs
 *
 * This function is only useful to end devices.  This function will return the
 * current poll interval (in quarter seconds) for the current network.  This
 * interval is the maximum amount of time a child is currently waiting between
 * polls of its parent.
 *
 */
int32u emberAfGetCurrentPollIntervalQsCallback(void);
/** @brief Get Current Sleep Control
 *
 * This function will retrieve the current sleep control that the system is
 * using.  This is determined by examining all the scheduled events and
 * obtaining the most restrictive sleep control context across all events.  The
 * most restrictive sleep control is EMBER_AF_STAY_AWAKE followed by
 * EMBER_AF_OK_TO_SLEEP.
 *
 */
EmberAfEventSleepControl emberAfGetCurrentSleepControlCallback(void);
/** @brief Get Current Time
 *
 * This callback is called when device attempts to get current time from the
 * hardware. If this device has means to retrieve exact time, then this method
 * should implement it. If the callback can't provide the exact time it should
 * return 0 to indicate failure. Default action is to return 0, which indicates
 * that device does not have access to real time.
 *
 */
int32u emberAfGetCurrentTimeCallback(void);
/** @brief Get Default Poll Control
 *
 * This function will retrieve the default poll control for the current network
 * as previously set by emberAfSetDefaultPollControlCallback().  The default
 * poll control will limit whether the network can long poll.
 *
 */
EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void);
/** @brief Get Default Sleep Control
 *
 * This function will retrieve the default sleep control the system is using as
 * previously set by emberAfSetDefaultSleepControlCallback().  The default sleep
 * control will limit whether the device can sleep.
 *
 */
EmberAfEventSleepControl emberAfGetDefaultSleepControlCallback(void);
/** @brief Get Form And Join Extended Pan Id
 *
 * This callback is called by the framework to get the extended PAN ID used by
 * the current network for forming and joining.  The extended PAN ID used for
 * forming and joining is not necessarily the same extended PAN ID actually in
 * use on the network.
 *
 * @param resultLocation   Ver.: always
 */
void emberAfGetFormAndJoinExtendedPanIdCallback(int8u * resultLocation);
/** @brief Get Long Poll Interval Ms
 *
 * This function is only useful to end devices.  This function will return the
 * long poll interval (in milliseconds) for the current network.  This interval
 * is the maximum amount of time a child will wait between polls of its parent
 * when it is not expecting data.
 *
 */
int32u emberAfGetLongPollIntervalMsCallback(void);
/** @brief Get Long Poll Interval Qs
 *
 * This function is only useful to end devices.  This function will return the
 * long poll interval (in quarter seconds) for the current network.  This
 * interval is the maximum amount of time a child will wait between polls of its
 * parent when it is not expecting data.
 *
 */
int32u emberAfGetLongPollIntervalQsCallback(void);
/** @brief Get Short Poll Interval Ms
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the short poll interval (in milliseconds) for the current network. 
 * This interval is the maximum amount of time a child will wait between polls
 * of its parent when it is expecting data.
 *
 */
int16u emberAfGetShortPollIntervalMsCallback(void);
/** @brief Get Short Poll Interval Qs
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the short poll interval (in quarter seconds) for the current network. 
 * This interval is the maximum amount of time a child will wait between polls
 * of its parent when it is expecting data.
 *
 */
int16u emberAfGetShortPollIntervalQsCallback(void);
/** @brief Get Source Route Overhead
 *
 * This function is called by the framework to determine the overhead required
 * in the network frame for source routing to a particular destination.
 *
 * @param destination The node id of the destination  Ver.: always
 */
int8u emberAfGetSourceRouteOverheadCallback(EmberNodeId destination);
/** @brief Get Wake Timeout Bitmask
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the wake timeout bitmask for the current network.  The bitmask
 * determines which tasks will timeout automatically and which tasks require
 * manual removal from the task list.
 *
 */
EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void);
/** @brief Get Wake Timeout Ms
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the wake timeout (in milliseconds) for the current network.  This
 * timeout is the maximum amount of time a child will wait for a task in the
 * wake bitmask to finish.  While waiting, the device will short poll.
 *
 */
int16u emberAfGetWakeTimeoutMsCallback(void);
/** @brief Get Wake Timeout Qs
 *
 * This function is only useful to sleepy end devices.  This function will
 * return the wake timeout (in quarter seconds) for the current network.  This
 * timeout is the maximum amount of time a child will wait for a task in the
 * wake bitmask to finish.  While waiting, the device will short poll.
 *
 */
int16u emberAfGetWakeTimeoutQsCallback(void);
/** @brief Initiate Inter Pan Key Establishment
 *
 * This function is called by the framework to initiate key establishment with a
 * remote device on a different PAN.  The application should return
 * EMBER_SUCCESS if key establishment was initiated successfully.  The
 * application should call ::emberAfInterPanKeyEstablishmentCallback as events
 * occur.
 *
 * @param panId The PAN id of the remote device.  Ver.: always
 * @param eui64 The EUI64 of the remote device.  Ver.: always
 */
EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
                                                            const EmberEUI64 eui64);
/** @brief Initiate Key Establishment
 *
 * This function is called by the framework to initiate key establishment with a
 * remote device.  The application should return EMBER_SUCCESS if key
 * establishment was initiated successfully.  The application should call
 * ::emberAfKeyEstablishmentCallback as events occur.
 *
 * @param nodeId The node id of the remote device.  Ver.: always
 * @param endpoint The endpoint on the remote device.  Ver.: always
 */
EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
                                                    int8u endpoint);
/** @brief Initiate Partner Link Key Exchange
 *
 * This function is called by the framework to initiate a partner link key
 * exchange with a remote device.  The application should return EMBER_SUCCESS
 * if the partner link key exchange was initiated successfully.  When the
 * partner link key exchange completes, the application should call the given
 * callback.
 *
 * @param target The node id of the remote device.  Ver.: always
 * @param endpoint The key establishment endpoint of the remote device.  Ver.:
 * always
 * @param callback The callback that should be called when the partner link key
 * exchange completse.  Ver.: always
 */
EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
                                                          int8u endpoint,
                                                          EmberAfPartnerLinkKeyExchangeCallback * callback);
/** @brief Inter Pan Key Establishment
 *
 * A callback by the key-establishment code to indicate an event has occurred. 
 * For error codes this is purely a notification.  For non-error status codes
 * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
 * disallow the operation.  If the application returns TRUE then the key
 * establishment is allowed to proceed.  If it returns FALSE, then key
 * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
 *
 * @param status   Ver.: always
 * @param amInitiator   Ver.: always
 * @param panId   Ver.: always
 * @param eui64   Ver.: always
 * @param delayInSeconds   Ver.: always
 */
boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
                                                boolean amInitiator,
                                                EmberPanId panId,
                                                const EmberEUI64 eui64,
                                                int8u delayInSeconds);
/** @brief Interpan Send Message
 *
 * This function will send a raw MAC message with interpan frame format using
 * the passed parameters.
 *
 * @param header Interpan header info  Ver.: always
 * @param messageLength The length of the message received or to send  Ver.:
 * always
 * @param message The message data received or to send.  Ver.: always
 */
EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
                                               int16u messageLength,
                                               int8u* message);
/** @brief Joinable Network Found
 *
 * This is called by the framework on behalf of the form-and-join library to
 * notify the application of the network found after a call to
 * ::emberScanForJoinableNetwork() or ::emberScanForNextJoinableNetwork().  See
 * form-and-join documentation for more information.
 *
 * @param networkFound   Ver.: always
 * @param lqi   Ver.: always
 * @param rssi   Ver.: always
 */
void emberAfJoinableNetworkFoundCallback(EmberZigbeeNetwork * networkFound,
                                         int8u lqi,
                                         int8s rssi);
/** @brief Key Establishment
 *
 * A callback by the key-establishment code to indicate an event has occurred. 
 * For error codes this is purely a notification.  For non-error status codes
 * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
 * disallow the operation.  If the application returns TRUE then the key
 * establishment is allowed to proceed.  If it returns FALSE, then key
 * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
 *
 * @param status   Ver.: always
 * @param amInitiator   Ver.: always
 * @param partnerShortId   Ver.: always
 * @param delayInSeconds   Ver.: always
 */
boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
                                        boolean amInitiator,
                                        EmberNodeId partnerShortId,
                                        int8u delayInSeconds);
/** @brief Main Init
 *
 * This function is called from the application's main function. It gives the
 * application a chance to do any initialization required at system startup. Any
 * code that you would normally put into the top of the application's main()
 * routine should be put into this function.
        Note: No callback in the
 * Application Framework is associated with resource cleanup. If you are
 * implementing your application on a Unix host where resource cleanup is a
 * consideration, we expect that you will use the standard Posix system calls,
 * including the use of atexit() and handlers for signals such as SIGTERM,
 * SIGINT, SIGCHLD, SIGPIPE and so on. If you use the signal() function to
 * register your signal handler, please mind the returned value which may be an
 * Application Framework function. If the return value is non-null, please make
 * sure that you call the returned function from your handler to avoid negating
 * the resource cleanup of the Application Framework itself.
 *
 */
void emberAfMainInitCallback(void);
/** @brief Main Start
 *
 * This function is called at the start of main after the HAL has been
 * initialized.  The standard main function arguments of argc and argv are
 * passed in.  However not all platforms have support for main() function
 * arguments.  Those that do not are passed NULL for argv, therefore argv should
 * be checked for NULL before using it.  If the callback determines that the
 * program must exit, it should return TRUE.  The value returned by main() will
 * be the value written to the returnCode pointer.  Otherwise the callback
 * should return FALSE to let normal execution continue.
 *
 * @param returnCode   Ver.: always
 * @param argc   Ver.: always
 * @param argv   Ver.: always
 */
boolean emberAfMainStartCallback(int* returnCode,
                                 int argc,
                                 char** argv);
/** @brief Main Tick
 *
 * Whenever main application tick is called, this callback will be called at the
 * end of the main tick execution.
 *
 */
void emberAfMainTickCallback(void);
/** @brief Message Sent
 *
 * This function is called by the application framework from the message sent
 * handler, when it is informed by the stack regarding the message sent status.
 * All of the values passed to the emberMessageSentHandler are passed on to this
 * callback. This provides an opportunity for the application to verify that its
 * message has been sent successfully and take the appropriate action. This
 * callback should return a boolean value of TRUE or FALSE. A value of TRUE
 * indicates that the message sent notification has been handled and should not
 * be handled by the application framework.
 *
 * @param type   Ver.: always
 * @param indexOrDestination   Ver.: always
 * @param apsFrame   Ver.: always
 * @param msgLen   Ver.: always
 * @param message   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
                                   int16u indexOrDestination,
                                   EmberApsFrame* apsFrame,
                                   int16u msgLen,
                                   int8u* message,
                                   EmberStatus status);
/** @brief Ncp Init
 *
 * This callback is used for initializing the network coprocessor either at
 * startup, or upon reset. It is should be used to perform any kind of EZSP
 * initialization and is called twice every time when NCP is reset. In the first
 * invocation, memoryAllocation will be TRUE and the application should only
 * issue EZSP commands that affect memory allocation on the NCP.  In the second
 * invocation, memoryAllocation will be FALSE and the application should only
 * issue EZSP commands that do not affect memory allocation on the NCP.  In an
 * SOC environment, this callbacks is not used.
 *
 * @param memoryAllocation   Ver.: always
 */
void emberAfNcpInitCallback(boolean memoryAllocation);
/** @brief Ncp Is Awake Isr
 *
 * This function is called IN ISR CONTEXT.  It notes that the NCP is awake after
 * sleeping.  Care should be taken to do minimal processing in this ISR handler
 * function.
 *
 */
void emberAfNcpIsAwakeIsrCallback(void);
/** @brief Network Key Update Complete
 *
 * This is called by the framework when a network key update operation started
 * by the trust center is complete.
 *
 * @param status   Ver.: always
 */
void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status);
/** @brief Ota Bootload
 *
 * The platform specific routine to bootload the device from a ZigBee
 * over-the-air upgrade file.
 *
 * @param id A pointer to the structure that contains the information about what
 * OTA image to bootload.  Ver.: always
 * @param ncpUpgradeTagId The tag ID of the upgrade data that will be used to
 * bootload the device.  Ver.: always
 */
int8u emberAfOtaBootloadCallback(const EmberAfOtaImageId* id,
                                 int16u ncpUpgradeTagId);
/** @brief Ota Client Bootload
 *
 * This callback is fired when the OTA Client recevies a command to bootload the
 * newly downloaded OTA image.  This callback will perform the platform specific
 * to bootload their device.
 *
 * @param id This is the identifier relating to the image that has been
 * downloaded and is ready for bootload.  Ver.: always
 */
void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id);
/** @brief Ota Client Custom Verify
 *
 * This callback is executed by the OTA client after the signature verification
 * has successfully completed.  It allows the device to do its own custom
 * verification of the image (such as verifying that the EBL is intact).
 *
 * @param newVerification This indicates if a new verification should be
 * started.  Ver.: always
 * @param id This is ID of the image to be verified.  Ver.: always
 */
EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(boolean newVerification,
                                                              const EmberAfOtaImageId* id);
/** @brief Ota Client Download Complete
 *
 * This callback indicates that the OTA client has completed the download of a
 * file.  If the file has been completely downloaded and cryptographic checks
 * have been turned on, then those will be performed prior to this callback and
 * that outcome included in the 'success' result.  On failure, this callback is
 * merely informative, and the return type is ignored.  On succesful download,
 * this callback allows the client to perform any additional verification of the
 * downloaded image and return that result to the OTA server.
 *
 * @param success This indicates the success or failure of the download and
 * cryptographic verification process (if applicable).  Ver.: always
 * @param id This is the image identifier information that corresponds to the
 * download result.  Ver.: always
 */
boolean emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult success,
                                                 const EmberAfOtaImageId* id);
/** @brief Ota Client Incoming Message Raw
 *
 * This callback is for processing incoming messages for the Over-the-air
 * bootload cluster client.  ZCL will not process the message and instead hand
 * the raw over the air data to the callback for its own processing.
 *
 * @param message A pointer to the structure containing the message buffer and
 * other information about it.  Ver.: always
 */
boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand * message);
/** @brief Ota Client Start
 *
 * This callback should be called when the profile specific registration has
 * completed successfully.  It will start the client's state machine that will
 * find the OTA server, query it for the next image, download the image, wait
 * for the bootload message, and kick off the bootload.
 *
 */
void emberAfOtaClientStartCallback(void);
/** @brief Ota Client Version Info
 *
 * This function is called by the OTA client when a new query will occur to the
 * server asking what the next version of firmware is.  The client can inform
 * the cluster software as to what information to use in the query (and
 * subsequent download).
 *
 * @param currentImageInfo This is the information to use in the next query by
 * the client cluster code.  It contains the manufacturer ID, image type ID, and
 * the firmware version to be specified in the query message sent to the server.
 *  Ver.: always
 * @param hardwareVersion This is a pointer to the hardware version to use in
 * the query.  If no hardware version should be used, then
 * EMBER_AF_INVALID_HARDWARE_VERSION should be used.  Ver.: always
 */
void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
                                         int16u* hardwareVersion);
/** @brief Ota Page Request Server Policy
 *
 * This callback is called by the OTA server page request code when it wants to
 * determine if it is allowed for an OTA client to make a page request.  It is
 * only called if page request support has been enabled on the server.  It
 * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
 * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
 *
 */
int8u emberAfOtaPageRequestServerPolicyCallback(void);
/** @brief Ota Server Block Size
 *
 * This function provides a way for the server to adjust the block size of its
 * response to an Image block request by a client.
 *
 * @param clientNodeId The node Id of OTA client making an image block request. 
 * Ver.: always
 */
int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId);
/** @brief Ota Server Image Block Request
 *
 * This function is called when the server application receives an image block
 * request by a client.
 *
 * @param data A struct containing the details of the image block response and
 * values that can be returned by the application to effect the behavior of the
 * server's response.  Ver.: always
 */
int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data);
/** @brief Ota Server Incoming Message Raw
 *
 * This callback is for processing incoming messages for the Over-the-air
 * bootload cluster server.  ZCL will not process the message and instead hand
 * the raw over the air data to the callback for its own processing.
 *
 * @param message A pointer to the structure containing the message buffer and
 * other information about it.  Ver.: always
 */
boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand * message);
/** @brief Ota Server Query
 *
 * This callback is fired when the OTA server receives a query request by the
 * client.  The callback lets the server application indicate to the client what
 * the 'next' version of software is for the device, or if there is not one
 * available.
 *
 * @param currentImageId This is the current software image that the client
 * hase.  Ver.: always
 * @param hardwareVersion If this value is non-NULL, it indicates the hardware
 * version of the client device.  If NULL, the client did not specify a hardware
 * version.  Ver.: always
 * @param nextUpgradeImageId This is a pointer to a data structure containing
 * the 'next' software version for the client to download.  Ver.: always
 */
int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
                                    int16u* hardwareVersion,
                                    EmberAfOtaImageId* nextUpgradeImageId);
/** @brief Ota Server Send Image Notify
 *
 * This callback is an indication to the OTA server that it should send out
 * notification about an OTA file that is available for download.
 *
 * @param dest The destination of the image notify message.  May be a broadcast
 * address.  Ver.: always
 * @param endpoint The destination endpoint of the image notify message.  May be
 * a broadcast endpoint.  Ver.: always
 * @param payloadType The type of data the image notify message will contain.  0
 * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID. 
 * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
 * @param queryJitter The percentage of nodes that should respond to this
 * message, from 1-100.  On receipt of this message, each recipient will
 * randomly choose a percentage and only query the server if their percentage is
 * below this value.  Ver.: always
 * @param id The image information that will be put in the message.  The data
 * within this struct that will be appended to the message is determined by the
 * previous 'payloadType' argument.  Ver.: always
 */
boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
                                                int8u endpoint,
                                                int8u payloadType,
                                                int8u queryJitter,
                                                const EmberAfOtaImageId* id);
/** @brief Ota Server Upgrade End Request
 *
 * This function is called when the OTA server receives a request an upgrade end
 * request.  If the request indicated a successful download by the client, the
 * server must tell the client when and if to upgrade to the downloaded image.
 *
 * @param source The node ID of the device that sent the upgrade end request. 
 * Ver.: always
 * @param status This is the ZCL status sent by the client indicating the result
 * of its attempt to download the new upgrade image.  If the status is not
 * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
 * response mesasge will be generated by the server.  Ver.: always
 * @param returnValue If the server returns TRUE indicating that the client
 * should apply the upgrade, this time value indicates when in the future the
 * client should apply the upgrade.  Ver.: always
 * @param imageId This variable indicates the software version that the client
 * successfully downloaded and is asking to upgrade to.  Ver.: always
 */
boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
                                                  int8u status,
                                                  int32u* returnValue,
                                                  const EmberAfOtaImageId* imageId);
/** @brief Ota Storage Check Temp Data
 *
 * This callback will validate temporary data in the storage device to determine
 * whether it is a complete file, a partially downloaded file, or there is no
 * file present.  When a complete or partial file is found it will return
 * EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND,
 * respectively.  In that case, the currentOffset, totalImageSize, and
 * newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is
 * returned, no temporary data is present.
 *
 * @param currentOffset A pointer to a value that will be written with the
 * offset within the total file size that has been successfully stored in the
 * storage device.  This will indicate how much data has been currently
 * dowloaded.  Ver.: always
 * @param totalImageSize A pointer to a value that will be written with the
 * total image size of the OTA file when a download has completed.  This does
 * not indicate how much data has actually been downloaded currently.  Ver.:
 * always
 * @param newFileInfo This is the image id of the temporary file data stored in
 * the storage device.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageCheckTempDataCallback(int32u* currentOffset,
                                                               int32u* totalImageSize,
                                                               EmberAfOtaImageId* newFileInfo);
/** @brief Ota Storage Clear Temp Data
 *
 * This function clears any existing temp data that was downloaed.  It is used
 * immediately prior to downloading a raw image over the air.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageClearTempDataCallback(void);
/** @brief Ota Storage Close
 *
 * This callback shuts down the ZigBee Over-the-air storage module.
 *
 */
void emberAfOtaStorageCloseCallback(void);
/** @brief Ota Storage Driver Download Finish
 *
 * This callback defines the low-level means by which a device records the final
 * offset value of the download image.
 *
 * @param offset The value of the final offset of the image download.  Ver.:
 * always
 */
void emberAfOtaStorageDriverDownloadFinishCallback(int32u offset);
/** @brief Ota Storage Driver Init
 *
 * The initialization code for the OTA storage driver.
 *
 */
boolean emberAfOtaStorageDriverInitCallback(void);
/** @brief Ota Storage Driver Invalidate Image
 *
 * This callback invalidates the image stored on disk so that it will not be
 * bootloaded, and it will not be a valid image that is in the middle of
 * downloading.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageDriverInvalidateImageCallback(void);
/** @brief Ota Storage Driver Prepare To Resume Download
 *
 * This callback allows the underlying storage driver to prepare to resume the
 * OTA file download.  For example, the driver may exceute a page erase to
 * insure the next page is ready to be written to.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageDriverPrepareToResumeDownloadCallback(void);
/** @brief Ota Storage Driver Read
 *
 * This callback defines the low-level means by which a device reads from the
 * OTA storage device.
 *
 * @param offset The address offset from the start of the storage device where
 * data is to be read.  Ver.: always
 * @param length The length of the data to be read from the storage device. 
 * Ver.: always
 * @param returnData A pointer where the data read from the device should be
 * written to.  Ver.: always
 */
boolean emberAfOtaStorageDriverReadCallback(int32u offset,
                                            int32u length,
                                            int8u* returnData);
/** @brief Ota Storage Driver Retrieve Last Stored Offset
 *
 * This callback defines the low-level means by which a device retrieves the
 * last persistently recorded download offset.  This may be different than last
 * actual download offset.
 *
 */
int32u emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback(void);
/** @brief Ota Storage Driver Write
 *
 * This callback defines the low-level means by which a device reads from the
 * OTA storage device.
 *
 * @param dataToWrite A pointer to the data that will be written to the storage
 * device.  Ver.: always
 * @param offset The address offset from the start of the storage device where
 * data will be written.  Ver.: always
 * @param length The length of the data to be written to the storage device. 
 * Ver.: always
 */
boolean emberAfOtaStorageDriverWriteCallback(const int8u* dataToWrite,
                                             int32u offset,
                                             int32u length);
/** @brief Ota Storage Finish Download
 *
 * This function indicates to the storage module that the download has finished.
 *
 * @param offset The final offset of the downloaded file (i.e. the total size) 
 * Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageFinishDownloadCallback(int32u offset);
/** @brief Ota Storage Get Count
 *
 * This callback returns the total number of ZigBee Over-the-air upgrade images
 * stored in the storage module.
 *
 */
int8u emberAfOtaStorageGetCountCallback(void);
/** @brief Ota Storage Get Full Header
 *
 * This callback populates the EmberAfOtaHeader structure pointed to by the
 * returnData with data about the OTA file stored in the storage module.
 *
 * @param id This is a pointer to the image id for the OTA file to retrieve
 * information about.  Ver.: always
 * @param returnData This is a pointer to the location of the structure that
 * will be populated with data.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageGetFullHeaderCallback(const EmberAfOtaImageId* id,
                                                               EmberAfOtaHeader* returnData);
/** @brief Ota Storage Get Total Image Size
 *
 * This function returns the total size of the ZigBee Over-the-air file with the
 * passed parameters.  If no file is found with those parameters, 0 is returned.
 *
 * @param id A pointer to the image identifier for the OTA file to retrieve
 * information for.  Ver.: always
 */
int32u emberAfOtaStorageGetTotalImageSizeCallback(const EmberAfOtaImageId* id);
/** @brief Ota Storage Init
 *
 * This callback initializes the ZigBee Over-the-air storage module.
 *
 */
EmberAfOtaStorageStatus emberAfOtaStorageInitCallback(void);
/** @brief Ota Storage Iterator First
 *
 * This callback lets you walk through the list of all OTA files by jumping to
 * the first file in the list maintained by the storage module.  If there is no
 * file then emberAfOtaInvalidImageId is returned.
 *
 */
EmberAfOtaImageId emberAfOtaStorageIteratorFirstCallback(void);
/** @brief Ota Storage Iterator Next
 *
 * This callback lets you walk through the list of all OTA files by jumping to
 * the next file in the list maintained by the storage module.  If there is no
 * next file then emberAfOtaInvalidImageId is returned.
 *
 */
EmberAfOtaImageId emberAfOtaStorageIteratorNextCallback(void);
/** @brief Ota Storage Read Image Data
 *
 * This callback reads data from the specified OTA file and returns that data to
 * the caller.
 *
 * @param id This is a pointer to the image id for the OTA file to retrieve data
 * from.  Ver.: always
 * @param offset This is the offset relative to the start of the image where the
 * data should be read from.  Ver.: always
 * @param length This is the length of data that will be read.  Ver.: always
 * @param returnData This is a pointer to where the data read out of the file
 * will be written to  Ver.: always
 * @param returnedLength This is a pointer to a variable where the actual length
 * of data read will be written to.  A short read may occur if the end of file
 * was reached.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageReadImageDataCallback(const EmberAfOtaImageId* id,
                                                               int32u offset,
                                                               int32u length,
                                                               int8u* returnData,
                                                               int32u* returnedLength);
/** @brief Ota Storage Search
 *
 * This callback searches through the list of all images for one that matches
 * the passed parameters.  On success an image identifier is returned with a
 * matching image.  On failure emberAfInvalidImageId is returned.
 *
 * @param manufacturerId The ZigBee assigned identifier of the manufacturer
 * contained in the OTA image being searched for.  Ver.: always
 * @param imageTypeId The image type identifier contained in the OTA image being
 * searched for.  Ver.: always
 * @param hardwareVersion This is a pointer to the hardware version that will be
 * used in the search.  If the pointer is NULL, hardware version will not be
 * considered when searching for matching images.  If it points to a value, the
 * search will only consider images where that value falls between the minimum
 * and maxmimum hardware version specified in the OTA file.  If no hardware
 * version is present in an OTA file but the other parameters match, the file
 * will be considered a match  Ver.: always
 */
EmberAfOtaImageId emberAfOtaStorageSearchCallback(int16u manufacturerId,
                                                  int16u imageTypeId,
                                                  const int16u* hardwareVersion);
/** @brief Ota Storage Write Temp Data
 *
 * This function writes to the temporary data in the storage device at the
 * specified offset.  It is used when downloading a raw image over the air.
 *
 * @param offset The location within the download image file where to write the
 * data.  Ver.: always
 * @param length The length of data to write.  Ver.: always
 * @param data A pointer to the temporary data that will be written to the
 * storage device.  Ver.: always
 */
EmberAfOtaStorageStatus emberAfOtaStorageWriteTempDataCallback(int32u offset,
                                                               int32u length,
                                                               const int8u* data);
/** @brief Partner Link Key Exchange Request
 *
 * This function is called by the framework on SOC platforms when a remote node
 * requests a partner link key exchange.  The application should return
 * EMBER_SUCCESS to accept the request or any other status to reject it.  On
 * network coprocessor platforms, this function will not be called because the
 * NCP handles partner link key exchange requests based on the binding policy.
 *
 * @param partner The EUI of the remote node.  Ver.: always
 */
EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner);
/** @brief Partner Link Key Exchange Response
 *
 * This function is called by the framework when a remote node requests a
 * partner link key exchange.  The application should return TRUE to accept the
 * request or FALSE to reject it.  On network coprocessor platforms, this
 * function will not be called because the NCP handles partner link key exchange
 * requests based on the binding policy.
 *
 * @param sender The EUI of the remote node.  Ver.: always
 * @param status The ZDO response status.  Ver.: always
 */
void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
                                                   EmberZdoStatus status);
/** @brief Performing Key Establishment
 *
 * This function is called by the framework to determine if the device is
 * performing key establishment.  The application should return TRUE if key
 * establishment is in progress.
 *
 */
boolean emberAfPerformingKeyEstablishmentCallback(void);
/** @brief Post Attribute Change
 *
 * This function is called by the application framework after it changes an
 * attribute value. The value passed into this callback is the value to which
 * the attribute was set by the framework.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param type   Ver.: always
 * @param size   Ver.: always
 * @param value   Ver.: always
 */
void emberAfPostAttributeChangeCallback(int8u endpoint,
                                        EmberAfClusterId clusterId,
                                        EmberAfAttributeId attributeId,
                                        int8u mask,
                                        int16u manufacturerCode,
                                        int8u type,
                                        int8u size,
                                        int8u* value);
/** @brief Post Wake Up
 *
 * @deprecated This callback has been deprecated and will be removed in a future
 * release.  Customers should use the new ::emberAfPluginIdleSleepWakeUpCallback
 * instead.
 *
 * @param sleepDuration   Ver.: always
 */
void emberAfPostWakeUpCallback(int32u sleepDuration);
/** @brief Pre Attribute Change
 *
 * This function is called by the application framework before it changes an
 * attribute value. The value passed into this callback is the value to which
 * the attribute is to be set by the framework.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param type   Ver.: always
 * @param size   Ver.: always
 * @param value   Ver.: always
 */
void emberAfPreAttributeChangeCallback(int8u endpoint,
                                       EmberAfClusterId clusterId,
                                       EmberAfAttributeId attributeId,
                                       int8u mask,
                                       int16u manufacturerCode,
                                       int8u type,
                                       int8u size,
                                       int8u* value);
/** @brief Pre Command Received
 *
 * This callback is the second in the Application Framework's message processing
 * chain. At this point in the processing of incoming over-the-air messages, the
 * application has determined that the incoming message is a ZCL command. It
 * parses enough of the message to populate an EmberAfClusterCommand struct. The
 * Application Framework defines this struct value in a local scope to the
 * command processing but also makes it available through a global pointer
 * called emberAfCurrentCommand, in app/framework/util/util.c. When command
 * processing is complete, this pointer is cleared.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd);
/** @brief Pre Go To Sleep
 *
 * @deprecated This callback has been deprecated and will be removed in a future
 * release.  Customers should use the new
 * ::emberAfPluginIdleSleepOkToSleepCallback instead.  The application will only
 * deep sleep if this callback returns FALSE.
 *
 * @param sleepDurationAttempt   Ver.: always
 */
boolean emberAfPreGoToSleepCallback(int32u sleepDurationAttempt);
/** @brief Pre Message Received
 *
 * This callback is the first in the Application Framework's message processing
 * chain. The Application Framework calls it when a message has been received
 * over the air but has not yet been parsed by the ZCL command-handling code. If
 * you wish to parse some messages that are completely outside the ZCL
 * specification or are not handled by the Application Framework's command
 * handling code, you should intercept them for parsing in this callback. 
     
 *   This callback returns a Boolean value indicating whether or not the message
 * has been handled. If the callback returns a value of TRUE, then the
 * Application Framework assumes that the message has been handled and it does
 * nothing else with it. If the callback returns a value of FALSE, then the
 * application framework continues to process the message as it would with any
 * incoming message.
        Note: 	This callback receives a pointer to an
 * incoming message struct. This struct allows the application framework to
 * provide a unified interface between both Host devices, which receive their
 * message through the ezspIncomingMessageHandler, and SoC devices, which
 * receive their message through emberIncomingMessageHandler.
 *
 * @param incomingMessage   Ver.: always
 */
boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage);
/** @brief Pre Ncp Reset
 *
 * This function will be called prior to the reset of the NCP by the host.
 *
 */
void emberAfPreNcpResetCallback(void);
/** @brief Pre ZDO Message Received
 *
 * This function passes the application an incoming ZDO message and gives the
 * appictation the opportunity to handle it. By default, this callback returns
 * FALSE indicating that the incoming ZDO message has not been handled and
 * should be handled by the Application Framework.
 *
 * @param emberNodeId   Ver.: always
 * @param apsFrame   Ver.: always
 * @param message   Ver.: always
 * @param length   Ver.: always
 */
boolean emberAfPreZDOMessageReceivedCallback(EmberNodeId emberNodeId,
                                             EmberApsFrame* apsFrame,
                                             int8u* message,
                                             int16u length);
/** @brief Read Attributes Response
 *
 * This function is called by the application framework when a Read Attributes
 * Response command is received from an external device.  The application should
 * return TRUE if the message was processed or FALSE if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of read attribute status records. 
 * Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
                                              int8u * buffer,
                                              int16u bufLen);
/** @brief Read Reporting Configuration Command
 *
 * This function is called by the application framework when a Read Reporting
 * Configuration command is received from an external device.  The application
 * should return TRUE if the message was processed or FALSE if it was not.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfReadReportingConfigurationCommandCallback(const EmberAfClusterCommand * cmd);
/** @brief Read Reporting Configuration Response
 *
 * This function is called by the application framework when a Read Reporting
 * Configuration Response command is received from an external device.  The
 * application should return TRUE if the message was processed or FALSE if it
 * was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of attribute reporting configuration
 * records.  Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
                                                          int8u * buffer,
                                                          int16u bufLen);
/** @brief Registration Abort
 *
 * This callback is called when the device should abort the registration
 * process.
 *
 */
void emberAfRegistrationAbortCallback(void);
/** @brief Registration
 *
 * This callback is called when the device joins a network and the process of
 * registration is complete. This callback provides a success value of TRUE if
 * the registration process was successful and a value of FALSE if registration
 * failed.
 *
 * @param success TRUE if registration succeeded, FALSE otherwise.  Ver.: always
 */
void emberAfRegistrationCallback(boolean success);
/** @brief Registration Start
 *
 * This callback is called when the device joins a network and the registration
 * process should begin.  The application should return EMBER_SUCCESS if the
 * registration process started successfully.  When registration is complete,
 * the application should call emberAfRegistrationCallback with an indication of
 * success or failure.
 *
 */
EmberStatus emberAfRegistrationStartCallback(void);
/** @brief Remote Delete Binding Permission
 *
 * This function is called by the framework to request permission to service the
 * remote delete binding request. Return EMBER_SUCCESS to allow request,
 * anything else to disallow request.
 *
 * @param index index to an Ember binding table entry  Ver.: always
 */
EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index);
/** @brief Remote Set Binding Permission
 *
 * This function is called by the framework to request permission to service the
 * remote set binding request. Return EMBER_SUCCESS to allow request, anything
 * else to disallow request.
 *
 * @param entry Ember Binding Tablet Entry  Ver.: always
 */
EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry * entry);
/** @brief Remove From Current App Tasks
 *
 * This function is only useful to sleepy end devices.  This function will
 * remove the passed item from the set of tasks the application has outstanding
 * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
 * application behaves with regard to sleeping and polling.  Removing the item
 * from the list of outstanding tasks may allow the device to sleep longer and
 * poll less frequently.  If there are other outstanding tasks the system may
 * still have to stay away and poll more often.
 *
 * @param tasks   Ver.: always
 */
void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks);
/** @brief Report Attributes
 *
 * This function is called by the application framework when a Report Attributes
 * command is received from an external device.  The application should return
 * TRUE if the message was processed or FALSE if it was not.
 *
 * @param clusterId The cluster identifier of this command.  Ver.: always
 * @param buffer Buffer containing the list of attribute report records.  Ver.:
 * always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfReportAttributesCallback(EmberAfClusterId clusterId,
                                        int8u * buffer,
                                        int16u bufLen);
/** @brief Reporting Attribute Change
 *
 * This function is called by the framework when an attribute managed by the
 * framework changes.  The application should call this function when an
 * externally-managed attribute changes.  The application should use the change
 * notification to inform its reporting decisions.
 *
 * @param endpoint   Ver.: always
 * @param clusterId   Ver.: always
 * @param attributeId   Ver.: always
 * @param mask   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param type   Ver.: always
 * @param data   Ver.: always
 */
void emberAfReportingAttributeChangeCallback(int8u endpoint,
                                             EmberAfClusterId clusterId,
                                             EmberAfAttributeId attributeId,
                                             int8u mask,
                                             int16u manufacturerCode,
                                             EmberAfAttributeType type,
                                             int8u * data);
/** @brief Scan Error
 *
 * This is called by the framework on behalf of the form-and-join library to
 * notify the application if an error occurs while scanning.  See form-and-join
 * documentation for more information.
 *
 * @param status The status of the scan.  Ver.: always
 */
void emberAfScanErrorCallback(EmberStatus status);
/** @brief Schedule Poll Event
 *
 * This is called by the framework when it wants to schedule a poll event if the
 * device is a ZigBee End Device (sleepy or non-sleepy).
 *
 */
void emberAfSchedulePollEventCallback(void);
/** @brief Security Init
 *
 * This callback is called by the framework to give the application a chance to
 * modify the security settings of the node during network initialization. 
 * Depending on the context when this callback is called, the pointer to the
 * initial security state may be NULL, which means the initial security state
 * can no longer be modified as the node is already operating on the network.
 *
 * @param state   Ver.: always
 * @param extended   Ver.: always
 * @param trustCenter   Ver.: always
 */
void emberAfSecurityInitCallback(EmberInitialSecurityState * state,
                                 EmberExtendedSecurityBitmask * extended,
                                 boolean trustCenter);
/** @brief Set Default Poll Control
 *
 * This function will set the default poll control for the current network to
 * control whether or not it can long poll.
 *
 * @param control   Ver.: always
 */
void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control);
/** @brief Set Default Sleep Control
 *
 * This function will set the default behavior of a sleeping device to control
 * whether or not it must stay awake.  A device that stays awake does not sleep
 * at all.  Otherwise, the device can sleep between events when appropriate.
 *
 * @param control   Ver.: always
 */
void emberAfSetDefaultSleepControlCallback(EmberAfEventSleepControl control);
/** @brief Set Form And Join Extended Pan Id
 *
 * This callback is called by the framework to set the extended PAN ID used by
 * the current network for forming and joining.  The extended PAN ID used for
 * forming and joining is not necessarily the same extended PAN ID actually in
 * use on the network.
 *
 * @param extendedPanId   Ver.: always
 */
void emberAfSetFormAndJoinExtendedPanIdCallback(const int8u * extendedPanId);
/** @brief Set Long Poll Interval Ms
 *
 * This function is only useful to end devices.  This function will set the long
 * poll interval (in milliseconds) for the current network.  This interval is
 * the maximum amount of time a child will wait between polls of its parent when
 * it is not expecting data.
 *
 * @param longPollIntervalMs   Ver.: always
 */
void emberAfSetLongPollIntervalMsCallback(int32u longPollIntervalMs);
/** @brief Set Long Poll Interval Qs
 *
 * This function is only useful to end devices.  This function will set the long
 * poll interval (in quarter seconds) for the current network.  This interval is
 * the maximum amount of time a child will wait between polls of its parent when
 * it is not expecting data.
 *
 * @param longPollIntervalQs   Ver.: always
 */
void emberAfSetLongPollIntervalQsCallback(int32u longPollIntervalQs);
/** @brief Set Short Poll Interval Ms
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the short poll interval (in milliseconds) for the current network.  This
 * interval is the maximum amount of time a child will wait between polls of its
 * parent when it is expecting data.
 *
 * @param shortPollIntervalMs   Ver.: always
 */
void emberAfSetShortPollIntervalMsCallback(int16u shortPollIntervalMs);
/** @brief Set Short Poll Interval Qs
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the short poll interval (in quarter seconds) for the current network.  This
 * interval is the maximum amount of time a child will wait between polls of its
 * parent when it is expecting data.
 *
 * @param shortPollIntervalQs   Ver.: always
 */
void emberAfSetShortPollIntervalQsCallback(int16u shortPollIntervalQs);
/** @brief Set Source Route Overhead
 *
 * This function is called by the framework when it has information about the
 * source route overhead to a particular destination. The application may use
 * this information to cache the source route overhead.
 *
 * @param destination The node id of the destination  Ver.: always
 * @param overhead The overhead in bytes  Ver.: always
 */
void emberAfSetSourceRouteOverheadCallback(EmberNodeId destination,
                                           int8u overhead);
/** @brief Set Time
 *
 * This callback should be implemented, if the device has access to real time
 * clock, and has an ability to update that clock. The application framework
 * expects to be passed the utcTime which is the number of seconds since the
 * year 2000. Default implementation does nothing. Note: This function used to
 * take time in year, month, day, hour, min, sec. We have changed this to
 * utcTime in order to conserve code space.
 *
 * @param utcTime   Ver.: always
 */
void emberAfSetTimeCallback(int32u utcTime);
/** @brief Set Wake Timeout Bitmask
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the wake timeout bitmask for the current network.  The bitmask determines
 * which tasks will timeout automatically and which tasks require manual removal
 * from the task list.
 *
 * @param tasks   Ver.: always
 */
void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks);
/** @brief Set Wake Timeout Ms
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the wake timeout (in milliseconds) for the current network.  This timeout is
 * the maximum amount of time a child will wait for a task in the wake bitmask
 * to finish.  While waiting, the device will short poll.
 *
 * @param wakeTimeoutMs   Ver.: always
 */
void emberAfSetWakeTimeoutMsCallback(int16u wakeTimeoutMs);
/** @brief Set Wake Timeout Qs
 *
 * This function is only useful to sleepy end devices.  This function will set
 * the wake timeout (in quarter seconds) for the current network.  This timeout
 * is the maximum amount of time a child will wait for a task in the wake
 * bitmask to finish.  While waiting, the device will short poll.
 *
 * @param wakeTimeoutQs   Ver.: always
 */
void emberAfSetWakeTimeoutQsCallback(int16u wakeTimeoutQs);
/** @brief Stack Status
 *
 * This function is called by the application framework from the stack status
 * handler.  This callbacks provides applications an opportunity to be notified
 * of changes to the stack status and take appropriate action.  The return code
 * from this callback is ignored by the framework.  The framework will always
 * process the stack status after the callback returns.
 *
 * @param status   Ver.: always
 */
boolean emberAfStackStatusCallback(EmberStatus status);
/** @brief Start Move
 *
 * This function is called to initiate the process for a device to move (rejoin)
 * to a new parent.
 *
 */
boolean emberAfStartMoveCallback(void);
/** @brief Start Search For Joinable Network
 *
 * This function is called by the framework to search for joinable networks and
 * join a network.  The application should return EMBER_SUCCESS if the operation
 * was initiated successfully.
 *
 */
EmberStatus emberAfStartSearchForJoinableNetworkCallback(void);
/** @brief Stop Move
 *
 * This function is called to cancel a previously scheduled move (rejoin) to a
 * new parent.
 *
 */
void emberAfStopMoveCallback(void);
/** @brief Trust Center Join
 *
 * This callback is called from within the application framework's
 * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
 * This callback provides the same arguments passed to the
 * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
 * please see documentation included in stack/include/trust-center.h.
 *
 * @param newNodeId   Ver.: always
 * @param newNodeEui64   Ver.: always
 * @param parentOfNewNode   Ver.: always
 * @param status   Ver.: always
 * @param decision   Ver.: always
 */
void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
                                    EmberEUI64 newNodeEui64,
                                    EmberNodeId parentOfNewNode,
                                    EmberDeviceUpdate status,
                                    EmberJoinDecision decision);
/** @brief Trust Center Keepalive Abort
 *
 * This callback is called when the device should abort the trust center
 * keepalive process.
 *
 */
void emberAfTrustCenterKeepaliveAbortCallback(void);
/** @brief Trust Center Keepalive Update
 *
 * This callback is called when the device finishes registration (successfully
 * or otherwise) and the trust center keepalive process must be updated.  If the
 * keepalive process has not been started, then it is started.  Otherwise if the
 * keepalive is in the process of searching for the TC, it will process the
 * result of that Trust Center search operation.
 *
 * @param registrationComplete   Ver.: always
 */
void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete);
/** @brief Unused Pan Id Found
 *
 * This is called by the framework on behalf of the form-and-join library to
 * notify the application of the PAN id and channel found following a call to
 * ::emberScanForUnusedPanId().  See form-and-join documentation for more
 * information.
 *
 * @param panId   Ver.: always
 * @param channel   Ver.: always
 */
void emberAfUnusedPanIdFoundCallback(EmberPanId panId,
                                     int8u channel);
/** @brief Write Attributes Response
 *
 * This function is called by the application framework when a Write Attributes
 * Response command is received from an external device.  The application should
 * return TRUE if the message was processed or FALSE if it was not.
 *
 * @param clusterId The cluster identifier of this response.  Ver.: always
 * @param buffer Buffer containing the list of write attribute status records. 
 * Ver.: always
 * @param bufLen The length in bytes of the list.  Ver.: always
 */
boolean emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
                                               int8u * buffer,
                                               int16u bufLen);
/** @} END Non-Cluster Related Callbacks */

/** @name Basic Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Basic cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBasicClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Basic cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBasicClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * Basic cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBasicClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Basic cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBasicClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Basic cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBasicClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Basic cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBasicClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Client Tick
 *
 * Basic cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBasicClusterClientTickCallback(int8u endpoint);
/** @brief Reset To Factory Defaults
 *
 * 
 *
 */
boolean emberAfBasicClusterResetToFactoryDefaultsCallback(void);
/** @brief Server Attribute Changed
 *
 * Basic cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBasicClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Basic cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBasicClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * Basic cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBasicClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Basic cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBasicClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Basic cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBasicClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Basic cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBasicClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Server Tick
 *
 * Basic cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBasicClusterServerTickCallback(int8u endpoint);

/** @} END Basic Cluster Callbacks */

/** @name Power Configuration Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Power Configuration cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Power Configuration cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Power Configuration cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerConfigClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Power Configuration cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Power Configuration cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Power Configuration cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Power Configuration cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerConfigClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Power Configuration cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Power Configuration cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Power Configuration cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerConfigClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Power Configuration cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Power Configuration cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Power Configuration cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * Power Configuration cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerConfigClusterServerTickCallback(int8u endpoint);

/** @} END Power Configuration Cluster Callbacks */

/** @name Device Temperature Configuration Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Device Temperature Configuration cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceTempClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Device Temperature Configuration cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceTempClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Client Init
 *
 * Device Temperature Configuration cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceTempClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Device Temperature Configuration cluster, Client Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceTempClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Device Temperature Configuration cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceTempClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Device Temperature Configuration cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceTempClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Client Tick
 *
 * Device Temperature Configuration cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceTempClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Device Temperature Configuration cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceTempClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Device Temperature Configuration cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceTempClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Server Init
 *
 * Device Temperature Configuration cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceTempClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Device Temperature Configuration cluster, Server Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceTempClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Device Temperature Configuration cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceTempClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Device Temperature Configuration cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceTempClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Server Tick
 *
 * Device Temperature Configuration cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceTempClusterServerTickCallback(int8u endpoint);

/** @} END Device Temperature Configuration Cluster Callbacks */

/** @name Identify Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Identify cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIdentifyClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Identify cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIdentifyClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Client Init
 *
 * Identify cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIdentifyClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Identify cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIdentifyClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Identify cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIdentifyClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame * apsFrame,
                                                     int16u msgLen,
                                                     int8u * message,
                                                     EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Identify cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIdentifyClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u * value);
/** @brief Client Tick
 *
 * Identify cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIdentifyClusterClientTickCallback(int8u endpoint);
/** @brief E Z Mode Invoke
 *
 * 
 *
 * @param action   Ver.: always
 */
boolean emberAfIdentifyClusterEZModeInvokeCallback(int8u action);
/** @brief Identify
 *
 * 
 *
 * @param identifyTime   Ver.: always
 */
boolean emberAfIdentifyClusterIdentifyCallback(int16u identifyTime);
/** @brief Identify Query
 *
 * 
 *
 */
boolean emberAfIdentifyClusterIdentifyQueryCallback(void);
/** @brief Identify Query Response
 *
 * 
 *
 * @param timeout   Ver.: always
 */
boolean emberAfIdentifyClusterIdentifyQueryResponseCallback(int16u timeout);
/** @brief Server Attribute Changed
 *
 * Identify cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIdentifyClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Identify cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIdentifyClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Server Init
 *
 * Identify cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIdentifyClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Identify cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIdentifyClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Identify cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIdentifyClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame * apsFrame,
                                                     int16u msgLen,
                                                     int8u * message,
                                                     EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Identify cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIdentifyClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u * value);
/** @brief Server Tick
 *
 * Identify cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIdentifyClusterServerTickCallback(int8u endpoint);
/** @brief Trigger Effect
 *
 * 
 *
 * @param effectId   Ver.: always
 * @param effectVariant   Ver.: always
 */
boolean emberAfIdentifyClusterTriggerEffectCallback(int8u effectId,
                                                    int8u effectVariant);
/** @brief Update Commission State
 *
 * 
 *
 * @param action   Ver.: always
 * @param commissionStateMask   Ver.: always
 */
boolean emberAfIdentifyClusterUpdateCommissionStateCallback(int8u action,
                                                            int8u commissionStateMask);

/** @} END Identify Cluster Callbacks */

/** @name Groups Cluster Callbacks */
// @{

/** @brief Clear Group Table
 *
 * This function is called by the framework when the application should clear
 * the group table.
 *
 * @param endpoint The endpoint.  Ver.: always
 */
void emberAfGroupsClusterClearGroupTableCallback(int8u endpoint);
/** @brief Endpoint In Group
 *
 * This function is called by the framework when it needs to determine if an
 * endpoint is a member of a group.  The application should return TRUE if the
 * endpoint is a member of the group and FALSE otherwise.
 *
 * @param endpoint The endpoint.  Ver.: always
 * @param groupId The group identifier.  Ver.: always
 */
boolean emberAfGroupsClusterEndpointInGroupCallback(int8u endpoint,
                                                    int16u groupId);
/** @brief Add Group
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param groupName   Ver.: always
 */
boolean emberAfGroupsClusterAddGroupCallback(int16u groupId,
                                             int8u* groupName);
/** @brief Add Group If Identifying
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param groupName   Ver.: always
 */
boolean emberAfGroupsClusterAddGroupIfIdentifyingCallback(int16u groupId,
                                                          int8u* groupName);
/** @brief Add Group Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterAddGroupResponseCallback(int8u status,
                                                     int16u groupId);
/** @brief Client Attribute Changed
 *
 * Groups cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGroupsClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Groups cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGroupsClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Client Init
 *
 * Groups cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGroupsClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Groups cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGroupsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Groups cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGroupsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Groups cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGroupsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Client Tick
 *
 * Groups cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGroupsClusterClientTickCallback(int8u endpoint);
/** @brief Get Group Membership
 *
 * 
 *
 * @param groupCount   Ver.: always
 * @param groupList   Ver.: always
 */
boolean emberAfGroupsClusterGetGroupMembershipCallback(int8u groupCount,
                                                       int8u* groupList);
/** @brief Get Group Membership Response
 *
 * 
 *
 * @param capacity   Ver.: always
 * @param groupCount   Ver.: always
 * @param groupList   Ver.: always
 */
boolean emberAfGroupsClusterGetGroupMembershipResponseCallback(int8u capacity,
                                                               int8u groupCount,
                                                               int8u* groupList);
/** @brief Remove All Groups
 *
 * 
 *
 */
boolean emberAfGroupsClusterRemoveAllGroupsCallback(void);
/** @brief Remove Group
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterRemoveGroupCallback(int16u groupId);
/** @brief Remove Group Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterRemoveGroupResponseCallback(int8u status,
                                                        int16u groupId);
/** @brief Server Attribute Changed
 *
 * Groups cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGroupsClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Groups cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGroupsClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Server Init
 *
 * Groups cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGroupsClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Groups cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGroupsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Groups cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGroupsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Groups cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGroupsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Server Tick
 *
 * Groups cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGroupsClusterServerTickCallback(int8u endpoint);
/** @brief View Group
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfGroupsClusterViewGroupCallback(int16u groupId);
/** @brief View Group Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param groupName   Ver.: always
 */
boolean emberAfGroupsClusterViewGroupResponseCallback(int8u status,
                                                      int16u groupId,
                                                      int8u* groupName);

/** @} END Groups Cluster Callbacks */

/** @name Scenes Cluster Callbacks */
// @{

/** @brief ClearSceneTable
 *
 * This function is called by the framework when the application should clear
 * the scene table.
 *
 * @param endpoint The endpoint.  Ver.: always
 */
void emberAfScenesClusterClearSceneTableCallback(int8u endpoint);
/** @brief Make Invalid
 *
 * This function is called to invalidate the valid attribute in the Scenes
 * cluster.
 *
 * @param endpoint   Ver.: always
 */
EmberAfStatus emberAfScenesClusterMakeInvalidCallback(int8u endpoint);
/** @brief Recall Saved Scene
 *
 * This function is called by the framework when the application should recall a
 * saved scene.
 *
 * @param endpoint The endpoint.  Ver.: always
 * @param groupId The group identifier.  Ver.: always
 * @param sceneId The scene identifier.  Ver.: always
 */
EmberAfStatus emberAfScenesClusterRecallSavedSceneCallback(int8u endpoint,
                                                           int16u groupId,
                                                           int8u sceneId);
/** @brief Remove Scenes In Group
 *
 * This function removes the scenes from a specified group.
 *
 * @param endpoint Endpoint  Ver.: always
 * @param groupId Group ID  Ver.: always
 */
void emberAfScenesClusterRemoveScenesInGroupCallback(int8u endpoint,
                                                     int16u groupId);
/** @brief Add Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterAddSceneCallback(int16u groupId,
                                             int8u sceneId,
                                             int16u transitionTime,
                                             int8u* sceneName,
                                             int8u* extensionFieldSets);
/** @brief Add Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterAddSceneResponseCallback(int8u status,
                                                     int16u groupId,
                                                     int8u sceneId);
/** @brief Client Attribute Changed
 *
 * Scenes cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfScenesClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Scenes cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfScenesClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Client Init
 *
 * Scenes cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfScenesClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Scenes cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfScenesClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Scenes cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfScenesClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Scenes cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfScenesClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Client Tick
 *
 * Scenes cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfScenesClusterClientTickCallback(int8u endpoint);
/** @brief Copy Scene
 *
 * 
 *
 * @param mode   Ver.: always
 * @param groupIdFrom   Ver.: always
 * @param sceneIdFrom   Ver.: always
 * @param groupIdTo   Ver.: always
 * @param sceneIdTo   Ver.: always
 */
boolean emberAfScenesClusterCopySceneCallback(int8u mode,
                                              int16u groupIdFrom,
                                              int8u sceneIdFrom,
                                              int16u groupIdTo,
                                              int8u sceneIdTo);
/** @brief Copy Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupIdFrom   Ver.: always
 * @param sceneIdFrom   Ver.: always
 */
boolean emberAfScenesClusterCopySceneResponseCallback(int8u status,
                                                      int16u groupIdFrom,
                                                      int8u sceneIdFrom);
/** @brief Enhanced Add Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterEnhancedAddSceneCallback(int16u groupId,
                                                     int8u sceneId,
                                                     int16u transitionTime,
                                                     int8u* sceneName,
                                                     int8u* extensionFieldSets);
/** @brief Enhanced Add Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterEnhancedAddSceneResponseCallback(int8u status,
                                                             int16u groupId,
                                                             int8u sceneId);
/** @brief Enhanced View Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterEnhancedViewSceneCallback(int16u groupId,
                                                      int8u sceneId);
/** @brief Enhanced View Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterEnhancedViewSceneResponseCallback(int8u status,
                                                              int16u groupId,
                                                              int8u sceneId,
                                                              int16u transitionTime,
                                                              int8u* sceneName,
                                                              int8u* extensionFieldSets);
/** @brief Get Scene Membership
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfScenesClusterGetSceneMembershipCallback(int16u groupId);
/** @brief Get Scene Membership Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param capacity   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneCount   Ver.: always
 * @param sceneList   Ver.: always
 */
boolean emberAfScenesClusterGetSceneMembershipResponseCallback(int8u status,
                                                               int8u capacity,
                                                               int16u groupId,
                                                               int8u sceneCount,
                                                               int8u* sceneList);
/** @brief Recall Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterRecallSceneCallback(int16u groupId,
                                                int8u sceneId);
/** @brief Remove All Scenes
 *
 * 
 *
 * @param groupId   Ver.: always
 */
boolean emberAfScenesClusterRemoveAllScenesCallback(int16u groupId);
/** @brief Remove All Scenes Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 */
boolean emberAfScenesClusterRemoveAllScenesResponseCallback(int8u status,
                                                            int16u groupId);
/** @brief Remove Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterRemoveSceneCallback(int16u groupId,
                                                int8u sceneId);
/** @brief Remove Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterRemoveSceneResponseCallback(int8u status,
                                                        int16u groupId,
                                                        int8u sceneId);
/** @brief Server Attribute Changed
 *
 * Scenes cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfScenesClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Scenes cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfScenesClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Server Init
 *
 * Scenes cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfScenesClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Scenes cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfScenesClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Scenes cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfScenesClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Scenes cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfScenesClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Server Tick
 *
 * Scenes cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfScenesClusterServerTickCallback(int8u endpoint);
/** @brief Store Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterStoreSceneCallback(int16u groupId,
                                               int8u sceneId);
/** @brief Store Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterStoreSceneResponseCallback(int8u status,
                                                       int16u groupId,
                                                       int8u sceneId);
/** @brief View Scene
 *
 * 
 *
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 */
boolean emberAfScenesClusterViewSceneCallback(int16u groupId,
                                              int8u sceneId);
/** @brief View Scene Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param groupId   Ver.: always
 * @param sceneId   Ver.: always
 * @param transitionTime   Ver.: always
 * @param sceneName   Ver.: always
 * @param extensionFieldSets   Ver.: always
 */
boolean emberAfScenesClusterViewSceneResponseCallback(int8u status,
                                                      int16u groupId,
                                                      int8u sceneId,
                                                      int16u transitionTime,
                                                      int8u* sceneName,
                                                      int8u* extensionFieldSets);
/** @brief Store Current Scene
 *
 * This function is called by the framework when the application should store
 * the current scene.  If an entry already exists in the scene table with the
 * same scene and group ids, the application should update the entry with the
 * current scene.  Otherwise, a new entry should be adde to the scene table, if
 * possible.
 *
 * @param endpoint The endpoint.  Ver.: always
 * @param groupId The group identifier.  Ver.: always
 * @param sceneId The scene identifier.  Ver.: always
 */
EmberAfStatus emberAfScenesClusterStoreCurrentSceneCallback(int8u endpoint,
                                                            int16u groupId,
                                                            int8u sceneId);

/** @} END Scenes Cluster Callbacks */

/** @name On/off Cluster Callbacks */
// @{

/** @brief Level Control Effect
 *
 * This is called by the framework when the on/off cluster initiates a command
 * that must effect a level control change.
 *
 * @param endpoint   Ver.: always
 * @param newValue   Ver.: always
 */
void emberAfOnOffClusterLevelControlEffectCallback(int8u endpoint,
                                                   boolean newValue);
/** @brief Client Attribute Changed
 *
 * On/off cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * On/off cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * On/off cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * On/off cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * On/off cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * On/off cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Client Tick
 *
 * On/off cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffClusterClientTickCallback(int8u endpoint);
/** @brief Off
 *
 * 
 *
 */
boolean emberAfOnOffClusterOffCallback(void);
/** @brief Off With Effect
 *
 * 
 *
 * @param effectId   Ver.: always
 * @param effectVariant   Ver.: always
 */
boolean emberAfOnOffClusterOffWithEffectCallback(int8u effectId,
                                                 int8u effectVariant);
/** @brief On
 *
 * 
 *
 */
boolean emberAfOnOffClusterOnCallback(void);
/** @brief On With Recall Global Scene
 *
 * 
 *
 */
boolean emberAfOnOffClusterOnWithRecallGlobalSceneCallback(void);
/** @brief On With Timed Off
 *
 * 
 *
 * @param onOffControl   Ver.: always
 * @param onTime   Ver.: always
 * @param offWaitTime   Ver.: always
 */
boolean emberAfOnOffClusterOnWithTimedOffCallback(int8u onOffControl,
                                                  int16u onTime,
                                                  int16u offWaitTime);
/** @brief Sample Mfg Specific Off With Transition
 *
 * 
 *
 */
boolean emberAfOnOffClusterSampleMfgSpecificOffWithTransitionCallback(void);
/** @brief Sample Mfg Specific On With Transition
 *
 * 
 *
 */
boolean emberAfOnOffClusterSampleMfgSpecificOnWithTransitionCallback(void);
/** @brief Sample Mfg Specific Toggle With Transition
 *
 * 
 *
 */
boolean emberAfOnOffClusterSampleMfgSpecificToggleWithTransitionCallback(void);
/** @brief Server Attribute Changed
 *
 * On/off cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * On/off cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * On/off cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * On/off cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * On/off cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * On/off cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Server Tick
 *
 * On/off cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffClusterServerTickCallback(int8u endpoint);
/** @brief Toggle
 *
 * 
 *
 */
boolean emberAfOnOffClusterToggleCallback(void);
/** @brief Set Value
 *
 * This function is called when the on/off value needs to be set, either through
 * normal channels or as a result of a level change.
 *
 * @param endpoint   Ver.: always
 * @param command   Ver.: always
 * @param initiatedByLevelChange   Ver.: always
 */
EmberAfStatus emberAfOnOffClusterSetValueCallback(int8u endpoint,
                                                  int8u command,
                                                  boolean initiatedByLevelChange);

/** @} END On/off Cluster Callbacks */

/** @name On/off Switch Configuration Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * On/off Switch Configuration cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * On/off Switch Configuration cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Client Init
 *
 * On/off Switch Configuration cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * On/off Switch Configuration cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * On/off Switch Configuration cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * On/off Switch Configuration cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffSwitchConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Client Tick
 *
 * On/off Switch Configuration cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * On/off Switch Configuration cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * On/off Switch Configuration cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Server Init
 *
 * On/off Switch Configuration cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * On/off Switch Configuration cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * On/off Switch Configuration cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * On/off Switch Configuration cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOnOffSwitchConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Server Tick
 *
 * On/off Switch Configuration cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOnOffSwitchConfigClusterServerTickCallback(int8u endpoint);

/** @} END On/off Switch Configuration Cluster Callbacks */

/** @name Level Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Level Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfLevelControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Level Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfLevelControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Client Init
 *
 * Level Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfLevelControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Level Control cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfLevelControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Level Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfLevelControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Level Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfLevelControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Client Tick
 *
 * Level Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfLevelControlClusterClientTickCallback(int8u endpoint);
/** @brief Move
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfLevelControlClusterMoveCallback(int8u moveMode,
                                               int8u rate);
/** @brief Move To Level
 *
 * 
 *
 * @param level   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterMoveToLevelCallback(int8u level,
                                                      int16u transitionTime);
/** @brief Move To Level With On Off
 *
 * 
 *
 * @param level   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterMoveToLevelWithOnOffCallback(int8u level,
                                                               int16u transitionTime);
/** @brief Move With On Off
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfLevelControlClusterMoveWithOnOffCallback(int8u moveMode,
                                                        int8u rate);
/** @brief Server Attribute Changed
 *
 * Level Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfLevelControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Level Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfLevelControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Server Init
 *
 * Level Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfLevelControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Level Control cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfLevelControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Level Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfLevelControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Level Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfLevelControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Server Tick
 *
 * Level Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfLevelControlClusterServerTickCallback(int8u endpoint);
/** @brief Step
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterStepCallback(int8u stepMode,
                                               int8u stepSize,
                                               int16u transitionTime);
/** @brief Step With On Off
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfLevelControlClusterStepWithOnOffCallback(int8u stepMode,
                                                        int8u stepSize,
                                                        int16u transitionTime);
/** @brief Stop
 *
 * 
 *
 */
boolean emberAfLevelControlClusterStopCallback(void);
/** @brief Stop With On Off
 *
 * 
 *
 */
boolean emberAfLevelControlClusterStopWithOnOffCallback(void);

/** @} END Level Control Cluster Callbacks */

/** @name Alarms Cluster Callbacks */
// @{

/** @brief Alarm
 *
 * 
 *
 * @param alarmCode   Ver.: always
 * @param clusterId   Ver.: always
 */
boolean emberAfAlarmClusterAlarmCallback(int8u alarmCode,
                                         int16u clusterId);
/** @brief Client Attribute Changed
 *
 * Alarms cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfAlarmClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Alarms cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfAlarmClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * Alarms cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfAlarmClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Alarms cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfAlarmClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Alarms cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfAlarmClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Alarms cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfAlarmClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Client Tick
 *
 * Alarms cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfAlarmClusterClientTickCallback(int8u endpoint);
/** @brief Get Alarm
 *
 * 
 *
 */
boolean emberAfAlarmClusterGetAlarmCallback(void);
/** @brief Get Alarm Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param alarmCode   Ver.: always
 * @param clusterId   Ver.: always
 * @param timeStamp   Ver.: always
 */
boolean emberAfAlarmClusterGetAlarmResponseCallback(int8u status,
                                                    int8u alarmCode,
                                                    int16u clusterId,
                                                    int32u timeStamp);
/** @brief Reset Alarm
 *
 * 
 *
 * @param alarmCode   Ver.: always
 * @param clusterId   Ver.: always
 */
boolean emberAfAlarmClusterResetAlarmCallback(int8u alarmCode,
                                              int16u clusterId);
/** @brief Reset Alarm Log
 *
 * 
 *
 */
boolean emberAfAlarmClusterResetAlarmLogCallback(void);
/** @brief Reset All Alarms
 *
 * 
 *
 */
boolean emberAfAlarmClusterResetAllAlarmsCallback(void);
/** @brief Server Attribute Changed
 *
 * Alarms cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfAlarmClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Alarms cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfAlarmClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * Alarms cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfAlarmClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Alarms cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfAlarmClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Alarms cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfAlarmClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Alarms cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfAlarmClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Server Tick
 *
 * Alarms cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfAlarmClusterServerTickCallback(int8u endpoint);

/** @} END Alarms Cluster Callbacks */

/** @name Time Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Time cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTimeClusterClientAttributeChangedCallback(int8u endpoint,
                                                      EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Time cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTimeClusterClientDefaultResponseCallback(int8u endpoint,
                                                     int8u commandId,
                                                     EmberAfStatus status);
/** @brief Client Init
 *
 * Time cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTimeClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Time cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTimeClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Time cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTimeClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                 int16u indexOrDestination,
                                                 EmberApsFrame * apsFrame,
                                                 int16u msgLen,
                                                 int8u * message,
                                                 EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Time cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTimeClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId,
                                                                  EmberAfAttributeType attributeType,
                                                                  int8u size,
                                                                  int8u * value);
/** @brief Client Tick
 *
 * Time cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTimeClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Time cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTimeClusterServerAttributeChangedCallback(int8u endpoint,
                                                      EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Time cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTimeClusterServerDefaultResponseCallback(int8u endpoint,
                                                     int8u commandId,
                                                     EmberAfStatus status);
/** @brief Server Init
 *
 * Time cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTimeClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Time cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTimeClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Time cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTimeClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                 int16u indexOrDestination,
                                                 EmberApsFrame * apsFrame,
                                                 int16u msgLen,
                                                 int8u * message,
                                                 EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Time cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTimeClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId,
                                                                  EmberAfAttributeType attributeType,
                                                                  int8u size,
                                                                  int8u * value);
/** @brief Server Tick
 *
 * Time cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTimeClusterServerTickCallback(int8u endpoint);

/** @} END Time Cluster Callbacks */

/** @name RSSI Location Cluster Callbacks */
// @{

/** @brief Anchor Node Announce
 *
 * 
 *
 * @param anchorNodeIeeeAddress   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 */
boolean emberAfRssiLocationClusterAnchorNodeAnnounceCallback(int8u* anchorNodeIeeeAddress,
                                                             int16s coordinate1,
                                                             int16s coordinate2,
                                                             int16s coordinate3);
/** @brief Client Attribute Changed
 *
 * RSSI Location cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRssiLocationClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * RSSI Location cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRssiLocationClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Client Init
 *
 * RSSI Location cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRssiLocationClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * RSSI Location cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRssiLocationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * RSSI Location cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRssiLocationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * RSSI Location cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRssiLocationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Client Tick
 *
 * RSSI Location cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRssiLocationClusterClientTickCallback(int8u endpoint);
/** @brief Compact Location Data Notification
 *
 * 
 *
 * @param locationType   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param qualityMeasure   Ver.: always
 * @param locationAge   Ver.: always
 */
boolean emberAfRssiLocationClusterCompactLocationDataNotificationCallback(int8u locationType,
                                                                          int16s coordinate1,
                                                                          int16s coordinate2,
                                                                          int16s coordinate3,
                                                                          int8u qualityMeasure,
                                                                          int16u locationAge);
/** @brief Device Configuration Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param calculationPeriod   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 * @param reportingPeriod   Ver.: always
 */
boolean emberAfRssiLocationClusterDeviceConfigurationResponseCallback(int8u status,
                                                                      int16s power,
                                                                      int16u pathLossExponent,
                                                                      int16u calculationPeriod,
                                                                      int8u numberRssiMeasurements,
                                                                      int16u reportingPeriod);
/** @brief Get Device Configuration
 *
 * 
 *
 * @param targetAddress   Ver.: always
 */
boolean emberAfRssiLocationClusterGetDeviceConfigurationCallback(int8u* targetAddress);
/** @brief Get Location Data
 *
 * 
 *
 * @param flags   Ver.: always
 * @param numberResponses   Ver.: always
 * @param targetAddress   Ver.: always
 */
boolean emberAfRssiLocationClusterGetLocationDataCallback(int8u flags,
                                                          int8u numberResponses,
                                                          int8u* targetAddress);
/** @brief Location Data Notification
 *
 * 
 *
 * @param locationType   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param locationMethod   Ver.: always
 * @param qualityMeasure   Ver.: always
 * @param locationAge   Ver.: always
 */
boolean emberAfRssiLocationClusterLocationDataNotificationCallback(int8u locationType,
                                                                   int16s coordinate1,
                                                                   int16s coordinate2,
                                                                   int16s coordinate3,
                                                                   int16s power,
                                                                   int16u pathLossExponent,
                                                                   int8u locationMethod,
                                                                   int8u qualityMeasure,
                                                                   int16u locationAge);
/** @brief Location Data Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param locationType   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param locationMethod   Ver.: always
 * @param qualityMeasure   Ver.: always
 * @param locationAge   Ver.: always
 */
boolean emberAfRssiLocationClusterLocationDataResponseCallback(int8u status,
                                                               int8u locationType,
                                                               int16s coordinate1,
                                                               int16s coordinate2,
                                                               int16s coordinate3,
                                                               int16s power,
                                                               int16u pathLossExponent,
                                                               int8u locationMethod,
                                                               int8u qualityMeasure,
                                                               int16u locationAge);
/** @brief Report Rssi Measurements
 *
 * 
 *
 * @param measuringDevice   Ver.: always
 * @param neighbors   Ver.: always
 * @param neighborsInfo   Ver.: always
 */
boolean emberAfRssiLocationClusterReportRssiMeasurementsCallback(int8u* measuringDevice,
                                                                 int8u neighbors,
                                                                 int8u* neighborsInfo);
/** @brief Request Own Location
 *
 * 
 *
 * @param blindNode   Ver.: always
 */
boolean emberAfRssiLocationClusterRequestOwnLocationCallback(int8u* blindNode);
/** @brief Rssi Ping
 *
 * 
 *
 * @param locationType   Ver.: always
 */
boolean emberAfRssiLocationClusterRssiPingCallback(int8u locationType);
/** @brief Rssi Request
 *
 * 
 *
 */
boolean emberAfRssiLocationClusterRssiRequestCallback(void);
/** @brief Rssi Response
 *
 * 
 *
 * @param replyingDevice   Ver.: always
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param rssi   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 */
boolean emberAfRssiLocationClusterRssiResponseCallback(int8u* replyingDevice,
                                                       int16s coordinate1,
                                                       int16s coordinate2,
                                                       int16s coordinate3,
                                                       int8s rssi,
                                                       int8u numberRssiMeasurements);
/** @brief Send Pings
 *
 * 
 *
 * @param targetAddress   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 * @param calculationPeriod   Ver.: always
 */
boolean emberAfRssiLocationClusterSendPingsCallback(int8u* targetAddress,
                                                    int8u numberRssiMeasurements,
                                                    int16u calculationPeriod);
/** @brief Server Attribute Changed
 *
 * RSSI Location cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRssiLocationClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * RSSI Location cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRssiLocationClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Server Init
 *
 * RSSI Location cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRssiLocationClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * RSSI Location cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRssiLocationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * RSSI Location cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRssiLocationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * RSSI Location cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRssiLocationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Server Tick
 *
 * RSSI Location cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRssiLocationClusterServerTickCallback(int8u endpoint);
/** @brief Set Absolute Location
 *
 * 
 *
 * @param coordinate1   Ver.: always
 * @param coordinate2   Ver.: always
 * @param coordinate3   Ver.: always
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 */
boolean emberAfRssiLocationClusterSetAbsoluteLocationCallback(int16s coordinate1,
                                                              int16s coordinate2,
                                                              int16s coordinate3,
                                                              int16s power,
                                                              int16u pathLossExponent);
/** @brief Set Device Configuration
 *
 * 
 *
 * @param power   Ver.: always
 * @param pathLossExponent   Ver.: always
 * @param calculationPeriod   Ver.: always
 * @param numberRssiMeasurements   Ver.: always
 * @param reportingPeriod   Ver.: always
 */
boolean emberAfRssiLocationClusterSetDeviceConfigurationCallback(int16s power,
                                                                 int16u pathLossExponent,
                                                                 int16u calculationPeriod,
                                                                 int8u numberRssiMeasurements,
                                                                 int16u reportingPeriod);

/** @} END RSSI Location Cluster Callbacks */

/** @name Binary Input (Basic) Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Binary Input (Basic) cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Binary Input (Basic) cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Binary Input (Basic) cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Binary Input (Basic) cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBinaryInputBasicClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Binary Input (Basic) cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Binary Input (Basic) cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBinaryInputBasicClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Binary Input (Basic) cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBinaryInputBasicClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Binary Input (Basic) cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Binary Input (Basic) cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Binary Input (Basic) cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Binary Input (Basic) cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBinaryInputBasicClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Binary Input (Basic) cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Binary Input (Basic) cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBinaryInputBasicClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Binary Input (Basic) cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBinaryInputBasicClusterServerTickCallback(int8u endpoint);

/** @} END Binary Input (Basic) Cluster Callbacks */

/** @name Commissioning Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Commissioning cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfCommissioningClusterClientAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Commissioning cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfCommissioningClusterClientDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Client Init
 *
 * Commissioning cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfCommissioningClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Commissioning cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfCommissioningClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Commissioning cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfCommissioningClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame * apsFrame,
                                                          int16u msgLen,
                                                          int8u * message,
                                                          EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Commissioning cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfCommissioningClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u * value);
/** @brief Client Tick
 *
 * Commissioning cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfCommissioningClusterClientTickCallback(int8u endpoint);
/** @brief Reset Startup Parameters
 *
 * 
 *
 * @param options   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfCommissioningClusterResetStartupParametersCallback(int8u options,
                                                                  int8u index);
/** @brief Reset Startup Parameters Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterResetStartupParametersResponseCallback(int8u status);
/** @brief Restart Device
 *
 * 
 *
 * @param options   Ver.: always
 * @param delay   Ver.: always
 * @param jitter   Ver.: always
 */
boolean emberAfCommissioningClusterRestartDeviceCallback(int8u options,
                                                         int8u delay,
                                                         int8u jitter);
/** @brief Restart Device Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterRestartDeviceResponseCallback(int8u status);
/** @brief Restore Startup Parameters
 *
 * 
 *
 * @param options   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfCommissioningClusterRestoreStartupParametersCallback(int8u options,
                                                                    int8u index);
/** @brief Restore Startup Parameters Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterRestoreStartupParametersResponseCallback(int8u status);
/** @brief Save Startup Parameters
 *
 * 
 *
 * @param options   Ver.: always
 * @param index   Ver.: always
 */
boolean emberAfCommissioningClusterSaveStartupParametersCallback(int8u options,
                                                                 int8u index);
/** @brief Save Startup Parameters Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfCommissioningClusterSaveStartupParametersResponseCallback(int8u status);
/** @brief Server Attribute Changed
 *
 * Commissioning cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfCommissioningClusterServerAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Commissioning cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfCommissioningClusterServerDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Server Init
 *
 * Commissioning cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfCommissioningClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Commissioning cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfCommissioningClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Commissioning cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfCommissioningClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame * apsFrame,
                                                          int16u msgLen,
                                                          int8u * message,
                                                          EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Commissioning cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfCommissioningClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u * value);
/** @brief Server Tick
 *
 * Commissioning cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfCommissioningClusterServerTickCallback(int8u endpoint);

/** @} END Commissioning Cluster Callbacks */

/** @name Partition Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Partition cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPartitionClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Partition cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPartitionClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Client Init
 *
 * Partition cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPartitionClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Partition cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPartitionClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Partition cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPartitionClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame * apsFrame,
                                                      int16u msgLen,
                                                      int8u * message,
                                                      EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Partition cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPartitionClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u * value);
/** @brief Client Tick
 *
 * Partition cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPartitionClusterClientTickCallback(int8u endpoint);
/** @brief Multiple Ack
 *
 * 
 *
 * @param ackOptions   Ver.: always
 * @param firstFrameIdAndNackList   Ver.: always
 */
boolean emberAfPartitionClusterMultipleAckCallback(int8u ackOptions,
                                                   int8u* firstFrameIdAndNackList);
/** @brief Read Handshake Param
 *
 * 
 *
 * @param partitionedClusterId   Ver.: always
 * @param attributeList   Ver.: always
 */
boolean emberAfPartitionClusterReadHandshakeParamCallback(int16u partitionedClusterId,
                                                          int8u* attributeList);
/** @brief Read Handshake Param Response
 *
 * 
 *
 * @param partitionedClusterId   Ver.: always
 * @param readAttributeStatusRecords   Ver.: always
 */
boolean emberAfPartitionClusterReadHandshakeParamResponseCallback(int16u partitionedClusterId,
                                                                  int8u* readAttributeStatusRecords);
/** @brief Server Attribute Changed
 *
 * Partition cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPartitionClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Partition cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPartitionClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Server Init
 *
 * Partition cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPartitionClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Partition cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPartitionClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Partition cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPartitionClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame * apsFrame,
                                                      int16u msgLen,
                                                      int8u * message,
                                                      EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Partition cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPartitionClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u * value);
/** @brief Server Tick
 *
 * Partition cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPartitionClusterServerTickCallback(int8u endpoint);
/** @brief Transfer Partitioned Frame
 *
 * 
 *
 * @param fragmentationOptions   Ver.: always
 * @param partitionedIndicatorAndFrame   Ver.: always
 */
boolean emberAfPartitionClusterTransferPartitionedFrameCallback(int8u fragmentationOptions,
                                                                int8u* partitionedIndicatorAndFrame);
/** @brief Write Handshake Param
 *
 * 
 *
 * @param partitionedClusterId   Ver.: always
 * @param writeAttributeRecords   Ver.: always
 */
boolean emberAfPartitionClusterWriteHandshakeParamCallback(int16u partitionedClusterId,
                                                           int8u* writeAttributeRecords);

/** @} END Partition Cluster Callbacks */

/** @name Over the Air Bootloading Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Over the Air Bootloading cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOtaBootloadClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Over the Air Bootloading cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOtaBootloadClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Over the Air Bootloading cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOtaBootloadClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Over the Air Bootloading cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOtaBootloadClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Over the Air Bootloading cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOtaBootloadClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Over the Air Bootloading cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOtaBootloadClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Over the Air Bootloading cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOtaBootloadClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Over the Air Bootloading cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOtaBootloadClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Over the Air Bootloading cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOtaBootloadClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Over the Air Bootloading cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOtaBootloadClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Over the Air Bootloading cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOtaBootloadClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Over the Air Bootloading cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOtaBootloadClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Over the Air Bootloading cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOtaBootloadClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * Over the Air Bootloading cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOtaBootloadClusterServerTickCallback(int8u endpoint);

/** @} END Over the Air Bootloading Cluster Callbacks */

/** @name Power Profile Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Power Profile cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerProfileClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Power Profile cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerProfileClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Client Init
 *
 * Power Profile cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerProfileClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Power Profile cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerProfileClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Power Profile cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerProfileClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Power Profile cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerProfileClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Client Tick
 *
 * Power Profile cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerProfileClusterClientTickCallback(int8u endpoint);
/** @brief Energy Phases Schedule Notification
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleNotificationCallback(int8u powerProfileId,
                                                                           int8u numOfScheduledPhases,
                                                                           int8u* scheduledPhases);
/** @brief Energy Phases Schedule Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleRequestCallback(int8u powerProfileId);
/** @brief Energy Phases Schedule Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleResponseCallback(int8u powerProfileId,
                                                                       int8u numOfScheduledPhases,
                                                                       int8u* scheduledPhases);
/** @brief Energy Phases Schedule State Notification
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleStateNotificationCallback(int8u powerProfileId,
                                                                                int8u numOfScheduledPhases,
                                                                                int8u* scheduledPhases);
/** @brief Energy Phases Schedule State Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleStateRequestCallback(int8u powerProfileId);
/** @brief Energy Phases Schedule State Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param numOfScheduledPhases   Ver.: always
 * @param scheduledPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterEnergyPhasesScheduleStateResponseCallback(int8u powerProfileId,
                                                                            int8u numOfScheduledPhases,
                                                                            int8u* scheduledPhases);
/** @brief Get Overall Schedule Price
 *
 * 
 *
 */
boolean emberAfPowerProfileClusterGetOverallSchedulePriceCallback(void);
/** @brief Get Overall Schedule Price Response
 *
 * 
 *
 * @param currency   Ver.: always
 * @param price   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 */
boolean emberAfPowerProfileClusterGetOverallSchedulePriceResponseCallback(int16u currency,
                                                                          int32u price,
                                                                          int8u priceTrailingDigit);
/** @brief Get Power Profile Price
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceCallback(int8u powerProfileId);
/** @brief Get Power Profile Price Extended
 *
 * 
 *
 * @param options   Ver.: always
 * @param powerProfileId   Ver.: always
 * @param powerProfileStartTime   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceExtendedCallback(int8u options,
                                                                       int8u powerProfileId,
                                                                       int16u powerProfileStartTime);
/** @brief Get Power Profile Price Extended Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param currency   Ver.: always
 * @param price   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceExtendedResponseCallback(int8u powerProfileId,
                                                                               int16u currency,
                                                                               int32u price,
                                                                               int8u priceTrailingDigit);
/** @brief Get Power Profile Price Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param currency   Ver.: always
 * @param price   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 */
boolean emberAfPowerProfileClusterGetPowerProfilePriceResponseCallback(int8u powerProfileId,
                                                                       int16u currency,
                                                                       int32u price,
                                                                       int8u priceTrailingDigit);
/** @brief Power Profile Notification
 *
 * 
 *
 * @param totalProfileNum   Ver.: always
 * @param powerProfileId   Ver.: always
 * @param numOfTransferredPhases   Ver.: always
 * @param transferredPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileNotificationCallback(int8u totalProfileNum,
                                                                   int8u powerProfileId,
                                                                   int8u numOfTransferredPhases,
                                                                   int8u* transferredPhases);
/** @brief Power Profile Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileRequestCallback(int8u powerProfileId);
/** @brief Power Profile Response
 *
 * 
 *
 * @param totalProfileNum   Ver.: always
 * @param powerProfileId   Ver.: always
 * @param numOfTransferredPhases   Ver.: always
 * @param transferredPhases   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileResponseCallback(int8u totalProfileNum,
                                                               int8u powerProfileId,
                                                               int8u numOfTransferredPhases,
                                                               int8u* transferredPhases);
/** @brief Power Profile Schedule Constraints Notification
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param startAfter   Ver.: always
 * @param stopBefore   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileScheduleConstraintsNotificationCallback(int8u powerProfileId,
                                                                                      int16u startAfter,
                                                                                      int16u stopBefore);
/** @brief Power Profile Schedule Constraints Request
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileScheduleConstraintsRequestCallback(int8u powerProfileId);
/** @brief Power Profile Schedule Constraints Response
 *
 * 
 *
 * @param powerProfileId   Ver.: always
 * @param startAfter   Ver.: always
 * @param stopBefore   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileScheduleConstraintsResponseCallback(int8u powerProfileId,
                                                                                  int16u startAfter,
                                                                                  int16u stopBefore);
/** @brief Power Profile State Request
 *
 * 
 *
 */
boolean emberAfPowerProfileClusterPowerProfileStateRequestCallback(void);
/** @brief Power Profile State Response
 *
 * 
 *
 * @param powerProfileCount   Ver.: always
 * @param powerProfileRecords   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfileStateResponseCallback(int8u powerProfileCount,
                                                                    int8u* powerProfileRecords);
/** @brief Power Profiles State Notification
 *
 * 
 *
 * @param powerProfileCount   Ver.: always
 * @param powerProfileRecords   Ver.: always
 */
boolean emberAfPowerProfileClusterPowerProfilesStateNotificationCallback(int8u powerProfileCount,
                                                                         int8u* powerProfileRecords);
/** @brief Server Attribute Changed
 *
 * Power Profile cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPowerProfileClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Power Profile cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPowerProfileClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Server Init
 *
 * Power Profile cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPowerProfileClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Power Profile cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPowerProfileClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Power Profile cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPowerProfileClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Power Profile cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPowerProfileClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Server Tick
 *
 * Power Profile cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPowerProfileClusterServerTickCallback(int8u endpoint);

/** @} END Power Profile Cluster Callbacks */

/** @name Appliance Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Appliance Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Appliance Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Appliance Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Appliance Control cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Appliance Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Appliance Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Appliance Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceControlClusterClientTickCallback(int8u endpoint);
/** @brief Execution Of A Command
 *
 * 
 *
 * @param commandId   Ver.: always
 */
boolean emberAfApplianceControlClusterExecutionOfACommandCallback(int8u commandId);
/** @brief Overload Pause
 *
 * 
 *
 */
boolean emberAfApplianceControlClusterOverloadPauseCallback(void);
/** @brief Overload Pause Resume
 *
 * 
 *
 */
boolean emberAfApplianceControlClusterOverloadPauseResumeCallback(void);
/** @brief Overload Warning
 *
 * 
 *
 * @param warningEvent   Ver.: always
 */
boolean emberAfApplianceControlClusterOverloadWarningCallback(int8u warningEvent);
/** @brief Server Attribute Changed
 *
 * Appliance Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Appliance Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Appliance Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Appliance Control cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Appliance Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Appliance Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Appliance Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceControlClusterServerTickCallback(int8u endpoint);
/** @brief Signal State
 *
 * 
 *
 */
boolean emberAfApplianceControlClusterSignalStateCallback(void);
/** @brief Signal State Notification
 *
 * 
 *
 * @param applianceStatus   Ver.: always
 * @param remoteEnableFlagsAndDeviceStatus2   Ver.: always
 * @param applianceStatus2   Ver.: always
 */
boolean emberAfApplianceControlClusterSignalStateNotificationCallback(int8u applianceStatus,
                                                                      int8u remoteEnableFlagsAndDeviceStatus2,
                                                                      int32u applianceStatus2);
/** @brief Signal State Response
 *
 * 
 *
 * @param applianceStatus   Ver.: always
 * @param remoteEnableFlagsAndDeviceStatus2   Ver.: always
 * @param applianceStatus2   Ver.: always
 */
boolean emberAfApplianceControlClusterSignalStateResponseCallback(int8u applianceStatus,
                                                                  int8u remoteEnableFlagsAndDeviceStatus2,
                                                                  int32u applianceStatus2);
/** @brief Write Functions
 *
 * 
 *
 * @param functionId   Ver.: always
 * @param functionDataType   Ver.: always
 * @param functionData   Ver.: always
 */
boolean emberAfApplianceControlClusterWriteFunctionsCallback(int16u functionId,
                                                             int8u functionDataType,
                                                             int8u* functionData);

/** @} END Appliance Control Cluster Callbacks */

/** @name Poll Control Cluster Callbacks */
// @{

/** @brief Check In
 *
 * 
 *
 */
boolean emberAfPollControlClusterCheckInCallback(void);
/** @brief Check In Response
 *
 * 
 *
 * @param startFastPolling   Ver.: always
 * @param fastPollTimeout   Ver.: always
 */
boolean emberAfPollControlClusterCheckInResponseCallback(int8u startFastPolling,
                                                         int16u fastPollTimeout);
/** @brief Client Attribute Changed
 *
 * Poll Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPollControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Poll Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPollControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Poll Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPollControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Poll Control cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPollControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Poll Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPollControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Poll Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPollControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Poll Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPollControlClusterClientTickCallback(int8u endpoint);
/** @brief Fast Poll Stop
 *
 * 
 *
 */
boolean emberAfPollControlClusterFastPollStopCallback(void);
/** @brief Server Attribute Changed
 *
 * Poll Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPollControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Poll Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPollControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Poll Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPollControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Poll Control cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPollControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Poll Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPollControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Poll Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPollControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * Poll Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPollControlClusterServerTickCallback(int8u endpoint);
/** @brief Set Long Poll Interval
 *
 * 
 *
 * @param newLongPollInterval   Ver.: always
 */
boolean emberAfPollControlClusterSetLongPollIntervalCallback(int32u newLongPollInterval);
/** @brief Set Short Poll Interval
 *
 * 
 *
 * @param newShortPollInterval   Ver.: always
 */
boolean emberAfPollControlClusterSetShortPollIntervalCallback(int16u newShortPollInterval);

/** @} END Poll Control Cluster Callbacks */

/** @name Shade Configuration Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Shade Configuration cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfShadeConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Shade Configuration cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfShadeConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Shade Configuration cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfShadeConfigClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Shade Configuration cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfShadeConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Shade Configuration cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfShadeConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Shade Configuration cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfShadeConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Shade Configuration cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfShadeConfigClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Shade Configuration cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfShadeConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Shade Configuration cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfShadeConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Shade Configuration cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfShadeConfigClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Shade Configuration cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfShadeConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Shade Configuration cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfShadeConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Shade Configuration cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfShadeConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * Shade Configuration cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfShadeConfigClusterServerTickCallback(int8u endpoint);

/** @} END Shade Configuration Cluster Callbacks */

/** @name Door Lock Cluster Callbacks */
// @{

/** @brief Clear All Pins
 *
 * 
 *
 */
boolean emberAfDoorLockClusterClearAllPinsCallback(void);
/** @brief Clear All Pins Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearAllPinsResponseCallback(int8u status);
/** @brief Clear All Rfids
 *
 * 
 *
 */
boolean emberAfDoorLockClusterClearAllRfidsCallback(void);
/** @brief Clear All Rfids Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearAllRfidsResponseCallback(int8u status);
/** @brief Clear Holiday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 */
boolean emberAfDoorLockClusterClearHolidayScheduleCallback(int8u scheduleId);
/** @brief Clear Holiday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearHolidayScheduleResponseCallback(int8u status);
/** @brief Clear Pin
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearPinCallback(int16u userId);
/** @brief Clear Pin Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearPinResponseCallback(int8u status);
/** @brief Clear Rfid
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearRfidCallback(int16u userId);
/** @brief Clear Rfid Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearRfidResponseCallback(int8u status);
/** @brief Clear Weekday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearWeekdayScheduleCallback(int8u scheduleId,
                                                           int16u userId);
/** @brief Clear Weekday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearWeekdayScheduleResponseCallback(int8u status);
/** @brief Clear Yearday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterClearYeardayScheduleCallback(int8u scheduleId,
                                                           int16u userId);
/** @brief Clear Yearday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterClearYeardayScheduleResponseCallback(int8u status);
/** @brief Client Attribute Changed
 *
 * Door Lock cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDoorLockClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Door Lock cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDoorLockClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Client Init
 *
 * Door Lock cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDoorLockClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Door Lock cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDoorLockClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Door Lock cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDoorLockClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame * apsFrame,
                                                     int16u msgLen,
                                                     int8u * message,
                                                     EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Door Lock cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDoorLockClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u * value);
/** @brief Client Tick
 *
 * Door Lock cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDoorLockClusterClientTickCallback(int8u endpoint);
/** @brief Get Holiday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 */
boolean emberAfDoorLockClusterGetHolidayScheduleCallback(int8u scheduleId);
/** @brief Get Holiday Schedule Response
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param status   Ver.: always
 * @param localStartTime   Ver.: since ha-1.2-05-3520-29
 * @param localEndTime   Ver.: since ha-1.2-05-3520-29
 * @param operatingModeDuringHoliday   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterGetHolidayScheduleResponseCallback(int8u scheduleId,
                                                                 int8u status,
                                                                 int32u localStartTime,
                                                                 int32u localEndTime,
                                                                 int8u operatingModeDuringHoliday);
/** @brief Get Log Record
 *
 * 
 *
 * @param logIndex   Ver.: always
 */
boolean emberAfDoorLockClusterGetLogRecordCallback(int16u logIndex);
/** @brief Get Log Record Response
 *
 * 
 *
 * @param logEntryId   Ver.: always
 * @param timestamp   Ver.: always
 * @param eventType   Ver.: always
 * @param source   Ver.: always
 * @param eventIdOrAlarmCode   Ver.: always
 * @param userId   Ver.: always
 * @param pin   Ver.: always
 */
boolean emberAfDoorLockClusterGetLogRecordResponseCallback(int16u logEntryId,
                                                           int32u timestamp,
                                                           int8u eventType,
                                                           int8u source,
                                                           int8u eventIdOrAlarmCode,
                                                           int16u userId,
                                                           int8u* pin);
/** @brief Get Pin
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetPinCallback(int16u userId);
/** @brief Get Pin Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param pin   Ver.: always
 */
boolean emberAfDoorLockClusterGetPinResponseCallback(int16u userId,
                                                     int8u userStatus,
                                                     int8u userType,
                                                     int8u* pin);
/** @brief Get Rfid
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetRfidCallback(int16u userId);
/** @brief Get Rfid Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param rfid   Ver.: always
 */
boolean emberAfDoorLockClusterGetRfidResponseCallback(int16u userId,
                                                      int8u userStatus,
                                                      int8u userType,
                                                      int8u* rfid);
/** @brief Get User Status
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserStatusCallback(int16u userId);
/** @brief Get User Status Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserStatusResponseCallback(int16u userId,
                                                            int8u status);
/** @brief Get User Type
 *
 * 
 *
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserTypeCallback(int16u userId);
/** @brief Get User Type Response
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 */
boolean emberAfDoorLockClusterGetUserTypeResponseCallback(int16u userId,
                                                          int8u userType);
/** @brief Get Weekday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetWeekdayScheduleCallback(int8u scheduleId,
                                                         int16u userId);
/** @brief Get Weekday Schedule Response
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param status   Ver.: always
 * @param daysMask   Ver.: since ha-1.2-05-3520-29
 * @param startHour   Ver.: since ha-1.2-05-3520-29
 * @param startMinute   Ver.: since ha-1.2-05-3520-29
 * @param endHour   Ver.: since ha-1.2-05-3520-29
 * @param endMinute   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterGetWeekdayScheduleResponseCallback(int8u scheduleId,
                                                                 int16u userId,
                                                                 int8u status,
                                                                 int8u daysMask,
                                                                 int8u startHour,
                                                                 int8u startMinute,
                                                                 int8u endHour,
                                                                 int8u endMinute);
/** @brief Get Yearday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 */
boolean emberAfDoorLockClusterGetYeardayScheduleCallback(int8u scheduleId,
                                                         int16u userId);
/** @brief Get Yearday Schedule Response
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param status   Ver.: always
 * @param localStartTime   Ver.: since ha-1.2-05-3520-29
 * @param localEndTime   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterGetYeardayScheduleResponseCallback(int8u scheduleId,
                                                                 int16u userId,
                                                                 int8u status,
                                                                 int32u localStartTime,
                                                                 int32u localEndTime);
/** @brief Lock Door
 *
 * 
 *
 * @param PIN   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterLockDoorCallback(int8u* PIN);
/** @brief Lock Door Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterLockDoorResponseCallback(int8u status);
/** @brief Operation Event Notification
 *
 * 
 *
 * @param source   Ver.: always
 * @param eventCode   Ver.: always
 * @param userId   Ver.: always
 * @param pin   Ver.: always
 * @param timeStamp   Ver.: always
 * @param data   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterOperationEventNotificationCallback(int8u source,
                                                                 int8u eventCode,
                                                                 int16u userId,
                                                                 int8u* pin,
                                                                 int32u timeStamp,
                                                                 int8u* data);
/** @brief Programming Event Notification
 *
 * 
 *
 * @param source   Ver.: always
 * @param eventCode   Ver.: always
 * @param userId   Ver.: always
 * @param pin   Ver.: always
 * @param userType   Ver.: always
 * @param userStatus   Ver.: always
 * @param timeStamp   Ver.: always
 * @param data   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterProgrammingEventNotificationCallback(int8u source,
                                                                   int8u eventCode,
                                                                   int16u userId,
                                                                   int8u* pin,
                                                                   int8u userType,
                                                                   int8u userStatus,
                                                                   int32u timeStamp,
                                                                   int8u* data);
/** @brief Server Attribute Changed
 *
 * Door Lock cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDoorLockClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Door Lock cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDoorLockClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Server Init
 *
 * Door Lock cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDoorLockClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Door Lock cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDoorLockClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Door Lock cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDoorLockClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame * apsFrame,
                                                     int16u msgLen,
                                                     int8u * message,
                                                     EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Door Lock cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDoorLockClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u * value);
/** @brief Server Tick
 *
 * Door Lock cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDoorLockClusterServerTickCallback(int8u endpoint);
/** @brief Set Holiday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param localStartTime   Ver.: always
 * @param localEndTime   Ver.: always
 * @param operatingModeDuringHoliday   Ver.: always
 */
boolean emberAfDoorLockClusterSetHolidayScheduleCallback(int8u scheduleId,
                                                         int32u localStartTime,
                                                         int32u localEndTime,
                                                         int8u operatingModeDuringHoliday);
/** @brief Set Holiday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetHolidayScheduleResponseCallback(int8u status);
/** @brief Set Pin
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param pin   Ver.: always
 */
boolean emberAfDoorLockClusterSetPinCallback(int16u userId,
                                             int8u userStatus,
                                             int8u userType,
                                             int8u* pin);
/** @brief Set Pin Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetPinResponseCallback(int8u status);
/** @brief Set Rfid
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 * @param userType   Ver.: always
 * @param id   Ver.: always
 */
boolean emberAfDoorLockClusterSetRfidCallback(int16u userId,
                                              int8u userStatus,
                                              int8u userType,
                                              int8u* id);
/** @brief Set Rfid Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetRfidResponseCallback(int8u status);
/** @brief Set User Status
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userStatus   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserStatusCallback(int16u userId,
                                                    int8u userStatus);
/** @brief Set User Status Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserStatusResponseCallback(int8u status);
/** @brief Set User Type
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserTypeCallback(int16u userId,
                                                  int8u userType);
/** @brief Set User Type Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetUserTypeResponseCallback(int8u status);
/** @brief Set Weekday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param daysMask   Ver.: always
 * @param startHour   Ver.: always
 * @param startMinute   Ver.: always
 * @param endHour   Ver.: always
 * @param endMinute   Ver.: always
 */
boolean emberAfDoorLockClusterSetWeekdayScheduleCallback(int8u scheduleId,
                                                         int16u userId,
                                                         int8u daysMask,
                                                         int8u startHour,
                                                         int8u startMinute,
                                                         int8u endHour,
                                                         int8u endMinute);
/** @brief Set Weekday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetWeekdayScheduleResponseCallback(int8u status);
/** @brief Set Yearday Schedule
 *
 * 
 *
 * @param scheduleId   Ver.: always
 * @param userId   Ver.: always
 * @param localStartTime   Ver.: always
 * @param localEndTime   Ver.: always
 */
boolean emberAfDoorLockClusterSetYeardayScheduleCallback(int8u scheduleId,
                                                         int16u userId,
                                                         int32u localStartTime,
                                                         int32u localEndTime);
/** @brief Set Yearday Schedule Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterSetYeardayScheduleResponseCallback(int8u status);
/** @brief Toggle
 *
 * 
 *
 * @param pin   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterToggleCallback(int8u* pin);
/** @brief Toggle Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterToggleResponseCallback(int8u status);
/** @brief Unlock Door
 *
 * 
 *
 * @param PIN   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterUnlockDoorCallback(int8u* PIN);
/** @brief Unlock Door Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterUnlockDoorResponseCallback(int8u status);
/** @brief Unlock With Timeout
 *
 * 
 *
 * @param timeoutInSeconds   Ver.: always
 * @param pin   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfDoorLockClusterUnlockWithTimeoutCallback(int16u timeoutInSeconds,
                                                        int8u* pin);
/** @brief Unlock With Timeout Response
 *
 * 
 *
 * @param status   Ver.: always
 */
boolean emberAfDoorLockClusterUnlockWithTimeoutResponseCallback(int8u status);

/** @} END Door Lock Cluster Callbacks */

/** @name Window Covering Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Window Covering cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfWindowCoveringClusterClientAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Window Covering cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfWindowCoveringClusterClientDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Client Init
 *
 * Window Covering cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfWindowCoveringClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Window Covering cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfWindowCoveringClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Window Covering cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfWindowCoveringClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame * apsFrame,
                                                           int16u msgLen,
                                                           int8u * message,
                                                           EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Window Covering cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfWindowCoveringClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u * value);
/** @brief Client Tick
 *
 * Window Covering cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfWindowCoveringClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Window Covering cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfWindowCoveringClusterServerAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Window Covering cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfWindowCoveringClusterServerDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Server Init
 *
 * Window Covering cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfWindowCoveringClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Window Covering cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfWindowCoveringClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Window Covering cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfWindowCoveringClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame * apsFrame,
                                                           int16u msgLen,
                                                           int8u * message,
                                                           EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Window Covering cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfWindowCoveringClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u * value);
/** @brief Server Tick
 *
 * Window Covering cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfWindowCoveringClusterServerTickCallback(int8u endpoint);
/** @brief Window Covering Down Close
 *
 * 
 *
 */
boolean emberAfWindowCoveringClusterWindowCoveringDownCloseCallback(void);
/** @brief Window Covering Go To Lift Percentage
 *
 * 
 *
 * @param percentageLiftValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToLiftPercentageCallback(int8u percentageLiftValue);
/** @brief Window Covering Go To Lift Value
 *
 * 
 *
 * @param liftValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToLiftValueCallback(int16u liftValue);
/** @brief Window Covering Go To Tilt Percentage
 *
 * 
 *
 * @param percentageTiltValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToTiltPercentageCallback(int8u percentageTiltValue);
/** @brief Window Covering Go To Tilt Value
 *
 * 
 *
 * @param tiltValue   Ver.: always
 */
boolean emberAfWindowCoveringClusterWindowCoveringGoToTiltValueCallback(int16u tiltValue);
/** @brief Window Covering Stop
 *
 * 
 *
 */
boolean emberAfWindowCoveringClusterWindowCoveringStopCallback(void);
/** @brief Window Covering Up Open
 *
 * 
 *
 */
boolean emberAfWindowCoveringClusterWindowCoveringUpOpenCallback(void);

/** @} END Window Covering Cluster Callbacks */

/** @name Pump Configuration and Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Pump Configuration and Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPumpConfigControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Pump Configuration and Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPumpConfigControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Client Init
 *
 * Pump Configuration and Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPumpConfigControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Pump Configuration and Control cluster, Client Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPumpConfigControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Pump Configuration and Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPumpConfigControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Pump Configuration and Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPumpConfigControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Client Tick
 *
 * Pump Configuration and Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPumpConfigControlClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Pump Configuration and Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPumpConfigControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Pump Configuration and Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPumpConfigControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Server Init
 *
 * Pump Configuration and Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPumpConfigControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Pump Configuration and Control cluster, Server Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPumpConfigControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Pump Configuration and Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPumpConfigControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Pump Configuration and Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPumpConfigControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Server Tick
 *
 * Pump Configuration and Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPumpConfigControlClusterServerTickCallback(int8u endpoint);

/** @} END Pump Configuration and Control Cluster Callbacks */

/** @name Thermostat Cluster Callbacks */
// @{

/** @brief Clear Weekly Schedule
 *
 * 
 *
 */
boolean emberAfThermostatClusterClearWeeklyScheduleCallback(void);
/** @brief Client Attribute Changed
 *
 * Thermostat cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Thermostat cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Client Init
 *
 * Thermostat cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Thermostat cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Thermostat cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Thermostat cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Client Tick
 *
 * Thermostat cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatClusterClientTickCallback(int8u endpoint);
/** @brief Current Weekly Schedule
 *
 * 
 *
 * @param numberOfTransitionsForSequence   Ver.: always
 * @param dayOfWeekForSequence   Ver.: always
 * @param modeForSequence   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfThermostatClusterCurrentWeeklyScheduleCallback(int8u numberOfTransitionsForSequence,
                                                              int8u dayOfWeekForSequence,
                                                              int8u modeForSequence,
                                                              int8u* payload);
/** @brief Get Relay Status Log
 *
 * 
 *
 */
boolean emberAfThermostatClusterGetRelayStatusLogCallback(void);
/** @brief Get Weekly Schedule
 *
 * 
 *
 * @param daysToReturn   Ver.: always
 * @param modeToReturn   Ver.: always
 */
boolean emberAfThermostatClusterGetWeeklyScheduleCallback(int8u daysToReturn,
                                                          int8u modeToReturn);
/** @brief Relay Status Log
 *
 * 
 *
 * @param timeOfDay   Ver.: always
 * @param relayStatus   Ver.: always
 * @param localTemperature   Ver.: always
 * @param humidityInPercentage   Ver.: always
 * @param setpoint   Ver.: always
 * @param unreadEntries   Ver.: always
 */
boolean emberAfThermostatClusterRelayStatusLogCallback(int16u timeOfDay,
                                                       int16u relayStatus,
                                                       int16s localTemperature,
                                                       int8u humidityInPercentage,
                                                       int16s setpoint,
                                                       int16u unreadEntries);
/** @brief Server Attribute Changed
 *
 * Thermostat cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Thermostat cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Server Init
 *
 * Thermostat cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Thermostat cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Thermostat cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Thermostat cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Server Tick
 *
 * Thermostat cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatClusterServerTickCallback(int8u endpoint);
/** @brief Set Weekly Schedule
 *
 * 
 *
 * @param numberOfTransitionsForSequence   Ver.: always
 * @param dayOfWeekForSequence   Ver.: always
 * @param modeForSequence   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfThermostatClusterSetWeeklyScheduleCallback(int8u numberOfTransitionsForSequence,
                                                          int8u dayOfWeekForSequence,
                                                          int8u modeForSequence,
                                                          int8u* payload);
/** @brief Setpoint Raise Lower
 *
 * 
 *
 * @param mode   Ver.: always
 * @param amount   Ver.: always
 */
boolean emberAfThermostatClusterSetpointRaiseLowerCallback(int8u mode,
                                                           int8s amount);

/** @} END Thermostat Cluster Callbacks */

/** @name Fan Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Fan Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFanControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Fan Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFanControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Client Init
 *
 * Fan Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFanControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Fan Control cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFanControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Fan Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFanControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Fan Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFanControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Client Tick
 *
 * Fan Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFanControlClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Fan Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFanControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Fan Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFanControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Server Init
 *
 * Fan Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFanControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Fan Control cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFanControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Fan Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFanControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Fan Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFanControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Server Tick
 *
 * Fan Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFanControlClusterServerTickCallback(int8u endpoint);

/** @} END Fan Control Cluster Callbacks */

/** @name Dehumidification Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Dehumidification Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDehumidControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Dehumidification Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDehumidControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Client Init
 *
 * Dehumidification Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDehumidControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Dehumidification Control cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDehumidControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Dehumidification Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDehumidControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame * apsFrame,
                                                           int16u msgLen,
                                                           int8u * message,
                                                           EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Dehumidification Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDehumidControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u * value);
/** @brief Client Tick
 *
 * Dehumidification Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDehumidControlClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Dehumidification Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDehumidControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Dehumidification Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDehumidControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Server Init
 *
 * Dehumidification Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDehumidControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Dehumidification Control cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDehumidControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Dehumidification Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDehumidControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame * apsFrame,
                                                           int16u msgLen,
                                                           int8u * message,
                                                           EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Dehumidification Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDehumidControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u * value);
/** @brief Server Tick
 *
 * Dehumidification Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDehumidControlClusterServerTickCallback(int8u endpoint);

/** @} END Dehumidification Control Cluster Callbacks */

/** @name Thermostat User Interface Configuration Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Thermostat User Interface Configuration cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Thermostat User Interface Configuration cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientDefaultResponseCallback(int8u endpoint,
                                                                   int8u commandId,
                                                                   EmberAfStatus status);
/** @brief Client Init
 *
 * Thermostat User Interface Configuration cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Thermostat User Interface Configuration cluster, Client Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatUiConfigClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                        EmberAfAttributeId attributeId,
                                                                                        int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Thermostat User Interface Configuration cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                               int16u indexOrDestination,
                                                               EmberApsFrame * apsFrame,
                                                               int16u msgLen,
                                                               int8u * message,
                                                               EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Thermostat User Interface Configuration cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatUiConfigClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                EmberAfAttributeType attributeType,
                                                                                int8u size,
                                                                                int8u * value);
/** @brief Client Tick
 *
 * Thermostat User Interface Configuration cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatUiConfigClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Thermostat User Interface Configuration cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Thermostat User Interface Configuration cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerDefaultResponseCallback(int8u endpoint,
                                                                   int8u commandId,
                                                                   EmberAfStatus status);
/** @brief Server Init
 *
 * Thermostat User Interface Configuration cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Thermostat User Interface Configuration cluster, Server Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfThermostatUiConfigClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                        EmberAfAttributeId attributeId,
                                                                                        int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Thermostat User Interface Configuration cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                               int16u indexOrDestination,
                                                               EmberApsFrame * apsFrame,
                                                               int16u msgLen,
                                                               int8u * message,
                                                               EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Thermostat User Interface Configuration cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfThermostatUiConfigClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                EmberAfAttributeType attributeType,
                                                                                int8u size,
                                                                                int8u * value);
/** @brief Server Tick
 *
 * Thermostat User Interface Configuration cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfThermostatUiConfigClusterServerTickCallback(int8u endpoint);

/** @} END Thermostat User Interface Configuration Cluster Callbacks */

/** @name Color Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Color Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfColorControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Color Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfColorControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Client Init
 *
 * Color Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfColorControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Color Control cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfColorControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Color Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfColorControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Color Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfColorControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Client Tick
 *
 * Color Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfColorControlClusterClientTickCallback(int8u endpoint);
/** @brief Color Loop Set
 *
 * 
 *
 * @param updateFlags   Ver.: always
 * @param action   Ver.: always
 * @param direction   Ver.: always
 * @param time   Ver.: always
 * @param startHue   Ver.: always
 */
boolean emberAfColorControlClusterColorLoopSetCallback(int8u updateFlags,
                                                       int8u action,
                                                       int8u direction,
                                                       int16u time,
                                                       int16u startHue);
/** @brief Enhanced Move Hue
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedMoveHueCallback(int8u moveMode,
                                                          int16u rate);
/** @brief Enhanced Move To Hue And Saturation
 *
 * 
 *
 * @param enhancedHue   Ver.: always
 * @param saturation   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedMoveToHueAndSaturationCallback(int16u enhancedHue,
                                                                         int8u saturation,
                                                                         int16u transitionTime);
/** @brief Enhanced Move To Hue
 *
 * 
 *
 * @param enhancedHue   Ver.: always
 * @param direction   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedMoveToHueCallback(int16u enhancedHue,
                                                            int8u direction,
                                                            int16u transitionTime);
/** @brief Enhanced Step Hue
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterEnhancedStepHueCallback(int8u stepMode,
                                                          int16u stepSize,
                                                          int16u transitionTime);
/** @brief Move Color
 *
 * 
 *
 * @param rateX   Ver.: always
 * @param rateY   Ver.: always
 */
boolean emberAfColorControlClusterMoveColorCallback(int16s rateX,
                                                    int16s rateY);
/** @brief Move Color Temperature
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 * @param colorTemperatureMinimum   Ver.: always
 * @param colorTemperatureMaximum   Ver.: always
 */
boolean emberAfColorControlClusterMoveColorTemperatureCallback(int8u moveMode,
                                                               int16u rate,
                                                               int16u colorTemperatureMinimum,
                                                               int16u colorTemperatureMaximum);
/** @brief Move Hue
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfColorControlClusterMoveHueCallback(int8u moveMode,
                                                  int8u rate);
/** @brief Move Saturation
 *
 * 
 *
 * @param moveMode   Ver.: always
 * @param rate   Ver.: always
 */
boolean emberAfColorControlClusterMoveSaturationCallback(int8u moveMode,
                                                         int8u rate);
/** @brief Move To Color
 *
 * 
 *
 * @param colorX   Ver.: always
 * @param colorY   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToColorCallback(int16u colorX,
                                                      int16u colorY,
                                                      int16u transitionTime);
/** @brief Move To Color Temperature
 *
 * 
 *
 * @param colorTemperature   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToColorTemperatureCallback(int16u colorTemperature,
                                                                 int16u transitionTime);
/** @brief Move To Hue And Saturation
 *
 * 
 *
 * @param hue   Ver.: always
 * @param saturation   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToHueAndSaturationCallback(int8u hue,
                                                                 int8u saturation,
                                                                 int16u transitionTime);
/** @brief Move To Hue
 *
 * 
 *
 * @param hue   Ver.: always
 * @param direction   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToHueCallback(int8u hue,
                                                    int8u direction,
                                                    int16u transitionTime);
/** @brief Move To Saturation
 *
 * 
 *
 * @param saturation   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterMoveToSaturationCallback(int8u saturation,
                                                           int16u transitionTime);
/** @brief Server Attribute Changed
 *
 * Color Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfColorControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                              EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Color Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfColorControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                             int8u commandId,
                                                             EmberAfStatus status);
/** @brief Server Init
 *
 * Color Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfColorControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Color Control cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfColorControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Color Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfColorControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                         int16u indexOrDestination,
                                                         EmberApsFrame * apsFrame,
                                                         int16u msgLen,
                                                         int8u * message,
                                                         EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Color Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfColorControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                          EmberAfAttributeId attributeId,
                                                                          EmberAfAttributeType attributeType,
                                                                          int8u size,
                                                                          int8u * value);
/** @brief Server Tick
 *
 * Color Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfColorControlClusterServerTickCallback(int8u endpoint);
/** @brief Step Color
 *
 * 
 *
 * @param stepX   Ver.: always
 * @param stepY   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterStepColorCallback(int16s stepX,
                                                    int16s stepY,
                                                    int16u transitionTime);
/** @brief Step Color Temperatue
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 * @param colorTemperatureMinimum   Ver.: always
 * @param colorTemperatureMaximum   Ver.: always
 */
boolean emberAfColorControlClusterStepColorTemperatueCallback(int8u stepMode,
                                                              int16u stepSize,
                                                              int16u transitionTime,
                                                              int16u colorTemperatureMinimum,
                                                              int16u colorTemperatureMaximum);
/** @brief Step Hue
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterStepHueCallback(int8u stepMode,
                                                  int8u stepSize,
                                                  int8u transitionTime);
/** @brief Step Saturation
 *
 * 
 *
 * @param stepMode   Ver.: always
 * @param stepSize   Ver.: always
 * @param transitionTime   Ver.: always
 */
boolean emberAfColorControlClusterStepSaturationCallback(int8u stepMode,
                                                         int8u stepSize,
                                                         int8u transitionTime);
/** @brief Stop Move Step
 *
 * 
 *
 */
boolean emberAfColorControlClusterStopMoveStepCallback(void);

/** @} END Color Control Cluster Callbacks */

/** @name Ballast Configuration Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Ballast Configuration cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBallastConfigurationClusterClientAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Ballast Configuration cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBallastConfigurationClusterClientDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief Client Init
 *
 * Ballast Configuration cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBallastConfigurationClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Ballast Configuration cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBallastConfigurationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Ballast Configuration cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBallastConfigurationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame * apsFrame,
                                                                 int16u msgLen,
                                                                 int8u * message,
                                                                 EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Ballast Configuration cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBallastConfigurationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u * value);
/** @brief Client Tick
 *
 * Ballast Configuration cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBallastConfigurationClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Ballast Configuration cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBallastConfigurationClusterServerAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Ballast Configuration cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBallastConfigurationClusterServerDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief Server Init
 *
 * Ballast Configuration cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBallastConfigurationClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Ballast Configuration cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBallastConfigurationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Ballast Configuration cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBallastConfigurationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame * apsFrame,
                                                                 int16u msgLen,
                                                                 int8u * message,
                                                                 EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Ballast Configuration cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBallastConfigurationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u * value);
/** @brief Server Tick
 *
 * Ballast Configuration cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBallastConfigurationClusterServerTickCallback(int8u endpoint);

/** @} END Ballast Configuration Cluster Callbacks */

/** @name Illuminance Measurement Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Illuminance Measurement cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Illuminance Measurement cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Illuminance Measurement cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Illuminance Measurement cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Illuminance Measurement cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Illuminance Measurement cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Illuminance Measurement cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Illuminance Measurement cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Illuminance Measurement cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Illuminance Measurement cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Illuminance Measurement cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Illuminance Measurement cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Illuminance Measurement cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Illuminance Measurement cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Illuminance Measurement Cluster Callbacks */

/** @name Illuminance Level Sensing Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Illuminance Level Sensing cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Illuminance Level Sensing cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Client Init
 *
 * Illuminance Level Sensing cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Illuminance Level Sensing cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumLevelSensingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Illuminance Level Sensing cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Illuminance Level Sensing cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumLevelSensingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Client Tick
 *
 * Illuminance Level Sensing cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumLevelSensingClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Illuminance Level Sensing cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Illuminance Level Sensing cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Server Init
 *
 * Illuminance Level Sensing cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Illuminance Level Sensing cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIllumLevelSensingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Illuminance Level Sensing cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Illuminance Level Sensing cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIllumLevelSensingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Server Tick
 *
 * Illuminance Level Sensing cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIllumLevelSensingClusterServerTickCallback(int8u endpoint);

/** @} END Illuminance Level Sensing Cluster Callbacks */

/** @name Temperature Measurement Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Temperature Measurement cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTempMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Temperature Measurement cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTempMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Client Init
 *
 * Temperature Measurement cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTempMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Temperature Measurement cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTempMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Temperature Measurement cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTempMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Temperature Measurement cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTempMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Client Tick
 *
 * Temperature Measurement cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTempMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Temperature Measurement cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTempMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Temperature Measurement cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTempMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Server Init
 *
 * Temperature Measurement cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTempMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Temperature Measurement cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTempMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Temperature Measurement cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTempMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Temperature Measurement cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTempMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Server Tick
 *
 * Temperature Measurement cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTempMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Temperature Measurement Cluster Callbacks */

/** @name Pressure Measurement Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Pressure Measurement cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPressureMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Pressure Measurement cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPressureMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Client Init
 *
 * Pressure Measurement cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPressureMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Pressure Measurement cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPressureMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Pressure Measurement cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPressureMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Pressure Measurement cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPressureMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Client Tick
 *
 * Pressure Measurement cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPressureMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Pressure Measurement cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPressureMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Pressure Measurement cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPressureMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Server Init
 *
 * Pressure Measurement cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPressureMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Pressure Measurement cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPressureMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Pressure Measurement cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPressureMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Pressure Measurement cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPressureMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Server Tick
 *
 * Pressure Measurement cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPressureMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Pressure Measurement Cluster Callbacks */

/** @name Flow Measurement Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Flow Measurement cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFlowMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Flow Measurement cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFlowMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Client Init
 *
 * Flow Measurement cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFlowMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Flow Measurement cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFlowMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Flow Measurement cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFlowMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Flow Measurement cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFlowMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Client Tick
 *
 * Flow Measurement cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFlowMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Flow Measurement cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfFlowMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Flow Measurement cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfFlowMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Server Init
 *
 * Flow Measurement cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfFlowMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Flow Measurement cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfFlowMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Flow Measurement cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfFlowMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Flow Measurement cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfFlowMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Server Tick
 *
 * Flow Measurement cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfFlowMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Flow Measurement Cluster Callbacks */

/** @name Relative Humidity Measurement Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Relative Humidity Measurement cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Relative Humidity Measurement cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                            int8u commandId,
                                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Relative Humidity Measurement cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Relative Humidity Measurement cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                                 EmberAfAttributeId attributeId,
                                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Relative Humidity Measurement cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                        int16u indexOrDestination,
                                                                        EmberApsFrame * apsFrame,
                                                                        int16u msgLen,
                                                                        int8u * message,
                                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Relative Humidity Measurement cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRelativeHumidityMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         EmberAfAttributeType attributeType,
                                                                                         int8u size,
                                                                                         int8u * value);
/** @brief Client Tick
 *
 * Relative Humidity Measurement cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Relative Humidity Measurement cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Relative Humidity Measurement cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                            int8u commandId,
                                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Relative Humidity Measurement cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Relative Humidity Measurement cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                                 EmberAfAttributeId attributeId,
                                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Relative Humidity Measurement cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                        int16u indexOrDestination,
                                                                        EmberApsFrame * apsFrame,
                                                                        int16u msgLen,
                                                                        int8u * message,
                                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Relative Humidity Measurement cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfRelativeHumidityMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         EmberAfAttributeType attributeType,
                                                                                         int8u size,
                                                                                         int8u * value);
/** @brief Server Tick
 *
 * Relative Humidity Measurement cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfRelativeHumidityMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Relative Humidity Measurement Cluster Callbacks */

/** @name Occupancy Sensing Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Occupancy Sensing cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOccupancySensingClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Occupancy Sensing cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOccupancySensingClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Occupancy Sensing cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOccupancySensingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Occupancy Sensing cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOccupancySensingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Occupancy Sensing cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOccupancySensingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Occupancy Sensing cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOccupancySensingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Occupancy Sensing cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOccupancySensingClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Occupancy Sensing cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfOccupancySensingClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Occupancy Sensing cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfOccupancySensingClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Occupancy Sensing cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfOccupancySensingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Occupancy Sensing cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfOccupancySensingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Occupancy Sensing cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfOccupancySensingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Occupancy Sensing cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfOccupancySensingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Occupancy Sensing cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfOccupancySensingClusterServerTickCallback(int8u endpoint);

/** @} END Occupancy Sensing Cluster Callbacks */

/** @name IAS Zone Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * IAS Zone cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasZoneClusterClientAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * IAS Zone cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasZoneClusterClientDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Client Init
 *
 * IAS Zone cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasZoneClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * IAS Zone cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasZoneClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * IAS Zone cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasZoneClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame * apsFrame,
                                                    int16u msgLen,
                                                    int8u * message,
                                                    EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * IAS Zone cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasZoneClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u * value);
/** @brief Client Tick
 *
 * IAS Zone cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasZoneClusterClientTickCallback(int8u endpoint);
/** @brief Initiate Normal Operation Mode
 *
 * 
 *
 */
boolean emberAfIasZoneClusterInitiateNormalOperationModeCallback(void);
/** @brief Initiate Normal Operation Mode Response
 *
 * 
 *
 */
boolean emberAfIasZoneClusterInitiateNormalOperationModeResponseCallback(void);
/** @brief Initiate Test Mode
 *
 * 
 *
 * @param testModeDuration   Ver.: always
 * @param currentZoneSensitivityLevel   Ver.: always
 */
boolean emberAfIasZoneClusterInitiateTestModeCallback(int8u testModeDuration,
                                                      int8u currentZoneSensitivityLevel);
/** @brief Initiate Test Mode Response
 *
 * 
 *
 */
boolean emberAfIasZoneClusterInitiateTestModeResponseCallback(void);
/** @brief Server Attribute Changed
 *
 * IAS Zone cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasZoneClusterServerAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * IAS Zone cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasZoneClusterServerDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Server Init
 *
 * IAS Zone cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasZoneClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * IAS Zone cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasZoneClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * IAS Zone cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasZoneClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame * apsFrame,
                                                    int16u msgLen,
                                                    int8u * message,
                                                    EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * IAS Zone cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasZoneClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u * value);
/** @brief Server Tick
 *
 * IAS Zone cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasZoneClusterServerTickCallback(int8u endpoint);
/** @brief Zone Enroll Request
 *
 * 
 *
 * @param zoneType   Ver.: always
 * @param manufacturerCode   Ver.: always
 */
boolean emberAfIasZoneClusterZoneEnrollRequestCallback(int16u zoneType,
                                                       int16u manufacturerCode);
/** @brief Zone Enroll Response
 *
 * 
 *
 * @param enrollResponseCode   Ver.: always
 * @param zoneId   Ver.: always
 */
boolean emberAfIasZoneClusterZoneEnrollResponseCallback(int8u enrollResponseCode,
                                                        int8u zoneId);
/** @brief Zone Status Change Notification
 *
 * 
 *
 * @param zoneStatus   Ver.: always
 * @param extendedStatus   Ver.: always
 * @param zoneId   Ver.: since ha-1.2-05-3520-29
 * @param delay   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfIasZoneClusterZoneStatusChangeNotificationCallback(int16u zoneStatus,
                                                                  int8u extendedStatus,
                                                                  int8u zoneId,
                                                                  int16u delay);

/** @} END IAS Zone Cluster Callbacks */

/** @name IAS ACE Cluster Callbacks */
// @{

/** @brief Arm
 *
 * 
 *
 * @param armMode   Ver.: always
 * @param armDisarmCode   Ver.: since ha-1.2-05-3520-29
 * @param zoneId   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfIasAceClusterArmCallback(int8u armMode,
                                        int8u* armDisarmCode,
                                        int8u zoneId);
/** @brief Arm Response
 *
 * 
 *
 * @param armNotification   Ver.: always
 */
boolean emberAfIasAceClusterArmResponseCallback(int8u armNotification);
/** @brief Bypass
 *
 * 
 *
 * @param numberOfZones   Ver.: always
 * @param zoneIds   Ver.: always
 * @param armDisarmCode   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterBypassCallback(int8u numberOfZones,
                                           int8u* zoneIds,
                                           int8u* armDisarmCode);
/** @brief Bypass Response
 *
 * 
 *
 * @param numberOfZones   Ver.: always
 * @param bypassResult   Ver.: always
 */
boolean emberAfIasAceClusterBypassResponseCallback(int8u numberOfZones,
                                                   int8u* bypassResult);
/** @brief Client Attribute Changed
 *
 * IAS ACE cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasAceClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * IAS ACE cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasAceClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Client Init
 *
 * IAS ACE cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasAceClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * IAS ACE cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasAceClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * IAS ACE cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasAceClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * IAS ACE cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasAceClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Client Tick
 *
 * IAS ACE cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasAceClusterClientTickCallback(int8u endpoint);
/** @brief Emergency
 *
 * 
 *
 */
boolean emberAfIasAceClusterEmergencyCallback(void);
/** @brief Fire
 *
 * 
 *
 */
boolean emberAfIasAceClusterFireCallback(void);
/** @brief Get Bypassed Zone List
 *
 * 
 *
 */
boolean emberAfIasAceClusterGetBypassedZoneListCallback(void);
/** @brief Get Panel Status
 *
 * 
 *
 */
boolean emberAfIasAceClusterGetPanelStatusCallback(void);
/** @brief Get Panel Status Response
 *
 * 
 *
 * @param panelStatus   Ver.: always
 * @param secondsRemaining   Ver.: always
 * @param audibleNotification   Ver.: always
 * @param alarmStatus   Ver.: always
 */
boolean emberAfIasAceClusterGetPanelStatusResponseCallback(int8u panelStatus,
                                                           int8u secondsRemaining,
                                                           int8u audibleNotification,
                                                           int8u alarmStatus);
/** @brief Get Zone Id Map
 *
 * 
 *
 */
boolean emberAfIasAceClusterGetZoneIdMapCallback(void);
/** @brief Get Zone Id Map Response
 *
 * 
 *
 * @param section0   Ver.: always
 * @param section1   Ver.: always
 * @param section2   Ver.: always
 * @param section3   Ver.: always
 * @param section4   Ver.: always
 * @param section5   Ver.: always
 * @param section6   Ver.: always
 * @param section7   Ver.: always
 * @param section8   Ver.: always
 * @param section9   Ver.: always
 * @param section10   Ver.: always
 * @param section11   Ver.: always
 * @param section12   Ver.: always
 * @param section13   Ver.: always
 * @param section14   Ver.: always
 * @param section15   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneIdMapResponseCallback(int16u section0,
                                                         int16u section1,
                                                         int16u section2,
                                                         int16u section3,
                                                         int16u section4,
                                                         int16u section5,
                                                         int16u section6,
                                                         int16u section7,
                                                         int16u section8,
                                                         int16u section9,
                                                         int16u section10,
                                                         int16u section11,
                                                         int16u section12,
                                                         int16u section13,
                                                         int16u section14,
                                                         int16u section15);
/** @brief Get Zone Information
 *
 * 
 *
 * @param zoneId   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneInformationCallback(int8u zoneId);
/** @brief Get Zone Information Response
 *
 * 
 *
 * @param zoneId   Ver.: always
 * @param zoneType   Ver.: always
 * @param ieeeAddress   Ver.: always
 * @param zoneLabel   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterGetZoneInformationResponseCallback(int8u zoneId,
                                                               int16u zoneType,
                                                               int8u* ieeeAddress,
                                                               int8u* zoneLabel);
/** @brief Get Zone Status
 *
 * 
 *
 * @param startingZoneId   Ver.: always
 * @param maxNumberOfZoneIds   Ver.: always
 * @param zoneStatusMaskFlag   Ver.: always
 * @param zoneStatusMask   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneStatusCallback(int8u startingZoneId,
                                                  int8u maxNumberOfZoneIds,
                                                  int8u zoneStatusMaskFlag,
                                                  int16u zoneStatusMask);
/** @brief Get Zone Status Response
 *
 * 
 *
 * @param zoneStatusComplete   Ver.: always
 * @param numberOfZones   Ver.: always
 * @param zoneStatusResult   Ver.: always
 */
boolean emberAfIasAceClusterGetZoneStatusResponseCallback(int8u zoneStatusComplete,
                                                          int8u numberOfZones,
                                                          int8u* zoneStatusResult);
/** @brief Panel Status Changed
 *
 * 
 *
 * @param panelStatus   Ver.: always
 * @param secondsRemaining   Ver.: always
 * @param audibleNotification   Ver.: since ha-1.2.1-05-3520-30
 * @param alarmStatus   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterPanelStatusChangedCallback(int8u panelStatus,
                                                       int8u secondsRemaining,
                                                       int8u audibleNotification,
                                                       int8u alarmStatus);
/** @brief Panic
 *
 * 
 *
 */
boolean emberAfIasAceClusterPanicCallback(void);
/** @brief Server Attribute Changed
 *
 * IAS ACE cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasAceClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * IAS ACE cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasAceClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Server Init
 *
 * IAS ACE cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasAceClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * IAS ACE cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasAceClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * IAS ACE cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasAceClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * IAS ACE cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasAceClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Server Tick
 *
 * IAS ACE cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasAceClusterServerTickCallback(int8u endpoint);
/** @brief Set Bypassed Zone List
 *
 * 
 *
 * @param numberOfZones   Ver.: always
 * @param zoneIds   Ver.: always
 */
boolean emberAfIasAceClusterSetBypassedZoneListCallback(int8u numberOfZones,
                                                        int8u* zoneIds);
/** @brief Zone Status Changed
 *
 * 
 *
 * @param zoneId   Ver.: always
 * @param zoneStatus   Ver.: always
 * @param audibleNotification   Ver.: since ha-1.2.1-05-3520-30
 * @param zoneLabel   Ver.: since ha-1.2.1-05-3520-30
 */
boolean emberAfIasAceClusterZoneStatusChangedCallback(int8u zoneId,
                                                      int16u zoneStatus,
                                                      int8u audibleNotification,
                                                      int8u* zoneLabel);

/** @} END IAS ACE Cluster Callbacks */

/** @name IAS WD Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * IAS WD cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasWdClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * IAS WD cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasWdClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * IAS WD cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasWdClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * IAS WD cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasWdClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * IAS WD cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasWdClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * IAS WD cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasWdClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Client Tick
 *
 * IAS WD cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasWdClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * IAS WD cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIasWdClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * IAS WD cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIasWdClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * IAS WD cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIasWdClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * IAS WD cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIasWdClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * IAS WD cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIasWdClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * IAS WD cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIasWdClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Server Tick
 *
 * IAS WD cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIasWdClusterServerTickCallback(int8u endpoint);
/** @brief Squawk
 *
 * 
 *
 * @param squawkInfo   Ver.: always
 */
boolean emberAfIasWdClusterSquawkCallback(int8u squawkInfo);
/** @brief Start Warning
 *
 * 
 *
 * @param warningInfo   Ver.: always
 * @param warningDuration   Ver.: always
 * @param strobeDutyCycle   Ver.: since ha-1.2-05-3520-29
 * @param strobeLevel   Ver.: since ha-1.2-05-3520-29
 */
boolean emberAfIasWdClusterStartWarningCallback(int8u warningInfo,
                                                int16u warningDuration,
                                                int8u strobeDutyCycle,
                                                int8u strobeLevel);

/** @} END IAS WD Cluster Callbacks */

/** @name Generic Tunnel Cluster Callbacks */
// @{

/** @brief Advertise Protocol Address
 *
 * 
 *
 * @param protocolAddress   Ver.: always
 */
boolean emberAfGenericTunnelClusterAdvertiseProtocolAddressCallback(int8u* protocolAddress);
/** @brief Client Attribute Changed
 *
 * Generic Tunnel cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGenericTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Generic Tunnel cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGenericTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Client Init
 *
 * Generic Tunnel cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGenericTunnelClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Generic Tunnel cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGenericTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Generic Tunnel cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGenericTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame * apsFrame,
                                                          int16u msgLen,
                                                          int8u * message,
                                                          EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Generic Tunnel cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGenericTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u * value);
/** @brief Client Tick
 *
 * Generic Tunnel cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGenericTunnelClusterClientTickCallback(int8u endpoint);
/** @brief Match Protocol Address
 *
 * 
 *
 * @param protocolAddress   Ver.: always
 */
boolean emberAfGenericTunnelClusterMatchProtocolAddressCallback(int8u* protocolAddress);
/** @brief Match Protocol Address Response
 *
 * 
 *
 * @param deviceIeeeAddress   Ver.: always
 * @param protocolAddress   Ver.: always
 */
boolean emberAfGenericTunnelClusterMatchProtocolAddressResponseCallback(int8u* deviceIeeeAddress,
                                                                        int8u* protocolAddress);
/** @brief Server Attribute Changed
 *
 * Generic Tunnel cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGenericTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                               EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Generic Tunnel cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGenericTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                              int8u commandId,
                                                              EmberAfStatus status);
/** @brief Server Init
 *
 * Generic Tunnel cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGenericTunnelClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Generic Tunnel cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGenericTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Generic Tunnel cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGenericTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                          int16u indexOrDestination,
                                                          EmberApsFrame * apsFrame,
                                                          int16u msgLen,
                                                          int8u * message,
                                                          EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Generic Tunnel cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGenericTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           EmberAfAttributeType attributeType,
                                                                           int8u size,
                                                                           int8u * value);
/** @brief Server Tick
 *
 * Generic Tunnel cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGenericTunnelClusterServerTickCallback(int8u endpoint);

/** @} END Generic Tunnel Cluster Callbacks */

/** @name BACnet Protocol Tunnel Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * BACnet Protocol Tunnel cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * BACnet Protocol Tunnel cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief Client Init
 *
 * BACnet Protocol Tunnel cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * BACnet Protocol Tunnel cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * BACnet Protocol Tunnel cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame * apsFrame,
                                                                 int16u msgLen,
                                                                 int8u * message,
                                                                 EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * BACnet Protocol Tunnel cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBacnetProtocolTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u * value);
/** @brief Client Tick
 *
 * BACnet Protocol Tunnel cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * BACnet Protocol Tunnel cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * BACnet Protocol Tunnel cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                                     int8u commandId,
                                                                     EmberAfStatus status);
/** @brief Server Init
 *
 * BACnet Protocol Tunnel cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * BACnet Protocol Tunnel cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                          EmberAfAttributeId attributeId,
                                                                                          int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * BACnet Protocol Tunnel cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                 int16u indexOrDestination,
                                                                 EmberApsFrame * apsFrame,
                                                                 int16u msgLen,
                                                                 int8u * message,
                                                                 EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * BACnet Protocol Tunnel cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBacnetProtocolTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                  EmberAfAttributeId attributeId,
                                                                                  EmberAfAttributeType attributeType,
                                                                                  int8u size,
                                                                                  int8u * value);
/** @brief Server Tick
 *
 * BACnet Protocol Tunnel cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBacnetProtocolTunnelClusterServerTickCallback(int8u endpoint);
/** @brief Transfer Npdu
 *
 * 
 *
 * @param npdu   Ver.: always
 */
boolean emberAfBacnetProtocolTunnelClusterTransferNpduCallback(int8u* npdu);

/** @} END BACnet Protocol Tunnel Cluster Callbacks */

/** @name 11073 Protocol Tunnel Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * 11073 Protocol Tunnel cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * 11073 Protocol Tunnel cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Client Init
 *
 * 11073 Protocol Tunnel cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * 11073 Protocol Tunnel cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * 11073 Protocol Tunnel cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * 11073 Protocol Tunnel cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAf11073ProtocolTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Client Tick
 *
 * 11073 Protocol Tunnel cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterClientTickCallback(int8u endpoint);
/** @brief Connect Request
 *
 * 
 *
 * @param connectControl   Ver.: always
 * @param idleTimeout   Ver.: always
 * @param managerTarget   Ver.: always
 * @param managerEndpoint   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterConnectRequestCallback(int8u connectControl,
                                                                int16u idleTimeout,
                                                                int8u* managerTarget,
                                                                int8u managerEndpoint);
/** @brief Connect Status Notification
 *
 * 
 *
 * @param connectStatus   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterConnectStatusNotificationCallback(int8u connectStatus);
/** @brief Disconnect Request
 *
 * 
 *
 * @param managerIEEEAddress   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterDisconnectRequestCallback(int8u* managerIEEEAddress);
/** @brief Server Attribute Changed
 *
 * 11073 Protocol Tunnel cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * 11073 Protocol Tunnel cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Server Init
 *
 * 11073 Protocol Tunnel cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * 11073 Protocol Tunnel cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * 11073 Protocol Tunnel cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * 11073 Protocol Tunnel cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAf11073ProtocolTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Server Tick
 *
 * 11073 Protocol Tunnel cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAf11073ProtocolTunnelClusterServerTickCallback(int8u endpoint);
/** @brief Transfer A P D U
 *
 * 
 *
 * @param apdu   Ver.: always
 */
boolean emberAf11073ProtocolTunnelClusterTransferAPDUCallback(int8u* apdu);

/** @} END 11073 Protocol Tunnel Cluster Callbacks */

/** @name ISO 7816 Protocol Tunnel Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * ISO 7816 Protocol Tunnel cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * ISO 7816 Protocol Tunnel cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * ISO 7816 Protocol Tunnel cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * ISO 7816 Protocol Tunnel cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * ISO 7816 Protocol Tunnel cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame * apsFrame,
                                                                  int16u msgLen,
                                                                  int8u * message,
                                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * ISO 7816 Protocol Tunnel cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIso7816ProtocolTunnelClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u * value);
/** @brief Client Tick
 *
 * ISO 7816 Protocol Tunnel cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterClientTickCallback(int8u endpoint);
/** @brief Extract Smart Card
 *
 * 
 *
 */
boolean emberAfIso7816ProtocolTunnelClusterExtractSmartCardCallback(void);
/** @brief Insert Smart Card
 *
 * 
 *
 */
boolean emberAfIso7816ProtocolTunnelClusterInsertSmartCardCallback(void);
/** @brief Server Attribute Changed
 *
 * ISO 7816 Protocol Tunnel cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * ISO 7816 Protocol Tunnel cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * ISO 7816 Protocol Tunnel cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * ISO 7816 Protocol Tunnel cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * ISO 7816 Protocol Tunnel cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame * apsFrame,
                                                                  int16u msgLen,
                                                                  int8u * message,
                                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * ISO 7816 Protocol Tunnel cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfIso7816ProtocolTunnelClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u * value);
/** @brief Server Tick
 *
 * ISO 7816 Protocol Tunnel cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfIso7816ProtocolTunnelClusterServerTickCallback(int8u endpoint);
/** @brief Transfer Apdu
 *
 * 
 *
 * @param apdu   Ver.: always
 */
boolean emberAfIso7816ProtocolTunnelClusterTransferApduCallback(int8u* apdu);

/** @} END ISO 7816 Protocol Tunnel Cluster Callbacks */

/** @name Price Cluster Callbacks */
// @{

/** @brief Cancel Tariff
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterCancelTariffCallback(int32u providerId,
                                                int32u issuerTariffId,
                                                int8u tariffType);
/** @brief Client Attribute Changed
 *
 * Price cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPriceClusterClientAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Price cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPriceClusterClientDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * Price cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPriceClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Price cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPriceClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Price cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPriceClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Price cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPriceClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Client Tick
 *
 * Price cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPriceClusterClientTickCallback(int8u endpoint);
/** @brief Cpp Event Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param cppAuth   Ver.: always
 */
boolean emberAfPriceClusterCppEventResponseCallback(int32u issuerEventId,
                                                    int8u cppAuth);
/** @brief Get Billing Period
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetBillingPeriodCallback(int32u startTime,
                                                    int32u minIssuerEventId,
                                                    int8u numberOfCommands,
                                                    int8u tariffType);
/** @brief Get Block Periods
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetBlockPeriodsCallback(int32u startTime,
                                                   int8u numberOfEvents,
                                                   int8u tariffType);
/** @brief Get Block Thresholds
 *
 * 
 *
 * @param issuerTariffId   Ver.: always
 */
boolean emberAfPriceClusterGetBlockThresholdsCallback(int32u issuerTariffId);
/** @brief Get C O2 Value
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetCO2ValueCallback(int32u earliestStartTime,
                                               int32u minIssuerEventId,
                                               int8u numberOfCommands,
                                               int8u tariffType);
/** @brief Get Calorific Value
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 */
boolean emberAfPriceClusterGetCalorificValueCallback(int32u earliestStartTime,
                                                     int32u minIssuerEventId,
                                                     int8u numberOfCommands);
/** @brief Get Consolidated Bill
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetConsolidatedBillCallback(int32u startTime,
                                                       int32u minIssuerEventId,
                                                       int8u numberOfCommands,
                                                       int8u tariffType);
/** @brief Get Conversion Factor
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 */
boolean emberAfPriceClusterGetConversionFactorCallback(int32u earliestStartTime,
                                                       int32u minIssuerEventId,
                                                       int8u numberOfCommands);
/** @brief Get Credit Payment
 *
 * 
 *
 * @param latestEndTime   Ver.: always
 * @param numberOfRecords   Ver.: always
 */
boolean emberAfPriceClusterGetCreditPaymentCallback(int32u latestEndTime,
                                                    int8u numberOfRecords);
/** @brief Get Currency Conversion Command
 *
 * 
 *
 */
boolean emberAfPriceClusterGetCurrencyConversionCommandCallback(void);
/** @brief Get Current Price
 *
 * 
 *
 * @param commandOptions   Ver.: always
 */
boolean emberAfPriceClusterGetCurrentPriceCallback(int8u commandOptions);
/** @brief Get Price Matrix
 *
 * 
 *
 * @param issuerTariffId   Ver.: always
 */
boolean emberAfPriceClusterGetPriceMatrixCallback(int32u issuerTariffId);
/** @brief Get Scheduled Prices
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 */
boolean emberAfPriceClusterGetScheduledPricesCallback(int32u startTime,
                                                      int8u numberOfEvents);
/** @brief Get Tariff Cancellation
 *
 * 
 *
 */
boolean emberAfPriceClusterGetTariffCancellationCallback(void);
/** @brief Get Tariff Information
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterGetTariffInformationCallback(int32u earliestStartTime,
                                                        int32u minIssuerEventId,
                                                        int8u numberOfCommands,
                                                        int8u tariffType);
/** @brief Get Tier Labels
 *
 * 
 *
 * @param issuerTariffId   Ver.: always
 */
boolean emberAfPriceClusterGetTierLabelsCallback(int32u issuerTariffId);
/** @brief Price Acknowledgement
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param priceAckTime   Ver.: always
 * @param control   Ver.: always
 */
boolean emberAfPriceClusterPriceAcknowledgementCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int32u priceAckTime,
                                                        int8u control);
/** @brief Publish Billing Period
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param billingPeriodStartTime   Ver.: always
 * @param billingPeriodDuration   Ver.: always
 * @param tariffType   Ver.: always
 */
boolean emberAfPriceClusterPublishBillingPeriodCallback(int32u issuerEventId,
                                                        int32u billingPeriodStartTime,
                                                        int32u billingPeriodDuration,
                                                        int8u tariffType);
/** @brief Publish Block Period
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param blockPeriodStartTime   Ver.: always
 * @param blockPeriodDuration   Ver.: always
 * @param numberOfPriceTiersAndNumberOfBlockThresholds   Ver.: always
 * @param blockPeriodControl   Ver.: always
 * @param tariffType   Ver.: since se-1.2-12-0517-08
 * @param tariffResolutionPeriod   Ver.: since se-1.2-12-0517-08
 */
boolean emberAfPriceClusterPublishBlockPeriodCallback(int32u providerId,
                                                      int32u issuerEventId,
                                                      int32u blockPeriodStartTime,
                                                      int32u blockPeriodDuration,
                                                      int8u numberOfPriceTiersAndNumberOfBlockThresholds,
                                                      int8u blockPeriodControl,
                                                      int8u tariffType,
                                                      int8u tariffResolutionPeriod);
/** @brief Publish Block Thresholds
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param subPayloadControl   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfPriceClusterPublishBlockThresholdsCallback(int32u providerId,
                                                          int32u issuerEventId,
                                                          int32u startTime,
                                                          int32u issuerTariffId,
                                                          int8u commandIndex,
                                                          int8u numberOfCommands,
                                                          int8u subPayloadControl,
                                                          int8u* payload);
/** @brief Publish C O2 Value
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param tariffType   Ver.: always
 * @param cO2Value   Ver.: always
 * @param cO2ValueUnit   Ver.: always
 * @param cO2ValueTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishCO2ValueCallback(int32u issuerEventId,
                                                   int32u startTime,
                                                   int8u tariffType,
                                                   int32u cO2Value,
                                                   int8u cO2ValueUnit,
                                                   int8u cO2ValueTrailingDigit);
/** @brief Publish Calorific Value
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param calorificValue   Ver.: always
 * @param calorificValueUnit   Ver.: always
 * @param calorificValueTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishCalorificValueCallback(int32u issuerEventId,
                                                         int32u startTime,
                                                         int32u calorificValue,
                                                         int8u calorificValueUnit,
                                                         int8u calorificValueTrailingDigit);
/** @brief Publish Consolidated Bill
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param billingPeriodStartTime   Ver.: always
 * @param billingPeriodDuration   Ver.: always
 * @param tariffType   Ver.: always
 * @param consolidatedBill   Ver.: always
 * @param currency   Ver.: always
 * @param billTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishConsolidatedBillCallback(int32u issuerEventId,
                                                           int32u billingPeriodStartTime,
                                                           int32u billingPeriodDuration,
                                                           int8u tariffType,
                                                           int32u consolidatedBill,
                                                           int16u currency,
                                                           int8u billTrailingDigit);
/** @brief Publish Conversion Factor
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param conversionFactor   Ver.: always
 * @param conversionFactorTrailingDigit   Ver.: always
 */
boolean emberAfPriceClusterPublishConversionFactorCallback(int32u issuerEventId,
                                                           int32u startTime,
                                                           int32u conversionFactor,
                                                           int8u conversionFactorTrailingDigit);
/** @brief Publish Cpp Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param tariffType   Ver.: always
 * @param cppPriceTier   Ver.: always
 * @param cppAuth   Ver.: always
 */
boolean emberAfPriceClusterPublishCppEventCallback(int32u issuerEventId,
                                                   int32u startTime,
                                                   int16u durationInMinutes,
                                                   int8u tariffType,
                                                   int8u cppPriceTier,
                                                   int8u cppAuth);
/** @brief Publish Credit Payment
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param creditPaymentDueDate   Ver.: always
 * @param creditPaymentOverDueAmount   Ver.: always
 * @param creditPaymentStatus   Ver.: always
 * @param creditPayment   Ver.: always
 * @param creditPaymentDate   Ver.: always
 * @param creditPaymentRef   Ver.: always
 */
boolean emberAfPriceClusterPublishCreditPaymentCallback(int32u issuerEventId,
                                                        int32u creditPaymentDueDate,
                                                        int32u creditPaymentOverDueAmount,
                                                        int8u creditPaymentStatus,
                                                        int32u creditPayment,
                                                        int32u creditPaymentDate,
                                                        int8u* creditPaymentRef);
/** @brief Publish Currency Conversion
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param utcTime   Ver.: always
 * @param oldCurrency   Ver.: always
 * @param newCurrency   Ver.: always
 * @param conversionFactor   Ver.: always
 * @param conversionFactorTrailingDigit   Ver.: always
 * @param currencyChangeControlFlags   Ver.: always
 */
boolean emberAfPriceClusterPublishCurrencyConversionCallback(int32u issuerEventId,
                                                             int32u utcTime,
                                                             int16u oldCurrency,
                                                             int16u newCurrency,
                                                             int32u conversionFactor,
                                                             int8u conversionFactorTrailingDigit,
                                                             int32u currencyChangeControlFlags);
/** @brief Publish Price
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param rateLabel   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param currentTime   Ver.: always
 * @param unitOfMeasure   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigitAndPriceTier   Ver.: always
 * @param numberOfPriceTiersAndRegisterTier   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param price   Ver.: always
 * @param priceRatio   Ver.: always
 * @param generationPrice   Ver.: always
 * @param generationPriceRatio   Ver.: always
 * @param alternateCostDelivered   Ver.: since se-1.0-07-5356-15
 * @param alternateCostUnit   Ver.: since se-1.0-07-5356-15
 * @param alternateCostTrailingDigit   Ver.: since se-1.0-07-5356-15
 * @param numberOfBlockThresholds   Ver.: since se-1.1-07-5356-16
 * @param priceControl   Ver.: since se-1.1-07-5356-16
 * @param numberOfGenerationTiers   Ver.: since se-1.2-12-0517-08
 * @param generationTier   Ver.: since se-1.2-12-0517-08
 * @param extendedNumberOfPriceTiers   Ver.: since se-1.2-12-0517-08
 * @param extendedPriceTier   Ver.: since se-1.2-12-0517-08
 * @param extendedRegisterTier   Ver.: since se-1.2-12-0517-08
 */
boolean emberAfPriceClusterPublishPriceCallback(int32u providerId,
                                                int8u* rateLabel,
                                                int32u issuerEventId,
                                                int32u currentTime,
                                                int8u unitOfMeasure,
                                                int16u currency,
                                                int8u priceTrailingDigitAndPriceTier,
                                                int8u numberOfPriceTiersAndRegisterTier,
                                                int32u startTime,
                                                int16u durationInMinutes,
                                                int32u price,
                                                int8u priceRatio,
                                                int32u generationPrice,
                                                int8u generationPriceRatio,
                                                int32u alternateCostDelivered,
                                                int8u alternateCostUnit,
                                                int8u alternateCostTrailingDigit,
                                                int8u numberOfBlockThresholds,
                                                int8u priceControl,
                                                int8u numberOfGenerationTiers,
                                                int8u generationTier,
                                                int8u extendedNumberOfPriceTiers,
                                                int8u extendedPriceTier,
                                                int8u extendedRegisterTier);
/** @brief Publish Price Matrix
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param subPayloadControl   Ver.: always
 * @param payload   Ver.: always
 */
boolean emberAfPriceClusterPublishPriceMatrixCallback(int32u providerId,
                                                      int32u issuerEventId,
                                                      int32u startTime,
                                                      int32u issuerTariffId,
                                                      int8u commandIndex,
                                                      int8u numberOfCommands,
                                                      int8u subPayloadControl,
                                                      int8u* payload);
/** @brief Publish Tariff Information
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param startTime   Ver.: always
 * @param tariffTypeChargingScheme   Ver.: always
 * @param tariffLabel   Ver.: always
 * @param numberOfPriceTiersInUse   Ver.: always
 * @param numberOfBlockThresholdsInUse   Ver.: always
 * @param unitOfMeasure   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 * @param standingCharge   Ver.: always
 * @param tierBlockMode   Ver.: always
 * @param blockThresholdMultiplier   Ver.: always
 * @param blockThresholdDivisor   Ver.: always
 */
boolean emberAfPriceClusterPublishTariffInformationCallback(int32u providerId,
                                                            int32u issuerEventId,
                                                            int32u issuerTariffId,
                                                            int32u startTime,
                                                            int8u tariffTypeChargingScheme,
                                                            int8u* tariffLabel,
                                                            int8u numberOfPriceTiersInUse,
                                                            int8u numberOfBlockThresholdsInUse,
                                                            int8u unitOfMeasure,
                                                            int16u currency,
                                                            int8u priceTrailingDigit,
                                                            int32u standingCharge,
                                                            int8u tierBlockMode,
                                                            int32u blockThresholdMultiplier,
                                                            int32u blockThresholdDivisor);
/** @brief Publish Tier Labels
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerTariffId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param numberOfLabels   Ver.: always
 * @param tierLabelsPayload   Ver.: always
 */
boolean emberAfPriceClusterPublishTierLabelsCallback(int32u providerId,
                                                     int32u issuerEventId,
                                                     int32u issuerTariffId,
                                                     int8u commandIndex,
                                                     int8u numberOfCommands,
                                                     int8u numberOfLabels,
                                                     int8u* tierLabelsPayload);
/** @brief Server Attribute Changed
 *
 * Price cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPriceClusterServerAttributeChangedCallback(int8u endpoint,
                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Price cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPriceClusterServerDefaultResponseCallback(int8u endpoint,
                                                      int8u commandId,
                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * Price cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPriceClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Price cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPriceClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId,
                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Price cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPriceClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                  int16u indexOrDestination,
                                                  EmberApsFrame * apsFrame,
                                                  int16u msgLen,
                                                  int8u * message,
                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Price cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPriceClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId,
                                                                   EmberAfAttributeType attributeType,
                                                                   int8u size,
                                                                   int8u * value);
/** @brief Server Tick
 *
 * Price cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPriceClusterServerTickCallback(int8u endpoint);

/** @} END Price Cluster Callbacks */

/** @name Demand Response and Load Control Cluster Callbacks */
// @{

/** @brief Cancel All Load Control Events
 *
 * 
 *
 * @param cancelControl   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterCancelAllLoadControlEventsCallback(int8u cancelControl);
/** @brief Cancel Load Control Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param deviceClass   Ver.: always
 * @param utilityEnrollmentGroup   Ver.: always
 * @param cancelControl   Ver.: always
 * @param effectiveTime   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterCancelLoadControlEventCallback(int32u issuerEventId,
                                                                              int16u deviceClass,
                                                                              int8u utilityEnrollmentGroup,
                                                                              int8u cancelControl,
                                                                              int32u effectiveTime);
/** @brief Client Attribute Changed
 *
 * Demand Response and Load Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Demand Response and Load Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                          int8u commandId,
                                                                          EmberAfStatus status);
/** @brief Client Init
 *
 * Demand Response and Load Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Demand Response and Load Control cluster, Client Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                               EmberAfAttributeId attributeId,
                                                                                               int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Demand Response and Load Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                      int16u indexOrDestination,
                                                                      EmberApsFrame * apsFrame,
                                                                      int16u msgLen,
                                                                      int8u * message,
                                                                      EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Demand Response and Load Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDemandResponseLoadControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       EmberAfAttributeType attributeType,
                                                                                       int8u size,
                                                                                       int8u * value);
/** @brief Client Tick
 *
 * Demand Response and Load Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterClientTickCallback(int8u endpoint);
/** @brief Get Scheduled Events
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterGetScheduledEventsCallback(int32u startTime,
                                                                          int8u numberOfEvents);
/** @brief Load Control Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param deviceClass   Ver.: always
 * @param utilityEnrollmentGroup   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param criticalityLevel   Ver.: always
 * @param coolingTemperatureOffset   Ver.: always
 * @param heatingTemperatureOffset   Ver.: always
 * @param coolingTemperatureSetPoint   Ver.: always
 * @param heatingTemperatureSetPoint   Ver.: always
 * @param averageLoadAdjustmentPercentage   Ver.: always
 * @param dutyCycle   Ver.: always
 * @param eventControl   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterLoadControlEventCallback(int32u issuerEventId,
                                                                        int16u deviceClass,
                                                                        int8u utilityEnrollmentGroup,
                                                                        int32u startTime,
                                                                        int16u durationInMinutes,
                                                                        int8u criticalityLevel,
                                                                        int8u coolingTemperatureOffset,
                                                                        int8u heatingTemperatureOffset,
                                                                        int16s coolingTemperatureSetPoint,
                                                                        int16s heatingTemperatureSetPoint,
                                                                        int8s averageLoadAdjustmentPercentage,
                                                                        int8u dutyCycle,
                                                                        int8u eventControl);
/** @brief Report Event Status
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param eventStatus   Ver.: always
 * @param eventStatusTime   Ver.: always
 * @param criticalityLevelApplied   Ver.: always
 * @param coolingTemperatureSetPointApplied   Ver.: always
 * @param heatingTemperatureSetPointApplied   Ver.: always
 * @param averageLoadAdjustmentPercentageApplied   Ver.: always
 * @param dutyCycleApplied   Ver.: always
 * @param eventControl   Ver.: always
 * @param signatureType   Ver.: always
 * @param signature   Ver.: always
 */
boolean emberAfDemandResponseLoadControlClusterReportEventStatusCallback(int32u issuerEventId,
                                                                         int8u eventStatus,
                                                                         int32u eventStatusTime,
                                                                         int8u criticalityLevelApplied,
                                                                         int16s coolingTemperatureSetPointApplied,
                                                                         int16s heatingTemperatureSetPointApplied,
                                                                         int8s averageLoadAdjustmentPercentageApplied,
                                                                         int8u dutyCycleApplied,
                                                                         int8u eventControl,
                                                                         int8u signatureType,
                                                                         int8u* signature);
/** @brief Server Attribute Changed
 *
 * Demand Response and Load Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                           EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Demand Response and Load Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                          int8u commandId,
                                                                          EmberAfStatus status);
/** @brief Server Init
 *
 * Demand Response and Load Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Demand Response and Load Control cluster, Server Manufacturer Specific
 * Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                               EmberAfAttributeId attributeId,
                                                                                               int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Demand Response and Load Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                      int16u indexOrDestination,
                                                                      EmberApsFrame * apsFrame,
                                                                      int16u msgLen,
                                                                      int8u * message,
                                                                      EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Demand Response and Load Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDemandResponseLoadControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       EmberAfAttributeType attributeType,
                                                                                       int8u size,
                                                                                       int8u * value);
/** @brief Server Tick
 *
 * Demand Response and Load Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDemandResponseLoadControlClusterServerTickCallback(int8u endpoint);

/** @} END Demand Response and Load Control Cluster Callbacks */

/** @name Simple Metering Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Simple Metering cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSimpleMeteringClusterClientAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Simple Metering cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSimpleMeteringClusterClientDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Client Init
 *
 * Simple Metering cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSimpleMeteringClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Simple Metering cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSimpleMeteringClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Simple Metering cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSimpleMeteringClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame * apsFrame,
                                                           int16u msgLen,
                                                           int8u * message,
                                                           EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Simple Metering cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSimpleMeteringClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u * value);
/** @brief Client Tick
 *
 * Simple Metering cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSimpleMeteringClusterClientTickCallback(int8u endpoint);
/** @brief Configure Mirror
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param changeReportingProfile   Ver.: always
 * @param mirrorNotificationReporting   Ver.: always
 * @param notificationScheme   Ver.: always
 */
boolean emberAfSimpleMeteringClusterConfigureMirrorCallback(int32u issuerEventId,
                                                            int32u changeReportingProfile,
                                                            int8u mirrorNotificationReporting,
                                                            int8u notificationScheme);
/** @brief Configure Notification Flags
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param notificationScheme   Ver.: always
 * @param notificationFlagAttributeId   Ver.: always
 * @param clusterId   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param numberOfCommands   Ver.: always
 * @param commandIds   Ver.: always
 */
boolean emberAfSimpleMeteringClusterConfigureNotificationFlagsCallback(int32u issuerEventId,
                                                                       int8u notificationScheme,
                                                                       int16u notificationFlagAttributeId,
                                                                       int16u clusterId,
                                                                       int16u manufacturerCode,
                                                                       int8u numberOfCommands,
                                                                       int8u* commandIds);
/** @brief Configure Notification Scheme
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param notificationScheme   Ver.: always
 * @param notificationFlagOrder   Ver.: always
 */
boolean emberAfSimpleMeteringClusterConfigureNotificationSchemeCallback(int32u issuerEventId,
                                                                        int8u notificationScheme,
                                                                        int32u notificationFlagOrder);
/** @brief Get Notification Flag
 *
 * 
 *
 * @param notificationScheme   Ver.: always
 * @param notificationFlagAttributeId   Ver.: always
 * @param notificationFlagsN   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetNotificationFlagCallback(int8u notificationScheme,
                                                                int16u notificationFlagAttributeId,
                                                                int32u notificationFlagsN);
/** @brief Get Profile
 *
 * 
 *
 * @param intervalChannel   Ver.: always
 * @param endTime   Ver.: always
 * @param numberOfPeriods   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetProfileCallback(int8u intervalChannel,
                                                       int32u endTime,
                                                       int8u numberOfPeriods);
/** @brief Get Profile Response
 *
 * 
 *
 * @param endTime   Ver.: always
 * @param status   Ver.: always
 * @param profileIntervalPeriod   Ver.: always
 * @param numberOfPeriodsDelivered   Ver.: always
 * @param intervals   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetProfileResponseCallback(int32u endTime,
                                                               int8u status,
                                                               int8u profileIntervalPeriod,
                                                               int8u numberOfPeriodsDelivered,
                                                               int8u* intervals);
/** @brief Get Sampled Data
 *
 * 
 *
 * @param sampleRequestId   Ver.: always
 * @param sampleStartTime   Ver.: always
 * @param sampleType   Ver.: always
 * @param numberOfSamples   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetSampledDataCallback(int32u sampleRequestId,
                                                           int32u sampleStartTime,
                                                           int8u sampleType,
                                                           int16u numberOfSamples);
/** @brief Get Sampled Data Response
 *
 * 
 *
 * @param sampleRequestId   Ver.: always
 * @param sampleStartTime   Ver.: always
 * @param sampleType   Ver.: always
 * @param numberOfSamples   Ver.: always
 * @param samples   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetSampledDataResponseCallback(int32u sampleRequestId,
                                                                   int32u sampleStartTime,
                                                                   int8u sampleType,
                                                                   int16u numberOfSamples,
                                                                   int8u* samples);
/** @brief Get Snapshot
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param snapshotOffset   Ver.: always
 * @param snapshotCause   Ver.: always
 */
boolean emberAfSimpleMeteringClusterGetSnapshotCallback(int32u earliestStartTime,
                                                        int8u snapshotOffset,
                                                        int32u snapshotCause);
/** @brief Mirror Removed
 *
 * 
 *
 * @param endpointId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterMirrorRemovedCallback(int16u endpointId);
/** @brief Mirror Report Attribute Response
 *
 * 
 *
 * @param notificationScheme   Ver.: always
 * @param notificationFlags   Ver.: always
 */
boolean emberAfSimpleMeteringClusterMirrorReportAttributeResponseCallback(int8u notificationScheme,
                                                                          int8u* notificationFlags);
/** @brief Publish Snapshot
 *
 * 
 *
 * @param snapshotId   Ver.: always
 * @param snapshotTime   Ver.: always
 * @param totalSnapshotsFound   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalCommands   Ver.: always
 * @param snapshotCause   Ver.: always
 * @param snapshotPayloadType   Ver.: always
 * @param snapshotPayload   Ver.: always
 */
boolean emberAfSimpleMeteringClusterPublishSnapshotCallback(int32u snapshotId,
                                                            int32u snapshotTime,
                                                            int8u totalSnapshotsFound,
                                                            int8u commandIndex,
                                                            int8u totalCommands,
                                                            int32u snapshotCause,
                                                            int8u snapshotPayloadType,
                                                            int8u* snapshotPayload);
/** @brief Remove Mirror
 *
 * 
 *
 */
boolean emberAfSimpleMeteringClusterRemoveMirrorCallback(void);
/** @brief Request Fast Poll Mode
 *
 * 
 *
 * @param fastPollUpdatePeriod   Ver.: always
 * @param duration   Ver.: always
 */
boolean emberAfSimpleMeteringClusterRequestFastPollModeCallback(int8u fastPollUpdatePeriod,
                                                                int8u duration);
/** @brief Request Fast Poll Mode Response
 *
 * 
 *
 * @param appliedUpdatePeriod   Ver.: always
 * @param fastPollModeEndtime   Ver.: always
 */
boolean emberAfSimpleMeteringClusterRequestFastPollModeResponseCallback(int8u appliedUpdatePeriod,
                                                                        int32u fastPollModeEndtime);
/** @brief Request Mirror
 *
 * 
 *
 */
boolean emberAfSimpleMeteringClusterRequestMirrorCallback(void);
/** @brief Request Mirror Response
 *
 * 
 *
 * @param endpointId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterRequestMirrorResponseCallback(int16u endpointId);
/** @brief Reset Load Limit Counter
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 */
boolean emberAfSimpleMeteringClusterResetLoadLimitCounterCallback(int32u providerId,
                                                                  int32u issuerEventId);
/** @brief Schedule Snapshot
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param commandCount   Ver.: always
 * @param snapshotSchedulePayload   Ver.: always
 */
boolean emberAfSimpleMeteringClusterScheduleSnapshotCallback(int32u issuerEventId,
                                                             int8u commandIndex,
                                                             int8u commandCount,
                                                             int8u* snapshotSchedulePayload);
/** @brief Schedule Snapshot Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param snapshotResponsePayload   Ver.: always
 */
boolean emberAfSimpleMeteringClusterScheduleSnapshotResponseCallback(int32u issuerEventId,
                                                                     int8u* snapshotResponsePayload);
/** @brief Server Attribute Changed
 *
 * Simple Metering cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSimpleMeteringClusterServerAttributeChangedCallback(int8u endpoint,
                                                                EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Simple Metering cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSimpleMeteringClusterServerDefaultResponseCallback(int8u endpoint,
                                                               int8u commandId,
                                                               EmberAfStatus status);
/** @brief Server Init
 *
 * Simple Metering cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSimpleMeteringClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Simple Metering cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSimpleMeteringClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                    EmberAfAttributeId attributeId,
                                                                                    int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Simple Metering cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSimpleMeteringClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                           int16u indexOrDestination,
                                                           EmberApsFrame * apsFrame,
                                                           int16u msgLen,
                                                           int8u * message,
                                                           EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Simple Metering cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSimpleMeteringClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            EmberAfAttributeType attributeType,
                                                                            int8u size,
                                                                            int8u * value);
/** @brief Server Tick
 *
 * Simple Metering cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSimpleMeteringClusterServerTickCallback(int8u endpoint);
/** @brief Start Sampling
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startSamplingTime   Ver.: always
 * @param sampleType   Ver.: always
 * @param sampleRequestInterval   Ver.: always
 * @param maxNumberOfSamples   Ver.: always
 */
boolean emberAfSimpleMeteringClusterStartSamplingCallback(int32u issuerEventId,
                                                          int32u startSamplingTime,
                                                          int8u sampleType,
                                                          int16u sampleRequestInterval,
                                                          int16u maxNumberOfSamples);
/** @brief Take Snapshot
 *
 * 
 *
 * @param snapshotCause   Ver.: always
 */
boolean emberAfSimpleMeteringClusterTakeSnapshotCallback(int32u snapshotCause);
/** @brief Take Snapshot Response
 *
 * 
 *
 * @param snapshotId   Ver.: always
 * @param snapshotConfirmation   Ver.: always
 */
boolean emberAfSimpleMeteringClusterTakeSnapshotResponseCallback(int32u snapshotId,
                                                                 int8u snapshotConfirmation);

/** @} END Simple Metering Cluster Callbacks */

/** @name Messaging Cluster Callbacks */
// @{

/** @brief Cancel Message
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param messageControl   Ver.: always
 */
boolean emberAfMessagingClusterCancelMessageCallback(int32u messageId,
                                                     int8u messageControl);
/** @brief Client Attribute Changed
 *
 * Messaging cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMessagingClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Messaging cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMessagingClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Client Init
 *
 * Messaging cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMessagingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Messaging cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMessagingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Messaging cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMessagingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame * apsFrame,
                                                      int16u msgLen,
                                                      int8u * message,
                                                      EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Messaging cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMessagingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u * value);
/** @brief Client Tick
 *
 * Messaging cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMessagingClusterClientTickCallback(int8u endpoint);
/** @brief Display Message
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param messageControl   Ver.: always
 * @param startTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param message   Ver.: always
 */
boolean emberAfMessagingClusterDisplayMessageCallback(int32u messageId,
                                                      int8u messageControl,
                                                      int32u startTime,
                                                      int16u durationInMinutes,
                                                      int8u* message);
/** @brief Get Last Message
 *
 * 
 *
 */
boolean emberAfMessagingClusterGetLastMessageCallback(void);
/** @brief Message Confirmation
 *
 * 
 *
 * @param messageId   Ver.: always
 * @param confirmationTime   Ver.: always
 * @param messageConfirmationContral   Ver.: since se-1.2-12-0517-08
 * @param messageResponse   Ver.: since se-1.2-12-0517-08
 */
boolean emberAfMessagingClusterMessageConfirmationCallback(int32u messageId,
                                                           int32u confirmationTime,
                                                           int8u messageConfirmationContral,
                                                           int8u* messageResponse);
/** @brief Server Attribute Changed
 *
 * Messaging cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMessagingClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Messaging cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMessagingClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Server Init
 *
 * Messaging cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMessagingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Messaging cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMessagingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Messaging cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMessagingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame * apsFrame,
                                                      int16u msgLen,
                                                      int8u * message,
                                                      EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Messaging cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMessagingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u * value);
/** @brief Server Tick
 *
 * Messaging cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMessagingClusterServerTickCallback(int8u endpoint);

/** @} END Messaging Cluster Callbacks */

/** @name Tunneling Cluster Callbacks */
// @{

/** @brief Ack Transfer Data Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfBytesLeft   Ver.: always
 */
boolean emberAfTunnelingClusterAckTransferDataClientToServerCallback(int16u tunnelId,
                                                                     int16u numberOfBytesLeft);
/** @brief Ack Transfer Data Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfBytesLeft   Ver.: always
 */
boolean emberAfTunnelingClusterAckTransferDataServerToClientCallback(int16u tunnelId,
                                                                     int16u numberOfBytesLeft);
/** @brief Client Attribute Changed
 *
 * Tunneling cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTunnelingClusterClientAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Tunneling cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTunnelingClusterClientDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Client Init
 *
 * Tunneling cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTunnelingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Tunneling cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTunnelingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Tunneling cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTunnelingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame * apsFrame,
                                                      int16u msgLen,
                                                      int8u * message,
                                                      EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Tunneling cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTunnelingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u * value);
/** @brief Client Tick
 *
 * Tunneling cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTunnelingClusterClientTickCallback(int8u endpoint);
/** @brief Close Tunnel
 *
 * 
 *
 * @param tunnelId   Ver.: always
 */
boolean emberAfTunnelingClusterCloseTunnelCallback(int16u tunnelId);
/** @brief Get Supported Tunnel Protocols
 *
 * 
 *
 * @param protocolOffset   Ver.: always
 */
boolean emberAfTunnelingClusterGetSupportedTunnelProtocolsCallback(int8u protocolOffset);
/** @brief Ready Data Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfOctetsLeft   Ver.: always
 */
boolean emberAfTunnelingClusterReadyDataClientToServerCallback(int16u tunnelId,
                                                               int16u numberOfOctetsLeft);
/** @brief Ready Data Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param numberOfOctetsLeft   Ver.: always
 */
boolean emberAfTunnelingClusterReadyDataServerToClientCallback(int16u tunnelId,
                                                               int16u numberOfOctetsLeft);
/** @brief Request Tunnel
 *
 * 
 *
 * @param protocolId   Ver.: always
 * @param manufacturerCode   Ver.: always
 * @param flowControlSupport   Ver.: always
 * @param maximumIncomingTransferSize   Ver.: since se-1.1a-07-5356-17
 */
boolean emberAfTunnelingClusterRequestTunnelCallback(int8u protocolId,
                                                     int16u manufacturerCode,
                                                     int8u flowControlSupport,
                                                     int16u maximumIncomingTransferSize);
/** @brief Request Tunnel Response
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param tunnelStatus   Ver.: always
 * @param maximumIncomingTransferSize   Ver.: since se-1.1a-07-5356-17
 */
boolean emberAfTunnelingClusterRequestTunnelResponseCallback(int16u tunnelId,
                                                             int8u tunnelStatus,
                                                             int16u maximumIncomingTransferSize);
/** @brief Server Attribute Changed
 *
 * Tunneling cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTunnelingClusterServerAttributeChangedCallback(int8u endpoint,
                                                           EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Tunneling cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTunnelingClusterServerDefaultResponseCallback(int8u endpoint,
                                                          int8u commandId,
                                                          EmberAfStatus status);
/** @brief Server Init
 *
 * Tunneling cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTunnelingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Tunneling cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTunnelingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Tunneling cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTunnelingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                      int16u indexOrDestination,
                                                      EmberApsFrame * apsFrame,
                                                      int16u msgLen,
                                                      int8u * message,
                                                      EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Tunneling cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTunnelingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId,
                                                                       EmberAfAttributeType attributeType,
                                                                       int8u size,
                                                                       int8u * value);
/** @brief Server Tick
 *
 * Tunneling cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTunnelingClusterServerTickCallback(int8u endpoint);
/** @brief Supported Tunnel Protocols Response
 *
 * 
 *
 * @param protocolListComplete   Ver.: always
 * @param protocolCount   Ver.: always
 * @param protocolList   Ver.: always
 */
boolean emberAfTunnelingClusterSupportedTunnelProtocolsResponseCallback(int8u protocolListComplete,
                                                                        int8u protocolCount,
                                                                        int8u* protocolList);
/** @brief Transfer Data Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param data   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataClientToServerCallback(int16u tunnelId,
                                                                  int8u* data);
/** @brief Transfer Data Error Client To Server
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param transferDataStatus   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataErrorClientToServerCallback(int16u tunnelId,
                                                                       int8u transferDataStatus);
/** @brief Transfer Data Error Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param transferDataStatus   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataErrorServerToClientCallback(int16u tunnelId,
                                                                       int8u transferDataStatus);
/** @brief Transfer Data Server To Client
 *
 * 
 *
 * @param tunnelId   Ver.: always
 * @param data   Ver.: always
 */
boolean emberAfTunnelingClusterTransferDataServerToClientCallback(int16u tunnelId,
                                                                  int8u* data);
/** @brief Tunnel Closure Notification
 *
 * 
 *
 * @param tunnelId   Ver.: always
 */
boolean emberAfTunnelingClusterTunnelClosureNotificationCallback(int16u tunnelId);

/** @} END Tunneling Cluster Callbacks */

/** @name Prepayment Cluster Callbacks */
// @{

/** @brief Change Debt
 *
 * 
 *
 * @param commandIssueDateTime   Ver.: always
 * @param debtLabel   Ver.: always
 * @param debtAmount   Ver.: always
 * @param debtRecoveryMethod   Ver.: always
 * @param debtType   Ver.: always
 * @param debtRecoveryStartTime   Ver.: always
 * @param debtRecoveryCollectionTime   Ver.: always
 * @param debtRecoveryFrequency   Ver.: always
 * @param debtRecoveryAmount   Ver.: always
 * @param debtRecoveryBalancePercentage   Ver.: always
 */
boolean emberAfPrepaymentClusterChangeDebtCallback(int32u commandIssueDateTime,
                                                   int8u* debtLabel,
                                                   int32s debtAmount,
                                                   int8u debtRecoveryMethod,
                                                   int8u debtType,
                                                   int32u debtRecoveryStartTime,
                                                   int16u debtRecoveryCollectionTime,
                                                   int8u debtRecoveryFrequency,
                                                   int32s debtRecoveryAmount,
                                                   int16u debtRecoveryBalancePercentage);
/** @brief Change Payment Mode
 *
 * 
 *
 * @param supplierId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param proposedPaymentControl   Ver.: always
 * @param cutOffValue   Ver.: always
 */
boolean emberAfPrepaymentClusterChangePaymentModeCallback(int32u supplierId,
                                                          int32u issuerEventId,
                                                          int32u implementationDateTime,
                                                          int16u proposedPaymentControl,
                                                          int32s cutOffValue);
/** @brief Change Payment Mode Response
 *
 * 
 *
 * @param friendlyCredit   Ver.: always
 * @param friendlyCreditCalendarId   Ver.: always
 * @param emergencyCreditLimit   Ver.: always
 * @param emergencyCreditThreshold   Ver.: always
 */
boolean emberAfPrepaymentClusterChangePaymentModeResponseCallback(int8u friendlyCredit,
                                                                  int32u friendlyCreditCalendarId,
                                                                  int32u emergencyCreditLimit,
                                                                  int32u emergencyCreditThreshold);
/** @brief Client Attribute Changed
 *
 * Prepayment cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPrepaymentClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Prepayment cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPrepaymentClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Client Init
 *
 * Prepayment cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPrepaymentClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Prepayment cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPrepaymentClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Prepayment cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPrepaymentClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Prepayment cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPrepaymentClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Client Tick
 *
 * Prepayment cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPrepaymentClusterClientTickCallback(int8u endpoint);
/** @brief Consumer Top Up
 *
 * 
 *
 * @param originatingDevice   Ver.: always
 * @param topUpCode   Ver.: always
 */
boolean emberAfPrepaymentClusterConsumerTopUpCallback(int8u originatingDevice,
                                                      int8u* topUpCode);
/** @brief Consumer Top Up Response
 *
 * 
 *
 * @param resultType   Ver.: always
 * @param topUpValue   Ver.: always
 * @param sourceOfTopUp   Ver.: always
 * @param creditRemaining   Ver.: always
 */
boolean emberAfPrepaymentClusterConsumerTopUpResponseCallback(int8u resultType,
                                                              int32s topUpValue,
                                                              int8u sourceOfTopUp,
                                                              int32s creditRemaining);
/** @brief Credit Adjustment
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startTime   Ver.: always
 * @param creditAdjustmentType   Ver.: always
 * @param creditAdjustmentValue   Ver.: always
 */
boolean emberAfPrepaymentClusterCreditAdjustmentCallback(int32u issuerEventId,
                                                         int32u startTime,
                                                         int8u creditAdjustmentType,
                                                         int32s creditAdjustmentValue);
/** @brief Emergency Credit Setup
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param commandIssueDateTime   Ver.: always
 * @param emergencyCreditLimit   Ver.: always
 * @param emergencyCreditThreshold   Ver.: always
 */
boolean emberAfPrepaymentClusterEmergencyCreditSetupCallback(int32u issuerEventId,
                                                             int32u commandIssueDateTime,
                                                             int32u emergencyCreditLimit,
                                                             int32u emergencyCreditThreshold);
/** @brief Get Command
 *
 * 
 *
 * @param prePayNotificationFlags   Ver.: always
 */
boolean emberAfPrepaymentClusterGetCommandCallback(int32u prePayNotificationFlags);
/** @brief Get Debt Repaymenty Log
 *
 * 
 *
 * @param numberOfDebt   Ver.: always
 * @param debtType   Ver.: always
 */
boolean emberAfPrepaymentClusterGetDebtRepaymentyLogCallback(int8u numberOfDebt,
                                                             int8u debtType);
/** @brief Get Prepay Snapshot
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfSnapshots   Ver.: always
 * @param snapshotCause   Ver.: always
 */
boolean emberAfPrepaymentClusterGetPrepaySnapshotCallback(int32u startTime,
                                                          int8u numberOfSnapshots,
                                                          int16u snapshotCause);
/** @brief Get Prepay Snapshot Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param snapshotTime   Ver.: always
 * @param commandIndex   Ver.: always
 * @param snapshotCause   Ver.: always
 * @param snapshotPayloadType   Ver.: always
 * @param snapshotPayload   Ver.: always
 */
boolean emberAfPrepaymentClusterGetPrepaySnapshotResponseCallback(int32u issuerEventId,
                                                                  int32u snapshotTime,
                                                                  int8u commandIndex,
                                                                  int16u snapshotCause,
                                                                  int8u snapshotPayloadType,
                                                                  int8u* snapshotPayload);
/** @brief Get Top Up Log
 *
 * 
 *
 * @param numberOfEvents   Ver.: always
 */
boolean emberAfPrepaymentClusterGetTopUpLogCallback(int8u numberOfEvents);
/** @brief Publish Debt Log
 *
 * 
 *
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param debtPayload   Ver.: always
 */
boolean emberAfPrepaymentClusterPublishDebtLogCallback(int8u commandIndex,
                                                       int8u totalNumberOfCommands,
                                                       int8u* debtPayload);
/** @brief Publish Top Up Log
 *
 * 
 *
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param topUpCodes   Ver.: always
 */
boolean emberAfPrepaymentClusterPublishTopUpLogCallback(int8u commandIndex,
                                                        int8u totalNumberOfCommands,
                                                        int8u* topUpCodes);
/** @brief Select Available Emergency Credit
 *
 * 
 *
 * @param commandIssueDateTime   Ver.: always
 * @param originatingDevice   Ver.: always
 */
boolean emberAfPrepaymentClusterSelectAvailableEmergencyCreditCallback(int32u commandIssueDateTime,
                                                                       int8u originatingDevice);
/** @brief Server Attribute Changed
 *
 * Prepayment cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPrepaymentClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Prepayment cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPrepaymentClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Server Init
 *
 * Prepayment cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPrepaymentClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Prepayment cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPrepaymentClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Prepayment cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPrepaymentClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Prepayment cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPrepaymentClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Server Tick
 *
 * Prepayment cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPrepaymentClusterServerTickCallback(int8u endpoint);
/** @brief Set Low Credit Warning Level
 *
 * 
 *
 * @param lowCreditWarningLevel   Ver.: always
 */
boolean emberAfPrepaymentClusterSetLowCreditWarningLevelCallback(int32u lowCreditWarningLevel);
/** @brief Set Maximum Credit Limit
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param maximumCreditLevel   Ver.: always
 */
boolean emberAfPrepaymentClusterSetMaximumCreditLimitCallback(int32u providerId,
                                                              int32u issuerEventId,
                                                              int32u implementationDateTime,
                                                              int32u maximumCreditLevel);
/** @brief Set Overall Debt Cap
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param overallDebtCap   Ver.: always
 */
boolean emberAfPrepaymentClusterSetOverallDebtCapCallback(int32u providerId,
                                                          int32u issuerEventId,
                                                          int32u implementationDateTime,
                                                          int32s overallDebtCap);

/** @} END Prepayment Cluster Callbacks */

/** @name Energy Management Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Energy Management cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEnergyManagementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Energy Management cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEnergyManagementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Energy Management cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEnergyManagementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Energy Management cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEnergyManagementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Energy Management cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEnergyManagementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Energy Management cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEnergyManagementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Energy Management cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEnergyManagementClusterClientTickCallback(int8u endpoint);
/** @brief Manage Event
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param deviceClass   Ver.: always
 * @param utilityEnrollmentGroup   Ver.: always
 * @param actionRequired   Ver.: always
 */
boolean emberAfEnergyManagementClusterManageEventCallback(int32u issuerEventId,
                                                          int16u deviceClass,
                                                          int8u utilityEnrollmentGroup,
                                                          int8u actionRequired);
/** @brief Report Event Status
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param eventStatus   Ver.: always
 * @param eventStatusTime   Ver.: always
 * @param criticalityLevelApplied   Ver.: always
 * @param coolingTemperatureSetPointApplied   Ver.: always
 * @param heatingTemperatureSetPointApplied   Ver.: always
 * @param averageLoadAdjustmentPercentageApplied   Ver.: always
 * @param dutyCycleApplied   Ver.: always
 * @param eventControl   Ver.: always
 */
boolean emberAfEnergyManagementClusterReportEventStatusCallback(int32u issuerEventId,
                                                                int8u eventStatus,
                                                                int32u eventStatusTime,
                                                                int8u criticalityLevelApplied,
                                                                int16u coolingTemperatureSetPointApplied,
                                                                int16u heatingTemperatureSetPointApplied,
                                                                int8s averageLoadAdjustmentPercentageApplied,
                                                                int8u dutyCycleApplied,
                                                                int8u eventControl);
/** @brief Server Attribute Changed
 *
 * Energy Management cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEnergyManagementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Energy Management cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEnergyManagementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Energy Management cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEnergyManagementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Energy Management cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEnergyManagementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Energy Management cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEnergyManagementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Energy Management cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEnergyManagementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Energy Management cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEnergyManagementClusterServerTickCallback(int8u endpoint);

/** @} END Energy Management Cluster Callbacks */

/** @name TOU Calendar Cluster Callbacks */
// @{

/** @brief Cancel Calendar
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param calendarType   Ver.: always
 */
boolean emberAfTouCalendarClusterCancelCalendarCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int8u calendarType);
/** @brief Client Attribute Changed
 *
 * TOU Calendar cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTouCalendarClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * TOU Calendar cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTouCalendarClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * TOU Calendar cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTouCalendarClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * TOU Calendar cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTouCalendarClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * TOU Calendar cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTouCalendarClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * TOU Calendar cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTouCalendarClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * TOU Calendar cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTouCalendarClusterClientTickCallback(int8u endpoint);
/** @brief Get Calendar
 *
 * 
 *
 * @param earliestStartTime   Ver.: always
 * @param minIssuerEventId   Ver.: always
 * @param numberOfCalendars   Ver.: always
 * @param calendarType   Ver.: always
 * @param providerId   Ver.: always
 */
boolean emberAfTouCalendarClusterGetCalendarCallback(int32u earliestStartTime,
                                                     int32u minIssuerEventId,
                                                     int8u numberOfCalendars,
                                                     int8u calendarType,
                                                     int32u providerId);
/** @brief Get Calendar Cancellation
 *
 * 
 *
 */
boolean emberAfTouCalendarClusterGetCalendarCancellationCallback(void);
/** @brief Get Day Profiles
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startDayId   Ver.: always
 * @param numberOfDays   Ver.: always
 */
boolean emberAfTouCalendarClusterGetDayProfilesCallback(int32u providerId,
                                                        int32u issuerCalendarId,
                                                        int8u startDayId,
                                                        int8u numberOfDays);
/** @brief Get Seasons
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 */
boolean emberAfTouCalendarClusterGetSeasonsCallback(int32u providerId,
                                                    int32u issuerCalendarId);
/** @brief Get Special Days
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param calendarType   Ver.: always
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 */
boolean emberAfTouCalendarClusterGetSpecialDaysCallback(int32u startTime,
                                                        int8u numberOfEvents,
                                                        int8u calendarType,
                                                        int32u providerId,
                                                        int32u issuerCalendarId);
/** @brief Get Week Profiles
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startWeekId   Ver.: always
 * @param numberOfWeeks   Ver.: always
 */
boolean emberAfTouCalendarClusterGetWeekProfilesCallback(int32u providerId,
                                                         int32u issuerCalendarId,
                                                         int8u startWeekId,
                                                         int8u numberOfWeeks);
/** @brief Publish Calendar
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startTime   Ver.: always
 * @param calendarType   Ver.: always
 * @param calendarName   Ver.: always
 * @param numberOfSeasons   Ver.: always
 * @param numberOfWeekProfiles   Ver.: always
 * @param numberOfDayProfiles   Ver.: always
 */
boolean emberAfTouCalendarClusterPublishCalendarCallback(int32u providerId,
                                                         int32u issuerEventId,
                                                         int32u issuerCalendarId,
                                                         int32u startTime,
                                                         int8u calendarType,
                                                         int8u* calendarName,
                                                         int8u numberOfSeasons,
                                                         int8u numberOfWeekProfiles,
                                                         int8u numberOfDayProfiles);
/** @brief Publish Day Profile
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param dayId   Ver.: always
 * @param totalNumberOfScheduleEntries   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param calendarType   Ver.: always
 * @param dayScheduleEntries   Ver.: always
 */
boolean emberAfTouCalendarClusterPublishDayProfileCallback(int32u providerId,
                                                           int32u issuerEventId,
                                                           int32u issuerCalendarId,
                                                           int8u dayId,
                                                           int8u totalNumberOfScheduleEntries,
                                                           int8u commandIndex,
                                                           int8u totalNumberOfCommands,
                                                           int8u calendarType,
                                                           int8u* dayScheduleEntries);
/** @brief Publish Seasons
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param seasonEntries   Ver.: always
 */
boolean emberAfTouCalendarClusterPublishSeasonsCallback(int32u providerId,
                                                        int32u issuerEventId,
                                                        int32u issuerCalendarId,
                                                        int8u commandIndex,
                                                        int8u totalNumberOfCommands,
                                                        int8u* seasonEntries);
/** @brief Publish Special Days
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param startTime   Ver.: always
 * @param calendarType   Ver.: always
 * @param totalNumberOfSpecialDays   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param specialDayEntries   Ver.: always
 */
boolean emberAfTouCalendarClusterPublishSpecialDaysCallback(int32u providerId,
                                                            int32u issuerEventId,
                                                            int32u issuerCalendarId,
                                                            int32u startTime,
                                                            int8u calendarType,
                                                            int8u totalNumberOfSpecialDays,
                                                            int8u commandIndex,
                                                            int8u totalNumberOfCommands,
                                                            int8u* specialDayEntries);
/** @brief Publish Week Profile
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param issuerCalendarId   Ver.: always
 * @param weekId   Ver.: always
 * @param dayIdRefMonday   Ver.: always
 * @param dayIdRefTuesday   Ver.: always
 * @param dayIdRefWednesday   Ver.: always
 * @param dayIdRefThursday   Ver.: always
 * @param dayIdRefFriday   Ver.: always
 * @param dayIdRefSaturday   Ver.: always
 * @param dayIdRefSunday   Ver.: always
 */
boolean emberAfTouCalendarClusterPublishWeekProfileCallback(int32u providerId,
                                                            int32u issuerEventId,
                                                            int32u issuerCalendarId,
                                                            int8u weekId,
                                                            int8u dayIdRefMonday,
                                                            int8u dayIdRefTuesday,
                                                            int8u dayIdRefWednesday,
                                                            int8u dayIdRefThursday,
                                                            int8u dayIdRefFriday,
                                                            int8u dayIdRefSaturday,
                                                            int8u dayIdRefSunday);
/** @brief Server Attribute Changed
 *
 * TOU Calendar cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfTouCalendarClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * TOU Calendar cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfTouCalendarClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * TOU Calendar cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfTouCalendarClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * TOU Calendar cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfTouCalendarClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * TOU Calendar cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfTouCalendarClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * TOU Calendar cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfTouCalendarClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * TOU Calendar cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfTouCalendarClusterServerTickCallback(int8u endpoint);

/** @} END TOU Calendar Cluster Callbacks */

/** @name Device Management Cluster Callbacks */
// @{

/** @brief Change Supply
 *
 * 
 *
 * @param supplierId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param requestedDateTime   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param proposedSupplyStatus   Ver.: always
 * @param originatorIdSupplyControlBits   Ver.: always
 */
boolean emberAfDeviceManagementClusterChangeSupplyCallback(int32u supplierId,
                                                           int32u issuerEventId,
                                                           int32u requestedDateTime,
                                                           int32u implementationDateTime,
                                                           int8u proposedSupplyStatus,
                                                           int8u originatorIdSupplyControlBits);
/** @brief Client Attribute Changed
 *
 * Device Management cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceManagementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Device Management cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceManagementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Device Management cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceManagementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Device Management cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceManagementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Device Management cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceManagementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Device Management cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceManagementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Device Management cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceManagementClusterClientTickCallback(int8u endpoint);
/** @brief Get Change Of Supplier
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetChangeOfSupplierCallback(void);
/** @brief Get Change Of Tenancy
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetChangeOfTenancyCallback(void);
/** @brief Get Change Supply
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetChangeSupplyCallback(void);
/** @brief Get Event Configuration
 *
 * 
 *
 * @param eventGroupId   Ver.: always
 * @param eventCode   Ver.: always
 */
boolean emberAfDeviceManagementClusterGetEventConfigurationCallback(int8u eventGroupId,
                                                                    int8u eventCode);
/** @brief Get Site Id
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetSiteIdCallback(void);
/** @brief Get Uncontrolled Flow Threshold
 *
 * 
 *
 */
boolean emberAfDeviceManagementClusterGetUncontrolledFlowThresholdCallback(void);
/** @brief Local Change Supply
 *
 * 
 *
 * @param proposedSupplyStatus   Ver.: always
 */
boolean emberAfDeviceManagementClusterLocalChangeSupplyCallback(int8u proposedSupplyStatus);
/** @brief Publish Change Of Supplier
 *
 * 
 *
 * @param currentSupplierId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param tariffType   Ver.: always
 * @param proposedChangeSupplierId   Ver.: always
 * @param supplierIdImplementationTime   Ver.: always
 * @param supplierChangeControl   Ver.: always
 * @param proposedSupplierIdName   Ver.: always
 */
boolean emberAfDeviceManagementClusterPublishChangeOfSupplierCallback(int32u currentSupplierId,
                                                                      int32u issuerEventId,
                                                                      int8u tariffType,
                                                                      int32u proposedChangeSupplierId,
                                                                      int32u supplierIdImplementationTime,
                                                                      int32u supplierChangeControl,
                                                                      int8u* proposedSupplierIdName);
/** @brief Publish Change Of Tenancy
 *
 * 
 *
 * @param supplierId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param tariffType   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param proposedTenancyChangeControl   Ver.: always
 */
boolean emberAfDeviceManagementClusterPublishChangeOfTenancyCallback(int32u supplierId,
                                                                     int32u issuerEventId,
                                                                     int8u tariffType,
                                                                     int32u implementationDateTime,
                                                                     int32u proposedTenancyChangeControl);
/** @brief Publish Uncontrolled Flow Threshold
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param uncontrolledFlowThreshold   Ver.: always
 * @param unitOfMeasure   Ver.: always
 * @param multiplier   Ver.: always
 * @param divisor   Ver.: always
 * @param stabilisationPeriod   Ver.: always
 * @param measurementPeriod   Ver.: always
 */
boolean emberAfDeviceManagementClusterPublishUncontrolledFlowThresholdCallback(int32u providerId,
                                                                               int32u issuerEventId,
                                                                               int16u uncontrolledFlowThreshold,
                                                                               int8u unitOfMeasure,
                                                                               int16u multiplier,
                                                                               int16u divisor,
                                                                               int8u stabilisationPeriod,
                                                                               int16u measurementPeriod);
/** @brief Report Event Configuration
 *
 * 
 *
 * @param commandIndex   Ver.: always
 * @param totalCommands   Ver.: always
 * @param eventConfigurationPayload   Ver.: always
 */
boolean emberAfDeviceManagementClusterReportEventConfigurationCallback(int8u commandIndex,
                                                                       int8u totalCommands,
                                                                       int8u* eventConfigurationPayload);
/** @brief Request New Password
 *
 * 
 *
 * @param passwordType   Ver.: always
 */
boolean emberAfDeviceManagementClusterRequestNewPasswordCallback(int8u passwordType);
/** @brief Request New Password Response
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param durationInMinutes   Ver.: always
 * @param passwordType   Ver.: always
 * @param password   Ver.: always
 */
boolean emberAfDeviceManagementClusterRequestNewPasswordResponseCallback(int32u issuerEventId,
                                                                         int32u implementationDateTime,
                                                                         int16u durationInMinutes,
                                                                         int8u passwordType,
                                                                         int8u* password);
/** @brief Server Attribute Changed
 *
 * Device Management cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDeviceManagementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Device Management cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDeviceManagementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Device Management cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDeviceManagementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Device Management cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDeviceManagementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Device Management cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDeviceManagementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Device Management cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDeviceManagementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Device Management cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDeviceManagementClusterServerTickCallback(int8u endpoint);
/** @brief Set Event Configuration
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param startDateTime   Ver.: always
 * @param eventConfiguration   Ver.: always
 * @param eventConfigurationPayload   Ver.: always
 */
boolean emberAfDeviceManagementClusterSetEventConfigurationCallback(int32u issuerEventId,
                                                                    int32u startDateTime,
                                                                    int8u eventConfiguration,
                                                                    int8u* eventConfigurationPayload);
/** @brief Set Supply Status
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param supplyTamperState   Ver.: always
 * @param supplyDepletionState   Ver.: always
 * @param supplyUncontrolledFlowState   Ver.: always
 * @param loadLimitSupplyState   Ver.: always
 */
boolean emberAfDeviceManagementClusterSetSupplyStatusCallback(int32u issuerEventId,
                                                              int8u supplyTamperState,
                                                              int8u supplyDepletionState,
                                                              int8u supplyUncontrolledFlowState,
                                                              int8u loadLimitSupplyState);
/** @brief Supply Status Response
 *
 * 
 *
 * @param providerId   Ver.: always
 * @param issuerEventId   Ver.: always
 * @param implementationDateTime   Ver.: always
 * @param supplyStatus   Ver.: always
 */
boolean emberAfDeviceManagementClusterSupplyStatusResponseCallback(int32u providerId,
                                                                   int32u issuerEventId,
                                                                   int32u implementationDateTime,
                                                                   int8u supplyStatus);
/** @brief Update Site Id
 *
 * 
 *
 * @param issuerEventId   Ver.: always
 * @param siteIdTime   Ver.: always
 * @param supplierId   Ver.: always
 * @param siteId   Ver.: always
 */
boolean emberAfDeviceManagementClusterUpdateSiteIdCallback(int32u issuerEventId,
                                                           int32u siteIdTime,
                                                           int32u supplierId,
                                                           int8u* siteId);

/** @} END Device Management Cluster Callbacks */

/** @name Events Cluster Callbacks */
// @{

/** @brief Clear Event Log
 *
 * 
 *
 * @param logId   Ver.: always
 */
boolean emberAfEventsClusterClearEventLogCallback(int8u logId);
/** @brief Client Attribute Changed
 *
 * Events cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEventsClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Events cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEventsClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Client Init
 *
 * Events cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEventsClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Events cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEventsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Events cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEventsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Events cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEventsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Client Tick
 *
 * Events cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEventsClusterClientTickCallback(int8u endpoint);
/** @brief Get Event Log
 *
 * 
 *
 * @param logIdEventControl   Ver.: always
 * @param eventId   Ver.: always
 * @param startTime   Ver.: always
 * @param endTime   Ver.: always
 * @param numberOfEvents   Ver.: always
 * @param eventOffset   Ver.: always
 */
boolean emberAfEventsClusterGetEventLogCallback(int8u logIdEventControl,
                                                int16u eventId,
                                                int32u startTime,
                                                int32u endTime,
                                                int8u numberOfEvents,
                                                int16u eventOffset);
/** @brief Publish Event
 *
 * 
 *
 * @param eventId   Ver.: always
 * @param eventTime   Ver.: always
 * @param eventControl   Ver.: always
 * @param eventData   Ver.: always
 */
boolean emberAfEventsClusterPublishEventCallback(int16u eventId,
                                                 int32u eventTime,
                                                 int8u eventControl,
                                                 int8u* eventData);
/** @brief Publish Event Log
 *
 * 
 *
 * @param totalNumberOfEvents   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalCommands   Ver.: always
 * @param logPayloadControl   Ver.: always
 * @param logPayload   Ver.: always
 */
boolean emberAfEventsClusterPublishEventLogCallback(int16u totalNumberOfEvents,
                                                    int8u commandIndex,
                                                    int8u totalCommands,
                                                    int8u logPayloadControl,
                                                    int8u* logPayload);
/** @brief Server Attribute Changed
 *
 * Events cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfEventsClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Events cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfEventsClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Server Init
 *
 * Events cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfEventsClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Events cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfEventsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Events cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfEventsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Events cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfEventsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Server Tick
 *
 * Events cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfEventsClusterServerTickCallback(int8u endpoint);

/** @} END Events Cluster Callbacks */

/** @name MDU Pairing Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * MDU Pairing cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMduPairingClusterClientAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * MDU Pairing cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMduPairingClusterClientDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Client Init
 *
 * MDU Pairing cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMduPairingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * MDU Pairing cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMduPairingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * MDU Pairing cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMduPairingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * MDU Pairing cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMduPairingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Client Tick
 *
 * MDU Pairing cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMduPairingClusterClientTickCallback(int8u endpoint);
/** @brief Pairing Request
 *
 * 
 *
 * @param localPairingInformationVersion   Ver.: always
 * @param eui64OfRequestingDevice   Ver.: always
 */
boolean emberAfMduPairingClusterPairingRequestCallback(int32u localPairingInformationVersion,
                                                       int8u* eui64OfRequestingDevice);
/** @brief Pairing Response
 *
 * 
 *
 * @param pairingInformationVersion   Ver.: always
 * @param totalNumberOfDevices   Ver.: always
 * @param commandIndex   Ver.: always
 * @param totalNumberOfCommands   Ver.: always
 * @param eui64s   Ver.: always
 */
boolean emberAfMduPairingClusterPairingResponseCallback(int32u pairingInformationVersion,
                                                        int8u totalNumberOfDevices,
                                                        int8u commandIndex,
                                                        int8u totalNumberOfCommands,
                                                        int8u* eui64s);
/** @brief Server Attribute Changed
 *
 * MDU Pairing cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMduPairingClusterServerAttributeChangedCallback(int8u endpoint,
                                                            EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * MDU Pairing cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMduPairingClusterServerDefaultResponseCallback(int8u endpoint,
                                                           int8u commandId,
                                                           EmberAfStatus status);
/** @brief Server Init
 *
 * MDU Pairing cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMduPairingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * MDU Pairing cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMduPairingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                EmberAfAttributeId attributeId,
                                                                                int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * MDU Pairing cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMduPairingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                       int16u indexOrDestination,
                                                       EmberApsFrame * apsFrame,
                                                       int16u msgLen,
                                                       int8u * message,
                                                       EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * MDU Pairing cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMduPairingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                        EmberAfAttributeId attributeId,
                                                                        EmberAfAttributeType attributeType,
                                                                        int8u size,
                                                                        int8u * value);
/** @brief Server Tick
 *
 * MDU Pairing cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMduPairingClusterServerTickCallback(int8u endpoint);

/** @} END MDU Pairing Cluster Callbacks */

/** @name Key establishment Cluster Callbacks */
// @{

/** @brief Client Command Received
 *
 * This function is called by the application framework when a server-to-client
 * key establishment command is received but has yet to be handled by the
 * framework code.  This function should return a boolean value indicating
 * whether the command has been handled by the application code and should not
 * be further processed by the framework.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand * cmd);
/** @brief Client Attribute Changed
 *
 * Key establishment cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Key establishment cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * Key establishment cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Key establishment cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfKeyEstablishmentClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Key establishment cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Key establishment cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfKeyEstablishmentClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * Key establishment cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfKeyEstablishmentClusterClientTickCallback(int8u endpoint);
/** @brief Confirm Key Data Request
 *
 * 
 *
 * @param secureMessageAuthenticationCode   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterConfirmKeyDataRequestCallback(int8u* secureMessageAuthenticationCode);
/** @brief Confirm Key Data Response
 *
 * 
 *
 * @param secureMessageAuthenticationCode   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterConfirmKeyDataResponseCallback(int8u* secureMessageAuthenticationCode);
/** @brief Ephemeral Data Request
 *
 * 
 *
 * @param ephemeralData   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterEphemeralDataRequestCallback(int8u* ephemeralData);
/** @brief Ephemeral Data Response
 *
 * 
 *
 * @param ephemeralData   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterEphemeralDataResponseCallback(int8u* ephemeralData);
/** @brief Initiate Key Establishment Request
 *
 * 
 *
 * @param keyEstablishmentSuite   Ver.: always
 * @param ephemeralDataGenerateTime   Ver.: always
 * @param confirmKeyGenerateTime   Ver.: always
 * @param identity   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterInitiateKeyEstablishmentRequestCallback(int16u keyEstablishmentSuite,
                                                                              int8u ephemeralDataGenerateTime,
                                                                              int8u confirmKeyGenerateTime,
                                                                              int8u* identity);
/** @brief Initiate Key Establishment Response
 *
 * 
 *
 * @param requestedKeyEstablishmentSuite   Ver.: always
 * @param ephemeralDataGenerateTime   Ver.: always
 * @param confirmKeyGenerateTime   Ver.: always
 * @param identity   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterInitiateKeyEstablishmentResponseCallback(int16u requestedKeyEstablishmentSuite,
                                                                               int8u ephemeralDataGenerateTime,
                                                                               int8u confirmKeyGenerateTime,
                                                                               int8u* identity);
/** @brief Server Attribute Changed
 *
 * Key establishment cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Key establishment cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * Key establishment cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Key establishment cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfKeyEstablishmentClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Key establishment cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Key establishment cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfKeyEstablishmentClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * Key establishment cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfKeyEstablishmentClusterServerTickCallback(int8u endpoint);
/** @brief Terminate Key Establishment
 *
 * 
 *
 * @param statusCode   Ver.: always
 * @param waitTime   Ver.: always
 * @param keyEstablishmentSuite   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterTerminateKeyEstablishmentCallback(int8u statusCode,
                                                                        int8u waitTime,
                                                                        int16u keyEstablishmentSuite);
/** @brief Server Command Received
 *
 * This function is called by the application framework when a client-to-server
 * key establishment command is received but has yet to be handled by the
 * framework code.  This function should return a boolean value indicating
 * whether the command has been handled by the application code and should not
 * be further processed by the framework.
 *
 * @param cmd   Ver.: always
 */
boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand * cmd);

/** @} END Key establishment Cluster Callbacks */

/** @name Information Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Information cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfInformationClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Information cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfInformationClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Information cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfInformationClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Information cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfInformationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Information cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfInformationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Information cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfInformationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Information cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfInformationClusterClientTickCallback(int8u endpoint);
/** @brief Configure Delivery Enable
 *
 * 
 *
 * @param enable   Ver.: always
 */
boolean emberAfInformationClusterConfigureDeliveryEnableCallback(int8u enable);
/** @brief Configure Node Description
 *
 * 
 *
 * @param description   Ver.: always
 */
boolean emberAfInformationClusterConfigureNodeDescriptionCallback(int8u* description);
/** @brief Configure Push Information Timer
 *
 * 
 *
 * @param timer   Ver.: always
 */
boolean emberAfInformationClusterConfigurePushInformationTimerCallback(int32u timer);
/** @brief Configure Set Root Id
 *
 * 
 *
 * @param rootId   Ver.: always
 */
boolean emberAfInformationClusterConfigureSetRootIdCallback(int16u rootId);
/** @brief Delete
 *
 * 
 *
 * @param deletionOptions   Ver.: always
 * @param contentIds   Ver.: always
 */
boolean emberAfInformationClusterDeleteCallback(int8u deletionOptions,
                                                int8u* contentIds);
/** @brief Delete Response
 *
 * 
 *
 * @param notificationList   Ver.: always
 */
boolean emberAfInformationClusterDeleteResponseCallback(int8u* notificationList);
/** @brief Push Information
 *
 * 
 *
 * @param contents   Ver.: always
 */
boolean emberAfInformationClusterPushInformationCallback(int8u* contents);
/** @brief Push Information Response
 *
 * 
 *
 * @param notificationList   Ver.: always
 */
boolean emberAfInformationClusterPushInformationResponseCallback(int8u* notificationList);
/** @brief Request Information
 *
 * 
 *
 * @param inquiryId   Ver.: always
 * @param dataTypeId   Ver.: always
 * @param requestInformationPayload   Ver.: always
 */
boolean emberAfInformationClusterRequestInformationCallback(int8u inquiryId,
                                                            int8u dataTypeId,
                                                            int8u* requestInformationPayload);
/** @brief Request Information Response
 *
 * 
 *
 * @param number   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfInformationClusterRequestInformationResponseCallback(int8u number,
                                                                    int8u* buffer);
/** @brief Request Preference Confirmation
 *
 * 
 *
 * @param statusFeedbackList   Ver.: always
 */
boolean emberAfInformationClusterRequestPreferenceConfirmationCallback(int8u* statusFeedbackList);
/** @brief Request Preference Response
 *
 * 
 *
 * @param statusFeedback   Ver.: always
 * @param preferenceType   Ver.: always
 * @param preferencePayload   Ver.: always
 */
boolean emberAfInformationClusterRequestPreferenceResponseCallback(int8u statusFeedback,
                                                                   int16u preferenceType,
                                                                   int8u* preferencePayload);
/** @brief Send Preference
 *
 * 
 *
 * @param preferenceType   Ver.: always
 * @param preferencePayload   Ver.: always
 */
boolean emberAfInformationClusterSendPreferenceCallback(int16u preferenceType,
                                                        int8u* preferencePayload);
/** @brief Send Preference Response
 *
 * 
 *
 * @param statusFeedbackList   Ver.: always
 */
boolean emberAfInformationClusterSendPreferenceResponseCallback(int8u* statusFeedbackList);
/** @brief Server Attribute Changed
 *
 * Information cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfInformationClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Information cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfInformationClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Information cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfInformationClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Information cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfInformationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Information cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfInformationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Information cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfInformationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Request Preference
 *
 * 
 *
 */
boolean emberAfInformationClusterServerRequestPreferenceCallback(void);
/** @brief Server Tick
 *
 * Information cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfInformationClusterServerTickCallback(int8u endpoint);
/** @brief Update
 *
 * 
 *
 * @param accessControl   Ver.: always
 * @param option   Ver.: always
 * @param contents   Ver.: always
 */
boolean emberAfInformationClusterUpdateCallback(int8u accessControl,
                                                int8u option,
                                                int8u* contents);
/** @brief Update Response
 *
 * 
 *
 * @param notificationList   Ver.: always
 */
boolean emberAfInformationClusterUpdateResponseCallback(int8u* notificationList);

/** @} END Information Cluster Callbacks */

/** @name Data Sharing Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Data Sharing cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataSharingClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Data Sharing cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataSharingClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Data Sharing cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataSharingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Data Sharing cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataSharingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Data Sharing cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataSharingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Data Sharing cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataSharingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Data Sharing cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataSharingClusterClientTickCallback(int8u endpoint);
/** @brief File Transmission
 *
 * 
 *
 * @param transmitOptions   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfDataSharingClusterFileTransmissionCallback(int8u transmitOptions,
                                                          int8u* buffer);
/** @brief Modify File Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartPosition   Ver.: always
 * @param octetCount   Ver.: always
 */
boolean emberAfDataSharingClusterModifyFileRequestCallback(int16u fileIndex,
                                                           int32u fileStartPosition,
                                                           int32u octetCount);
/** @brief Modify Record Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartRecord   Ver.: always
 * @param recordCount   Ver.: always
 */
boolean emberAfDataSharingClusterModifyRecordRequestCallback(int16u fileIndex,
                                                             int16u fileStartRecord,
                                                             int16u recordCount);
/** @brief Read File Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartPositionAndRequestedOctetCount   Ver.: always
 */
boolean emberAfDataSharingClusterReadFileRequestCallback(int16u fileIndex,
                                                         int8u* fileStartPositionAndRequestedOctetCount);
/** @brief Read Record Request
 *
 * 
 *
 * @param fileIndex   Ver.: always
 * @param fileStartRecordAndRequestedRecordCount   Ver.: always
 */
boolean emberAfDataSharingClusterReadRecordRequestCallback(int16u fileIndex,
                                                           int8u* fileStartRecordAndRequestedRecordCount);
/** @brief Record Transmission
 *
 * 
 *
 * @param transmitOptions   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfDataSharingClusterRecordTransmissionCallback(int8u transmitOptions,
                                                            int8u* buffer);
/** @brief Server Attribute Changed
 *
 * Data Sharing cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataSharingClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Data Sharing cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataSharingClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Data Sharing cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataSharingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Data Sharing cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataSharingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Data Sharing cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataSharingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Data Sharing cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataSharingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * Data Sharing cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataSharingClusterServerTickCallback(int8u endpoint);
/** @brief Write File Request
 *
 * 
 *
 * @param writeOptions   Ver.: always
 * @param fileSize   Ver.: always
 */
boolean emberAfDataSharingClusterWriteFileRequestCallback(int8u writeOptions,
                                                          int8u* fileSize);
/** @brief Write File Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param fileIndex   Ver.: always
 */
boolean emberAfDataSharingClusterWriteFileResponseCallback(int8u status,
                                                           int8u* fileIndex);

/** @} END Data Sharing Cluster Callbacks */

/** @name Gaming Cluster Callbacks */
// @{

/** @brief Action Control
 *
 * 
 *
 * @param actions   Ver.: always
 */
boolean emberAfGamingClusterActionControlCallback(int32u actions);
/** @brief Client Attribute Changed
 *
 * Gaming cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGamingClusterClientAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Gaming cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGamingClusterClientDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Client Init
 *
 * Gaming cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGamingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Gaming cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGamingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Gaming cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGamingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Gaming cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGamingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Client Tick
 *
 * Gaming cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGamingClusterClientTickCallback(int8u endpoint);
/** @brief Download Game
 *
 * 
 *
 */
boolean emberAfGamingClusterDownloadGameCallback(void);
/** @brief End Game
 *
 * 
 *
 */
boolean emberAfGamingClusterEndGameCallback(void);
/** @brief Game Announcement
 *
 * 
 *
 * @param gameId   Ver.: always
 * @param gameMaster   Ver.: always
 * @param listOfGame   Ver.: always
 */
boolean emberAfGamingClusterGameAnnouncementCallback(int16u gameId,
                                                     int8u gameMaster,
                                                     int8u* listOfGame);
/** @brief General Response
 *
 * 
 *
 * @param commandId   Ver.: always
 * @param status   Ver.: always
 * @param message   Ver.: always
 */
boolean emberAfGamingClusterGeneralResponseCallback(int8u commandId,
                                                    int8u status,
                                                    int8u* message);
/** @brief Join Game
 *
 * 
 *
 * @param gameId   Ver.: always
 * @param joinAsMaster   Ver.: always
 * @param nameOfGame   Ver.: always
 */
boolean emberAfGamingClusterJoinGameCallback(int16u gameId,
                                             int8u joinAsMaster,
                                             int8u* nameOfGame);
/** @brief Pause Game
 *
 * 
 *
 */
boolean emberAfGamingClusterPauseGameCallback(void);
/** @brief Quit Game
 *
 * 
 *
 */
boolean emberAfGamingClusterQuitGameCallback(void);
/** @brief Resume Game
 *
 * 
 *
 */
boolean emberAfGamingClusterResumeGameCallback(void);
/** @brief Search Game
 *
 * 
 *
 * @param specificGame   Ver.: always
 * @param gameId   Ver.: always
 */
boolean emberAfGamingClusterSearchGameCallback(int8u specificGame,
                                               int16u gameId);
/** @brief Server Attribute Changed
 *
 * Gaming cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfGamingClusterServerAttributeChangedCallback(int8u endpoint,
                                                        EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Gaming cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfGamingClusterServerDefaultResponseCallback(int8u endpoint,
                                                       int8u commandId,
                                                       EmberAfStatus status);
/** @brief Server Init
 *
 * Gaming cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfGamingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Gaming cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfGamingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                            EmberAfAttributeId attributeId,
                                                                            int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Gaming cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfGamingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                   int16u indexOrDestination,
                                                   EmberApsFrame * apsFrame,
                                                   int16u msgLen,
                                                   int8u * message,
                                                   EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Gaming cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfGamingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                    EmberAfAttributeId attributeId,
                                                                    EmberAfAttributeType attributeType,
                                                                    int8u size,
                                                                    int8u * value);
/** @brief Server Tick
 *
 * Gaming cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfGamingClusterServerTickCallback(int8u endpoint);
/** @brief Start Game
 *
 * 
 *
 */
boolean emberAfGamingClusterStartGameCallback(void);
/** @brief Start Over
 *
 * 
 *
 */
boolean emberAfGamingClusterStartOverCallback(void);

/** @} END Gaming Cluster Callbacks */

/** @name Data Rate Control Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Data Rate Control cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataRateControlClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Data Rate Control cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataRateControlClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Client Init
 *
 * Data Rate Control cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataRateControlClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Data Rate Control cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataRateControlClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Data Rate Control cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataRateControlClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Data Rate Control cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataRateControlClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Client Tick
 *
 * Data Rate Control cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataRateControlClusterClientTickCallback(int8u endpoint);
/** @brief Data Rate Control
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 * @param dataRate   Ver.: always
 */
boolean emberAfDataRateControlClusterDataRateControlCallback(int16u originatorAddress,
                                                             int16u destinationAddress,
                                                             int8u dataRate);
/** @brief Data Rate Notification
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 * @param dataRate   Ver.: always
 */
boolean emberAfDataRateControlClusterDataRateNotificationCallback(int16u originatorAddress,
                                                                  int16u destinationAddress,
                                                                  int8u dataRate);
/** @brief Path Creation
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 * @param dataRate   Ver.: always
 */
boolean emberAfDataRateControlClusterPathCreationCallback(int16u originatorAddress,
                                                          int16u destinationAddress,
                                                          int8u dataRate);
/** @brief Path Deletion
 *
 * 
 *
 * @param originatorAddress   Ver.: always
 * @param destinationAddress   Ver.: always
 */
boolean emberAfDataRateControlClusterPathDeletionCallback(int16u originatorAddress,
                                                          int16u destinationAddress);
/** @brief Server Attribute Changed
 *
 * Data Rate Control cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDataRateControlClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Data Rate Control cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDataRateControlClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Server Init
 *
 * Data Rate Control cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDataRateControlClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Data Rate Control cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDataRateControlClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Data Rate Control cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDataRateControlClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Data Rate Control cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDataRateControlClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Server Tick
 *
 * Data Rate Control cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDataRateControlClusterServerTickCallback(int8u endpoint);

/** @} END Data Rate Control Cluster Callbacks */

/** @name Voice over ZigBee Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Voice over ZigBee cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Voice over ZigBee cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Client Init
 *
 * Voice over ZigBee cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Voice over ZigBee cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Voice over ZigBee cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Voice over ZigBee cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfVoiceOverZigbeeClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Client Tick
 *
 * Voice over ZigBee cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterClientTickCallback(int8u endpoint);
/** @brief Control
 *
 * 
 *
 * @param controlType   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterControlCallback(int8u controlType);
/** @brief Control Response
 *
 * 
 *
 * @param ackNack   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterControlResponseCallback(int8u ackNack);
/** @brief Establishment Request
 *
 * 
 *
 * @param flag   Ver.: always
 * @param codecType   Ver.: always
 * @param sampFreq   Ver.: always
 * @param codecRate   Ver.: always
 * @param serviceType   Ver.: always
 * @param buffer   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterEstablishmentRequestCallback(int8u flag,
                                                                  int8u codecType,
                                                                  int8u sampFreq,
                                                                  int8u codecRate,
                                                                  int8u serviceType,
                                                                  int8u* buffer);
/** @brief Establishment Response
 *
 * 
 *
 * @param ackNack   Ver.: always
 * @param codecType   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterEstablishmentResponseCallback(int8u ackNack,
                                                                   int8u codecType);
/** @brief Server Attribute Changed
 *
 * Voice over ZigBee cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerAttributeChangedCallback(int8u endpoint,
                                                                 EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Voice over ZigBee cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerDefaultResponseCallback(int8u endpoint,
                                                                int8u commandId,
                                                                EmberAfStatus status);
/** @brief Server Init
 *
 * Voice over ZigBee cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Voice over ZigBee cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Voice over ZigBee cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                            int16u indexOrDestination,
                                                            EmberApsFrame * apsFrame,
                                                            int16u msgLen,
                                                            int8u * message,
                                                            EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Voice over ZigBee cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfVoiceOverZigbeeClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             EmberAfAttributeType attributeType,
                                                                             int8u size,
                                                                             int8u * value);
/** @brief Server Tick
 *
 * Voice over ZigBee cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfVoiceOverZigbeeClusterServerTickCallback(int8u endpoint);
/** @brief Voice Transmission
 *
 * 
 *
 * @param voiceData   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterVoiceTransmissionCallback(int8u* voiceData);
/** @brief Voice Transmission Completion
 *
 * 
 *
 */
boolean emberAfVoiceOverZigbeeClusterVoiceTransmissionCompletionCallback(void);
/** @brief Voice Transmission Response
 *
 * 
 *
 * @param sequenceNumber   Ver.: always
 * @param errorFlag   Ver.: always
 */
boolean emberAfVoiceOverZigbeeClusterVoiceTransmissionResponseCallback(int8u sequenceNumber,
                                                                       int8u errorFlag);

/** @} END Voice over ZigBee Cluster Callbacks */

/** @name Chatting Cluster Callbacks */
// @{

/** @brief Chat Message
 *
 * 
 *
 * @param destinationUid   Ver.: always
 * @param sourceUid   Ver.: always
 * @param cid   Ver.: always
 * @param nickname   Ver.: always
 * @param message   Ver.: always
 */
boolean emberAfChattingClusterChatMessageCallback(int16u destinationUid,
                                                  int16u sourceUid,
                                                  int16u cid,
                                                  int8u* nickname,
                                                  int8u* message);
/** @brief Client Attribute Changed
 *
 * Chatting cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfChattingClusterClientAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Chatting cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfChattingClusterClientDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Client Init
 *
 * Chatting cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfChattingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Chatting cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfChattingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Chatting cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfChattingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame * apsFrame,
                                                     int16u msgLen,
                                                     int8u * message,
                                                     EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Chatting cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfChattingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u * value);
/** @brief Client Tick
 *
 * Chatting cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfChattingClusterClientTickCallback(int8u endpoint);
/** @brief Get Node Information Request
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 */
boolean emberAfChattingClusterGetNodeInformationRequestCallback(int16u cid,
                                                                int16u uid);
/** @brief Get Node Information Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param addressEndpointAndNickname   Ver.: always
 */
boolean emberAfChattingClusterGetNodeInformationResponseCallback(int8u status,
                                                                 int16u cid,
                                                                 int16u uid,
                                                                 int8u* addressEndpointAndNickname);
/** @brief Join Chat Request
 *
 * 
 *
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 * @param cid   Ver.: always
 */
boolean emberAfChattingClusterJoinChatRequestCallback(int16u uid,
                                                      int8u* nickname,
                                                      int16u cid);
/** @brief Join Chat Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param cid   Ver.: always
 * @param chatParticipantList   Ver.: always
 */
boolean emberAfChattingClusterJoinChatResponseCallback(int8u status,
                                                       int16u cid,
                                                       int8u* chatParticipantList);
/** @brief Leave Chat Request
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 */
boolean emberAfChattingClusterLeaveChatRequestCallback(int16u cid,
                                                       int16u uid);
/** @brief Search Chat Request
 *
 * 
 *
 */
boolean emberAfChattingClusterSearchChatRequestCallback(void);
/** @brief Search Chat Response
 *
 * 
 *
 * @param options   Ver.: always
 * @param chatRoomList   Ver.: always
 */
boolean emberAfChattingClusterSearchChatResponseCallback(int8u options,
                                                         int8u* chatRoomList);
/** @brief Server Attribute Changed
 *
 * Chatting cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfChattingClusterServerAttributeChangedCallback(int8u endpoint,
                                                          EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Chatting cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfChattingClusterServerDefaultResponseCallback(int8u endpoint,
                                                         int8u commandId,
                                                         EmberAfStatus status);
/** @brief Server Init
 *
 * Chatting cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfChattingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Chatting cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfChattingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Chatting cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfChattingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                     int16u indexOrDestination,
                                                     EmberApsFrame * apsFrame,
                                                     int16u msgLen,
                                                     int8u * message,
                                                     EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Chatting cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfChattingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                      EmberAfAttributeId attributeId,
                                                                      EmberAfAttributeType attributeType,
                                                                      int8u size,
                                                                      int8u * value);
/** @brief Server Tick
 *
 * Chatting cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfChattingClusterServerTickCallback(int8u endpoint);
/** @brief Start Chat Request
 *
 * 
 *
 * @param name   Ver.: always
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 */
boolean emberAfChattingClusterStartChatRequestCallback(int8u* name,
                                                       int16u uid,
                                                       int8u* nickname);
/** @brief Start Chat Response
 *
 * 
 *
 * @param status   Ver.: always
 * @param cid   Ver.: always
 */
boolean emberAfChattingClusterStartChatResponseCallback(int8u status,
                                                        int16u cid);
/** @brief Switch Chairman Confirm
 *
 * 
 *
 * @param cid   Ver.: always
 * @param nodeInformationList   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanConfirmCallback(int16u cid,
                                                            int8u* nodeInformationList);
/** @brief Switch Chairman Notification
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param address   Ver.: always
 * @param endpoint   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanNotificationCallback(int16u cid,
                                                                 int16u uid,
                                                                 int16u address,
                                                                 int8u endpoint);
/** @brief Switch Chairman Request
 *
 * 
 *
 * @param cid   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanRequestCallback(int16u cid);
/** @brief Switch Chairman Response
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 */
boolean emberAfChattingClusterSwitchChairmanResponseCallback(int16u cid,
                                                             int16u uid);
/** @brief User Joined
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 */
boolean emberAfChattingClusterUserJoinedCallback(int16u cid,
                                                 int16u uid,
                                                 int8u* nickname);
/** @brief User Left
 *
 * 
 *
 * @param cid   Ver.: always
 * @param uid   Ver.: always
 * @param nickname   Ver.: always
 */
boolean emberAfChattingClusterUserLeftCallback(int16u cid,
                                               int16u uid,
                                               int8u* nickname);

/** @} END Chatting Cluster Callbacks */

/** @name Payment Cluster Callbacks */
// @{

/** @brief Accept Payment
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 * @param serviceId   Ver.: always
 * @param goodId   Ver.: always
 */
boolean emberAfPaymentClusterAcceptPaymentCallback(int8u* userId,
                                                   int16u userType,
                                                   int16u serviceId,
                                                   int8u* goodId);
/** @brief Buy Confirm
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 * @param price   Ver.: always
 * @param timestamp   Ver.: always
 * @param transId   Ver.: always
 * @param transStatus   Ver.: always
 */
boolean emberAfPaymentClusterBuyConfirmCallback(int8u* serialNumber,
                                                int32u currency,
                                                int8u priceTrailingDigit,
                                                int32u price,
                                                int8u* timestamp,
                                                int16u transId,
                                                int8u transStatus);
/** @brief Buy Request
 *
 * 
 *
 * @param userId   Ver.: always
 * @param userType   Ver.: always
 * @param serviceId   Ver.: always
 * @param goodId   Ver.: always
 */
boolean emberAfPaymentClusterBuyRequestCallback(int8u* userId,
                                                int16u userType,
                                                int16u serviceId,
                                                int8u* goodId);
/** @brief Client Attribute Changed
 *
 * Payment cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPaymentClusterClientAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Payment cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPaymentClusterClientDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Client Init
 *
 * Payment cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPaymentClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Payment cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPaymentClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Payment cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPaymentClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame * apsFrame,
                                                    int16u msgLen,
                                                    int8u * message,
                                                    EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Payment cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPaymentClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u * value);
/** @brief Client Tick
 *
 * Payment cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPaymentClusterClientTickCallback(int8u endpoint);
/** @brief Payment Confirm
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param transId   Ver.: always
 * @param transStatus   Ver.: always
 */
boolean emberAfPaymentClusterPaymentConfirmCallback(int8u* serialNumber,
                                                    int16u transId,
                                                    int8u transStatus);
/** @brief Receipt Delivery
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param currency   Ver.: always
 * @param priceTrailingDigit   Ver.: always
 * @param price   Ver.: always
 * @param timestamp   Ver.: always
 */
boolean emberAfPaymentClusterReceiptDeliveryCallback(int8u* serialNumber,
                                                     int32u currency,
                                                     int8u priceTrailingDigit,
                                                     int32u price,
                                                     int8u* timestamp);
/** @brief Server Attribute Changed
 *
 * Payment cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfPaymentClusterServerAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Payment cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfPaymentClusterServerDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Server Init
 *
 * Payment cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfPaymentClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Payment cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfPaymentClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Payment cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfPaymentClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame * apsFrame,
                                                    int16u msgLen,
                                                    int8u * message,
                                                    EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Payment cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfPaymentClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u * value);
/** @brief Server Tick
 *
 * Payment cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfPaymentClusterServerTickCallback(int8u endpoint);
/** @brief Transaction End
 *
 * 
 *
 * @param serialNumber   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfPaymentClusterTransactionEndCallback(int8u* serialNumber,
                                                    int8u status);

/** @} END Payment Cluster Callbacks */

/** @name Billing Cluster Callbacks */
// @{

/** @brief Bill Status Notification
 *
 * 
 *
 * @param userId   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfBillingClusterBillStatusNotificationCallback(int8u* userId,
                                                            int8u status);
/** @brief Check Bill Status
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterCheckBillStatusCallback(int8u* userId,
                                                     int16u serviceId,
                                                     int16u serviceProviderId);
/** @brief Client Attribute Changed
 *
 * Billing cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBillingClusterClientAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Billing cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBillingClusterClientDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Client Init
 *
 * Billing cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBillingClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Billing cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBillingClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Billing cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBillingClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame * apsFrame,
                                                    int16u msgLen,
                                                    int8u * message,
                                                    EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Billing cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBillingClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u * value);
/** @brief Client Tick
 *
 * Billing cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBillingClusterClientTickCallback(int8u endpoint);
/** @brief Send Bill Record
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 * @param timestamp   Ver.: always
 * @param duration   Ver.: always
 */
boolean emberAfBillingClusterSendBillRecordCallback(int8u* userId,
                                                    int16u serviceId,
                                                    int16u serviceProviderId,
                                                    int8u* timestamp,
                                                    int16u duration);
/** @brief Server Attribute Changed
 *
 * Billing cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfBillingClusterServerAttributeChangedCallback(int8u endpoint,
                                                         EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Billing cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfBillingClusterServerDefaultResponseCallback(int8u endpoint,
                                                        int8u commandId,
                                                        EmberAfStatus status);
/** @brief Server Init
 *
 * Billing cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfBillingClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Billing cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfBillingClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                             EmberAfAttributeId attributeId,
                                                                             int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Billing cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfBillingClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                    int16u indexOrDestination,
                                                    EmberApsFrame * apsFrame,
                                                    int16u msgLen,
                                                    int8u * message,
                                                    EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Billing cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfBillingClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId,
                                                                     EmberAfAttributeType attributeType,
                                                                     int8u size,
                                                                     int8u * value);
/** @brief Server Tick
 *
 * Billing cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfBillingClusterServerTickCallback(int8u endpoint);
/** @brief Session Keep Alive
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterSessionKeepAliveCallback(int8u* userId,
                                                      int16u serviceId,
                                                      int16u serviceProviderId);
/** @brief Start Billing Session
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterStartBillingSessionCallback(int8u* userId,
                                                         int16u serviceId,
                                                         int16u serviceProviderId);
/** @brief Stop Billing Session
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterStopBillingSessionCallback(int8u* userId,
                                                        int16u serviceId,
                                                        int16u serviceProviderId);
/** @brief Subscribe
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterSubscribeCallback(int8u* userId,
                                               int16u serviceId,
                                               int16u serviceProviderId);
/** @brief Unsubscribe
 *
 * 
 *
 * @param userId   Ver.: always
 * @param serviceId   Ver.: always
 * @param serviceProviderId   Ver.: always
 */
boolean emberAfBillingClusterUnsubscribeCallback(int8u* userId,
                                                 int16u serviceId,
                                                 int16u serviceProviderId);

/** @} END Billing Cluster Callbacks */

/** @name Appliance Identification Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Appliance Identification cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Appliance Identification cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Client Init
 *
 * Appliance Identification cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Appliance Identification cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceIdentificationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Appliance Identification cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame * apsFrame,
                                                                    int16u msgLen,
                                                                    int8u * message,
                                                                    EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Appliance Identification cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceIdentificationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u * value);
/** @brief Client Tick
 *
 * Appliance Identification cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceIdentificationClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Appliance Identification cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Appliance Identification cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Server Init
 *
 * Appliance Identification cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Appliance Identification cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceIdentificationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Appliance Identification cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame * apsFrame,
                                                                    int16u msgLen,
                                                                    int8u * message,
                                                                    EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Appliance Identification cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceIdentificationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u * value);
/** @brief Server Tick
 *
 * Appliance Identification cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceIdentificationClusterServerTickCallback(int8u endpoint);

/** @} END Appliance Identification Cluster Callbacks */

/** @name Meter Identification Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Meter Identification cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMeterIdentificationClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Meter Identification cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMeterIdentificationClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Client Init
 *
 * Meter Identification cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMeterIdentificationClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Meter Identification cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMeterIdentificationClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Meter Identification cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMeterIdentificationClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Meter Identification cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMeterIdentificationClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Client Tick
 *
 * Meter Identification cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMeterIdentificationClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Meter Identification cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfMeterIdentificationClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Meter Identification cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfMeterIdentificationClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Server Init
 *
 * Meter Identification cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfMeterIdentificationClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Meter Identification cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfMeterIdentificationClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Meter Identification cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfMeterIdentificationClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Meter Identification cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfMeterIdentificationClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Server Tick
 *
 * Meter Identification cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfMeterIdentificationClusterServerTickCallback(int8u endpoint);

/** @} END Meter Identification Cluster Callbacks */

/** @name Appliance Events and Alert Cluster Callbacks */
// @{

/** @brief Alerts Notification
 *
 * 
 *
 * @param alertsCount   Ver.: always
 * @param alertStructures   Ver.: always
 */
boolean emberAfApplianceEventsAndAlertClusterAlertsNotificationCallback(int8u alertsCount,
                                                                        int8u* alertStructures);
/** @brief Client Attribute Changed
 *
 * Appliance Events and Alert cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Appliance Events and Alert cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Client Init
 *
 * Appliance Events and Alert cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Appliance Events and Alert cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Appliance Events and Alert cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame * apsFrame,
                                                                    int16u msgLen,
                                                                    int8u * message,
                                                                    EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Appliance Events and Alert cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceEventsAndAlertClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u * value);
/** @brief Client Tick
 *
 * Appliance Events and Alert cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterClientTickCallback(int8u endpoint);
/** @brief Events Notification
 *
 * 
 *
 * @param eventHeader   Ver.: always
 * @param eventId   Ver.: always
 */
boolean emberAfApplianceEventsAndAlertClusterEventsNotificationCallback(int8u eventHeader,
                                                                        int8u eventId);
/** @brief Get Alerts
 *
 * 
 *
 */
boolean emberAfApplianceEventsAndAlertClusterGetAlertsCallback(void);
/** @brief Get Alerts Response
 *
 * 
 *
 * @param alertsCount   Ver.: always
 * @param alertStructures   Ver.: always
 */
boolean emberAfApplianceEventsAndAlertClusterGetAlertsResponseCallback(int8u alertsCount,
                                                                       int8u* alertStructures);
/** @brief Server Attribute Changed
 *
 * Appliance Events and Alert cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Appliance Events and Alert cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerDefaultResponseCallback(int8u endpoint,
                                                                        int8u commandId,
                                                                        EmberAfStatus status);
/** @brief Server Init
 *
 * Appliance Events and Alert cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Appliance Events and Alert cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                             EmberAfAttributeId attributeId,
                                                                                             int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Appliance Events and Alert cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                    int16u indexOrDestination,
                                                                    EmberApsFrame * apsFrame,
                                                                    int16u msgLen,
                                                                    int8u * message,
                                                                    EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Appliance Events and Alert cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceEventsAndAlertClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                     EmberAfAttributeId attributeId,
                                                                                     EmberAfAttributeType attributeType,
                                                                                     int8u size,
                                                                                     int8u * value);
/** @brief Server Tick
 *
 * Appliance Events and Alert cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceEventsAndAlertClusterServerTickCallback(int8u endpoint);

/** @} END Appliance Events and Alert Cluster Callbacks */

/** @name Appliance Statistics Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Appliance Statistics cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Appliance Statistics cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Client Init
 *
 * Appliance Statistics cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Appliance Statistics cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceStatisticsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Appliance Statistics cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Appliance Statistics cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceStatisticsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Client Tick
 *
 * Appliance Statistics cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceStatisticsClusterClientTickCallback(int8u endpoint);
/** @brief Log Notification
 *
 * 
 *
 * @param timeStamp   Ver.: always
 * @param logId   Ver.: always
 * @param logLength   Ver.: always
 * @param logPayload   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogNotificationCallback(int32u timeStamp,
                                                                 int32u logId,
                                                                 int32u logLength,
                                                                 int8u* logPayload);
/** @brief Log Queue Request
 *
 * 
 *
 */
boolean emberAfApplianceStatisticsClusterLogQueueRequestCallback(void);
/** @brief Log Queue Response
 *
 * 
 *
 * @param logQueueSize   Ver.: always
 * @param logIds   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogQueueResponseCallback(int8u logQueueSize,
                                                                  int8u* logIds);
/** @brief Log Request
 *
 * 
 *
 * @param logId   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogRequestCallback(int32u logId);
/** @brief Log Response
 *
 * 
 *
 * @param timeStamp   Ver.: always
 * @param logId   Ver.: always
 * @param logLength   Ver.: always
 * @param logPayload   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterLogResponseCallback(int32u timeStamp,
                                                             int32u logId,
                                                             int32u logLength,
                                                             int8u* logPayload);
/** @brief Server Attribute Changed
 *
 * Appliance Statistics cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerAttributeChangedCallback(int8u endpoint,
                                                                     EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Appliance Statistics cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerDefaultResponseCallback(int8u endpoint,
                                                                    int8u commandId,
                                                                    EmberAfStatus status);
/** @brief Server Init
 *
 * Appliance Statistics cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Appliance Statistics cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfApplianceStatisticsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                         EmberAfAttributeId attributeId,
                                                                                         int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Appliance Statistics cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                int16u indexOrDestination,
                                                                EmberApsFrame * apsFrame,
                                                                int16u msgLen,
                                                                int8u * message,
                                                                EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Appliance Statistics cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfApplianceStatisticsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 EmberAfAttributeType attributeType,
                                                                                 int8u size,
                                                                                 int8u * value);
/** @brief Server Tick
 *
 * Appliance Statistics cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfApplianceStatisticsClusterServerTickCallback(int8u endpoint);
/** @brief Statistics Available
 *
 * 
 *
 * @param logQueueSize   Ver.: always
 * @param logIds   Ver.: always
 */
boolean emberAfApplianceStatisticsClusterStatisticsAvailableCallback(int8u logQueueSize,
                                                                     int8u* logIds);

/** @} END Appliance Statistics Cluster Callbacks */

/** @name Electrical Measurement Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Electrical Measurement cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Electrical Measurement cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief Client Init
 *
 * Electrical Measurement cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Electrical Measurement cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfElectricalMeasurementClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Electrical Measurement cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame * apsFrame,
                                                                  int16u msgLen,
                                                                  int8u * message,
                                                                  EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Electrical Measurement cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfElectricalMeasurementClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u * value);
/** @brief Client Tick
 *
 * Electrical Measurement cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfElectricalMeasurementClusterClientTickCallback(int8u endpoint);
/** @brief Get Measurement Profile Command
 *
 * 
 *
 * @param attributeId   Ver.: always
 * @param startTime   Ver.: always
 * @param numberOfIntervals   Ver.: always
 */
boolean emberAfElectricalMeasurementClusterGetMeasurementProfileCommandCallback(int16u attributeId,
                                                                                int32u startTime,
                                                                                int8u numberOfIntervals);
/** @brief Get Measurement Profile Response Command
 *
 * 
 *
 * @param startTime   Ver.: always
 * @param status   Ver.: always
 * @param profileIntervalPeriod   Ver.: always
 * @param numberOfIntervalsDelivered   Ver.: always
 * @param attributeId   Ver.: always
 * @param intervals   Ver.: always
 */
boolean emberAfElectricalMeasurementClusterGetMeasurementProfileResponseCommandCallback(int32u startTime,
                                                                                        int8u status,
                                                                                        int8u profileIntervalPeriod,
                                                                                        int8u numberOfIntervalsDelivered,
                                                                                        int16u attributeId,
                                                                                        int8u* intervals);
/** @brief Get Profile Info Command
 *
 * 
 *
 */
boolean emberAfElectricalMeasurementClusterGetProfileInfoCommandCallback(void);
/** @brief Get Profile Info Response Command
 *
 * 
 *
 * @param profileCount   Ver.: always
 * @param profileIntervalPeriod   Ver.: always
 * @param maxNumberOfIntervals   Ver.: always
 * @param listOfAttributes   Ver.: always
 */
boolean emberAfElectricalMeasurementClusterGetProfileInfoResponseCommandCallback(int8u profileCount,
                                                                                 int8u profileIntervalPeriod,
                                                                                 int8u maxNumberOfIntervals,
                                                                                 int8u* listOfAttributes);
/** @brief Server Attribute Changed
 *
 * Electrical Measurement cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerAttributeChangedCallback(int8u endpoint,
                                                                       EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Electrical Measurement cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerDefaultResponseCallback(int8u endpoint,
                                                                      int8u commandId,
                                                                      EmberAfStatus status);
/** @brief Server Init
 *
 * Electrical Measurement cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Electrical Measurement cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfElectricalMeasurementClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                           EmberAfAttributeId attributeId,
                                                                                           int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Electrical Measurement cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                                  int16u indexOrDestination,
                                                                  EmberApsFrame * apsFrame,
                                                                  int16u msgLen,
                                                                  int8u * message,
                                                                  EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Electrical Measurement cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfElectricalMeasurementClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                                   EmberAfAttributeId attributeId,
                                                                                   EmberAfAttributeType attributeType,
                                                                                   int8u size,
                                                                                   int8u * value);
/** @brief Server Tick
 *
 * Electrical Measurement cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfElectricalMeasurementClusterServerTickCallback(int8u endpoint);

/** @} END Electrical Measurement Cluster Callbacks */

/** @name Diagnostics Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Diagnostics cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDiagnosticsClusterClientAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Diagnostics cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDiagnosticsClusterClientDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Client Init
 *
 * Diagnostics cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDiagnosticsClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Diagnostics cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDiagnosticsClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Diagnostics cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDiagnosticsClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Diagnostics cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDiagnosticsClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Client Tick
 *
 * Diagnostics cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDiagnosticsClusterClientTickCallback(int8u endpoint);
/** @brief Server Attribute Changed
 *
 * Diagnostics cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfDiagnosticsClusterServerAttributeChangedCallback(int8u endpoint,
                                                             EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Diagnostics cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfDiagnosticsClusterServerDefaultResponseCallback(int8u endpoint,
                                                            int8u commandId,
                                                            EmberAfStatus status);
/** @brief Server Init
 *
 * Diagnostics cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfDiagnosticsClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Diagnostics cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfDiagnosticsClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                 EmberAfAttributeId attributeId,
                                                                                 int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Diagnostics cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfDiagnosticsClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                        int16u indexOrDestination,
                                                        EmberApsFrame * apsFrame,
                                                        int16u msgLen,
                                                        int8u * message,
                                                        EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Diagnostics cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfDiagnosticsClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                         EmberAfAttributeId attributeId,
                                                                         EmberAfAttributeType attributeType,
                                                                         int8u size,
                                                                         int8u * value);
/** @brief Server Tick
 *
 * Diagnostics cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfDiagnosticsClusterServerTickCallback(int8u endpoint);

/** @} END Diagnostics Cluster Callbacks */

/** @name ZLL Commissioning Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * ZLL Commissioning cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfZllCommissioningClusterClientAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * ZLL Commissioning cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfZllCommissioningClusterClientDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Client Init
 *
 * ZLL Commissioning cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfZllCommissioningClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * ZLL Commissioning cluster, Client Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfZllCommissioningClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * ZLL Commissioning cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfZllCommissioningClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * ZLL Commissioning cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfZllCommissioningClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Client Tick
 *
 * ZLL Commissioning cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfZllCommissioningClusterClientTickCallback(int8u endpoint);
/** @brief Device Information Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param startIndex   Ver.: always
 */
boolean emberAfZllCommissioningClusterDeviceInformationRequestCallback(int32u transaction,
                                                                       int8u startIndex);
/** @brief Device Information Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param numberOfSubDevices   Ver.: always
 * @param startIndex   Ver.: always
 * @param deviceInformationRecordCount   Ver.: always
 * @param deviceInformationRecordList   Ver.: always
 */
boolean emberAfZllCommissioningClusterDeviceInformationResponseCallback(int32u transaction,
                                                                        int8u numberOfSubDevices,
                                                                        int8u startIndex,
                                                                        int8u deviceInformationRecordCount,
                                                                        int8u* deviceInformationRecordList);
/** @brief Endpoint Information
 *
 * 
 *
 * @param ieeeAddress   Ver.: always
 * @param networkAddress   Ver.: always
 * @param endpointId   Ver.: always
 * @param profileId   Ver.: always
 * @param deviceId   Ver.: always
 * @param version   Ver.: always
 */
boolean emberAfZllCommissioningClusterEndpointInformationCallback(int8u* ieeeAddress,
                                                                  int16u networkAddress,
                                                                  int8u endpointId,
                                                                  int16u profileId,
                                                                  int16u deviceId,
                                                                  int8u version);
/** @brief Get Endpoint List Request
 *
 * 
 *
 * @param startIndex   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetEndpointListRequestCallback(int8u startIndex);
/** @brief Get Endpoint List Response
 *
 * 
 *
 * @param total   Ver.: always
 * @param startIndex   Ver.: always
 * @param count   Ver.: always
 * @param endpointInformationRecordList   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetEndpointListResponseCallback(int8u total,
                                                                      int8u startIndex,
                                                                      int8u count,
                                                                      int8u* endpointInformationRecordList);
/** @brief Get Group Identifiers Request
 *
 * 
 *
 * @param startIndex   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetGroupIdentifiersRequestCallback(int8u startIndex);
/** @brief Get Group Identifiers Response
 *
 * 
 *
 * @param total   Ver.: always
 * @param startIndex   Ver.: always
 * @param count   Ver.: always
 * @param groupInformationRecordList   Ver.: always
 */
boolean emberAfZllCommissioningClusterGetGroupIdentifiersResponseCallback(int8u total,
                                                                          int8u startIndex,
                                                                          int8u count,
                                                                          int8u* groupInformationRecordList);
/** @brief Identify Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param identifyDuration   Ver.: always
 */
boolean emberAfZllCommissioningClusterIdentifyRequestCallback(int32u transaction,
                                                              int16u identifyDuration);
/** @brief Network Join End Device Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param keyIndex   Ver.: always
 * @param encryptedNetworkKey   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param groupIdentifiersBegin   Ver.: always
 * @param groupIdentifiersEnd   Ver.: always
 * @param freeNetworkAddressRangeBegin   Ver.: always
 * @param freeNetworkAddressRangeEnd   Ver.: always
 * @param freeGroupIdentifierRangeBegin   Ver.: always
 * @param freeGroupIdentifierRangeEnd   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinEndDeviceRequestCallback(int32u transaction,
                                                                          int8u* extendedPanId,
                                                                          int8u keyIndex,
                                                                          int8u* encryptedNetworkKey,
                                                                          int8u networkUpdateId,
                                                                          int8u logicalChannel,
                                                                          int16u panId,
                                                                          int16u networkAddress,
                                                                          int16u groupIdentifiersBegin,
                                                                          int16u groupIdentifiersEnd,
                                                                          int16u freeNetworkAddressRangeBegin,
                                                                          int16u freeNetworkAddressRangeEnd,
                                                                          int16u freeGroupIdentifierRangeBegin,
                                                                          int16u freeGroupIdentifierRangeEnd);
/** @brief Network Join End Device Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinEndDeviceResponseCallback(int32u transaction,
                                                                           int8u status);
/** @brief Network Join Router Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param keyIndex   Ver.: always
 * @param encryptedNetworkKey   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param groupIdentifiersBegin   Ver.: always
 * @param groupIdentifiersEnd   Ver.: always
 * @param freeNetworkAddressRangeBegin   Ver.: always
 * @param freeNetworkAddressRangeEnd   Ver.: always
 * @param freeGroupIdentifierRangeBegin   Ver.: always
 * @param freeGroupIdentifierRangeEnd   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinRouterRequestCallback(int32u transaction,
                                                                       int8u* extendedPanId,
                                                                       int8u keyIndex,
                                                                       int8u* encryptedNetworkKey,
                                                                       int8u networkUpdateId,
                                                                       int8u logicalChannel,
                                                                       int16u panId,
                                                                       int16u networkAddress,
                                                                       int16u groupIdentifiersBegin,
                                                                       int16u groupIdentifiersEnd,
                                                                       int16u freeNetworkAddressRangeBegin,
                                                                       int16u freeNetworkAddressRangeEnd,
                                                                       int16u freeGroupIdentifierRangeBegin,
                                                                       int16u freeGroupIdentifierRangeEnd);
/** @brief Network Join Router Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param status   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkJoinRouterResponseCallback(int32u transaction,
                                                                        int8u status);
/** @brief Network Start Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param keyIndex   Ver.: always
 * @param encryptedNetworkKey   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param groupIdentifiersBegin   Ver.: always
 * @param groupIdentifiersEnd   Ver.: always
 * @param freeNetworkAddressRangeBegin   Ver.: always
 * @param freeNetworkAddressRangeEnd   Ver.: always
 * @param freeGroupIdentifierRangeBegin   Ver.: always
 * @param freeGroupIdentifierRangeEnd   Ver.: always
 * @param initiatorIeeeAddress   Ver.: always
 * @param initiatorNetworkAddress   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkStartRequestCallback(int32u transaction,
                                                                  int8u* extendedPanId,
                                                                  int8u keyIndex,
                                                                  int8u* encryptedNetworkKey,
                                                                  int8u logicalChannel,
                                                                  int16u panId,
                                                                  int16u networkAddress,
                                                                  int16u groupIdentifiersBegin,
                                                                  int16u groupIdentifiersEnd,
                                                                  int16u freeNetworkAddressRangeBegin,
                                                                  int16u freeNetworkAddressRangeEnd,
                                                                  int16u freeGroupIdentifierRangeBegin,
                                                                  int16u freeGroupIdentifierRangeEnd,
                                                                  int8u* initiatorIeeeAddress,
                                                                  int16u initiatorNetworkAddress);
/** @brief Network Start Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param status   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkStartResponseCallback(int32u transaction,
                                                                   int8u status,
                                                                   int8u* extendedPanId,
                                                                   int8u networkUpdateId,
                                                                   int8u logicalChannel,
                                                                   int16u panId);
/** @brief Network Update Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 */
boolean emberAfZllCommissioningClusterNetworkUpdateRequestCallback(int32u transaction,
                                                                   int8u* extendedPanId,
                                                                   int8u networkUpdateId,
                                                                   int8u logicalChannel,
                                                                   int16u panId,
                                                                   int16u networkAddress);
/** @brief Reset To Factory New Request
 *
 * 
 *
 * @param transaction   Ver.: always
 */
boolean emberAfZllCommissioningClusterResetToFactoryNewRequestCallback(int32u transaction);
/** @brief Scan Request
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param zigbeeInformation   Ver.: always
 * @param zllInformation   Ver.: always
 */
boolean emberAfZllCommissioningClusterScanRequestCallback(int32u transaction,
                                                          int8u zigbeeInformation,
                                                          int8u zllInformation);
/** @brief Scan Response
 *
 * 
 *
 * @param transaction   Ver.: always
 * @param rssiCorrection   Ver.: always
 * @param zigbeeInformation   Ver.: always
 * @param zllInformation   Ver.: always
 * @param keyBitmask   Ver.: always
 * @param responseId   Ver.: always
 * @param extendedPanId   Ver.: always
 * @param networkUpdateId   Ver.: always
 * @param logicalChannel   Ver.: always
 * @param panId   Ver.: always
 * @param networkAddress   Ver.: always
 * @param numberOfSubDevices   Ver.: always
 * @param totalGroupIds   Ver.: always
 * @param endpointId   Ver.: always
 * @param profileId   Ver.: always
 * @param deviceId   Ver.: always
 * @param version   Ver.: always
 * @param groupIdCount   Ver.: always
 */
boolean emberAfZllCommissioningClusterScanResponseCallback(int32u transaction,
                                                           int8u rssiCorrection,
                                                           int8u zigbeeInformation,
                                                           int8u zllInformation,
                                                           int16u keyBitmask,
                                                           int32u responseId,
                                                           int8u* extendedPanId,
                                                           int8u networkUpdateId,
                                                           int8u logicalChannel,
                                                           int16u panId,
                                                           int16u networkAddress,
                                                           int8u numberOfSubDevices,
                                                           int8u totalGroupIds,
                                                           int8u endpointId,
                                                           int16u profileId,
                                                           int16u deviceId,
                                                           int8u version,
                                                           int8u groupIdCount);
/** @brief Server Attribute Changed
 *
 * ZLL Commissioning cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfZllCommissioningClusterServerAttributeChangedCallback(int8u endpoint,
                                                                  EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * ZLL Commissioning cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfZllCommissioningClusterServerDefaultResponseCallback(int8u endpoint,
                                                                 int8u commandId,
                                                                 EmberAfStatus status);
/** @brief Server Init
 *
 * ZLL Commissioning cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfZllCommissioningClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * ZLL Commissioning cluster, Server Manufacturer Specific Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfZllCommissioningClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                      EmberAfAttributeId attributeId,
                                                                                      int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * ZLL Commissioning cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfZllCommissioningClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                             int16u indexOrDestination,
                                                             EmberApsFrame * apsFrame,
                                                             int16u msgLen,
                                                             int8u * message,
                                                             EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * ZLL Commissioning cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfZllCommissioningClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                              EmberAfAttributeId attributeId,
                                                                              EmberAfAttributeType attributeType,
                                                                              int8u size,
                                                                              int8u * value);
/** @brief Server Tick
 *
 * ZLL Commissioning cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfZllCommissioningClusterServerTickCallback(int8u endpoint);

/** @} END ZLL Commissioning Cluster Callbacks */

/** @name Sample Mfg Specific Cluster Cluster Callbacks */
// @{

/** @brief Client Attribute Changed
 *
 * Sample Mfg Specific Cluster cluster, Client Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Client Default Response
 *
 * Sample Mfg Specific Cluster cluster, Client Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Client Init
 *
 * Sample Mfg Specific Cluster cluster, Client Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientInitCallback(int8u endpoint);
/** @brief Client Manufacturer Specific Attribute Changed
 *
 * Sample Mfg Specific Cluster cluster, Client Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Client Message Sent
 *
 * Sample Mfg Specific Cluster cluster, Client Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Client Pre Attribute Changed
 *
 * Sample Mfg Specific Cluster cluster, Client Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSampleMfgSpecificClusterClientPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Client Tick
 *
 * Sample Mfg Specific Cluster cluster, Client Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSampleMfgSpecificClusterClientTickCallback(int8u endpoint);
/** @brief Command One
 *
 * 
 *
 * @param argOne   Ver.: always
 */
boolean emberAfSampleMfgSpecificClusterCommandOneCallback(int8u argOne);
/** @brief Server Attribute Changed
 *
 * Sample Mfg Specific Cluster cluster, Server Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerAttributeChangedCallback(int8u endpoint,
                                                                   EmberAfAttributeId attributeId);
/** @brief Server Default Response
 *
 * Sample Mfg Specific Cluster cluster, Server Default Response
 *
 * @param endpoint Destination endpoint  Ver.: always
 * @param commandId Command id  Ver.: always
 * @param status Status in default response  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerDefaultResponseCallback(int8u endpoint,
                                                                  int8u commandId,
                                                                  EmberAfStatus status);
/** @brief Server Init
 *
 * Sample Mfg Specific Cluster cluster, Server Init
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerInitCallback(int8u endpoint);
/** @brief Server Manufacturer Specific Attribute Changed
 *
 * Sample Mfg Specific Cluster cluster, Server Manufacturer Specific Attribute
 * Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute that changed  Ver.: always
 * @param manufacturerCode Manufacturer Code of the attribute that changed 
 * Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerManufacturerSpecificAttributeChangedCallback(int8u endpoint,
                                                                                       EmberAfAttributeId attributeId,
                                                                                       int16u manufacturerCode);
/** @brief Server Message Sent
 *
 * Sample Mfg Specific Cluster cluster, Server Message Sent
 *
 * @param type The type of message sent  Ver.: always
 * @param indexOrDestination The destination or address to which the message was
 * sent  Ver.: always
 * @param apsFrame The APS frame for the message  Ver.: always
 * @param msgLen The length of the message  Ver.: always
 * @param message The message that was sent  Ver.: always
 * @param status The status of the sent message  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerMessageSentCallback(EmberOutgoingMessageType type,
                                                              int16u indexOrDestination,
                                                              EmberApsFrame * apsFrame,
                                                              int16u msgLen,
                                                              int8u * message,
                                                              EmberStatus status);
/** @brief Server Pre Attribute Changed
 *
 * Sample Mfg Specific Cluster cluster, Server Pre Attribute Changed
 *
 * @param endpoint Endpoint that is being initialized  Ver.: always
 * @param attributeId Attribute to be changed  Ver.: always
 * @param attributeType Attribute type  Ver.: always
 * @param size Attribute size  Ver.: always
 * @param value Attribute value  Ver.: always
 */
EmberAfStatus emberAfSampleMfgSpecificClusterServerPreAttributeChangedCallback(int8u endpoint,
                                                                               EmberAfAttributeId attributeId,
                                                                               EmberAfAttributeType attributeType,
                                                                               int8u size,
                                                                               int8u * value);
/** @brief Server Tick
 *
 * Sample Mfg Specific Cluster cluster, Server Tick
 *
 * @param endpoint Endpoint that is being served  Ver.: always
 */
void emberAfSampleMfgSpecificClusterServerTickCallback(int8u endpoint);

/** @} END Sample Mfg Specific Cluster Cluster Callbacks */


/** @name Counters Plugin Callbacks */
// @{

/** @brief Rollover
 *
 * This function is called every time a counter exceeds its threshold.
 *
 * @param type The counter that rolled over  Ver.: always
 */
void emberAfPluginCountersRolloverCallback(EmberCounterType type);

/** @} END Counters Plugin Callbacks */


/** @name End Device Support Plugin Callbacks */
// @{

/** @brief Poll Completed
 *
 * This function is called by the End Device Support plugin after a poll is
 * completed.
 *
 * @param status Return status of a completed poll operation  Ver.: always
 */
void emberAfPluginEndDeviceSupportPollCompletedCallback(EmberStatus status);

/** @} END End Device Support Plugin Callbacks */


/** @name Identify cluster Plugin Callbacks */
// @{

/** @brief Start Feedback
 *
 * This function is called by the Identify plugin when identification begins. It
 * informs the Identify Feedback plugin that it should begin providing its
 * implemented feedback functionality (e.g. LED blinking, buzzer sounding, etc.)
 * until the Identify plugin tells it to stop. The identify time is purely a
 * matter of informational convenience; this plugin does not need to know how
 * long it will identify (the Identify plugin will perform the necessary
 * timekeeping.)
 *
 * @param endpoint The identifying endpoint  Ver.: always
 * @param identifyTime The identify time  Ver.: always
 */
void emberAfPluginIdentifyStartFeedbackCallback(int8u endpoint,
                                                int16u identifyTime);

/** @brief Stop Feedback
 *
 * This function is called by the Identify plugin when identification is
 * finished. It tells the Identify Feedback plugin to stop providing its
 * implemented feedback functionality.
 *
 * @param endpoint The identifying endpoint  Ver.: always
 */
void emberAfPluginIdentifyStopFeedbackCallback(int8u endpoint);

/** @} END Identify cluster Plugin Callbacks */


/** @name Idle/Sleep Plugin Callbacks */
// @{

/** @brief Ok To Sleep
 *
 * This function is called by the Idle/Sleep plugin before sleeping.  The
 * application should return TRUE if the device may sleep or FALSE otherwise.
 *
 * @param durationMs The maximum duration in milliseconds that the device will
 * sleep.  Ver.: always
 */
boolean emberAfPluginIdleSleepOkToSleepCallback(int32u durationMs);

/** @brief Wake Up
 *
 * This function is called by the Idle/Sleep plugin after sleeping.
 *
 * @param durationMs The duration in milliseconds that the device slept.  Ver.:
 * always
 */
void emberAfPluginIdleSleepWakeUpCallback(int32u durationMs);

/** @brief Ok To Idle
 *
 * This function is called by the Idle/Sleep plugin before idling.  The
 * application should return TRUE if the device may idle or FALSE otherwise.
 *
 */
boolean emberAfPluginIdleSleepOkToIdleCallback(void);

/** @brief Active
 *
 * This function is called by the Idle/Sleep plugin after idling.
 *
 */
void emberAfPluginIdleSleepActiveCallback(void);

/** @} END Idle/Sleep Plugin Callbacks */


/** @name Network Find Plugin Callbacks */
// @{

/** @brief Finished
 *
 * This callback is fired when the network-find plugin is finished with the
 * forming or joining process.  The result of the operation will be returned in
 * the status parameter.
 *
 * @param status   Ver.: always
 */
void emberAfPluginNetworkFindFinishedCallback(EmberStatus status);

/** @brief Get Radio Power For Channel
 *
 * This callback is called by the framework when it is setting the radio power
 * during the discovery process. The framework will set the radio power
 * depending on what is returned by this callback.
 *
 * @param channel   Ver.: always
 */
int8s emberAfPluginNetworkFindGetRadioPowerForChannelCallback(int8u channel);

/** @brief Join
 *
 * This callback is called by the plugin when a joinable network has been found.
 *  If the application returns TRUE, the plugin will attempt to join the
 * network.  Otherwise, the plugin will ignore the network and continue
 * searching.  Applications can use this callback to implement a network
 * blacklist.
 *
 * @param networkFound   Ver.: always
 * @param lqi   Ver.: always
 * @param rssi   Ver.: always
 */
boolean emberAfPluginNetworkFindJoinCallback(EmberZigbeeNetwork * networkFound,
                                             int8u lqi,
                                             int8s rssi);

/** @} END Network Find Plugin Callbacks */


/** @name Reporting Plugin Callbacks */
// @{

/** @brief Configured
 *
 * This callback is called by the Reporting plugin whenever a reporting entry is
 * configured, including when entries are deleted or updated.  The application
 * can use this callback for scheduling readings or measurements based on the
 * minimum and maximum reporting interval for the entry.  The application should
 * return EMBER_ZCL_STATUS_SUCCESS if it can support the configuration or an
 * error status otherwise.  Note: attribute reporting is required for many
 * clusters and attributes, so rejecting a reporting configuration may violate
 * ZigBee specifications.
 *
 * @param entry   Ver.: always
 */
EmberAfStatus emberAfPluginReportingConfiguredCallback(const EmberAfPluginReportingEntry * entry);

/** @} END Reporting Plugin Callbacks */


/** @name Hal Related Callbacks */
// @{

/** @brief emberAfHalButtonIsrCallback
 *
 * 
 *
 */
// Hal Button ISR Callback
// This callback is called by the framework whenever a button is pressed on the 
// device. This callback is called within ISR context.
void emberAfHalButtonIsrCallback(int8u button, int8u state);
/** @} END Hal Related Callbacks */


/** @} END addtogroup */
#endif // __EMBER_AF_CALLBACK_PROTOTYPES__
