###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:02 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\adc. #
#                    c                                                        #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\adc. #
#                    c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_SM #
#                    6011/DoorSensor_SM6011_tokens.h\"" -D                    #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"adc.c\"" -lC                        #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \adc.lst                                                 #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \adc.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\adc.c
      1          /*
      2           * File: adc.c
      3           * Description: EM3XX-specific ADC HAL functions
      4           *
      5           *
      6           * Copyright 2008 by Ember Corporation. All rights reserved.                *80*
      7           */
      8          #include PLATFORM_HEADER
      9          #include "stack/include/error.h"
     10          #include "hal/micro/micro-common.h"
     11          #include "hal/micro/cortexm3/micro-common.h"
     12          #include "micro/adc.h"
     13          
     14          #if (NUM_ADC_USERS > 8)
     15            #error NUM_ADC_USERS must not be greater than 8, or int8u variables in adc.c must be changed
     16          #endif
     17          

   \                                 In section .bss, align 4
     18          static int16u adcData;             // conversion result written by DMA
     19          static int8u adcPendingRequests;   // bitmap of pending requests
   \                     adcPendingRequests:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \   00000008                      DS8 2
   \   0000000A                      DS8 2
   \   0000000C                      DS8 8
   \   00000014                      DS8 8
   \   0000001C                      DS8 2
     20          volatile static int8u adcPendingConversion; // id of pending conversion
     21          static int8u adcReadingValid;      // bitmap of valid adcReadings
     22          static int16u adcReadings[NUM_ADC_USERS];
     23          static int16u adcConfig[NUM_ADC_USERS];
     24          static boolean adcCalibrated;
     25          static int16s Nvss;
     26          static int16s Nvdd;
     27          static int16u adcStaticConfig;
     28          

   \                                 In section .text, align 2, keep-with-next
     29          void halAdcSetClock(boolean slow)
     30          {
     31            if (slow) {
   \                     halAdcSetClock:
   \   00000000   0x....             LDR.N    R1,??DataTable9
   \   00000002   0x890A             LDRH     R2,[R1, #+8]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xBF12             ITEE     NE 
   \   00000008   0xF042 0x0004      ORRNE    R0,R2,#0x4
   \   0000000C   0xF64F 0x70FB      MOVWEQ   R0,#+65531
   \   00000010   0x4010             ANDEQ    R0,R0,R2
     32              adcStaticConfig |= ADC_1MHZCLK_MASK;
     33            } else {
     34              adcStaticConfig &= ~ADC_1MHZCLK_MASK;
   \   00000012   0x8108             STRH     R0,[R1, #+8]
     35            }
     36          }
   \   00000014   0x4770             BX       LR               ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          boolean halAdcGetClock(void)
     39          {
     40            return (boolean)(adcStaticConfig & ADC_1MHZCLK_MASK);
   \                     halAdcGetClock:
   \   00000000   0x....             LDR.N    R0,??DataTable9
   \   00000002   0x7A00             LDRB     R0,[R0, #+8]
   \   00000004   0xF000 0x0004      AND      R0,R0,#0x4
   \   00000008   0x4770             BX       LR               ;; return
     41          }
     42          
     43          
     44          // Define a channel field that combines ADC_MUXP and ADC_MUXN
     45          #define ADC_CHAN        (ADC_MUXP | ADC_MUXN)
     46          #define ADC_CHAN_BIT    ADC_MUXN_BIT
     47          

   \                                 In section .text, align 4, keep-with-next
     48          void halAdcIsr(void)
     49          {
   \                     halAdcIsr:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     50            int8u i;
     51            int8u conversion = adcPendingConversion; //fix 'volatile' warning; costs no flash
   \   00000002   0x....             LDR.N    R0,??DataTable9
   \   00000004   0x7842             LDRB     R2,[R0, #+1]
     52          
     53            // make sure data is ready and the desired conversion is valid
     54            if ( (INT_ADCFLAG & INT_ADCULDFULL)
     55                  && (conversion < NUM_ADC_USERS) ) {
   \   00000006   0x....             LDR.N    R1,??DataTable9_1  ;; 0x4000a810
   \   00000008   0x680B             LDR      R3,[R1, #+0]
   \   0000000A   0x075B             LSLS     R3,R3,#+29
   \   0000000C   0xD523             BPL.N    ??halAdcIsr_0
   \   0000000E   0x2A03             CMP      R2,#+3
   \   00000010   0xDA21             BGE.N    ??halAdcIsr_0
     56              adcReadings[conversion] = adcData;
   \   00000012   0xEB00 0x0342      ADD      R3,R0,R2, LSL #+1
   \   00000016   0x8884             LDRH     R4,[R0, #+4]
   \   00000018   0x819C             STRH     R4,[R3, #+12]
     57              adcReadingValid |= BIT(conversion); // mark the reading as valid
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x7884             LDRB     R4,[R0, #+2]
   \   0000001E   0xFA03 0xF202      LSL      R2,R3,R2
   \   00000022   0x4322             ORRS     R2,R2,R4
   \   00000024   0x7082             STRB     R2,[R0, #+2]
     58              // setup the next conversion if any
     59              if (adcPendingRequests) {
   \   00000026   0x7802             LDRB     R2,[R0, #+0]
   \   00000028   0x....             LDR.N    R4,??DataTable9_2  ;; 0x4000e004
   \   0000002A   0xB18A             CBZ.N    R2,??halAdcIsr_1
     60                for (i = 0; i < NUM_ADC_USERS; i++) {
   \   0000002C   0x2500             MOVS     R5,#+0
     61                  if (BIT(i) & adcPendingRequests) {
   \                     ??halAdcIsr_2:
   \   0000002E   0xFA03 0xF605      LSL      R6,R3,R5
   \   00000032   0x4216             TST      R6,R2
   \   00000034   0xD007             BEQ.N    ??halAdcIsr_3
     62                    adcPendingConversion = i;     // set pending conversion
   \   00000036   0x7045             STRB     R5,[R0, #+1]
     63                    adcPendingRequests ^= BIT(i); //clear request: conversion is starting
   \   00000038   0x4072             EORS     R2,R6,R2
   \   0000003A   0x7002             STRB     R2,[R0, #+0]
     64                    ADC_CFG = adcConfig[i];
   \   0000003C   0xEB00 0x0045      ADD      R0,R0,R5, LSL #+1
   \   00000040   0x8A80             LDRH     R0,[R0, #+20]
   \   00000042   0x6020             STR      R0,[R4, #+0]
     65                    break; //conversion started, so we're done here (only one at a time)
   \   00000044   0xE007             B.N      ??halAdcIsr_0
     66                  }
     67                }
   \                     ??halAdcIsr_3:
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
   \   00000048   0xB2ED             UXTB     R5,R5
   \   0000004A   0x2D03             CMP      R5,#+3
   \   0000004C   0xD3EF             BCC.N    ??halAdcIsr_2
   \   0000004E   0xE002             B.N      ??halAdcIsr_0
     68              } else {                                // no conversion to do
     69                ADC_CFG = 0;                          // disable adc
   \                     ??halAdcIsr_1:
   \   00000050   0x6022             STR      R2,[R4, #+0]
     70                adcPendingConversion = NUM_ADC_USERS; //nothing pending, so go "idle"
   \   00000052   0x2203             MOVS     R2,#+3
   \   00000054   0x7042             STRB     R2,[R0, #+1]
     71              }
     72            }
     73            INT_ADCFLAG = 0xFFFF;
   \                     ??halAdcIsr_0:
   \   00000056   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000005A   0x6008             STR      R0,[R1, #+0]
     74            asm("DMB");
   \   0000005C   0xF3BF 0x8F5F      DMB
     75          }
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
     76          
     77          // An internal support routine called from functions below.
     78          // Returns the user number of the started conversion, or NUM_ADC_USERS
     79          // otherwise.

   \                                 In section .text, align 2, keep-with-next
     80          ADCUser startNextConversion(void)
     81          {
   \                     startNextConversion:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     82            int8u i;
     83          
     84            ATOMIC (
     85              // start the next requested conversion if any
     86              if (adcPendingRequests && !(ADC_CFG & ADC_ENABLE)) {
     87                for (i = 0; i < NUM_ADC_USERS; i++) {
     88                  if ( BIT(i) & adcPendingRequests) {
     89                    adcPendingConversion = i;     // set pending conversion
     90                    adcPendingRequests ^= BIT(i); // clear request
     91                    ADC_CFG = adcConfig[i];       // set the configuration to desired
     92                    INT_ADCFLAG = 0xFFFF;
     93                    INT_CFGSET = INT_ADC;
     94                    break;
     95                  }
     96                }
     97              } else {
     98                i = NUM_ADC_USERS;
     99              }
    100            )
   \   00000002   0x.... 0x....      BL       _disableBasePri
   \   00000006   0x....             LDR.N    R1,??DataTable9
   \   00000008   0x780A             LDRB     R2,[R1, #+0]
   \   0000000A   0xB1EA             CBZ.N    R2,??startNextConversion_0
   \   0000000C   0x....             LDR.N    R3,??DataTable9_2  ;; 0x4000e004
   \   0000000E   0x681C             LDR      R4,[R3, #+0]
   \   00000010   0x07E4             LSLS     R4,R4,#+31
   \   00000012   0xD419             BMI.N    ??startNextConversion_0
   \   00000014   0x2400             MOVS     R4,#+0
   \                     ??startNextConversion_1:
   \   00000016   0x2501             MOVS     R5,#+1
   \   00000018   0x40A5             LSLS     R5,R5,R4
   \   0000001A   0x4215             TST      R5,R2
   \   0000001C   0xD00F             BEQ.N    ??startNextConversion_2
   \   0000001E   0x704C             STRB     R4,[R1, #+1]
   \   00000020   0x406A             EORS     R2,R5,R2
   \   00000022   0x700A             STRB     R2,[R1, #+0]
   \   00000024   0xEB01 0x0144      ADD      R1,R1,R4, LSL #+1
   \   00000028   0x8A89             LDRH     R1,[R1, #+20]
   \   0000002A   0x6019             STR      R1,[R3, #+0]
   \   0000002C   0x....             LDR.N    R1,??DataTable9_1  ;; 0x4000a810
   \   0000002E   0xF64F 0x72FF      MOVW     R2,#+65535
   \   00000032   0x600A             STR      R2,[R1, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable9_3  ;; 0xe000e100
   \   00000036   0xF44F 0x6200      MOV      R2,#+2048
   \   0000003A   0x600A             STR      R2,[R1, #+0]
   \   0000003C   0xE005             B.N      ??startNextConversion_3
   \                     ??startNextConversion_2:
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
   \   00000040   0xB2E4             UXTB     R4,R4
   \   00000042   0x2C03             CMP      R4,#+3
   \   00000044   0xD3E7             BCC.N    ??startNextConversion_1
   \   00000046   0xE000             B.N      ??startNextConversion_3
   \                     ??startNextConversion_0:
   \   00000048   0x2403             MOVS     R4,#+3
   \                     ??startNextConversion_3:
   \   0000004A   0x.... 0x....      BL       _writeBasePri
    101            return i;
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void halInternalInitAdc(void)           //Ray
    105          {
    106            // reset the state variables
    107            adcPendingRequests = 0;
   \                     halInternalInitAdc:
   \   00000000   0x....             LDR.N    R0,??DataTable9
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    108            adcPendingConversion = NUM_ADC_USERS;
   \   00000006   0x2103             MOVS     R1,#+3
   \   00000008   0x7041             STRB     R1,[R0, #+1]
    109            adcCalibrated = FALSE;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x70C1             STRB     R1,[R0, #+3]
    110            adcStaticConfig = ADC_1MHZCLK | ADC_ENABLE; // init config: 1MHz, low voltage
   \   0000000E   0x2105             MOVS     R1,#+5
   \   00000010   0x8101             STRH     R1,[R0, #+8]
    111          
    112            // set all adcReadings as invalid
    113            adcReadingValid = 0;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x7081             STRB     R1,[R0, #+2]
    114          
    115            // turn off the ADC
    116            ADC_CFG = 0;                   // disable ADC, turn off HV buffers
   \   00000016   0x....             LDR.N    R1,??DataTable9_2  ;; 0x4000e004
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x600A             STR      R2,[R1, #+0]
    117            ADC_OFFSET = ADC_OFFSET_RESET;
   \   0000001C   0x604A             STR      R2,[R1, #+4]
    118            ADC_GAIN = ADC_GAIN_RESET;
   \   0000001E   0xF44F 0x4200      MOV      R2,#+32768
   \   00000022   0x608A             STR      R2,[R1, #+8]
    119            ADC_DMACFG = ADC_DMARST;
   \   00000024   0x2210             MOVS     R2,#+16
   \   00000026   0x60CA             STR      R2,[R1, #+12]
    120            ADC_DMABEG = (int32u)&adcData;
   \   00000028   0x1D00             ADDS     R0,R0,#+4
   \   0000002A   0x6148             STR      R0,[R1, #+20]
    121            ADC_DMASIZE = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x6188             STR      R0,[R1, #+24]
    122            ADC_DMACFG = (ADC_DMAAUTOWRAP | ADC_DMALOAD);
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0x60C8             STR      R0,[R1, #+12]
    123          
    124            // clear the ADC interrupts and enable
    125            INT_ADCCFG = INT_ADCULDFULL;
   \   00000034   0x....             LDR.N    R0,??DataTable9_1  ;; 0x4000a810
   \   00000036   0x2104             MOVS     R1,#+4
   \   00000038   0x6401             STR      R1,[R0, #+64]
    126            INT_ADCFLAG = 0xFFFF;
   \   0000003A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000003E   0x6001             STR      R1,[R0, #+0]
    127            INT_CFGSET = INT_ADC;
   \   00000040   0x....             LDR.N    R0,??DataTable9_3  ;; 0xe000e100
   \   00000042   0xF44F 0x6100      MOV      R1,#+2048
   \   00000046   0x6001             STR      R1,[R0, #+0]
    128          
    129            emberCalibrateVref();
   \   00000048   0x.... 0x....      B.W      emberCalibrateVref
    130          }
    131          

   \                                 In section .text, align 2, keep-with-next
    132          EmberStatus halStartAdcConversion(ADCUser id,
    133                                            ADCReferenceType reference,
    134                                            ADCChannelType channel,
    135                                            ADCRateType rate)
    136          {
   \                     halStartAdcConversion:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    137          
    138             if(reference != ADC_REF_INT)
   \   00000004   0x292A             CMP      R1,#+42
   \   00000006   0xD001             BEQ.N    ??halStartAdcConversion_0
    139              return EMBER_ERR_FATAL;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD70             POP      {R4-R6,PC}
    140          
    141            // save the chosen configuration for this user
    142            adcConfig[id] = ( ((rate << ADC_PERIOD_BIT) & ADC_PERIOD)
    143                            | ((channel << ADC_CHAN_BIT) & ADC_CHAN)
    144                            | adcStaticConfig);
   \                     ??halStartAdcConversion_0:
   \   0000000C   0x....             LDR.N    R5,??DataTable9
   \   0000000E   0x00D0             LSLS     R0,R2,#+3
   \   00000010   0xEA40 0x3043      ORR      R0,R0,R3, LSL #+13
   \   00000014   0x8929             LDRH     R1,[R5, #+8]
   \   00000016   0x4308             ORRS     R0,R1,R0
   \   00000018   0xEB05 0x0144      ADD      R1,R5,R4, LSL #+1
   \   0000001C   0x8288             STRH     R0,[R1, #+20]
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xFA00 0xF604      LSL      R6,R0,R4
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x4230             TST      R0,R6
   \   00000028   0xD10F             BNE.N    ??halStartAdcConversion_1
    145          
    146            // if the user already has a pending request, overwrite params
    147            if (adcPendingRequests & BIT(id)) {
    148              return EMBER_ADC_CONVERSION_DEFERRED;
    149            }
    150          
    151            ATOMIC (
    152              // otherwise, queue the transaction
    153              adcPendingRequests |= BIT(id);
    154              // try and start the conversion if there is not one happening
    155              adcReadingValid &= ~BIT(id);
    156            )
   \   0000002A   0x.... 0x....      BL       _disableBasePri
   \   0000002E   0x7829             LDRB     R1,[R5, #+0]
   \   00000030   0x4331             ORRS     R1,R6,R1
   \   00000032   0x7029             STRB     R1,[R5, #+0]
   \   00000034   0x78A9             LDRB     R1,[R5, #+2]
   \   00000036   0x43B1             BICS     R1,R1,R6
   \   00000038   0x70A9             STRB     R1,[R5, #+2]
   \   0000003A   0x.... 0x....      BL       _writeBasePri
    157            if (startNextConversion() == id)
   \   0000003E   0x.... 0x....      BL       startNextConversion
   \   00000042   0x42A0             CMP      R0,R4
   \   00000044   0xD101             BNE.N    ??halStartAdcConversion_1
    158              return EMBER_ADC_CONVERSION_BUSY;
   \   00000046   0x2081             MOVS     R0,#+129
   \   00000048   0xBD70             POP      {R4-R6,PC}
    159            else
    160              return EMBER_ADC_CONVERSION_DEFERRED;
   \                     ??halStartAdcConversion_1:
   \   0000004A   0x2082             MOVS     R0,#+130
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
    161          }
    162          

   \                                 In section .text, align 2, keep-with-next
    163          EmberStatus halRequestAdcData(ADCUser id, int16u *value)
    164          {
   \                     halRequestAdcData:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
    165            //Both the ADC interrupt and the global interrupt need to be enabled,
    166            //otherwise the ADC ISR cannot be serviced.
    167            boolean intsAreOff = ( INTERRUPTS_ARE_OFF()
    168                                  || !(INT_CFGSET & INT_ADC)
    169                                  || !(INT_ADCCFG & INT_ADCULDFULL) );
   \   00000008   0x....             LDR.N    R7,??DataTable9_4  ;; 0x4000a850
   \   0000000A   0x....             LDR.N    R5,??DataTable9_3  ;; 0xe000e100
   \   0000000C   0x.... 0x....      BL       _basePriIsDisabled
   \   00000010   0xB948             CBNZ.N   R0,??halRequestAdcData_0
   \   00000012   0x6828             LDR      R0,[R5, #+0]
   \   00000014   0x0500             LSLS     R0,R0,#+20
   \   00000016   0xD506             BPL.N    ??halRequestAdcData_0
   \   00000018   0x6838             LDR      R0,[R7, #+0]
   \   0000001A   0x0880             LSRS     R0,R0,#+2
   \   0000001C   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000020   0xF080 0x0601      EOR      R6,R0,#0x1
   \   00000024   0xE000             B.N      ??halRequestAdcData_1
   \                     ??halRequestAdcData_0:
   \   00000026   0x2601             MOVS     R6,#+1
    170            EmberStatus stat;
    171          
    172            ATOMIC (
    173              // If interupts are disabled but the flag is set,
    174              // manually run the isr...
    175              //FIXME -= is this valid???
    176              if( intsAreOff
    177                && ( (INT_CFGSET & INT_ADC) && (INT_ADCCFG & INT_ADCULDFULL) )) {
    178                halAdcIsr();
    179              }
    180           
    181              // check if we are done
    182              if (BIT(id) & adcReadingValid) {
    183                *value = adcReadings[id];
    184                adcReadingValid ^= BIT(id);
    185                stat = EMBER_ADC_CONVERSION_DONE;
    186              } else if (adcPendingRequests & BIT(id)) {
    187                stat = EMBER_ADC_CONVERSION_DEFERRED;
    188              } else if (adcPendingConversion == id) {
    189                stat = EMBER_ADC_CONVERSION_BUSY;
    190              } else {
    191                stat = EMBER_ADC_NO_CONVERSION_PENDING;
    192              }
    193            )
   \                     ??halRequestAdcData_1:
   \   00000028   0x.... 0x....      BL       _disableBasePri
   \   0000002C   0x4681             MOV      R9,R0
   \   0000002E   0xB13E             CBZ.N    R6,??halRequestAdcData_2
   \   00000030   0x6828             LDR      R0,[R5, #+0]
   \   00000032   0x0500             LSLS     R0,R0,#+20
   \   00000034   0xD504             BPL.N    ??halRequestAdcData_2
   \   00000036   0x6838             LDR      R0,[R7, #+0]
   \   00000038   0x0740             LSLS     R0,R0,#+29
   \   0000003A   0xBF48             IT       MI 
   \   0000003C   0x.... 0x....      BLMI     halAdcIsr
   \                     ??halRequestAdcData_2:
   \   00000040   0x....             LDR.N    R0,??DataTable9
   \   00000042   0x7881             LDRB     R1,[R0, #+2]
   \   00000044   0x2201             MOVS     R2,#+1
   \   00000046   0x40A2             LSLS     R2,R2,R4
   \   00000048   0x420A             TST      R2,R1
   \   0000004A   0xD008             BEQ.N    ??halRequestAdcData_3
   \   0000004C   0xEB00 0x0344      ADD      R3,R0,R4, LSL #+1
   \   00000050   0x899B             LDRH     R3,[R3, #+12]
   \   00000052   0xF8A8 0x3000      STRH     R3,[R8, #+0]
   \   00000056   0x4051             EORS     R1,R2,R1
   \   00000058   0x7081             STRB     R1,[R0, #+2]
   \   0000005A   0x2480             MOVS     R4,#+128
   \   0000005C   0xE009             B.N      ??halRequestAdcData_4
   \                     ??halRequestAdcData_3:
   \   0000005E   0x7801             LDRB     R1,[R0, #+0]
   \   00000060   0x4211             TST      R1,R2
   \   00000062   0xBF18             IT       NE 
   \   00000064   0x2482             MOVNE    R4,#+130
   \   00000066   0xD104             BNE.N    ??halRequestAdcData_4
   \   00000068   0x7840             LDRB     R0,[R0, #+1]
   \   0000006A   0x42A0             CMP      R0,R4
   \   0000006C   0xBF0C             ITE      EQ 
   \   0000006E   0x2481             MOVEQ    R4,#+129
   \   00000070   0x2484             MOVNE    R4,#+132
   \                     ??halRequestAdcData_4:
   \   00000072   0x4648             MOV      R0,R9
   \   00000074   0x.... 0x....      BL       _writeBasePri
    194            return stat;
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    195          }
    196          

   \                                 In section .text, align 2, keep-with-next
    197          EmberStatus halReadAdcBlocking(ADCUser id, int16u *value)
    198          {
   \                     halReadAdcBlocking:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    199            EmberStatus stat;
    200          
    201            do {
    202              stat = halRequestAdcData(id, value);
   \                     ??halReadAdcBlocking_0:
   \   00000006   0x4629             MOV      R1,R5
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       halRequestAdcData
    203              if (stat == EMBER_ADC_NO_CONVERSION_PENDING)
   \   0000000E   0x2884             CMP      R0,#+132
   \   00000010   0xBF18             IT       NE 
   \   00000012   0x2880             CMPNE    R0,#+128
    204                break;
    205            } while(stat != EMBER_ADC_CONVERSION_DONE);
   \   00000014   0xD1F7             BNE.N    ??halReadAdcBlocking_0
    206            return stat;
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    207          }
    208          

   \                                 In section .text, align 2, keep-with-next
    209          EmberStatus halAdcCalibrate(ADCUser id)
    210          {
   \                     halAdcCalibrate:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    211            EmberStatus stat;
    212          
    213            halStartAdcConversion(id,
    214                                  ADC_REF_INT,
    215                                  ADC_SOURCE_GND_VREF2,
    216                                  ADC_CONVERSION_TIME_US_4096);
   \   00000004   0x2307             MOVS     R3,#+7
   \   00000006   0x2289             MOVS     R2,#+137
   \   00000008   0x212A             MOVS     R1,#+42
   \   0000000A   0x.... 0x....      BL       halStartAdcConversion
    217            stat = halReadAdcBlocking(id, (int16u *)(&Nvss));
   \   0000000E   0x....             LDR.N    R5,??DataTable9
   \   00000010   0xF105 0x011C      ADD      R1,R5,#+28
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       halReadAdcBlocking
    218            if (stat == EMBER_ADC_CONVERSION_DONE) {
   \   0000001A   0x2880             CMP      R0,#+128
   \   0000001C   0xD109             BNE.N    ??halAdcCalibrate_0
    219              halStartAdcConversion(id,
    220                                    ADC_REF_INT,
    221                                    ADC_SOURCE_VREG2_VREF2,
    222                                    ADC_CONVERSION_TIME_US_4096);
   \   0000001E   0x2307             MOVS     R3,#+7
   \   00000020   0x22B9             MOVS     R2,#+185
   \   00000022   0x212A             MOVS     R1,#+42
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       halStartAdcConversion
    223              stat = halReadAdcBlocking(id, (int16u *)(&Nvdd));
   \   0000002A   0x1DA9             ADDS     R1,R5,#+6
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       halReadAdcBlocking
    224            }
    225            if (stat == EMBER_ADC_CONVERSION_DONE) {
   \                     ??halAdcCalibrate_0:
   \   00000032   0x2880             CMP      R0,#+128
   \   00000034   0xD105             BNE.N    ??halAdcCalibrate_1
    226              Nvdd -= Nvss;
   \   00000036   0x88E9             LDRH     R1,[R5, #+6]
   \   00000038   0x8BAA             LDRH     R2,[R5, #+28]
   \   0000003A   0x1A89             SUBS     R1,R1,R2
   \   0000003C   0x80E9             STRH     R1,[R5, #+6]
    227              adcCalibrated = TRUE;
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0xE001             B.N      ??halAdcCalibrate_2
    228            } else {
    229              adcCalibrated = FALSE;
   \                     ??halAdcCalibrate_1:
   \   00000042   0x2100             MOVS     R1,#+0
    230              stat = EMBER_ERR_FATAL;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??halAdcCalibrate_2:
   \   00000046   0x70E9             STRB     R1,[R5, #+3]
    231            }
    232            return stat;
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    233          }
    234          
    235          // Use the ratio of the sample reading to the of VDD_PADSA/2, a 'known'
    236          // value (nominally 900mV in normal mode, but slightly higher in boost mode)
    237          // to convert to 100uV units.
    238          // FIXME: support external Vref
    239          //        use #define of Vref, ignore VDD_PADSA
    240          
    241          
    242          
    243          

   \                                 In section .text, align 2, keep-with-next
    244          int16s halConvertValueToVolts(int16u value)
    245          {
   \                     halConvertValueToVolts:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    246            int32s N;
    247            int16s V;
    248            int32s nvalue;
    249          
    250            if (!adcCalibrated) {
   \   00000004   0x....             LDR.N    R5,??DataTable9
   \   00000006   0x78E8             LDRB     R0,[R5, #+3]
   \   00000008   0xB908             CBNZ.N   R0,??halConvertValueToVolts_0
    251              halAdcCalibrate(ADC_USER_LQI);
   \   0000000A   0x.... 0x....      BL       halAdcCalibrate
    252            }
    253            if (adcCalibrated) {
   \                     ??halConvertValueToVolts_0:
   \   0000000E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000010   0xB1D0             CBZ.N    R0,??halConvertValueToVolts_1
    254              assert(Nvdd);
   \   00000012   0xF9B5 0x0006      LDRSH    R0,[R5, #+6]
   \   00000016   0xB920             CBNZ.N   R0,??halConvertValueToVolts_2
   \   00000018   0x21FE             MOVS     R1,#+254
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "adc.c">`
   \   0000001E   0x.... 0x....      BL       halInternalAssertFailed
   \                     ??halConvertValueToVolts_2:
   \   00000022   0xF9B5 0x0006      LDRSH    R0,[R5, #+6]
   \   00000026   0xF9B5 0x101C      LDRSH    R1,[R5, #+28]
   \   0000002A   0x1A61             SUBS     R1,R4,R1
   \   0000002C   0xEB00 0x72D0      ADD      R2,R0,R0, LSR #+31
   \   00000030   0x1052             ASRS     R2,R2,#+1
   \   00000032   0xEB02 0x4101      ADD      R1,R2,R1, LSL #+16
   \   00000036   0xFB91 0xF4F0      SDIV     R4,R1,R0
    255              nvalue = value - Nvss;
    256              // Convert input value (minus ground) to a fraction of VDD/2.
    257              N = ((nvalue << 16) + Nvdd/2) / Nvdd;
    258              // Calculate voltage with: V = (N * Vreg/2) / (2^16)
    259              // Mutiplying by Vreg/2*10 makes the result units of 100 uVolts
    260              // (in fixed point E-4 which allows for 13.5 bits vs millivolts
    261              // which is only 10.2 bits).
    262              V = (int16s)((N*((int32s)halInternalGetVreg())*5) >> 16);
   \   0000003A   0x.... 0x....      BL       halInternalGetVreg
   \   0000003E   0x4360             MULS     R0,R0,R4
   \   00000040   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   00000044   0x1400             ASRS     R0,R0,#+16
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}
    263            } else {
    264               V = -32768;
   \                     ??halConvertValueToVolts_1:
   \   00000048   0x....             LDR.N    R0,??DataTable9_5  ;; 0xffff8000
    265            }
    266            return V;
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    267          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     adcPendingRequests

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x4000A810         DC32     0x4000a810

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x4000E004         DC32     0x4000e004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x4000A850         DC32     0x4000a850

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0xFFFF8000         DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "adc.c">`:
   \   00000000   0x61 0x64          DC8 "adc.c"
   \              0x63 0x2E    
   \              0x63 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  halAdcCalibrate
             16 -> halReadAdcBlocking
             16 -> halStartAdcConversion
        0  halAdcGetClock
       16  halAdcIsr
        0  halAdcSetClock
       16  halConvertValueToVolts
             16 -> halAdcCalibrate
             16 -> halInternalAssertFailed
             16 -> halInternalGetVreg
        0  halInternalInitAdc
              0 -> emberCalibrateVref
       16  halReadAdcBlocking
             16 -> halRequestAdcData
       32  halRequestAdcData
             32 -> _basePriIsDisabled
             32 -> _disableBasePri
             32 -> _writeBasePri
             32 -> halAdcIsr
       16  halStartAdcConversion
             16 -> _disableBasePri
             16 -> _writeBasePri
             16 -> startNextConversion
       16  startNextConversion
             16 -> _disableBasePri
             16 -> _writeBasePri


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "adc.c">
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
      30  adcPendingRequests
          adcPendingConversion
          adcReadingValid
          adcCalibrated
          adcData
          Nvdd
          adcStaticConfig
          adcReadings
          adcConfig
          Nvss
      74  halAdcCalibrate
      10  halAdcGetClock
      98  halAdcIsr
      22  halAdcSetClock
      76  halConvertValueToVolts
      76  halInternalInitAdc
      24  halReadAdcBlocking
     126  halRequestAdcData
      78  halStartAdcConversion
      82  startNextConversion

 
  30 bytes in section .bss
 698 bytes in section .text
 
 698 bytes of CODE memory
  30 bytes of DATA memory

Errors: none
Warnings: none
