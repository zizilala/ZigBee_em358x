// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __EMBER_AF_STRUCTS__
#define __EMBER_AF_STRUCTS__


// Generated structs from the metadata
// Struct for IasAceZoneStatusResult
typedef struct _IasAceZoneStatusResult {
  int8u zoneId;
  int16u zoneStatus;
} IasAceZoneStatusResult;


// Struct for Protocol
typedef struct _Protocol {
  int16u manufacturerCode;
  int8u protocolId;
} Protocol;


// Struct for ReadAttributeStatusRecord
typedef struct _ReadAttributeStatusRecord {
  int16u attributeId;
  int8u status;
  int8u attributeType;
  int8u* attributeLocation;
} ReadAttributeStatusRecord;


// Struct for WriteAttributeRecord
typedef struct _WriteAttributeRecord {
  int16u attributeId;
  int8u attributeType;
  int8u* attributeLocation;
} WriteAttributeRecord;


// Struct for WriteAttributeStatusRecord
typedef struct _WriteAttributeStatusRecord {
  int8u status;
  int16u attributeId;
} WriteAttributeStatusRecord;


// Struct for ConfigureReportingRecord
typedef struct _ConfigureReportingRecord {
  int8u direction;
  int16u attributeId;
  int8u attributeType;
  int16u minimumReportingInterval;
  int16u maximumReportingInterval;
  int8u* reportableChangeLocation;
  int16u timeoutPeriod;
} ConfigureReportingRecord;


// Struct for ConfigureReportingStatusRecord
typedef struct _ConfigureReportingStatusRecord {
  int8u status;
  int8u direction;
  int16u attributeId;
} ConfigureReportingStatusRecord;


// Struct for ReadReportingConfigurationRecord
typedef struct _ReadReportingConfigurationRecord {
  int8u status;
  int8u direction;
  int16u attributeId;
  int8u attributeType;
  int16u minimumReportingInterval;
  int16u maximumReportingInterval;
  int8u* reportableChangeLocation;
  int16u timeoutPeriod;
} ReadReportingConfigurationRecord;


// Struct for ReadReportingConfigurationAttributeRecord
typedef struct _ReadReportingConfigurationAttributeRecord {
  int8u direction;
  int16u attributeId;
} ReadReportingConfigurationAttributeRecord;


// Struct for ReportAttributeRecord
typedef struct _ReportAttributeRecord {
  int16u attributeId;
  int8u attributeType;
  int8u* attributeLocation;
} ReportAttributeRecord;


// Struct for DiscoverAttributesInfoRecord
typedef struct _DiscoverAttributesInfoRecord {
  int16u attributeId;
  int8u attributeType;
} DiscoverAttributesInfoRecord;


// Struct for ExtendedDiscoverAttributesInfoRecord
typedef struct _ExtendedDiscoverAttributesInfoRecord {
  int16u attributeId;
  int8u attributeType;
  int8u attributeAccessControl;
} ExtendedDiscoverAttributesInfoRecord;


// Struct for ReadStructuredAttributeRecord
typedef struct _ReadStructuredAttributeRecord {
  int16u attributeId;
  int8u indicator;
  int16u indicies;
} ReadStructuredAttributeRecord;


// Struct for WriteStructuredAttributeRecord
typedef struct _WriteStructuredAttributeRecord {
  int16u attributeId;
  int8u indicator;
  int16u indicies;
  int8u attributeType;
  int8u* attributeLocation;
} WriteStructuredAttributeRecord;


// Struct for WriteStructuredAttributeStatusRecord
typedef struct _WriteStructuredAttributeStatusRecord {
  int8u status;
  int16u attributeId;
  int8u indicator;
  int16u indicies;
} WriteStructuredAttributeStatusRecord;


// Struct for SceneExtensionAttributeInfo
typedef struct _SceneExtensionAttributeInfo {
  int8u attributeType;
  int8u* attributeLocation;
} SceneExtensionAttributeInfo;


// Struct for SceneExtensionFieldSet
typedef struct _SceneExtensionFieldSet {
  int16u clusterId;
  int8u length;
  int8u value;
} SceneExtensionFieldSet;


// Struct for BlockThreshold
typedef struct _BlockThreshold {
  int8u blockThreshold;
  int8u priceControl;
  int32u blockPeriodStartTime;
  int32u blockPeriodDurationMinutes;
  int8u fuelType;
  int32u standingCharge;
} BlockThreshold;


// Struct for Notification
typedef struct _Notification {
  int16u contentId;
  int8u statusFeedback;
} Notification;


// Struct for NeighborInfo
typedef struct _NeighborInfo {
  int8u* neighbor;
  int16s x;
  int16s y;
  int16s z;
  int8s rssi;
  int8u numberRssiMeasurements;
} NeighborInfo;


// Struct for ChatParticipant
typedef struct _ChatParticipant {
  int16u uid;
  int8u* nickname;
} ChatParticipant;


// Struct for ChatRoom
typedef struct _ChatRoom {
  int16u cid;
  int8u* name;
} ChatRoom;


// Struct for NodeInformation
typedef struct _NodeInformation {
  int16u uid;
  int16u address;
  int8u endpoint;
  int8u* nickname;
} NodeInformation;


// Void typedef for Identity which is empty.
// this will result in all the references to the data being as int8u*
typedef int8u Identity;


// Void typedef for EphemeralData which is empty.
// this will result in all the references to the data being as int8u*
typedef int8u EphemeralData;


// Void typedef for Smac which is empty.
// this will result in all the references to the data being as int8u*
typedef int8u Smac;


// Void typedef for Signature which is empty.
// this will result in all the references to the data being as int8u*
typedef int8u Signature;


// Struct for ScheduledPhase
typedef struct _ScheduledPhase {
  int8u energyPhaseId;
  int16u scheduledTime;
} ScheduledPhase;


// Struct for TransferredPhase
typedef struct _TransferredPhase {
  int8u energyPhaseId;
  int8u macroPhaseId;
  int16u expectedDuration;
  int16u peakPower;
  int16u energy;
  int16u maxActivationDelay;
} TransferredPhase;


// Struct for PowerProfileRecord
typedef struct _PowerProfileRecord {
  int8u powerProfileId;
  int8u energyPhaseId;
  int8u powerProfileRemoteControl;
  int8u powerProfileState;
} PowerProfileRecord;


// Struct for PriceMatrixSubPayload
typedef struct _PriceMatrixSubPayload {
  int8u tierBlockId;
  int32u price;
} PriceMatrixSubPayload;


// Struct for BlockThresholdSubPayload
typedef struct _BlockThresholdSubPayload {
  int8u tierNumberOfBlockThresholds;
  int8u* blockThreshold;
} BlockThresholdSubPayload;


// Struct for TierLabelsPayload
typedef struct _TierLabelsPayload {
  int8u tierId;
  int8u* tierLabel;
} TierLabelsPayload;


// Struct for SnapshotSchedulePayload
typedef struct _SnapshotSchedulePayload {
  int8u snapshotScheduleId;
  int32u snapshotStartDate;
  int32u snapshotSchedule;
  int8u snapshotPayloadType;
  int32u snapshotCause;
} SnapshotSchedulePayload;


// Struct for ScheduleEntry
typedef struct _ScheduleEntry {
  int16u startTime;
  int8u activePriceTierOrFriendlyCreditEnable;
} ScheduleEntry;


// Struct for ScheduleEntryRateSwitchTimes
typedef struct _ScheduleEntryRateSwitchTimes {
  int16u startTime;
  int8u priceTier;
} ScheduleEntryRateSwitchTimes;


// Struct for ScheduleEntryFriendlyCreditSwitchTimes
typedef struct _ScheduleEntryFriendlyCreditSwitchTimes {
  int16u startTime;
  int8u friendlyCreditEnable;
} ScheduleEntryFriendlyCreditSwitchTimes;


// Struct for ScheduleEntryAuxilliaryLoadSwitchTimes
typedef struct _ScheduleEntryAuxilliaryLoadSwitchTimes {
  int16u startTime;
  int8u auxiliaryLoadSwitchState;
} ScheduleEntryAuxilliaryLoadSwitchTimes;


// Struct for SeasonEntry
typedef struct _SeasonEntry {
  int32u seasonStartDate;
  int8u weekIdRef;
} SeasonEntry;


// Struct for SpecialDay
typedef struct _SpecialDay {
  int32u specialDayDate;
  int8u dayIdRef;
} SpecialDay;


// Struct for EventConfigurationPayloadStruct
typedef struct _EventConfigurationPayloadStruct {
  int16u eventId;
  int8u eventConfiguration;
} EventConfigurationPayloadStruct;


// Struct for EventLogPayload
typedef struct _EventLogPayload {
  int16u eventId;
  int32u eventTime;
  int8u* eventData;
} EventLogPayload;


// Struct for DeviceInformationRecord
typedef struct _DeviceInformationRecord {
  int8u* ieeeAddress;
  int8u endpointId;
  int16u profileId;
  int16u deviceId;
  int8u version;
  int8u groupIdCount;
  int8u sort;
} DeviceInformationRecord;


// Struct for GroupInformationRecord
typedef struct _GroupInformationRecord {
  int16u groupId;
  int8u groupType;
} GroupInformationRecord;


// Struct for EndpointInformationRecord
typedef struct _EndpointInformationRecord {
  int16u networkAddress;
  int8u endpointId;
  int16u profileId;
  int16u deviceId;
  int8u version;
} EndpointInformationRecord;


#endif // __EMBER_AF_STRUCTS__
