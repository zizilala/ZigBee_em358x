###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:53 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\se #
#                    nsor-iface\sensor-iface.c                                #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\se #
#                    nsor-iface\sensor-iface.c -D                             #
#                    "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_SM6011/ #
#                    DoorSensor_SM6011_tokens.h\"" -D                         #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"sensor-iface.c\"" -lC               #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\se #
#                    nsor-iface\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\buil #
#                    der\DoorSensor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em3 #
#                    5x\app\builder\DoorSensor_SM6011\..\..\..\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \sensor-iface.lst                                        #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \sensor-iface.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\sensor-iface\sensor-iface.c
      1          // *****************************************************************************
      2          // * sensor-iface.c
      3          // *
      4          // * Generic security sensor interface code.
      5          // *
      6          // * It implements many common security sensor functions, such as joining, 
      7          // * sending asserts, button press, leaving, manufacturing library, search
      8          // * for lost parent, and batter level update during transmission.  
      9          // *
     10          // *
     11          // * Copyright 2014 by Silicon Labs. All rights reserved.                   *80*
     12          // *****************************************************************************
     13          
     14          #include "app/framework/include/af.h"
     15          #include "app/framework/util/af-main.h"
     16          
     17          // callbacks that must be implemented
     18          void emberAfPluginSensorIfaceButtonPressedShortCallback( int8u button0Counter );
     19          void emberAfPluginSensorIfaceButton0PressedLongCallback( 
     20                 int16u button0TimePressed, 
     21                 int8u pressedAtReset );
     22          //void emberAfPluginSensorIfaceButton0PressingCallback( void );
     23          
     24          //------------------------------------------------------------------------------
     25          // Forward Declaration
     26          

   \                                 In section .bss, align 4
     27          EmberEventControl emberAfPluginSensorIfaceButton0PressedEventControl;
     28          EmberEventControl emberAfPluginSensorIfaceButton0ReleasedEventControl;
     29          EmberEventControl emberAfPluginSensorIfaceButton1PressedEventControl;
     30          EmberEventControl emberAfPluginSensorIfaceButton1ReleasedEventControl;
     31          EmberEventControl emberAfPluginSensorIfaceButtonTimeoutEventControl;
     32          
     33          EmberEventControl emberAfPluginSensorIfaceRejoinEventControl;
     34          EmberEventControl emberAfPluginSensorIfaceInitEventControl;
     35          EmberEventControl emberAfPluginSensorIfaceDebounceEventControl;
     36          
     37          static boolean buttonPress(int8u button, int8u state);
     38          void startSearchForJoinableNetwork( void );
     39          void emberAfSensorAssertedCallback(void);
     40          void emberAfSensorDeassertedCallback(void);
     41          static void idleSensor(void);
     42          
     43          void initializeTxActiveIrq( void );
     44          
     45          void emberAfForceEndDeviceToStayAwake(boolean stayAwake);
     46          extern boolean mfgLibRunning;
     47          
     48          //------------------------------------------------------------------------------
     49          // Globals
     50          
     51          #define buttonEvent0         emberAfPluginSensorIfaceButton0PressedEventControl
     52          #define buttonEvent1         emberAfPluginSensorIfaceButton1PressedEventControl
     53          #define buttonEvent0Released emberAfPluginSensorIfaceButton0ReleasedEventControl
     54          #define buttonEvent1Released emberAfPluginSensorIfaceButton1ReleasedEventControl
     55          #define buttonTimeout        emberAfPluginSensorIfaceButtonTimeoutEventControl
     56          #define initEventControl     emberAfPluginSensorIfaceInitEventControl
     57          #define rejoinEventControl   emberAfPluginSensorIfaceRejoinEventControl
     58          #define debounceEventControl emberAfPluginSensorIfaceDebounceEventControl
     59          
     60          #define BUTTON_TIMEOUT       EMBER_AF_PLUGIN_SENSOR_IFACE_BUTTON_TIMEOUT
     61          #define BUTTON_SHORT_TIMEOUT (EMBER_AF_PLUGIN_SENSOR_IFACE_BUTTON_TIMEOUT / 4)
     62          
     63          #define SENSOR_ASSERT_DEBOUNCE   EMBER_AF_PLUGIN_SENSOR_IFACE_ASSERT_DEBOUNCE
     64          #define SENSOR_DEASSERT_DEBOUNCE EMBER_AF_PLUGIN_SENSOR_IFACE_DEASSERT_DEBOUNCE
     65          #define SENSOR_POLARITY          EMBER_AF_PLUGIN_SENSOR_IFACE_SENSOR_POLARITY
     66          #define REJOIN_TIME              EMBER_AF_PLUGIN_SENSOR_IFACE_REJOIN_TIME
     67          #define BUTTON_GATING            EMBER_AF_PLUGIN_SENSOR_IFACE_BUTTON_GATE
     68          
     69          #define STATUS_ALARM    0x0001
     70          #define STATUS_NO_ALARM 0x0000
     71          
     72          // Endpoint index that will be sent next time button0 is pressed.
     73          static int8u endDevEndpointNextSend = 0;
     74          static int16u button0Timer = 0;
     75          static int8u button0Counter = 0;
   \                     button0Counter:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     emberAfPluginSensorIfaceButton0PressedEventControl:
   \   00000004                      DS8 8
   \                     emberAfPluginSensorIfaceButton0ReleasedEventControl:
   \   0000000C                      DS8 8
   \                     emberAfPluginSensorIfaceButton1PressedEventControl:
   \   00000014                      DS8 8
   \                     emberAfPluginSensorIfaceButtonTimeoutEventControl:
   \   0000001C                      DS8 8
   \   00000024                      DS8 2

   \                                 In section .bss, align 4
   \                     emberAfPluginSensorIfaceButton1ReleasedEventControl:
   \   00000000                      DS8 8
     76          enum {
     77            BUTTON_PRESSED_AT_STARTUP = 0x00,
     78            BUTTON_PRESSED_SHORT      = 0x01,
     79            BUTTON_PRESSED_LONG       = 0x02,
     80            BUTTON_IDLE               = 0x03,
     81          };
     82            
     83          static int8u button0PressedState = BUTTON_PRESSED_AT_STARTUP;
     84          boolean emberAfMfgLibEnabled( void );
     85          
     86          //------------------------------------------------------------------------------
     87          

   \                                 In section .text, align 2, keep-with-next
     88          void buttonInit( void )
     89          {
     90            // Note:  the following items should be initialized from their declarations.
     91            // I put them in here just for completeness sake.
     92            // clearButtonCounters();
     93            // button0PressedState = BUTTON_PRESSED_AT_STARTUP;
     94            // button0Timer = 0;
     95          }
   \                     buttonInit:
   \   00000000   0x4770             BX       LR               ;; return
     96          
     97          static void clearButtonCounters( void )
     98          {
     99            button0Counter = 0; 
    100          }
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void emberAfPluginSensorIfaceButtonTimeoutEventHandler(void)
    103          {
   \                     emberAfPluginSensorIfaceButtonTimeoutEventHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    104            emberEventControlSetInactive(buttonTimeout);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable55_1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7720             STRB     R0,[R4, #+28]
    105            //debug code
    106            //emberAfCorePrintln("Button 0: %u @reset %x Button 1: %u @reset %x", 
    107            //                   button0Counter, button0PressedAtRese);
    108          
    109            assert(button0Counter > 0 );
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0xB920             CBNZ.N   R0,??emberAfPluginSensorIfaceButtonTimeoutEventHan_0
   \   0000000E   0x216D             MOVS     R1,#+109
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "sensor-iface.c">`
   \   00000014   0x.... 0x....      BL       halInternalAssertFailed
    110          
    111            emberAfPluginSensorIfaceButtonPressedShortCallback(button0Counter);
   \                     ??emberAfPluginSensorIfaceButtonTimeoutEventHan_0:
   \   00000018   0x7820             LDRB     R0,[R4, #+0]
   \   0000001A   0x.... 0x....      BL       emberAfPluginSensorIfaceButtonPressedShortCallback
    112                                                        
    113            clearButtonCounters();
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7020             STRB     R0,[R4, #+0]
    114          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void emberAfPluginSensorIfaceButton0PressedEventHandler(void)
    117          {
   \                     emberAfPluginSensorIfaceButton0PressedEventHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    118            // if the button is being pressed, we must deactivate this event control.
    119            emberEventControlSetInactive(buttonTimeout);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable55_1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7720             STRB     R0,[R4, #+28]
    120          
    121            // we may want to idle the sensor if the button is being pressed.  This is
    122            // to avoid the situation with key fob devices that may have two buttons.
    123            idleSensor();
    124          
    125            switch(button0PressedState) {
   \   0000000A   0x7860             LDRB     R0,[R4, #+1]
   \   0000000C   0xB120             CBZ.N    R0,??emberAfPluginSensorIfaceButton0PressedEventHa_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD00F             BEQ.N    ??emberAfPluginSensorIfaceButton0PressedEventHa_1
   \   00000012   0xD30C             BCC.N    ??emberAfPluginSensorIfaceButton0PressedEventHa_2
   \   00000014   0x2803             CMP      R0,#+3
   \   00000016   0xD112             BNE.N    ??emberAfPluginSensorIfaceButton0PressedEventHa_3
    126            case BUTTON_PRESSED_AT_STARTUP:
    127            case BUTTON_IDLE:
    128              //emberAfCorePrintln("Button 0 Pressed");
    129              button0PressedState = BUTTON_PRESSED_SHORT;
   \                     ??emberAfPluginSensorIfaceButton0PressedEventHa_0:
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7060             STRB     R0,[R4, #+1]
    130              emberEventControlSetDelayMS(buttonEvent0, BUTTON_TIMEOUT);
   \   0000001C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000020   0x1D20             ADDS     R0,R4,#+4
   \   00000022   0x.... 0x....      BL       emEventControlSetDelayMS
    131              button0Timer = halCommonGetInt16uMillisecondTick();
   \   00000026   0x.... 0x....      BL       halCommonGetInt16uMillisecondTick
   \   0000002A   0x84A0             STRH     R0,[R4, #+36]
    132              break;
   \   0000002C   0xBD10             POP      {R4,PC}
    133            case BUTTON_PRESSED_SHORT:
    134              button0PressedState = BUTTON_PRESSED_LONG;
   \                     ??emberAfPluginSensorIfaceButton0PressedEventHa_2:
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x7060             STRB     R0,[R4, #+1]
    135            case BUTTON_PRESSED_LONG:
    136              emberEventControlSetDelayMS(buttonEvent0, BUTTON_SHORT_TIMEOUT);
   \                     ??emberAfPluginSensorIfaceButton0PressedEventHa_1:
   \   00000032   0x21FA             MOVS     R1,#+250
   \   00000034   0x1D20             ADDS     R0,R4,#+4
   \   00000036   0xE8BD 0x4010      POP      {R4,LR}
   \   0000003A   0x.... 0x....      B.W      emEventControlSetDelayMS
    137              //emberAfPluginSensorIfaceButton0PressingCallback();
    138              break;
    139            }
    140          
    141            return;
   \                     ??emberAfPluginSensorIfaceButton0PressedEventHa_3:
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    142          }
    143          

   \                                 In section .text, align 2, keep-with-next
    144          void emberAfPluginSensorIfaceButton0ReleasedEventHandler(void)
    145          {
   \                     emberAfPluginSensorIfaceButton0ReleasedEventHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    146            int16u timePressed = halCommonGetInt16uMillisecondTick() - button0Timer;
   \   00000002   0x.... 0x....      BL       halCommonGetInt16uMillisecondTick
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable55_1
   \   0000000A   0x8CA1             LDRH     R1,[R4, #+36]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
    147            emberEventControlSetInactive(buttonEvent0Released);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7321             STRB     R1,[R4, #+12]
    148            emberEventControlSetInactive(buttonEvent0);
   \   00000012   0x7121             STRB     R1,[R4, #+4]
    149          
    150            //emberAfCorePrintln("Button 0 %u milliseconds", timePressed);
    151            if(timePressed >= BUTTON_TIMEOUT) {
   \   00000014   0xB280             UXTH     R0,R0
   \   00000016   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000001A   0xD308             BCC.N    ??emberAfPluginSensorIfaceButton0ReleasedEventH_0
    152              emberAfPluginSensorIfaceButton0PressedLongCallback( 
    153                 timePressed, 
    154                 button0PressedState ==  BUTTON_PRESSED_AT_STARTUP);
   \   0000001C   0x7862             LDRB     R2,[R4, #+1]
   \   0000001E   0x1E51             SUBS     R1,R2,#+1
   \   00000020   0x4189             SBCS     R1,R1,R1
   \   00000022   0x0FC9             LSRS     R1,R1,#+31
   \   00000024   0x.... 0x....      BL       emberAfPluginSensorIfaceButton0PressedLongCallback
    155              clearButtonCounters();
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x7020             STRB     R0,[R4, #+0]
    156            } else {
   \   0000002C   0xE008             B.N      ??emberAfPluginSensorIfaceButton0ReleasedEventH_1
    157              button0Counter ++;
   \                     ??emberAfPluginSensorIfaceButton0ReleasedEventH_0:
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x7020             STRB     R0,[R4, #+0]
    158              emberEventControlSetDelayMS(buttonTimeout, BUTTON_TIMEOUT);
   \   00000034   0xF44F 0x717A      MOV      R1,#+1000
   \   00000038   0xF104 0x001C      ADD      R0,R4,#+28
   \   0000003C   0x.... 0x....      BL       emEventControlSetDelayMS
    159            }
    160            button0PressedState = BUTTON_IDLE;
   \                     ??emberAfPluginSensorIfaceButton0ReleasedEventH_1:
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x7060             STRB     R0,[R4, #+1]
    161          }
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
    162          

   \                                 In section .text, align 2, keep-with-next
    163          void emberAfPluginSensorIfaceButton1PressedEventHandler(void)
    164          {
    165            // if the button is being pressed, we must deactivate this event control.
    166            emberEventControlSetInactive(buttonEvent1);
   \                     emberAfPluginSensorIfaceButton1PressedEventHandler:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7501             STRB     R1,[R0, #+20]
    167          
    168            if(SENSOR_POLARITY == 0) {
    169              emberAfSensorAssertedCallback();
   \   00000008   0x....             B.N      emberAfSensorAssertedCallback
    170            } else {
    171              emberAfSensorDeassertedCallback();
    172            }
    173          }
    174          

   \                                 In section .text, align 2, keep-with-next
    175          void emberAfPluginSensorIfaceButton1ReleasedEventHandler(void)
    176          {
    177            emberEventControlSetInactive(buttonEvent1Released);
   \                     emberAfPluginSensorIfaceButton1ReleasedEventHandler:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_2
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7001             STRB     R1,[R0, #+0]
    178          
    179            if(SENSOR_POLARITY == 0) {
    180              emberAfSensorDeassertedCallback();
   \   00000008   0x....             B.N      emberAfSensorDeassertedCallback
    181            } else {
    182              emberAfSensorAssertedCallback();
    183            }
    184          }
    185          

   \                                 In section .text, align 2, keep-with-next
    186          void emberAfPluginButtonJoiningPressButton(int8u button)
    187          {
   \                     emberAfPluginButtonJoiningPressButton:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    188            boolean result = buttonPress(button, BUTTON_PRESSED);
    189            if (!result) {
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x.... 0x....      BL       buttonPress
   \   0000000A   0xB938             CBNZ.N   R0,??emberAfPluginButtonJoiningPressButton_0
    190              emberAfCorePrintln("Invalid button %d", button);
   \   0000000C   0x4622             MOV      R2,R4
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "Invalid button %d">`
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018   0x.... 0x....      B.W      emberAfPrintln
    191            }
    192          }
   \                     ??emberAfPluginButtonJoiningPressButton_0:
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    193          
    194          // ISR context functions!!!
    195          
    196          // WARNING: these functions are in ISR so we must do minimal
    197          // processing and not make any blocking calls (like printf)
    198          // or calls that take a long time.
    199          

   \                                 In section .text, align 2, keep-with-next
    200          static boolean buttonPress(int8u button, int8u state)
    201          {
   \                     buttonPress:
   \   00000000   0xB510             PUSH     {R4,LR}
    202            // ISR CONTEXT!!!
    203          
    204            boolean result = FALSE;
   \   00000002   0x2400             MOVS     R4,#+0
    205            if (state != BUTTON_PRESSED) {
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable55_1
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0xD00B             BEQ.N    ??buttonPress_0
    206          #ifdef BUTTON0
    207              if (button == BUTTON0) {
   \   0000000C   0x280E             CMP      R0,#+14
   \   0000000E   0xBF08             IT       EQ 
   \   00000010   0xF102 0x000C      ADDEQ    R0,R2,#+12
    208                emberEventControlSetActive(buttonEvent0Released);
   \   00000014   0xD003             BEQ.N    ??buttonPress_1
    209                result = FALSE;
    210              }
    211          #endif
    212          #ifdef BUTTON1
    213              if (button == BUTTON1) {
   \   00000016   0x2816             CMP      R0,#+22
   \   00000018   0xD10F             BNE.N    ??buttonPress_2
    214                emberEventControlSetActive(buttonEvent1Released);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable55_2
   \                     ??buttonPress_1:
   \   0000001E   0x.... 0x....      BL       emEventControlSetActive
    215                result = FALSE;
   \   00000022   0xE00A             B.N      ??buttonPress_2
    216              }
    217          #endif
    218            } else {
    219          
    220          #ifdef BUTTON0
    221              if (button == BUTTON0) {
   \                     ??buttonPress_0:
   \   00000024   0x280E             CMP      R0,#+14
   \   00000026   0xBF08             IT       EQ 
   \   00000028   0x1D10             ADDEQ    R0,R2,#+4
    222                emberEventControlSetActive(buttonEvent0);
   \   0000002A   0xD003             BEQ.N    ??buttonPress_3
    223                result = TRUE;
    224              }
    225          #endif
    226          #ifdef BUTTON1
    227              if (button == BUTTON1) {
   \   0000002C   0x2816             CMP      R0,#+22
   \   0000002E   0xD104             BNE.N    ??buttonPress_2
    228                emberEventControlSetActive(buttonEvent1);
   \   00000030   0xF102 0x0014      ADD      R0,R2,#+20
   \                     ??buttonPress_3:
   \   00000034   0x.... 0x....      BL       emEventControlSetActive
    229                result = TRUE;
   \   00000038   0x2401             MOVS     R4,#+1
    230              }
    231          #endif
    232            }
    233            return result;
   \                     ??buttonPress_2:
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    234          }
    235          

   \                                 In section .text, align 2, keep-with-next
    236          void emberAfHalButtonIsrCallback(int8u button, int8u state)
    237          {
    238            // ISR CONTEXT!!!
    239            buttonPress(button, state);
   \                     emberAfHalButtonIsrCallback:
   \   00000000   0x....             B.N      buttonPress
    240          }
    241          
    242          
    243          // initialization routines
    244          // pull in common sensor initialization routines into this plugin.
    245          
    246          // forward declarations
    247          void unenrollSecurityDevice( void );
    248          void initSuperSleepyDevice( void );
    249          

   \                                 In section .text, align 2, keep-with-next
    250          void emberAfPluginSensorIfaceInitEventHandler(void)
    251          {
    252            if(mfgLibRunning) {
   \                     emberAfPluginSensorIfaceInitEventHandler:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_3
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0xB100             CBZ.N    R0,??emberAfPluginSensorIfaceInitEventHandler_0
    253              return;
    254            }
    255          
    256            emberSerialPrintf(APP_SERIAL,"Sensor Iface:  init function works.\r\n");
   \   00000008   0x4770             BX       LR
   \                     ??emberAfPluginSensorIfaceInitEventHandler_0:
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x.... 0x....      BL       ?Subroutine1
    257          
    258            // initialize the super sleepy features
    259            initSuperSleepyDevice();
   \                     ??CrossCallReturnLabel_13:
   \   00000010   0x.... 0x....      BL       initSuperSleepyDevice
    260          
    261            emberAfForceEndDeviceToStayAwake(FALSE);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       emberAfForceEndDeviceToStayAwake
    262          
    263            emberEventControlSetInactive(initEventControl);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable55_4
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7001             STRB     R1,[R0, #+0]
    264          
    265            switch(emberNetworkState()) {
   \   00000022   0x.... 0x....      BL       emberNetworkState
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xBF04             ITT      EQ 
   \   0000002A   0xE8BD 0x4001      POPEQ    {R0,LR}
   \   0000002E   0x.... 0x....      BEQ.W    startSearchForJoinableNetwork
    266            case EMBER_NO_NETWORK:
    267              startSearchForJoinableNetwork();
    268              break;
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    269            case EMBER_JOINED_NETWORK_NO_PARENT:
    270              break;
    271            }
    272          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "Sensor Iface:  init f...">`
   \                     ??Subroutine1_0:
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      B.W      emberSerialPrintf
    273          
    274          extern void buttonInit( void );

   \                                 In section .text, align 2, keep-with-next
    275          void emberAfPluginSensorIfaceInitCallback(void)
    276          {
   \                     emberAfPluginSensorIfaceInitCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
    277            buttonInit();
    278          
    279            if(emberAfMfgLibEnabled()) {
   \   00000002   0x....             LDR.N    R4,??DataTable55_4
   \   00000004   0x.... 0x....      BL       emberAfMfgLibEnabled
   \   00000008   0xB150             CBZ.N    R0,??emberAfPluginSensorIfaceInitCallback_0
    280              emberSerialPrintf(APP_SERIAL,"Sensor Iface:  init function works.\r\n");
   \   0000000A   0x.... 0x....      BL       ?Subroutine1
    281          
    282              // delay activation for 10 seconds to allow manufacturing test to begin
    283              emberEventControlSetDelayQS(initEventControl, (10*4));
   \                     ??CrossCallReturnLabel_12:
   \   0000000E   0x2128             MOVS     R1,#+40
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emEventControlSetDelayQS
    284              emberAfForceEndDeviceToStayAwake(TRUE);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x.... 0x....      B.W      emberAfForceEndDeviceToStayAwake
    285            } else {
    286              emberEventControlSetActive(initEventControl);
   \                     ??emberAfPluginSensorIfaceInitCallback_0:
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x.... 0x....      B.W      emEventControlSetActive
    287            }
    288          
    289            //initializeTxActiveIrq();
    290          
    291            // Steven:  this initializes the fast polling event
    292            //emberEventControlSetDelayMS(periodicTransmitEventControl, 20);
    293          }

   \                                 In section .bss, align 4
    294          
    295          // *********
    296          // search for joinable network code
    297          static int8u networkJoinAttempts = 0;
   \                     networkJoinAttempts:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     emberAfPluginSensorIfaceRejoinEventControl:
   \   00000004                      DS8 8

   \                                 In section .bss, align 4
   \                     emberAfPluginSensorIfaceInitEventControl:
   \   00000000                      DS8 8
    298          
    299          void emberAfLedBlinkPattern( int8u count, int8u length, int16u *pattern );
    300          extern EmberStatus emberAfStartSearchForJoinableNetworkAllChannels(void);
    301          

   \                                 In section .text, align 2, keep-with-next
    302          void startSearchForJoinableNetwork( void )
    303          {
    304            // don't kick off join if the mfglib is running.  
    305            if(mfgLibRunning)
   \                     startSearchForJoinableNetwork:
   \   00000000   0x....             LDR.N    R0,??DataTable55_3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB100             CBZ.N    R0,??startSearchForJoinableNetwork_0
    306              return;
    307          
    308            if(networkJoinAttempts == 0 &&
    309               emberNetworkState() == EMBER_NO_NETWORK) {
   \   00000006   0x4770             BX       LR
   \                     ??startSearchForJoinableNetwork_0:
   \   00000008   0xB51C             PUSH     {R2-R4,LR}
   \   0000000A   0x....             LDR.N    R4,??DataTable55_5
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0xB960             CBNZ.N   R0,??startSearchForJoinableNetwork_1
   \   00000010   0x.... 0x....      BL       emberNetworkState
   \   00000014   0xB948             CBNZ.N   R0,??startSearchForJoinableNetwork_1
    310              int8u patternLength = 4;
    311              int16u pattern[] = {200, 200, 200, 1000};
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant {200, 200, 200, 1000}>`
   \   0000001C   0xC90C             LDM      R1!,{R2,R3}
   \   0000001E   0xC00C             STM      R0!,{R2,R3}
    312              emberAfLedBlinkPattern(187, patternLength, pattern); // blink the pattern for 300 seconds.
   \   00000020   0xAA00             ADD      R2,SP,#+0
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x20BB             MOVS     R0,#+187
   \   00000026   0x.... 0x....      BL       emberAfLedBlinkPattern
    313            }
    314            if(networkJoinAttempts < 20) {
   \                     ??startSearchForJoinableNetwork_1:
   \   0000002A   0x7820             LDRB     R0,[R4, #+0]
   \   0000002C   0x1C41             ADDS     R1,R0,#+1
   \   0000002E   0x2814             CMP      R0,#+20
   \   00000030   0xD20A             BCS.N    ??startSearchForJoinableNetwork_2
    315              networkJoinAttempts++;
   \   00000032   0x7021             STRB     R1,[R4, #+0]
    316              if(networkJoinAttempts == 1) {
   \   00000034   0xB2C9             UXTB     R1,R1
   \   00000036   0x2901             CMP      R1,#+1
   \   00000038   0xD102             BNE.N    ??startSearchForJoinableNetwork_3
    317                emberAfStartSearchForJoinableNetwork();
   \   0000003A   0x.... 0x....      BL       emberAfStartSearchForJoinableNetworkCallback
   \   0000003E   0xE001             B.N      ??startSearchForJoinableNetwork_4
    318              } else {
    319                emberAfStartSearchForJoinableNetworkAllChannels();
   \                     ??startSearchForJoinableNetwork_3:
   \   00000040   0x.... 0x....      BL       emberAfStartSearchForJoinableNetworkAllChannels
    320              }
    321              // make a join attempt every 5 seconds
    322              emberEventControlSetDelayQS(rejoinEventControl, (5*4) );
   \                     ??startSearchForJoinableNetwork_4:
   \   00000044   0x2114             MOVS     R1,#+20
   \   00000046   0xE005             B.N      ??startSearchForJoinableNetwork_5
    323            } else if(networkJoinAttempts < 40) {
   \                     ??startSearchForJoinableNetwork_2:
   \   00000048   0x2828             CMP      R0,#+40
   \   0000004A   0xD207             BCS.N    ??startSearchForJoinableNetwork_6
    324              networkJoinAttempts++;
   \   0000004C   0x7021             STRB     R1,[R4, #+0]
    325              emberAfStartSearchForJoinableNetworkAllChannels();
   \   0000004E   0x.... 0x....      BL       emberAfStartSearchForJoinableNetworkAllChannels
    326              // make a join attempt every 5 seconds
    327              emberEventControlSetDelayQS(rejoinEventControl, (10*4) );
   \   00000052   0x2128             MOVS     R1,#+40
   \                     ??startSearchForJoinableNetwork_5:
   \   00000054   0x1D20             ADDS     R0,R4,#+4
   \   00000056   0x.... 0x....      BL       emEventControlSetDelayQS
   \   0000005A   0xBD13             POP      {R0,R1,R4,PC}
    328            } else {
    329              // going to stop joining attempts.  Disabel LED blinking
    330              emberAfLedOff( 0 );
                     ^
Warning[Pe223]: function "emberAfLedOff" declared implicitly
   \                     ??startSearchForJoinableNetwork_6:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      BL       emberAfLedOff
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    331            }
    332          }
    333          

   \                                 In section .text, align 2, keep-with-next
    334          void resetJoinAttempts( void )
    335          {
    336            networkJoinAttempts = 0;
   \                     resetJoinAttempts:
   \   00000000   0x....             LDR.N    R0,??DataTable55_5
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    337          }
   \   00000006   0x4770             BX       LR               ;; return
    338          
    339          
    340          // stack status routines

   \                                 In section .text, align 2, keep-with-next
    341          static void printNetworkState( void )
    342          {
   \                     printNetworkState:
   \   00000000   0xB580             PUSH     {R7,LR}
    343            switch(emberNetworkState()) {
   \   00000002   0x.... 0x....      BL       emberNetworkState
   \   00000006   0xB130             CBZ.N    R0,??printNetworkState_0
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD00A             BEQ.N    ??printNetworkState_1
   \   0000000C   0xD306             BCC.N    ??printNetworkState_2
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD00D             BEQ.N    ??printNetworkState_3
   \   00000012   0xD309             BCC.N    ??printNetworkState_4
   \   00000014   0xBD01             POP      {R0,PC}
    344            case EMBER_NO_NETWORK:
    345              emberSerialPrintf(APP_SERIAL, "EMBER_NO_NETWORK ");
   \                     ??printNetworkState_0:
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NO_NETWORK ">`
   \   0000001A   0xE00A             B.N      ??printNetworkState_5
    346              break;
    347            case EMBER_JOINING_NETWORK:
    348              emberSerialPrintf(APP_SERIAL, "EMBER_JOINING_NETWORK ");
   \                     ??printNetworkState_2:
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_JOINING_NETWORK ">`
   \   00000020   0xE007             B.N      ??printNetworkState_5
    349              break;
    350            case EMBER_JOINED_NETWORK:
    351              emberSerialPrintf(APP_SERIAL, "EMBER_JOINED_NETWORK ");
   \                     ??printNetworkState_1:
   \   00000022   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_JOINED_NETWORK ">`
   \   00000026   0xE004             B.N      ??printNetworkState_5
    352              break;
    353            case EMBER_JOINED_NETWORK_NO_PARENT:
    354              emberSerialPrintf(APP_SERIAL, "EMBER_JOINED_NETWORK_NO_PARENT ");
   \                     ??printNetworkState_4:
   \   00000028   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_JOINED_NETWORK_...">`
   \   0000002C   0xE001             B.N      ??printNetworkState_5
    355              break;
    356            case EMBER_LEAVING_NETWORK:
    357              emberSerialPrintf(APP_SERIAL, "EMBER_LEAVING_NETWORK ");
   \                     ??printNetworkState_3:
   \   0000002E   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_LEAVING_NETWORK ">`
   \                     ??printNetworkState_5:
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE8BD 0x4004      POP      {R2,LR}
   \   00000038   0x.... 0x....      B.W      emberSerialPrintf
    358              break;
    359            }
    360          }
    361          

   \                                 In section .text, align 2, keep-with-next
    362          boolean emberAfPluginSensorIfaceStackStatusCallback(EmberStatus status)
    363          {
   \                     emberAfPluginSensorIfaceStackStatusCallback:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    364            emberSerialPrintf(APP_SERIAL,"Stack Status Handler:  ");
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "Stack Status Handler:  ">`
   \   00000008   0x.... 0x....      BL       ??Subroutine1_0
    365          
    366            printNetworkState();
   \                     ??CrossCallReturnLabel_11:
   \   0000000C   0x.... 0x....      BL       printNetworkState
    367          
    368            switch(status) {
   \   00000010   0x....             LDR.N    R5,??DataTable55_5
   \   00000012   0x2C90             CMP      R4,#+144
   \   00000014   0xD018             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_0
   \   00000016   0x2C91             CMP      R4,#+145
   \   00000018   0xD020             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_1
   \   0000001A   0x2C94             CMP      R4,#+148
   \   0000001C   0xD028             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_2
   \   0000001E   0x2C96             CMP      R4,#+150
   \   00000020   0xD029             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_3
   \   00000022   0x2C98             CMP      R4,#+152
   \   00000024   0xD02A             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_4
   \   00000026   0x2C99             CMP      R4,#+153
   \   00000028   0xD02B             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_5
   \   0000002A   0x2C9A             CMP      R4,#+154
   \   0000002C   0xD02C             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_6
   \   0000002E   0x2C9B             CMP      R4,#+155
   \   00000030   0xD02D             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_7
   \   00000032   0x2CAB             CMP      R4,#+171
   \   00000034   0xD02E             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_8
   \   00000036   0x2CAC             CMP      R4,#+172
   \   00000038   0xD02F             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_9
   \   0000003A   0x2CAD             CMP      R4,#+173
   \   0000003C   0xD030             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_10
   \   0000003E   0x2CAE             CMP      R4,#+174
   \   00000040   0xD031             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_11
   \   00000042   0x2CAF             CMP      R4,#+175
   \   00000044   0xD032             BEQ.N    ??emberAfPluginSensorIfaceStackStatusCallback_12
   \   00000046   0xE036             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_13
    369            case EMBER_NETWORK_UP:
    370              emberSerialPrintf(APP_SERIAL,"EMBER_NETWORK_UP");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_0:
   \   00000048   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NETWORK_UP">`
   \   0000004C   0x.... 0x....      BL       ??Subroutine1_0
    371              resetJoinAttempts();
   \                     ??CrossCallReturnLabel_10:
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x7028             STRB     R0,[R5, #+0]
    372              // blink LED for 5 seconds solid then deassert
    373              // note:  time is in quarter seconds.
    374              emberAfLedOn( 5 ); 
                     ^
Warning[Pe223]: function "emberAfLedOn" declared implicitly
   \   00000054   0x2005             MOVS     R0,#+5
   \   00000056   0x.... 0x....      BL       emberAfLedOn
    375              //startEnrollmentProcess();
    376              break;
   \   0000005A   0xE031             B.N      ??CrossCallReturnLabel_19
    377            case EMBER_NETWORK_DOWN:
    378              emberSerialPrintf(APP_SERIAL,"EMBER_NETWORK_DOWN");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_1:
   \   0000005C   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NETWORK_DOWN">`
   \   00000060   0x.... 0x....      BL       ??Subroutine1_0
    379              if(emberNetworkState() == EMBER_NO_NETWORK) {
   \                     ??CrossCallReturnLabel_9:
   \   00000064   0x.... 0x....      BL       emberNetworkState
   \   00000068   0xBB50             CBNZ.N   R0,??CrossCallReturnLabel_19
    380                // if we are off the network, we need to unenroll
    381                unenrollSecurityDevice();
   \   0000006A   0x.... 0x....      BL       unenrollSecurityDevice
   \   0000006E   0xE027             B.N      ??CrossCallReturnLabel_19
    382              }
    383              break;
    384            case EMBER_JOIN_FAILED:
    385              emberSerialPrintf(APP_SERIAL,"EMBER_JOIN_FAILED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_2:
   \   00000070   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_JOIN_FAILED">`
   \   00000074   0xE01C             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    386              break;
    387            case EMBER_MOVE_FAILED:
    388              emberSerialPrintf(APP_SERIAL,"EMBER_MOVE_FAILED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_3:
   \   00000076   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_MOVE_FAILED">`
   \   0000007A   0xE019             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    389              break;
    390            case EMBER_CANNOT_JOIN_AS_ROUTER:
    391              emberSerialPrintf(APP_SERIAL,"EMBER_CANNOT_JOIN_AS_ROUTER");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_4:
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_CANNOT_JOIN_AS_...">`
   \   00000080   0xE016             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    392              break;
    393            case EMBER_NODE_ID_CHANGED:
    394              emberSerialPrintf(APP_SERIAL,"EMBER_NODE_ID_CHANGED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_5:
   \   00000082   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NODE_ID_CHANGED">`
   \   00000086   0xE013             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    395              break;
    396            case EMBER_PAN_ID_CHANGED:
    397              emberSerialPrintf(APP_SERIAL,"EMBER_PAN_ID_CHANGED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_6:
   \   00000088   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_PAN_ID_CHANGED">`
   \   0000008C   0xE010             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    398              break;
    399            case EMBER_CHANNEL_CHANGED:
    400              emberSerialPrintf(APP_SERIAL,"EMBER_CHANNEL_CHANGED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_7:
   \   0000008E   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_CHANNEL_CHANGED">`
   \   00000092   0xE00D             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    401              break;
    402            case EMBER_NO_BEACONS:
    403              emberSerialPrintf(APP_SERIAL,"EMBER_NO_BEACONS");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_8:
   \   00000094   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NO_BEACONS">`
   \   00000098   0xE00A             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    404              break;
    405            case EMBER_RECEIVED_KEY_IN_THE_CLEAR:
    406              emberSerialPrintf(APP_SERIAL,"EMBER_RECEIVED_KEY_IN_THE_CLEAR");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_9:
   \   0000009A   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_RECEIVED_KEY_IN...">`
   \   0000009E   0xE007             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    407              break;
    408            case EMBER_NO_NETWORK_KEY_RECEIVED:
    409              emberSerialPrintf(APP_SERIAL,"EMBER_NO_NETWORK_KEY_RECEIVED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_10:
   \   000000A0   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NO_NETWORK_KEY_...">`
   \   000000A4   0xE004             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    410              break;
    411            case EMBER_NO_LINK_KEY_RECEIVED:
    412              emberSerialPrintf(APP_SERIAL,"EMBER_NO_LINK_KEY_RECEIVED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_11:
   \   000000A6   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_NO_LINK_KEY_REC...">`
   \   000000AA   0xE001             B.N      ??emberAfPluginSensorIfaceStackStatusCallback_14
    413              break;
    414            case EMBER_PRECONFIGURED_KEY_REQUIRED:
    415              emberSerialPrintf(APP_SERIAL,"EMBER_PRECONFIGURED_KEY_REQUIRED");
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_12:
   \   000000AC   0x.... 0x....      ADR.W    R1,`?<Constant "EMBER_PRECONFIGURED_K...">`
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_14:
   \   000000B0   0x.... 0x....      BL       ??Subroutine1_0
    416              break;
   \                     ??CrossCallReturnLabel_8:
   \   000000B4   0xE004             B.N      ??CrossCallReturnLabel_19
    417            default:
    418              emberSerialPrintf(APP_SERIAL,"unknown %x",status);
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_13:
   \   000000B6   0x4622             MOV      R2,R4
   \   000000B8   0x.... 0x....      ADR.W    R1,`?<Constant "unknown %x">`
   \   000000BC   0x.... 0x....      BL       ?Subroutine2
    419              break;
    420            }
    421            emberSerialPrintf(APP_SERIAL,"\r\n");
   \                     ??CrossCallReturnLabel_19:
   \   000000C0   0x....             ADR.N    R1,??DataTable55  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000C2   0x.... 0x....      BL       ??Subroutine1_0
    422          
    423          
    424            if(status == EMBER_NETWORK_DOWN && 
    425               emberNetworkState() == EMBER_NO_NETWORK) {
   \                     ??CrossCallReturnLabel_7:
   \   000000C6   0x2C91             CMP      R4,#+145
   \   000000C8   0xD116             BNE.N    ??emberAfPluginSensorIfaceStackStatusCallback_15
   \   000000CA   0x.... 0x....      BL       emberNetworkState
   \   000000CE   0xB928             CBNZ.N   R0,??emberAfPluginSensorIfaceStackStatusCallback_16
    426              emberSerialPrintf(APP_SERIAL,"DC: search for joinable network\r\n");
   \   000000D0   0x.... 0x....      ADR.W    R1,`?<Constant "DC: search for joinab...">`
   \   000000D4   0x.... 0x....      BL       ??Subroutine1_0
    427              startSearchForJoinableNetwork();
   \                     ??CrossCallReturnLabel_6:
   \   000000D8   0x.... 0x....      BL       startSearchForJoinableNetwork
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_16:
   \   000000DC   0x.... 0x....      BL       emberNetworkState
   \   000000E0   0x2803             CMP      R0,#+3
   \   000000E2   0xD109             BNE.N    ??emberAfPluginSensorIfaceStackStatusCallback_15
    428            }
    429            
    430            if(status == EMBER_NETWORK_DOWN && 
    431               emberNetworkState() == EMBER_JOINED_NETWORK_NO_PARENT) {
    432              emberSerialPrintf(APP_SERIAL,"DC: kick off rejoin event in %d minutes.\r\n", REJOIN_TIME);
   \   000000E4   0x221E             MOVS     R2,#+30
   \   000000E6   0x.... 0x....      ADR.W    R1,`?<Constant "DC: kick off rejoin e...">`
   \   000000EA   0x.... 0x....      BL       ?Subroutine2
    433              emberEventControlSetDelayQS(rejoinEventControl, (REJOIN_TIME*4*60) );
   \                     ??CrossCallReturnLabel_18:
   \   000000EE   0xF44F 0x51E1      MOV      R1,#+7200
   \   000000F2   0x1D28             ADDS     R0,R5,#+4
   \   000000F4   0x.... 0x....      BL       emEventControlSetDelayQS
    434            }
    435            return FALSE;
   \                     ??emberAfPluginSensorIfaceStackStatusCallback_15:
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    436          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberSerialPrintf
    437          
    438          // rejoin code

   \                                 In section .text, align 2, keep-with-next
    439          void emberAfPluginSensorIfaceRejoinEventHandler(void)
    440          {
   \                     emberAfPluginSensorIfaceRejoinEventHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    441            emberEventControlSetInactive(rejoinEventControl);
   \   00000002   0x....             LDR.N    R4,??DataTable55_5
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7120             STRB     R0,[R4, #+4]
    442          
    443            emberSerialPrintf(APP_SERIAL,"Rejoin event function ");
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "Rejoin event function ">`
   \   0000000C   0x.... 0x....      BL       ??Subroutine1_0
    444            printNetworkState();
   \                     ??CrossCallReturnLabel_5:
   \   00000010   0x.... 0x....      BL       printNetworkState
    445            
    446            switch(emberNetworkState()) {
   \   00000014   0x.... 0x....      BL       emberNetworkState
   \   00000018   0xB110             CBZ.N    R0,??emberAfPluginSensorIfaceRejoinEventHandler_0
   \   0000001A   0x2803             CMP      R0,#+3
   \   0000001C   0xD003             BEQ.N    ??emberAfPluginSensorIfaceRejoinEventHandler_1
   \   0000001E   0xE012             B.N      ??emberAfPluginSensorIfaceRejoinEventHandler_2
    447            case EMBER_NO_NETWORK:
    448              startSearchForJoinableNetwork();
   \                     ??emberAfPluginSensorIfaceRejoinEventHandler_0:
   \   00000020   0xE8BD 0x4010      POP      {R4,LR}
   \   00000024   0x....             B.N      startSearchForJoinableNetwork
    449              break;
    450            case EMBER_JOINED_NETWORK_NO_PARENT:
    451              // perform the secure rejoin every 30 minutes until we find a network.
    452              emberSerialPrintf(APP_SERIAL,"Perform and schedule rejoin\r\n");
   \                     ??emberAfPluginSensorIfaceRejoinEventHandler_1:
   \   00000026   0x.... 0x....      ADR.W    R1,`?<Constant "Perform and schedule ...">`
   \   0000002A   0x.... 0x....      BL       ??Subroutine1_0
    453              emberEventControlSetDelayQS(rejoinEventControl, (REJOIN_TIME*4*60) );
   \                     ??CrossCallReturnLabel_4:
   \   0000002E   0xF44F 0x51E1      MOV      R1,#+7200
   \   00000032   0x1D20             ADDS     R0,R4,#+4
   \   00000034   0x.... 0x....      BL       emEventControlSetDelayQS
    454              emberFindAndRejoinNetworkWithReason(FALSE,  // unsecure rejoin 
    455                                                  EMBER_ALL_802_15_4_CHANNELS_MASK, 
    456                                                  EMBER_AF_REJOIN_DUE_TO_END_DEVICE_MOVE);
   \   00000038   0x22A0             MOVS     R2,#+160
   \   0000003A   0x....             LDR.N    R1,??DataTable55_6  ;; 0x7fff800
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000042   0x.... 0x....      B.W      emberFindAndRejoinNetworkWithReason
    457              break;
    458            default:
    459              emberSerialPrintf(APP_SERIAL,"No More Rejoin!\r\n");
   \                     ??emberAfPluginSensorIfaceRejoinEventHandler_2:
   \   00000046   0x.... 0x....      ADR.W    R1,`?<Constant "No More Rejoin!\\r\\n">`
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000050   0x.... 0x....      B.W      emberSerialPrintf
    460              break;
    461            }
    462          }
    463          
    464          /** @brief emberAfPluginSensorIfaceButtonPressedShortCallback
    465           *
    466           * This function handles one or more short presses on a button.
    467           *
    468           * @param int8u button0Counter:  number of times button 0 was pressed
    469           */

   \                                 In section .text, align 2, keep-with-next
    470          void emberAfPluginSensorIfaceButtonPressedShortCallback( 
    471                 int8u button0Counter )
    472          {
   \                     emberAfPluginSensorIfaceButtonPressedShortCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
    473            emberSerialPrintf(APP_SERIAL,"multi button:  %x\r\n",
    474                              button0Counter);
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "multi button:  %x\\r\\n">`
   \   00000008   0x.... 0x....      BL       ?Subroutine2
    475            if(emberNetworkState() == EMBER_NO_NETWORK) {
   \                     ??CrossCallReturnLabel_17:
   \   0000000C   0x.... 0x....      BL       emberNetworkState
   \   00000010   0xB948             CBNZ.N   R0,??emberAfPluginSensorIfaceButtonPressedShortCal_0
    476              emberSerialPrintf(APP_SERIAL,"kick off join\r\n");
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "kick off join\\r\\n">`
   \   00000016   0x.... 0x....      BL       ??Subroutine1_0
    477              resetJoinAttempts();
   \                     ??CrossCallReturnLabel_3:
   \   0000001A   0x....             LDR.N    R0,??DataTable55_5
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
    478              startSearchForJoinableNetwork();
   \   00000020   0xE8BD 0x4001      POP      {R0,LR}
   \   00000024   0x....             B.N      startSearchForJoinableNetwork
    479            } else if(emberNetworkState() == EMBER_JOINED_NETWORK_NO_PARENT) {
   \                     ??emberAfPluginSensorIfaceButtonPressedShortCal_0:
   \   00000026   0x.... 0x....      BL       emberNetworkState
   \   0000002A   0x2803             CMP      R0,#+3
   \   0000002C   0xBF04             ITT      EQ 
   \   0000002E   0xE8BD 0x4001      POPEQ    {R0,LR}
   \   00000032   0x.... 0x....      BEQ.W    emberLeaveNetwork
    480              emberLeaveNetwork();
    481            } else {
    482              emberSerialPrintf(APP_SERIAL,"network state %x\r\n", emberNetworkState());
   \   00000036   0x.... 0x....      BL       emberNetworkState
   \   0000003A   0x4602             MOV      R2,R0
   \   0000003C   0x.... 0x....      ADR.W    R1,`?<Constant "network state %x\\r\\n">`
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xE8BD 0x4008      POP      {R3,LR}
   \   00000046   0x.... 0x....      B.W      emberSerialPrintf
    483            }
    484          }
    485          

   \                                 In section .text, align 2, keep-with-next
    486          void emberAfPluginSensorIfaceButton0PressedLongCallback( 
    487                 int16u button0TimePressed, 
    488                 int8u pressedAtReset )
    489          {
   \                     emberAfPluginSensorIfaceButton0PressedLongCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    490            emberSerialPrintf(APP_SERIAL,"Button 0 long:  %d %x\r\n",
    491                              button0TimePressed, pressedAtReset);
   \   00000004   0x460B             MOV      R3,R1
   \   00000006   0x4622             MOV      R2,R4
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "Button 0 long:  %d %x\\r\\n">`
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       emberSerialPrintf
    492            if(button0TimePressed > 5000) {
   \   00000012   0xF241 0x3089      MOVW     R0,#+5001
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD30F             BCC.N    ??emberAfPluginSensorIfaceButton0PressedLongCal_0
    493              emberSerialPrintf(APP_SERIAL,"Factory Reset\r\n");
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "Factory Reset\\r\\n">`
   \   0000001E   0x.... 0x....      BL       ??Subroutine1_0
    494              // clear the tokens here.  
    495              //emberAfResetAttributes(emAfEndpoints[0].endpoint); // this should work now???  TODO:  try this.  
    496              emberSerialPrintf(APP_SERIAL, "current endpoint %x\r\n", emAfEndpoints[0].endpoint);
   \                     ??CrossCallReturnLabel_2:
   \   00000022   0x....             LDR.N    R0,??DataTable55_7
   \   00000024   0x7802             LDRB     R2,[R0, #+0]
   \   00000026   0x.... 0x....      ADR.W    R1,`?<Constant "current endpoint %x\\r\\n">`
   \   0000002A   0x.... 0x....      BL       ?Subroutine2
    497          
    498              // now leave network
    499              unenrollSecurityDevice();
   \                     ??CrossCallReturnLabel_16:
   \   0000002E   0x.... 0x....      BL       unenrollSecurityDevice
    500              emberLeaveNetwork();
   \   00000032   0xE8BD 0x4010      POP      {R4,LR}
   \   00000036   0x.... 0x....      B.W      emberLeaveNetwork
    501          
    502            }
    503          } 
   \                     ??emberAfPluginSensorIfaceButton0PressedLongCal_0:
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    504          
    505          int16u halCommonGetInt16uQuarterSecondTick(void);
    506          int32u halCommonGetInt32uMillisecondTick(void);
    507          // 
    508          static int8u lastUpdateTimeQs = 0;
    509          
    510          static int32u lastMsTick = 0;
    511          

   \                                 In section .text, align 2, keep-with-next
    512          void printCurrentMsTick( void )
    513          {
    514          #if 0
    515            int32u currentMs = halCommonGetInt32uMillisecondTick();
    516          
    517            emberSerialPrintf(APP_SERIAL, "MS Tick:  %d %d\r\n",currentMs, (currentMs-lastMsTick));
    518          
    519            lastMsTick = currentMs;
    520          #endif
    521          }
   \                     printCurrentMsTick:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
    522          
    523          static int8u lastStatus = STATUS_NO_ALARM;
   \                     lastStatus:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     emberAfPluginSensorIfaceDebounceEventControl:
   \   00000004                      DS8 8
    524          static int8u newStatus = STATUS_NO_ALARM;
    525          void sensorStateChangeDebounce( int16u status );
    526          void emSleepySetGpio( int8u port, int8u pin );
    527          void emSleepyClearGpio( int8u port, int8u pin );
    528          

   \                                 In section .text, align 2, keep-with-next
    529          void emberAfSensorDeassertedCallback(void) {
   \                     emberAfSensorDeassertedCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
    530            // Clear PA7 LED when sensor is deasserted
    531            //emSleepySetGpio(0,7);
    532          
    533            emberSerialPrintf(APP_SERIAL,"Sensor Deasserted\r\n");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "Sensor Deasserted\\r\\n">`
   \   00000006   0x.... 0x....      BL       ??Subroutine1_0
    534            printCurrentMsTick();
    535            //emberAfWriteAttribute(1, // endpoint
    536            //                      ZCL_IAS_ZONE_CLUSTER_ID,
    537            //                      ZCL_ZONE_STATUS_ATTRIBUTE_ID,
    538            //                      CLUSTER_MASK_SERVER,
    539            //                      status,
    540            //                      ZCL_BITMAP16_ATTRIBUTE_TYPE);
    541          #if 0
    542            emberAfPluginIasZoneServerUpdateZoneStatus(0x0000,   // status
    543                                                       0);       // QS since last update
    544          #else
    545            sensorStateChangeDebounce( STATUS_NO_ALARM );
   \                     ??CrossCallReturnLabel_1:
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             B.N      ?Subroutine0
    546          #endif
    547          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4002      POP      {R1,LR}
   \   00000004                      REQUIRE sensorStateChangeDebounce
   \   00000004                      ;; // Fall through to label sensorStateChangeDebounce
    548          

   \                                 In section .text, align 2, keep-with-next
    549          void emberAfSensorAssertedCallback(void) {
   \                     emberAfSensorAssertedCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
    550            // Drive PA7 LED when sensor is deasserted
    551            //emSleepyClearGpio(0,7);
    552          
    553            emberSerialPrintf(APP_SERIAL,"Sensor Asserted\r\n");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "Sensor Asserted\\r\\n">`
   \   00000006   0x.... 0x....      BL       ??Subroutine1_0
    554            printCurrentMsTick();
    555            //emberAfWriteAttribute(1, // endpoint
    556            //                      ZCL_IAS_ZONE_CLUSTER_ID,
    557            //                      ZCL_ZONE_STATUS_ATTRIBUTE_ID,
    558            //                      CLUSTER_MASK_SERVER,
    559            //                      status,
    560            //                      ZCL_BITMAP16_ATTRIBUTE_TYPE);
    561          #if 0
    562            emberAfPluginIasZoneServerUpdateZoneStatus(0x0001,   // status
    563                                                       0);       // QS since last update                    
    564          #else
    565            sensorStateChangeDebounce( STATUS_ALARM );
   \                     ??CrossCallReturnLabel_0:
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C                      REQUIRE ?Subroutine0
   \   0000000C                      ;; // Fall through to label ?Subroutine0
    566          #endif
    567          }
    568          
    569          // code to ignore any pending sensor events.
    570          static void idleSensor(void)
    571          {
    572            if(BUTTON_GATING == 0) {
    573              return;
    574            }
    575          
    576            //emberSerialPrintf(APP_SERIAL,"Idle Sensor %x\r\n", lastStatus);
    577          
    578            emberEventControlSetInactive(debounceEventControl);
                   ^
Warning[Pe128]: loop is not reachable
    579            lastStatus  = STATUS_NO_ALARM;
    580          }
    581          
    582          static boolean isButtonActive( void )
    583          {
    584            if(BUTTON_GATING == 0) {
    585              // button gating is not active.  Return false.
    586              //emberSerialPrintf(APP_SERIAL,"button gating disabled\r\n", button0PressedState);
    587              return FALSE;
    588            }
    589            //emberSerialPrintf(APP_SERIAL,"button0:  %x ", button0PressedState);
    590          
    591            if(button0PressedState == BUTTON_PRESSED_SHORT ||
                   ^
Warning[Pe111]: statement is unreachable
    592              button0PressedState == BUTTON_PRESSED_LONG) {
    593              //emberSerialPrintf(APP_SERIAL,"TRUE\r\n", button0PressedState);
    594              return TRUE;
    595            }
    596          
    597            //emberSerialPrintf(APP_SERIAL,"FALSE\r\n", button0PressedState);
    598          
    599            return FALSE;
    600          }
    601          

   \                                 In section .text, align 2, keep-with-next
    602          void sensorStateChangeDebounce( int16u status )
    603          {
    604            // First, if the button is being pressed, then we want to ignore any
    605            // in advertent sensor activations.  This is for the key fob device.
    606            if(isButtonActive()) {
    607              idleSensor();
    608              return;
    609            }
    610          
    611            if(status == lastStatus) {
   \                     sensorStateChangeDebounce:
   \   00000000   0x....             LDR.N    R2,??DataTable55_8
   \   00000002   0x7811             LDRB     R1,[R2, #+0]
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD102             BNE.N    ??sensorStateChangeDebounce_0
    612              // we went back to last status before debounce.  don't send the
    613              // message.
    614              emberEventControlSetInactive(debounceEventControl);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x7110             STRB     R0,[R2, #+4]
    615              return;
   \   0000000C   0x4770             BX       LR
    616            }
    617            if(status == STATUS_ALARM) {
   \                     ??sensorStateChangeDebounce_0:
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xBF18             IT       NE 
   \   00000012   0x2800             CMPNE    R0,#+0
    618              newStatus = status;
    619              emberEventControlSetDelayMS(debounceEventControl, SENSOR_ASSERT_DEBOUNCE);
    620              return;
    621            } else if(status == STATUS_NO_ALARM) {
   \   00000014   0xD104             BNE.N    ??sensorStateChangeDebounce_1
    622              newStatus = status;
   \   00000016   0x7050             STRB     R0,[R2, #+1]
    623              emberEventControlSetDelayMS(debounceEventControl, SENSOR_DEASSERT_DEBOUNCE);
   \   00000018   0x2164             MOVS     R1,#+100
   \   0000001A   0x1D10             ADDS     R0,R2,#+4
   \   0000001C   0x.... 0x....      B.W      emEventControlSetDelayMS
    624              return;
    625            }
   \                     ??sensorStateChangeDebounce_1:
   \   00000020   0x4770             BX       LR               ;; return
    626              
    627          }
    628          

   \                                 In section .text, align 2, keep-with-next
    629          void emberAfPluginSensorIfaceDebounceEventHandler(void)
    630          {
   \                     emberAfPluginSensorIfaceDebounceEventHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    631            emberEventControlSetInactive(debounceEventControl);
   \   00000002   0x....             LDR.N    R4,??DataTable55_8
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7120             STRB     R0,[R4, #+4]
    632            lastStatus = newStatus;
   \   00000008   0x7862             LDRB     R2,[R4, #+1]
   \   0000000A   0x7022             STRB     R2,[R4, #+0]
    633          
    634            emberSerialPrintf(APP_SERIAL,"Sensor Debounce New Status:  %x\r\n", newStatus);
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "Sensor Debounce New S...">`
   \   00000010   0x.... 0x....      BL       ?Subroutine2
    635            emberAfPluginIasZoneServerUpdateZoneStatus(newStatus,   // status
                   ^
Warning[Pe223]: function "emberAfPluginIasZoneServerUpdateZoneStatus" declared
          implicitly

  static int8u endDevEndpointNextSend = 0;
               ^
"C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\sensor-iface\sensor-iface.c",73  Warning[Pe177]: 
          variable "endDevEndpointNextSend" was declared but never referenced

  static int8u lastUpdateTimeQs = 0;
               ^
"C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\sensor-iface\sensor-iface.c",508  Warning[Pe177]: 
          variable "lastUpdateTimeQs" was declared but never referenced

  static int32u lastMsTick = 0;
                ^
"C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\sensor-iface\sensor-iface.c",510  Warning[Pe177]: 
          variable "lastMsTick" was declared but never referenced
    636                                                       0);       // QS since last update                    
   \                     ??CrossCallReturnLabel_15:
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x7860             LDRB     R0,[R4, #+1]
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x.... 0x....      B.W      emberAfPluginIasZoneServerUpdateZoneStatus
    637          }
    638          

   \                                 In section .text, align 2, keep-with-next
    639          boolean emberAfMfgLibEnabled( void )
    640          {
   \                     emberAfMfgLibEnabled:
   \   00000000   0xB580             PUSH     {R7,LR}
    641            int8u enabled;
    642          
    643            halCommonGetToken(&enabled,TOKEN_MFG_LIB_ENABLED);
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x227F             MOVS     R2,#+127
   \   00000006   0x211B             MOVS     R1,#+27
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      BL       halInternalGetTokenData
    644          
    645            emberSerialPrintf(APP_SERIAL, 
    646                              "MFG_LIB Enabled %x\r\n", enabled); 
   \   0000000E   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "MFG_LIB Enabled %x\\r\\n">`
   \   00000016   0x.... 0x....      BL       ?Subroutine2
    647          
    648            return enabled;
   \                     ??CrossCallReturnLabel_14:
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
    649          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   0x........         DC32     button0Counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   0x........         DC32     emberAfPluginSensorIfaceButton1ReleasedEventControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   0x........         DC32     mfgLibRunning

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \   00000000   0x........         DC32     emberAfPluginSensorIfaceInitEventControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \   00000000   0x........         DC32     networkJoinAttempts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \   00000000   0x07FFF800         DC32     0x7fff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_7:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_8:
   \   00000000   0x........         DC32     lastStatus

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sensor-iface.c">`:
   \   00000000   0x73 0x65          DC8 "sensor-iface.c"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x2D 0x69    
   \              0x66 0x61    
   \              0x63 0x65    
   \              0x2E 0x63    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Invalid button %d">`:
   \   00000000   0x49 0x6E          DC8 "Invalid button %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x62 0x75    
   \              0x74 0x74    
   \              0x6F 0x6E    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sensor Iface:  init f...">`:
   \   00000000   0x53 0x65          DC8 "Sensor Iface:  init function works.\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x49    
   \              0x66 0x61    
   \              0x63 0x65    
   \              0x3A 0x20    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x66 0x75    
   \              0x6E 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x77    
   \              0x6F 0x72    
   \              0x6B 0x73    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {200, 200, 200, 1000}>`:
   \   00000000   0x00C8 0x00C8      DC16 200, 200, 200, 1000
   \              0x00C8 0x03E8

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NO_NETWORK ">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NO_NETWORK "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x4F    
   \              0x5F 0x4E    
   \              0x45 0x54    
   \              0x57 0x4F    
   \              0x52 0x4B    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_JOINING_NETWORK ">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_JOINING_NETWORK "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4A 0x4F    
   \              0x49 0x4E    
   \              0x49 0x4E    
   \              0x47 0x5F    
   \              0x4E 0x45    
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_JOINED_NETWORK ">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_JOINED_NETWORK "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4A 0x4F    
   \              0x49 0x4E    
   \              0x45 0x44    
   \              0x5F 0x4E    
   \              0x45 0x54    
   \              0x57 0x4F    
   \              0x52 0x4B    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_JOINED_NETWORK_...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_JOINED_NETWORK_NO_PARENT "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4A 0x4F    
   \              0x49 0x4E    
   \              0x45 0x44    
   \              0x5F 0x4E    
   \              0x45 0x54    
   \              0x57 0x4F    
   \              0x52 0x4B    
   \              0x5F 0x4E    
   \              0x4F 0x5F    
   \              0x50 0x41    
   \              0x52 0x45    
   \              0x4E 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_LEAVING_NETWORK ">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_LEAVING_NETWORK "
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4C 0x45    
   \              0x41 0x56    
   \              0x49 0x4E    
   \              0x47 0x5F    
   \              0x4E 0x45    
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Stack Status Handler:  ">`:
   \   00000000   0x53 0x74          DC8 "Stack Status Handler:  "
   \              0x61 0x63    
   \              0x6B 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x48    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NETWORK_UP">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NETWORK_UP"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x45    
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5F    
   \              0x55 0x50    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NETWORK_DOWN">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NETWORK_DOWN"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x45    
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5F    
   \              0x44 0x4F    
   \              0x57 0x4E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_JOIN_FAILED">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_JOIN_FAILED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4A 0x4F    
   \              0x49 0x4E    
   \              0x5F 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_MOVE_FAILED">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_MOVE_FAILED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x5F 0x46    
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_CANNOT_JOIN_AS_...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_CANNOT_JOIN_AS_ROUTER"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x43 0x41    
   \              0x4E 0x4E    
   \              0x4F 0x54    
   \              0x5F 0x4A    
   \              0x4F 0x49    
   \              0x4E 0x5F    
   \              0x41 0x53    
   \              0x5F 0x52    
   \              0x4F 0x55    
   \              0x54 0x45    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NODE_ID_CHANGED">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NODE_ID_CHANGED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x4F    
   \              0x44 0x45    
   \              0x5F 0x49    
   \              0x44 0x5F    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_PAN_ID_CHANGED">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_PAN_ID_CHANGED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x50 0x41    
   \              0x4E 0x5F    
   \              0x49 0x44    
   \              0x5F 0x43    
   \              0x48 0x41    
   \              0x4E 0x47    
   \              0x45 0x44    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_CHANNEL_CHANGED">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_CHANNEL_CHANGED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x4E 0x45    
   \              0x4C 0x5F    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x47 0x45    
   \              0x44 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NO_BEACONS">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NO_BEACONS"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x4F    
   \              0x5F 0x42    
   \              0x45 0x41    
   \              0x43 0x4F    
   \              0x4E 0x53    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_RECEIVED_KEY_IN...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_RECEIVED_KEY_IN_THE_CLEAR"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \              0x45 0x44    
   \              0x5F 0x4B    
   \              0x45 0x59    
   \              0x5F 0x49    
   \              0x4E 0x5F    
   \              0x54 0x48    
   \              0x45 0x5F    
   \              0x43 0x4C    
   \              0x45 0x41    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NO_NETWORK_KEY_...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NO_NETWORK_KEY_RECEIVED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x4F    
   \              0x5F 0x4E    
   \              0x45 0x54    
   \              0x57 0x4F    
   \              0x52 0x4B    
   \              0x5F 0x4B    
   \              0x45 0x59    
   \              0x5F 0x52    
   \              0x45 0x43    
   \              0x45 0x49    
   \              0x56 0x45    
   \              0x44 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_NO_LINK_KEY_REC...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_NO_LINK_KEY_RECEIVED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x4E 0x4F    
   \              0x5F 0x4C    
   \              0x49 0x4E    
   \              0x4B 0x5F    
   \              0x4B 0x45    
   \              0x59 0x5F    
   \              0x52 0x45    
   \              0x43 0x45    
   \              0x49 0x56    
   \              0x45 0x44    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_PRECONFIGURED_K...">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_PRECONFIGURED_KEY_REQUIRED"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x50 0x52    
   \              0x45 0x43    
   \              0x4F 0x4E    
   \              0x46 0x49    
   \              0x47 0x55    
   \              0x52 0x45    
   \              0x44 0x5F    
   \              0x4B 0x45    
   \              0x59 0x5F    
   \              0x52 0x45    
   \              0x51 0x55    
   \              0x49 0x52    
   \              0x45 0x44    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "unknown %x">`:
   \   00000000   0x75 0x6E          DC8 "unknown %x"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x25 0x78    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DC: search for joinab...">`:
   \   00000000   0x44 0x43          DC8 "DC: search for joinable network\015\012"
   \              0x3A 0x20    
   \              0x73 0x65    
   \              0x61 0x72    
   \              0x63 0x68    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x6E 0x65    
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DC: kick off rejoin e...">`:
   \   00000000   0x44 0x43          DC8 "DC: kick off rejoin event in %d minutes.\015\012"
   \              0x3A 0x20    
   \              0x6B 0x69    
   \              0x63 0x6B    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x72    
   \              0x65 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x69    
   \              0x6E 0x75    
   \              0x74 0x65    
   \              0x73 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Rejoin event function ">`:
   \   00000000   0x52 0x65          DC8 "Rejoin event function "
   \              0x6A 0x6F    
   \              0x69 0x6E    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x75 0x6E    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Perform and schedule ...">`:
   \   00000000   0x50 0x65          DC8 "Perform and schedule rejoin\015\012"
   \              0x72 0x66    
   \              0x6F 0x72    
   \              0x6D 0x20    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x63    
   \              0x68 0x65    
   \              0x64 0x75    
   \              0x6C 0x65    
   \              0x20 0x72    
   \              0x65 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No More Rejoin!\\r\\n">`:
   \   00000000   0x4E 0x6F          DC8 "No More Rejoin!\015\012"
   \              0x20 0x4D    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x52 0x65    
   \              0x6A 0x6F    
   \              0x69 0x6E    
   \              0x21 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "multi button:  %x\\r\\n">`:
   \   00000000   0x6D 0x75          DC8 "multi button:  %x\015\012"
   \              0x6C 0x74    
   \              0x69 0x20    
   \              0x62 0x75    
   \              0x74 0x74    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "kick off join\\r\\n">`:
   \   00000000   0x6B 0x69          DC8 "kick off join\015\012"
   \              0x63 0x6B    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x6A    
   \              0x6F 0x69    
   \              0x6E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "network state %x\\r\\n">`:
   \   00000000   0x6E 0x65          DC8 "network state %x\015\012"
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Button 0 long:  %d %x\\r\\n">`:
   \   00000000   0x42 0x75          DC8 "Button 0 long:  %d %x\015\012"
   \              0x74 0x74    
   \              0x6F 0x6E    
   \              0x20 0x30    
   \              0x20 0x6C    
   \              0x6F 0x6E    
   \              0x67 0x3A    
   \              0x20 0x20    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Factory Reset\\r\\n">`:
   \   00000000   0x46 0x61          DC8 "Factory Reset\015\012"
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x79 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "current endpoint %x\\r\\n">`:
   \   00000000   0x63 0x75          DC8 "current endpoint %x\015\012"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x65 0x6E    
   \              0x64 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sensor Deasserted\\r\\n">`:
   \   00000000   0x53 0x65          DC8 "Sensor Deasserted\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x44    
   \              0x65 0x61    
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x74 0x65    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sensor Asserted\\r\\n">`:
   \   00000000   0x53 0x65          DC8 "Sensor Asserted\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x41    
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x74 0x65    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sensor Debounce New S...">`:
   \   00000000   0x53 0x65          DC8 "Sensor Debounce New Status:  %x\015\012"
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x20 0x44    
   \              0x65 0x62    
   \              0x6F 0x75    
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x4E 0x65    
   \              0x77 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MFG_LIB Enabled %x\\r\\n">`:
   \   00000000   0x4D 0x46          DC8 "MFG_LIB Enabled %x\015\012"
   \              0x47 0x5F    
   \              0x4C 0x49    
   \              0x42 0x20    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    650          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  buttonInit
        8  buttonPress
              8 -> emEventControlSetActive
        0  emberAfHalButtonIsrCallback
              0 -> buttonPress
        8  emberAfMfgLibEnabled
              8 -> emberSerialPrintf
              8 -> halInternalGetTokenData
        8  emberAfPluginButtonJoiningPressButton
              8 -> buttonPress
              0 -> emberAfPrintln
        8  emberAfPluginSensorIfaceButton0PressedEventHandler
              0 -> emEventControlSetDelayMS
              8 -> emEventControlSetDelayMS
              8 -> halCommonGetInt16uMillisecondTick
        8  emberAfPluginSensorIfaceButton0PressedLongCallback
              0 -> emberLeaveNetwork
              8 -> emberSerialPrintf
              8 -> unenrollSecurityDevice
        8  emberAfPluginSensorIfaceButton0ReleasedEventHandler
              8 -> emEventControlSetDelayMS
              8 -> emberAfPluginSensorIfaceButton0PressedLongCallback
              8 -> halCommonGetInt16uMillisecondTick
        0  emberAfPluginSensorIfaceButton1PressedEventHandler
              0 -> emberAfSensorAssertedCallback
        0  emberAfPluginSensorIfaceButton1ReleasedEventHandler
              0 -> emberAfSensorDeassertedCallback
        8  emberAfPluginSensorIfaceButtonPressedShortCallback
              8 -> emberLeaveNetwork
              8 -> emberNetworkState
              0 -> emberSerialPrintf
              8 -> emberSerialPrintf
              0 -> startSearchForJoinableNetwork
        8  emberAfPluginSensorIfaceButtonTimeoutEventHandler
              8 -> emberAfPluginSensorIfaceButtonPressedShortCallback
              8 -> halInternalAssertFailed
        8  emberAfPluginSensorIfaceDebounceEventHandler
              0 -> emberAfPluginIasZoneServerUpdateZoneStatus
              8 -> emberSerialPrintf
        8  emberAfPluginSensorIfaceInitCallback
              0 -> emEventControlSetActive
              8 -> emEventControlSetDelayQS
              0 -> emberAfForceEndDeviceToStayAwake
              8 -> emberAfMfgLibEnabled
              8 -> emberSerialPrintf
        8  emberAfPluginSensorIfaceInitEventHandler
              8 -> emberAfForceEndDeviceToStayAwake
              8 -> emberNetworkState
              8 -> emberSerialPrintf
              8 -> initSuperSleepyDevice
              8 -> startSearchForJoinableNetwork
        8  emberAfPluginSensorIfaceRejoinEventHandler
              8 -> emEventControlSetDelayQS
              0 -> emberFindAndRejoinNetworkWithReason
              8 -> emberNetworkState
              0 -> emberSerialPrintf
              8 -> emberSerialPrintf
              8 -> printNetworkState
              0 -> startSearchForJoinableNetwork
       16  emberAfPluginSensorIfaceStackStatusCallback
             16 -> emEventControlSetDelayQS
             16 -> emberAfLedOn
             16 -> emberNetworkState
             16 -> emberSerialPrintf
             16 -> printNetworkState
             16 -> startSearchForJoinableNetwork
             16 -> unenrollSecurityDevice
        8  emberAfSensorAssertedCallback
              8 -> emberSerialPrintf
              0 -> sensorStateChangeDebounce
        8  emberAfSensorDeassertedCallback
              8 -> emberSerialPrintf
              0 -> sensorStateChangeDebounce
        0  printCurrentMsTick
        8  printNetworkState
              8 -> emberNetworkState
              0 -> emberSerialPrintf
        0  resetJoinAttempts
        0  sensorStateChangeDebounce
              0 -> emEventControlSetDelayMS
       16  startSearchForJoinableNetwork
             16 -> emEventControlSetDelayQS
             16 -> emberAfLedBlinkPattern
             16 -> emberAfLedOff
             16 -> emberAfStartSearchForJoinableNetworkAllChannels
             16 -> emberAfStartSearchForJoinableNetworkCallback
             16 -> emberNetworkState


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "Button 0 long:  %d %x\r\n">
      44  ?<Constant "DC: kick off rejoin e...">
      36  ?<Constant "DC: search for joinab...">
      28  ?<Constant "EMBER_CANNOT_JOIN_AS_...">
      24  ?<Constant "EMBER_CHANNEL_CHANGED">
      24  ?<Constant "EMBER_JOINED_NETWORK ">
      32  ?<Constant "EMBER_JOINED_NETWORK_...">
      24  ?<Constant "EMBER_JOINING_NETWORK ">
      20  ?<Constant "EMBER_JOIN_FAILED">
      24  ?<Constant "EMBER_LEAVING_NETWORK ">
      20  ?<Constant "EMBER_MOVE_FAILED">
      20  ?<Constant "EMBER_NETWORK_DOWN">
      20  ?<Constant "EMBER_NETWORK_UP">
      24  ?<Constant "EMBER_NODE_ID_CHANGED">
      20  ?<Constant "EMBER_NO_BEACONS">
      28  ?<Constant "EMBER_NO_LINK_KEY_REC...">
      20  ?<Constant "EMBER_NO_NETWORK ">
      32  ?<Constant "EMBER_NO_NETWORK_KEY_...">
      24  ?<Constant "EMBER_PAN_ID_CHANGED">
      36  ?<Constant "EMBER_PRECONFIGURED_K...">
      32  ?<Constant "EMBER_RECEIVED_KEY_IN...">
      16  ?<Constant "Factory Reset\r\n">
      20  ?<Constant "Invalid button %d">
      24  ?<Constant "MFG_LIB Enabled %x\r\n">
      20  ?<Constant "No More Rejoin!\r\n">
      32  ?<Constant "Perform and schedule ...">
      24  ?<Constant "Rejoin event function ">
      20  ?<Constant "Sensor Asserted\r\n">
      20  ?<Constant "Sensor Deasserted\r\n">
      36  ?<Constant "Sensor Debounce New S...">
      40  ?<Constant "Sensor Iface:  init f...">
      24  ?<Constant "Stack Status Handler:  ">
       4  ?<Constant "\r\n">
      24  ?<Constant "current endpoint %x\r\n">
      16  ?<Constant "kick off join\r\n">
      20  ?<Constant "multi button:  %x\r\n">
      20  ?<Constant "network state %x\r\n">
      16  ?<Constant "sensor-iface.c">
      12  ?<Constant "unknown %x">
       8  ?<Constant {200, 200, 200, 1000}>
       4  ??DataTable55
       4  ??DataTable55_1
       4  ??DataTable55_2
       4  ??DataTable55_3
       4  ??DataTable55_4
       4  ??DataTable55_5
       4  ??DataTable55_6
       4  ??DataTable55_7
       4  ??DataTable55_8
       4  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine2
      38  button0Counter
          button0PressedState
          emberAfPluginSensorIfaceButton0PressedEventControl
          emberAfPluginSensorIfaceButton0ReleasedEventControl
          emberAfPluginSensorIfaceButton1PressedEventControl
          emberAfPluginSensorIfaceButtonTimeoutEventControl
          button0Timer
       2  buttonInit
      62  buttonPress
       2  emberAfHalButtonIsrCallback
      32  emberAfMfgLibEnabled
      30  emberAfPluginButtonJoiningPressButton
      64  emberAfPluginSensorIfaceButton0PressedEventHandler
      60  emberAfPluginSensorIfaceButton0PressedLongCallback
      70  emberAfPluginSensorIfaceButton0ReleasedEventHandler
      10  emberAfPluginSensorIfaceButton1PressedEventHandler
       8  emberAfPluginSensorIfaceButton1ReleasedEventControl
      10  emberAfPluginSensorIfaceButton1ReleasedEventHandler
      74  emberAfPluginSensorIfaceButtonPressedShortCallback
      36  emberAfPluginSensorIfaceButtonTimeoutEventHandler
      32  emberAfPluginSensorIfaceDebounceEventHandler
      42  emberAfPluginSensorIfaceInitCallback
       8  emberAfPluginSensorIfaceInitEventControl
      52  emberAfPluginSensorIfaceInitEventHandler
      84  emberAfPluginSensorIfaceRejoinEventHandler
     252  emberAfPluginSensorIfaceStackStatusCallback
      12  emberAfSensorAssertedCallback
      14  emberAfSensorDeassertedCallback
      12  lastStatus
          newStatus
          emberAfPluginSensorIfaceDebounceEventControl
      12  networkJoinAttempts
          emberAfPluginSensorIfaceRejoinEventControl
       2  printCurrentMsTick
      60  printNetworkState
       8  resetJoinAttempts
      34  sensorStateChangeDebounce
     100  startSearchForJoinableNetwork

 
    78 bytes in section .bss
     4 bytes in section .rodata
 2 148 bytes in section .text
 
 2 148 bytes of CODE  memory
     4 bytes of CONST memory
    78 bytes of DATA  memory

Errors: none
Warnings: 8
