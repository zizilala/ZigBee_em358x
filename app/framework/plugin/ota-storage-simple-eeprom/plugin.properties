name=OTA Simple Storage EEPROM Driver
category=ZigBee OTA Bootloading

# Any string is allowable here.  Generally it is either: Production Ready, Test Tool, or Requires Extending
qualityString=Production Ready
# This must be one of the following:  productionReady, testTool, extensionNeeded
quality=production

introducedIn=

description=This is a driver for the Over-the-air simple storage module plugin.  It uses an EEPROM as the underlying storage device.  It provides a means to record the actual data being read or written, as well as meta-data with information about how far along a client download is.  It can be used either by an OTA Client or an OTA Server.

sourceFiles=ota-storage-eeprom.c, ota-storage-eeprom-page-erase.c, ota-storage-eeprom-read-modify-write.c

implementedCallbacks=emberAfOtaStorageDriverInitCallback, emberAfOtaStorageDriverReadCallback, emberAfOtaStorageDriverWriteCallback, emberAfOtaStorageDriverDownloadFinishCallback, emberAfOtaStorageDriverInvalidateImageCallback, emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback, emberAfOtaStorageDriverPrepareToResumeDownloadCallback

requiredPlugins=ota-storage-simple, eeprom

options=socBootloadingSupport, enableSocAppBootloaderCompatibilityMode, storageStart, storageEnd, readModifyWriteSupport, downloadOffsetSaveRate

socBootloadingSupport.name=SOC Bootloading Support
socBootloadingSupport.description=This option enables bootloading support for SOC devices.  When enabled, it will re-map the OTA image file so that the EBL data is at the top of the EEPROM and therefore can be accessed by all existing Ember bootloaders.  It requires that the EBL portion of the image is the first TAG in the file.  The OTA storage starting offset should be 0 when this is enabled.
socBootloadingSupport.type=BOOLEAN
socBootloadingSupport.default=true

enableSocAppBootloaderCompatibilityMode.name=EM35x SOC Only:  Enable 4.2 Application Bootloader Compatibility Mode
enableSocAppBootloaderCompatibilityMode.description=For 35x SOC chips that are running an EmberZNet 4.2 application bootloader they must enable this compatibility mode and include a copy of a newer EEPROM driver (EmberZNet 4.3 or later version) in the application.  Normally the 35x has the ability to use EEPROM driver code shared by both the application and bootloader.  However that EEPROM driver must have support for arbitrary page writes.  The Ember drivers included with the EmberZNet 4.2 EM35x application bootloaders did NOT have this support.  Therefore this plugin cannot use them and a copy of the driver must be added in the application.
enableSocAppBootloaderCompatibilityMode.type=BOOLEAN
enableSocAppBootloaderCompatibilityMode.default=false

downloadOffsetSaveRate.name=Frequency for Saving Download Offset to EEPROM (bytes)
downloadOffsetSaveRate.description=How often the current download offset is stored to EEPROM, in bytes.  If set to 0 it will always be written to EEPROM.  This is only used for "read-modify-write" drivers.
downloadOffsetSaveRate.type=NUMBER
downloadOffsetSaveRate.default=1024

storageStart.name=OTA Storage Start Offset
storageStart.description=This is the starting offset for where the OTA image will be stored in the EERPOM.
storageStart.type=NUMBER
storageStart.default=0

storageEnd.name=OTA Storage End Offset
storageEnd.description=This is the last offset for where the OTA image may be stored in the EEPROM.
storageEnd.type=NUMBER
# 200k limit arbitrarily chosen for a default because it is bigger than our 192k 357.
storageEnd.default=204800

readModifyWriteSupport.name=EEPROM Device Read-modify-write Support
readModifyWriteSupport.description=This indicates to the OTA code whether the underlying EEPROM driver has support for 'read-modify-write'.  Read-modify-write assumes a page erase is not required prior to writing, and any location or length of data can be re-written.  If not present, then the OTA code will note each full page of data downloaded and must erase entire pages before downloading a chunk of data.
readModifyWriteSupport.type=BOOLEAN
readModifyWriteSupport.default=TRUE

events=PageErase