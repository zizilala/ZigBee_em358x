###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:50 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\security\secur #
#                    ity-address-cache.c                                      #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\security\secur #
#                    ity-address-cache.c -D "GENERATED_TOKEN_HEADER=\"app/bui #
#                    lder/DoorSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D  #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"security-address-cache.c\"" -lC     #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\security\ -I   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \security-address-cache.lst                              #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \security-address-cache.o                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\security\security-address-cache.c
      1          // *******************************************************************
      2          // security-address-cache.c
      3          //
      4          // Description:  This is the code used by nodes to manage
      5          //   the address table cache.  Devices may need this address
      6          //   table cache in order to properly decrypt APS Encrypted messages sent
      7          //   by other devices (i.e. APS_UPDATE_DEVICE).  The source address
      8          //   of the sending device may not be present in the APS Auxiliary Header
      9          //   and therefore the stack will have to look it up.  The stack automatically
     10          //   consults the address table when it is trying to determine the IEEE
     11          //   address from a node ID, so this code utilizes a small portion of the
     12          //   address table to cache the data it needs.
     13          //
     14          //  Copyright 2007 by Ember Corporation. All rights reserved.               *80*
     15          // *******************************************************************
     16          
     17          //------------------------------------------------------------------------------
     18          // INCLUDES
     19          
     20          #include PLATFORM_HEADER //compiler/micro specifics, types
     21          
     22          #include "stack/include/ember.h"
     23          #include "stack/include/error.h"
     24          #include "hal/hal.h"
     25          #include "app/util/serial/serial.h"
     26          #include "app/util/security/security.h"
     27          
     28          //------------------------------------------------------------------------------
     29          

   \                                 In section .bss, align 1
     30          int8u addressCacheSize = 0;             
   \                     addressCacheSize:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
     31          static int8u addressCacheStartIndex;
     32          static int8u nextIndex;                 // relative to addressCacheStartIndex
     33          
     34          //------------------------------------------------------------------------------
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void securityAddressCacheInit(int8u securityAddressCacheStartIndex,
     37                                        int8u securityAddressCacheSize)
     38          {
     39            addressCacheStartIndex = securityAddressCacheStartIndex;
   \                     securityAddressCacheInit:
   \   00000000   0x....             LDR.N    R2,??DataTable2
   \   00000002   0x7050             STRB     R0,[R2, #+1]
     40            addressCacheSize = securityAddressCacheSize;
   \   00000004   0x7011             STRB     R1,[R2, #+0]
     41            nextIndex = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7090             STRB     R0,[R2, #+2]
     42          }
   \   0000000A   0x4770             BX       LR               ;; return
     43          
     44          //------------------------------------------------------------------------------
     45          // The Trust Center Address cache keeps track of EUI64s for the purpose of
     46          // sending APS Encrypted commands.  During joining the Trust Center
     47          // will send an APS Encrypted command to the parent of the device and needs to 
     48          // know their long address for creating the Nonce used in encryption.
     49          
     50          // We simply loop through our cache and overwrite the last one received.
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void securityAddToAddressCache(EmberNodeId nodeId, EmberEUI64 nodeEui64)
     53          {
   \                     securityAddToAddressCache:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
     54            int8u index = nextIndex;
   \   00000008   0x....             LDR.N    R6,??DataTable2
   \   0000000A   0x78B7             LDRB     R7,[R6, #+2]
     55            int8u i;
     56          
     57            if (addressCacheSize == 0) {
   \   0000000C   0x7830             LDRB     R0,[R6, #+0]
   \   0000000E   0xB398             CBZ.N    R0,??securityAddToAddressCache_0
     58              return;
     59            }
     60          
     61            if (nodeId >= EMBER_BROADCAST_ADDRESS) {
   \   00000010   0xF64F 0x70FC      MOVW     R0,#+65532
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD304             BCC.N    ??securityAddToAddressCache_1
     62              assert(0);
   \   00000018   0x213E             MOVS     R1,#+62
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "security-address-cache.c">`
   \   0000001E   0x.... 0x....      BL       halInternalAssertFailed
     63            }
     64          
     65            // Search through our cache for an existing IEEE with the same info.
     66            // If it exists update that.
     67            for (i = 0; i < addressCacheSize; i++) {
   \                     ??securityAddToAddressCache_1:
   \   00000022   0x2500             MOVS     R5,#+0
   \   00000024   0xE000             B.N      ??securityAddToAddressCache_2
   \                     ??securityAddToAddressCache_3:
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??securityAddToAddressCache_2:
   \   00000028   0x7830             LDRB     R0,[R6, #+0]
   \   0000002A   0xB2ED             UXTB     R5,R5
   \   0000002C   0x4285             CMP      R5,R0
   \   0000002E   0xD20D             BCS.N    ??securityAddToAddressCache_4
     68              EmberEUI64 eui64;
     69              emberGetAddressTableRemoteEui64(addressCacheStartIndex + i, eui64);
   \   00000030   0xA900             ADD      R1,SP,#+0
   \   00000032   0x7870             LDRB     R0,[R6, #+1]
   \   00000034   0x1828             ADDS     R0,R5,R0
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x.... 0x....      BL       emberGetAddressTableRemoteEui64
     70              if (MEMCOMPARE(eui64, nodeEui64, EUI64_SIZE) == 0) {
   \   0000003C   0x2208             MOVS     R2,#+8
   \   0000003E   0x4641             MOV      R1,R8
   \   00000040   0xA800             ADD      R0,SP,#+0
   \   00000042   0x.... 0x....      BL       halCommonMemCompare
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1ED             BNE.N    ??securityAddToAddressCache_3
     71                index = i;
   \   0000004A   0x462F             MOV      R7,R5
     72                break;
     73              }
     74            }
     75          
     76            if (index == nextIndex) {
   \                     ??securityAddToAddressCache_4:
   \   0000004C   0x78B0             LDRB     R0,[R6, #+2]
   \   0000004E   0x4601             MOV      R1,R0
   \   00000050   0x4287             CMP      R7,R0
   \   00000052   0xBF01             ITTTT    EQ 
   \   00000054   0x1C49             ADDEQ    R1,R1,#+1
   \   00000056   0x7830             LDRBEQ   R0,[R6, #+0]
   \   00000058   0xB2C9             UXTBEQ   R1,R1
   \   0000005A   0x4281             CMPEQ    R1,R0
     77              nextIndex += 1;
     78              if (nextIndex == addressCacheSize)
   \   0000005C   0xBF08             IT       EQ 
   \   0000005E   0x2100             MOVEQ    R1,#+0
     79                nextIndex = 0;
   \   00000060   0x70B1             STRB     R1,[R6, #+2]
     80            }
     81          
     82            index += addressCacheStartIndex;
   \   00000062   0x7870             LDRB     R0,[R6, #+1]
   \   00000064   0x19C7             ADDS     R7,R0,R7
     83            if (emberSetAddressTableRemoteEui64(index, nodeEui64)
     84                == EMBER_SUCCESS) {
   \   00000066   0x4641             MOV      R1,R8
   \   00000068   0xB2F8             UXTB     R0,R7
   \   0000006A   0x.... 0x....      BL       emberSetAddressTableRemoteEui64
   \   0000006E   0xB918             CBNZ.N   R0,??securityAddToAddressCache_0
     85              emberSetAddressTableRemoteNodeId(index, nodeId);
   \   00000070   0x4621             MOV      R1,R4
   \   00000072   0xB2F8             UXTB     R0,R7
   \   00000074   0x.... 0x....      BL       emberSetAddressTableRemoteNodeId
   \                     ??securityAddToAddressCache_0:
   \   00000078   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
     86            }
     87          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     addressCacheSize

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "security-address-cache.c">`:
   \   00000000   0x73 0x65          DC8 "security-address-cache.c"
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x2D 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x2D 0x63    
   \              0x61 0x63    
   \              0x68 0x65    
   \              0x2E 0x63    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  securityAddToAddressCache
             32 -> emberGetAddressTableRemoteEui64
             32 -> emberSetAddressTableRemoteEui64
             32 -> emberSetAddressTableRemoteNodeId
             32 -> halCommonMemCompare
             32 -> halInternalAssertFailed
        0  securityAddressCacheInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "security-address-cache.c">
       4  ??DataTable2
       3  addressCacheSize
          addressCacheStartIndex
          nextIndex
     124  securityAddToAddressCache
      12  securityAddressCacheInit

 
   3 bytes in section .bss
 168 bytes in section .text
 
 168 bytes of CODE memory
   3 bytes of DATA memory

Errors: none
Warnings: none
