###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:26 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\diag #
#                    nostic.c                                                 #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\diag #
#                    nostic.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSe #
#                    nsor_SM6011/DoorSensor_SM6011_tokens.h\"" -D             #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"diagnostic.c\"" -lC                 #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \diagnostic.lst                                          #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \diagnostic.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\diagnostic.c
      1          /*
      2           * File: hal/micro/cortexm3/diagnostic.c
      3           * Description: EM3XX-specific diagnostic HAL functions
      4           *
      5           * Author(s): 
      6           *
      7           * Copyright 2009 by Ember Corporation. All rights reserved.                *80*
      8           */
      9          
     10          #include PLATFORM_HEADER
     11          #include "stack/include/ember.h"
     12          #include "hal/hal.h"
     13          #include "app/util/serial/serial.h"
     14          #include "diagnostic.h"
     15          #include "hal/micro/cortexm3/mpu.h"
     16          
     17          //------------------------------------------------------------------------------
     18          // Preprocessor definitions
     19          
     20          // Reserved instruction executed after a failed assert to cause a usage fault
     21          #define ASSERT_USAGE_OPCODE 0xDE42
     22          
     23          // Codes for DMA channels in DMA_PROT_CH
     24          #define DMA_PROT_CH_SC1_RX    1
     25          #define DMA_PROT_CH_GP_ADC    3
     26          #define DMA_PROT_CH_MAC       4
     27          #define DMA_PROT_CH_SC2_RX    5
     28          
     29          
     30          //------------------------------------------------------------------------------
     31          // Local Variables
     32          

   \                                 In section .text, align 4, keep-with-next
     33          static PGM_P PGM cfsrBits[] =
   \                     cfsrBits:
   \   00000000   0x........         DC32 `?<Constant "IACCVIOL: attempted i...">`
   \   00000004   0x........         DC32 `?<Constant "DACCVIOL: attempted l...">`, `?<Constant "">`
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "MUNSTKERR: unstack fr...">`
   \   00000010   0x........         DC32 `?<Constant "MSTKERR: stacking fro...">`, `?<Constant "">`
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "">`, `?<Constant "MMARVALID: MMAR conta...">`
   \              0x........   
   \   00000020   0x........         DC32 `?<Constant "IBUSERR: instruction ...">`
   \   00000024   0x........         DC32 `?<Constant "PRECISERR: precise da...">`
   \   00000028   0x........         DC32 `?<Constant "IMPRECISERR: imprecis...">`
   \   0000002C   0x........         DC32 `?<Constant "UNSTKERR: unstacking ...">`
   \   00000030   0x........         DC32 `?<Constant "STKERR: stacking on e...">`, `?<Constant "">`
   \              0x........   
   \   00000038   0x........         DC32 `?<Constant "">`, `?<Constant "BFARVALID: BFAR conta...">`
   \              0x........   
   \   00000040   0x........         DC32 `?<Constant "UNDEFINSTR: tried to ...">`
   \   00000044   0x........         DC32 `?<Constant "INVSTATE: invalid EPS...">`
   \   00000048   0x........         DC32 `?<Constant "INVPC: exception retu...">`
   \   0000004C   0x........         DC32 `?<Constant "NOCP: attempted to ex...">`, `?<Constant "">`
   \              0x........   
   \   00000054   0x........         DC32 `?<Constant "">`, `?<Constant "">`, `?<Constant "">`
   \              0x........   
   \              0x........   
   \   00000060   0x........         DC32 `?<Constant "UNALIGNED: attempted ...">`
   \   00000064   0x........         DC32 `?<Constant "DIVBYZERO: attempted ...">`
     34          {
     35          
     36            // Memory management (MPU) faults 
     37            "IACCVIOL: attempted instruction fetch from a no-execute address",  // B0 
     38            "DACCVIOL: attempted load or store at an illegal address",          // B1
     39            "",                                                                 // B2
     40            "MUNSTKERR: unstack from exception return caused access violation", // B3
     41            "MSTKERR: stacking from exception caused access violation",         // B4
     42            "",                                                                 // B5
     43            "",                                                                 // B6
     44            "MMARVALID: MMAR contains valid fault address",                     // B7
     45          
     46            // Bus faults
     47            "IBUSERR: instruction prefetch caused bus fault",                   // B8
     48            "PRECISERR: precise data bus fault",                                // B9
     49            "IMPRECISERR: imprecise data bus fault",                            // B10
     50            "UNSTKERR: unstacking on exception return caused data bus fault",   // B11
     51            "STKERR: stacking on exception entry caused data bus fault",        // B12
     52            "",                                                                 // B13
     53            "",                                                                 // B14
     54            "BFARVALID: BFAR contains valid fault address",                     // B15
     55          
     56            // Usage faults
     57            "UNDEFINSTR: tried to execute an undefined instruction",            // B16
     58            "INVSTATE: invalid EPSR - e.g., tried to switch to ARM mode",       // B17
     59            "INVPC: exception return integrity checks failed",                  // B18
     60            "NOCP: attempted to execute a coprocessor instruction",             // B19
     61            "",                                                                 // B20
     62            "",                                                                 // B21
     63            "",                                                                 // B22
     64            "",                                                                 // B23
     65            "UNALIGNED: attempted an unaligned memory access",                  // B24
     66            "DIVBYZERO: attempted to execute SDIV or UDIV with divisor of 0"    // B25
     67          };
     68          

   \                                 In section .text, align 4, keep-with-next
     69          static PGM_P PGM afsrBits[] =
   \                     afsrBits:
   \   00000000   0x........         DC32 `?<Constant "">`, `?<Constant "RESERVED: attempted a...">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "PROTECTED: attempted ...">`
   \   0000000C   0x........         DC32 `?<Constant "WRONGSIZE: attempted ...">`
     70          {
     71            "",                                                                 // B0
     72            "RESERVED: attempted access past last peripheral register address", // B1
     73            "PROTECTED: attempted user mode write to privileged peripheral",    // B2
     74            "WRONGSIZE: attempted 8/16-bit access to peripheral register"       // B3
     75          };
     76          

   \                                 In section .text, align 4, keep-with-next
     77          static PGM_P PGM intActiveBits[] =
   \                     intActiveBits:
   \   00000000   0x........         DC32 `?<Constant "Timer1">`, `?<Constant "Timer2">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "Management">`, `?<Constant "Baseband">`
   \              0x........   
   \   00000010   0x........         DC32 `?<Constant "Sleep_Timer">`, `?<Constant "SC1">`
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "SC2">`, `?<Constant "Security">`
   \              0x........   
   \   00000020   0x........         DC32 `?<Constant "MAC_Timer">`, `?<Constant "MAC_TX">`
   \              0x........   
   \   00000028   0x........         DC32 `?<Constant "MAC_RX">`, `?<Constant "ADC">`, `?<Constant "IRQ_A">`
   \              0x........   
   \              0x........   
   \   00000034   0x........         DC32 `?<Constant "IRQ_B">`, `?<Constant "IRQ_C">`
   \              0x........   
   \   0000003C   0x........         DC32 `?<Constant "IRQ_D">`, `?<Constant "Debug">`
   \              0x........   
     78          {
     79            "Timer1",       // B0
     80            "Timer2",       // B1
     81            "Management",   // B2
     82            "Baseband",     // B3
     83            "Sleep_Timer",  // B4
     84            "SC1",          // B5
     85            "SC2",          // B6
     86            "Security",     // B7
     87            "MAC_Timer",    // B8
     88            "MAC_TX",       // B9
     89            "MAC_RX",       // B10
     90            "ADC",          // B11
     91            "IRQ_A",        // B12
     92            "IRQ_B",        // B13
     93            "IRQ_C",        // B14
     94            "IRQ_D",        // B15
     95            "Debug"         // B16
     96          };
     97          
     98          // Names of raw crash data items - each name is null terminated, and the
     99          // end of the array is flagged by two null bytes in a row.
    100          // NOTE: the order of these names must match HalCrashInfoType members.

   \                                 In section .text, align 4, keep-with-next
    101          static const char nameStrings[] = "R0\0R1\0R2\0R3\0"
   \                     nameStrings:
   \   00000000   0x52 0x30          DC8 52H, 30H, 0, 52H, 31H, 0, 52H, 32H
   \              0x00 0x52    
   \              0x31 0x00    
   \              0x52 0x32    
   \   00000008   0x00 0x52          DC8 0, 52H, 33H, 0, 52H, 34H, 0, 52H
   \              0x33 0x00    
   \              0x52 0x34    
   \              0x00 0x52    
   \   00000010   0x35 0x00          DC8 35H, 0, 52H, 36H, 0, 52H, 37H, 0
   \              0x52 0x36    
   \              0x00 0x52    
   \              0x37 0x00    
   \   00000018   0x52 0x38          DC8 52H, 38H, 0, 52H, 39H, 0, 52H, 31H
   \              0x00 0x52    
   \              0x39 0x00    
   \              0x52 0x31    
   \   00000020   0x30 0x00          DC8 30H, 0, 52H, 31H, 31H, 0, 52H, 31H
   \              0x52 0x31    
   \              0x31 0x00    
   \              0x52 0x31    
   \   00000028   0x32 0x00          DC8 32H, 0, 52H, 31H, 33H, 28H, 4CH, 52H
   \              0x52 0x31    
   \              0x33 0x28    
   \              0x4C 0x52    
   \   00000030   0x29 0x00          DC8 29H, 0, 4DH, 53H, 50H, 0, 50H, 53H
   \              0x4D 0x53    
   \              0x50 0x00    
   \              0x50 0x53    
   \   00000038   0x50 0x00          DC8 50H, 0, 50H, 43H, 0, 78H, 50H, 53H
   \              0x50 0x43    
   \              0x00 0x78    
   \              0x50 0x53    
   \   00000040   0x52 0x00          DC8 52H, 0, 4DH, 53H, 50H, 20H, 75H, 73H
   \              0x4D 0x53    
   \              0x50 0x20    
   \              0x75 0x73    
   \   00000048   0x65 0x64          DC8 65H, 64H, 0, 50H, 53H, 50H, 20H, 75H
   \              0x00 0x50    
   \              0x53 0x50    
   \              0x20 0x75    
   \   00000050   0x73 0x65          DC8 73H, 65H, 64H, 0, 43H, 53H, 54H, 41H
   \              0x64 0x00    
   \              0x43 0x53    
   \              0x54 0x41    
   \   00000058   0x43 0x4B          DC8 43H, 4BH, 20H, 62H, 6FH, 74H, 74H, 6FH
   \              0x20 0x62    
   \              0x6F 0x74    
   \              0x74 0x6F    
   \   00000060   0x6D 0x00          DC8 6DH, 0, 49H, 43H, 53H, 52H, 0, 53H
   \              0x49 0x43    
   \              0x53 0x52    
   \              0x00 0x53    
   \   00000068   0x48 0x43          DC8 48H, 43H, 53H, 52H, 0, 49H, 4EH, 54H
   \              0x53 0x52    
   \              0x00 0x49    
   \              0x4E 0x54    
   \   00000070   0x5F 0x41          DC8 5FH, 41H, 43H, 54H, 49H, 56H, 45H, 0
   \              0x43 0x54    
   \              0x49 0x56    
   \              0x45 0x00    
   \   00000078   0x43 0x46          DC8 43H, 46H, 53H, 52H, 0, 48H, 46H, 53H
   \              0x53 0x52    
   \              0x00 0x48    
   \              0x46 0x53    
   \   00000080   0x52 0x00          DC8 52H, 0, 44H, 46H, 53H, 52H, 0, 4DH
   \              0x44 0x46    
   \              0x53 0x52    
   \              0x00 0x4D    
   \   00000088   0x4D 0x41          DC8 4DH, 41H, 52H, 2FH, 42H, 46H, 41H, 52H
   \              0x52 0x2F    
   \              0x42 0x46    
   \              0x41 0x52    
   \   00000090   0x00 0x41          DC8 0, 41H, 46H, 53H, 52H, 0, 52H, 65H
   \              0x46 0x53    
   \              0x52 0x00    
   \              0x52 0x65    
   \   00000098   0x74 0x30          DC8 74H, 30H, 0, 52H, 65H, 74H, 31H, 0
   \              0x00 0x52    
   \              0x65 0x74    
   \              0x31 0x00    
   \   000000A0   0x52 0x65          DC8 52H, 65H, 74H, 32H, 0, 52H, 65H, 74H
   \              0x74 0x32    
   \              0x00 0x52    
   \              0x65 0x74    
   \   000000A8   0x33 0x00          DC8 33H, 0, 52H, 65H, 74H, 34H, 0, 52H
   \              0x52 0x65    
   \              0x74 0x34    
   \              0x00 0x52    
   \   000000B0   0x65 0x74          DC8 65H, 74H, 35H, 0, 44H, 61H, 74H, 30H
   \              0x35 0x00    
   \              0x44 0x61    
   \              0x74 0x30    
   \   000000B8   0x00 0x44          DC8 0, 44H, 61H, 74H, 31H, 0, 0
   \              0x61 0x74    
   \              0x31 0x00    
   \              0x00         
   \   000000BF   0x00               DC8 0
    102                                            "R4\0R5\0R6\0R7\0"
    103                                            "R8\0R9\0R10\0R11\0"
    104                                            "R12\0R13(LR)\0MSP\0PSP\0"
    105                                            "PC\0xPSR\0MSP used\0PSP used\0"
    106                                            "CSTACK bottom\0ICSR\0SHCSR\0INT_ACTIVE\0"
    107                                            "CFSR\0HFSR\0DFSR\0MMAR/BFAR\0AFSR\0"
    108                                            "Ret0\0Ret1\0Ret2\0Ret3\0"
    109                                            "Ret4\0Ret5\0Dat0\0Dat1\0";
    110          
    111          //------------------------------------------------------------------------------
    112          // Forward Declarations
    113          
    114          //------------------------------------------------------------------------------
    115          // Functions
    116          

   \                                 In section .text, align 4, keep-with-next
    117          static void halInternalAssertFault(PGM_P filename, int linenumber)
    118          {
    119            // Cause a usage fault by executing a special UNDEFINED instruction.
    120            // The high byte (0xDE) is reserved to be undefined - the low byte (0x42)
    121            // is arbitrary and distiguishes a failed assert from other usage faults.
    122            // the fault handler with then decode this, grab the filename and linenumber
    123            // parameters from R0 and R1 and save the information for display after
    124            // a reset 
    125            asm("DC16 0DE42h");
   \                     halInternalAssertFault:
   \   00000000   0xDE42             DC16 0DE42h
    126          }
   \   00000002   0x4770             BX       LR               ;; return
    127          

   \                                 In section .text, align 2, keep-with-next
    128          void halInternalAssertFailed(PGM_P filename, int linenumber)
    129          {
   \                     halInternalAssertFailed:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    130            halResetWatchdog();              // In case we're close to running out.
   \   00000006   0x.... 0x....      BL       halInternalResetWatchDog
    131            INTERRUPTS_OFF();
   \   0000000A   0x.... 0x....      BL       _disableBasePri
    132          
    133            #if DEBUG_LEVEL >= BASIC_DEBUG
    134              emberDebugAssert(filename, linenumber);
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberDebugAssert
    135            #endif
    136          
    137            #if !defined(EMBER_ASSERT_OUTPUT_DISABLED)
    138              emberSerialGuaranteedPrintf(EMBER_ASSERT_SERIAL_PORT, 
    139                                          "\r\n[ASSERT:%p:%d]\r\n",
    140                                          filename, 
    141                                          linenumber);
   \   00000016   0x462B             MOV      R3,R5
   \   00000018   0x4622             MOV      R2,R4
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\n[ASSERT:%p:%d]\\r\\n">`
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    142            #endif
    143            
    144            #if defined (__ICCARM__)
    145              // With IAR, we can use the special fault mechanism to preserve more assert
    146              //  information for display after a crash
    147              halInternalAssertFault(filename, linenumber);
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000002C   0x....             B.N      halInternalAssertFault
    148            #else
    149              // Other toolchains don't handle the inline assembly correctly, so
    150              // we just call the internal reset
    151              halResetInfo.crash.data.assertInfo.file =
    152                  (const char *)halResetInfo.crash.R0;
    153              halResetInfo.crash.data.assertInfo.line = halResetInfo.crash.R1;
    154              halInternalSysReset(RESET_CRASH_ASSERT);
    155            #endif
    156          }
    157          
    158          // Returns the bytes used in the main stack area.
    159          static int32u halInternalGetMainStackBytesUsed(int32u *p)
    160          {
    161            for ( ; p < STACK_SEGMENT_END; p++) {
    162              if (*p != STACK_FILL_VALUE) {
    163                break;
    164              }
    165            }
    166            return (int32u)((int8u *)STACK_SEGMENT_END - (int8u *)p);
    167          }
    168          
    169          // After the low-level fault handler (in faults.s79) has saved the processor
    170          // registers (R0-R12, LR and both MSP an PSP), it calls halInternalCrashHandler
    171          // to finish saving additional crash data. This function returns the reason for
    172          // the crash to the low-level fault handler that then calls 
    173          // halInternalSystsemReset() to reset the processor.
    174          //
    175          // NOTE:
    176          // This function should not use more than 16 words on the stack to avoid
    177          // overwriting halResetInfo at the bottom of the stack segment.
    178          // The 16 words include this function's return address, plus any stack
    179          // used by functions called by this one. The stack size allowed is defined
    180          // by the symbol CRASH_STACK_SIZE in faults.s79.
    181          // As compiled by IAR V6.21.1, it now uses 8 words (1 for its return address,
    182          // 6 for registers pushed onto the stack and 1 for the return address of
    183          // halInternalGetMainStackBytesUsed().
    184          //

   \                                 In section .text, align 2, keep-with-next
    185          int16u halInternalCrashHandler(void)
    186          {
   \                     halInternalCrashHandler:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    187            int32u activeException;
    188            int16u reason = RESET_FAULT_UNKNOWN;
   \   00000004   0xF44F 0x6520      MOV      R5,#+2560
    189            HalCrashInfoType *c = &halResetInfo.crash;
    190            int8u i, j;
    191            int32u *sp, *s, *sEnd; 
    192            int32u data;
    193          
    194            c->icsr.word = SCS_ICSR;
   \   00000008   0x.... 0x....      LDR.W    R6,??DataTable83_5
   \   0000000C   0x1D37             ADDS     R7,R6,#+4
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable83_6  ;; 0xe000ed04
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0x6579             STR      R1,[R7, #+84]
    195            c->shcsr.word = SCS_SHCSR;
   \   00000016   0x6A01             LDR      R1,[R0, #+32]
   \   00000018   0x65B9             STR      R1,[R7, #+88]
    196            c->intActive.word = INT_ACTIVE;
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable83_7  ;; 0xe000e300
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x65F9             STR      R1,[R7, #+92]
    197            c->cfsr.word = SCS_CFSR;
   \   00000022   0x6A41             LDR      R1,[R0, #+36]
   \   00000024   0x6639             STR      R1,[R7, #+96]
    198            c->hfsr.word = SCS_HFSR;
   \   00000026   0x6A81             LDR      R1,[R0, #+40]
   \   00000028   0x6679             STR      R1,[R7, #+100]
    199            c->dfsr.word = SCS_DFSR;
   \   0000002A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000002C   0x66B9             STR      R1,[R7, #+104]
    200            c->faultAddress = SCS_MMAR;
   \   0000002E   0x6B01             LDR      R1,[R0, #+48]
   \   00000030   0x66F9             STR      R1,[R7, #+108]
    201            c->afsr.word = SCS_AFSR;
   \   00000032   0x6B80             LDR      R0,[R0, #+56]
   \   00000034   0x6738             STR      R0,[R7, #+112]
    202          
    203            // Examine B2 of the saved LR to know the stack in use when the fault occurred 
    204            sp = (int32u *)((c->LR & 4) ? c->processSP : c->mainSP);
   \   00000036   0xF897 0x0034      LDRB     R0,[R7, #+52]
   \   0000003A   0x0740             LSLS     R0,R0,#+29
   \   0000003C   0xBF4C             ITE      MI 
   \   0000003E   0x6BFC             LDRMI    R4,[R7, #+60]
   \   00000040   0x6BBC             LDRPL    R4,[R7, #+56]
    205            sEnd = sp; // Keep a copy around for walking the stack later
   \   00000042   0x46A0             MOV      R8,R4
    206          
    207            // Get the bottom of the stack since we allow stack resizing
    208            c->mainStackBottom = (int32u)halInternalGetCStackBottom();
   \   00000044   0x.... 0x....      BL       halInternalGetCStackBottom
   \   00000048   0x6538             STR      R0,[R7, #+80]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable83_8
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable83_9
   \   00000052   0x.... 0x....      LDR.W    R3,??DataTable83_10
   \   00000056   0x46A6             MOV      LR,R4
   \   00000058   0x4586             CMP      LR,R0
   \   0000005A   0xBF24             ITT      CS 
   \   0000005C   0xF1A3 0x0920      SUBCS    R9,R3,#+32
   \   00000060   0x45F1             CMPCS    R9,LR
   \   00000062   0xD320             BCC.N    ??halInternalCrashHandler_0
    209          
    210            // If the stack pointer is valid, read and save the stacked PC and xPSR
    211            if ( ((int32u)sp >= c->mainStackBottom)
    212                 && ((int32u)sp <= ((int32u)STACK_SEGMENT_END - (8*sizeof(int32u)))) ) { 
    213              sp += 6; // Skip over R0,R1,R2,R3,R12,LR
    214              c->PC = *sp++;
   \   00000064   0xF854 0xEF18      LDR      LR,[R4, #+24]!
   \   00000068   0xF8C7 0xE040      STR      LR,[R7, #+64]
    215              c->xPSR.word = *sp++;
   \   0000006C   0xF854 0xEF04      LDR      LR,[R4, #+4]!
   \   00000070   0xF8C7 0xE044      STR      LR,[R7, #+68]
    216             
    217              // See if fault was due to a failed assert. This is indicated by 
    218              // a usage fault caused by executing a reserved instruction.
    219             if ( c->icsr.bits.VECTACTIVE == USAGE_FAULT_VECTOR_INDEX &&
    220                  ((void *)c->PC >= CODE_SEGMENT_BEGIN) && 
    221                  ((void *)c->PC < CODE_SEGMENT_END) &&
    222                  *(int16u *)(c->PC) == ASSERT_USAGE_OPCODE ) {
   \   00000074   0x6D7C             LDR      R4,[R7, #+84]
   \   00000076   0x05E4             LSLS     R4,R4,#+23
   \   00000078   0x0DE4             LSRS     R4,R4,#+23
   \   0000007A   0x2C06             CMP      R4,#+6
   \   0000007C   0xD117             BNE.N    ??halInternalCrashHandler_1
   \   0000007E   0x6C3C             LDR      R4,[R7, #+64]
   \   00000080   0x46A6             MOV      LR,R4
   \   00000082   0x4596             CMP      LR,R2
   \   00000084   0xD313             BCC.N    ??halInternalCrashHandler_1
   \   00000086   0x458E             CMP      LR,R1
   \   00000088   0xD211             BCS.N    ??halInternalCrashHandler_1
   \   0000008A   0x8824             LDRH     R4,[R4, #+0]
   \   0000008C   0xF64D 0x6E42      MOVW     LR,#+56898
   \   00000090   0x4574             CMP      R4,LR
   \   00000092   0xD10C             BNE.N    ??halInternalCrashHandler_1
    223                // Copy halInternalAssertFailed() arguments into data member specific
    224                // to asserts.
    225                c->data.assertInfo.file = (const char *)c->R0;
   \   00000094   0xF106 0x048C      ADD      R4,R6,#+140
   \   00000098   0x6875             LDR      R5,[R6, #+4]
   \   0000009A   0x6065             STR      R5,[R4, #+4]
    226                c->data.assertInfo.line = c->R1;
   \   0000009C   0x687D             LDR      R5,[R7, #+4]
   \   0000009E   0x60A5             STR      R5,[R4, #+8]
    227          #ifdef PUSH_REGS_BEFORE_ASSERT
    228                // Just before calling halInternalAssertFailed(), R0, R1, R2 and LR were
    229                // pushed onto the stack - copy these values into the crash data struct.
    230                c->R0 = *sp++;
    231                c->R1 = *sp++;
    232                c->R2 = *sp++;
    233                c->LR = *sp++;
    234          #endif
    235                reason = RESET_CRASH_ASSERT;
   \   000000A0   0xF240 0x7501      MOVW     R5,#+1793
   \   000000A4   0xE003             B.N      ??halInternalCrashHandler_1
    236              }
    237            // If a bad stack pointer, PC and xPSR to 0 to indicate they are not known.
    238            } else {
    239              c->PC = 0;
   \                     ??halInternalCrashHandler_0:
   \   000000A6   0x2400             MOVS     R4,#+0
   \   000000A8   0x643C             STR      R4,[R7, #+64]
    240              c->xPSR.word = 0;
   \   000000AA   0x647C             STR      R4,[R7, #+68]
    241              sEnd = (int32u*)c->mainStackBottom;
   \   000000AC   0x4680             MOV      R8,R0
    242            }
    243          
    244            // Fault handler has already started filling in halResetInfo{}
    245            // prior to calling this routine, so want to make sure _not_
    246            // to include halResetInfo in the stack assessment when crashing
    247            // to avoid a self-fulfilling prophesy of a full stack!  BugzId:13403
    248            int32u safeStackBottom = c->mainStackBottom;
   \                     ??halInternalCrashHandler_1:
   \   000000AE   0x.... 0x....      LDR.W    R4,??DataTable83_11
   \   000000B2   0x42A0             CMP      R0,R4
   \   000000B4   0xD202             BCS.N    ??halInternalCrashHandler_2
    249            if (safeStackBottom < (int32u) RESETINFO_SEGMENT_END) {
    250              safeStackBottom = (int32u) RESETINFO_SEGMENT_END;
   \   000000B6   0x4620             MOV      R0,R4
    251            }
    252            c->mainSPUsed = halInternalGetMainStackBytesUsed((int32u*)safeStackBottom);
   \   000000B8   0xE000             B.N      ??halInternalCrashHandler_2
   \                     ??halInternalCrashHandler_3:
   \   000000BA   0x1D00             ADDS     R0,R0,#+4
   \                     ??halInternalCrashHandler_2:
   \   000000BC   0x4298             CMP      R0,R3
   \   000000BE   0xD204             BCS.N    ??halInternalCrashHandler_4
   \   000000C0   0xF8D0 0xE000      LDR      LR,[R0, #+0]
   \   000000C4   0xF1BE 0x3FCD      CMP      LR,#-842150451
   \   000000C8   0xD0F7             BEQ.N    ??halInternalCrashHandler_3
   \                     ??halInternalCrashHandler_4:
   \   000000CA   0x1A18             SUBS     R0,R3,R0
   \   000000CC   0x64B8             STR      R0,[R7, #+72]
    253            c->processSPUsed = 0;   // process stack is not currently used
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x64F8             STR      R0,[R7, #+76]
    254          
    255            for (i = 0; i < NUM_RETURNS; i++) {
   \   000000D2   0x4684             MOV      R12,R0
    256              c->returns[i] = 0;
   \                     ??halInternalCrashHandler_5:
   \   000000D4   0xEB06 0x0480      ADD      R4,R6,R0, LSL #+2
   \   000000D8   0xF8C4 0xC078      STR      R12,[R4, #+120]
    257            }
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x2806             CMP      R0,#+6
   \   000000E0   0xD3F8             BCC.N    ??halInternalCrashHandler_5
    258          
    259            // Search the stack downward for probable return addresses. A probable
    260            // return address is a value in the CODE segment that also has bit 0 set
    261            // (since we're in Thumb mode).
    262            for (i = 0, s = (int32u *)STACK_SEGMENT_END; s > sEnd; ) {
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xE004             B.N      ??halInternalCrashHandler_6
    263              data = *(--s);
    264              if ( ((void *)data >= CODE_SEGMENT_BEGIN) && 
    265                   ((void *)data < CODE_SEGMENT_END) &&
    266                   (data & 1) ) {
    267                // Only record the first occurrence of a return - other copies could
    268                // have been in registers that then were pushed.
    269                for (j = 0; j < NUM_RETURNS; j++) {
    270                  if (c->returns[j] == data) {
    271                      break;
    272                  }
    273                }
    274                if (j != NUM_RETURNS) {
    275                  continue;
    276                }
    277                // Save the return in the returns array managed as a circular buffer.
    278                // This keeps only the last NUM_RETURNS in the event that there are more.
    279                i = i ? i-1 : NUM_RETURNS - 1;          
    280                c->returns[i] = data;
   \                     ??halInternalCrashHandler_7:
   \   000000E6   0xB2C0             UXTB     R0,R0
   \   000000E8   0xEB06 0x0C80      ADD      R12,R6,R0, LSL #+2
   \   000000EC   0xF8CC 0x4078      STR      R4,[R12, #+120]
   \                     ??halInternalCrashHandler_6:
   \   000000F0   0x4598             CMP      R8,R3
   \   000000F2   0xD22B             BCS.N    ??halInternalCrashHandler_8
   \   000000F4   0xF853 0x4D04      LDR      R4,[R3, #-4]!
   \   000000F8   0x4294             CMP      R4,R2
   \   000000FA   0xD3F9             BCC.N    ??halInternalCrashHandler_6
   \   000000FC   0x428C             CMP      R4,R1
   \   000000FE   0xD2F7             BCS.N    ??halInternalCrashHandler_6
   \   00000100   0xEA5F 0x7CC4      LSLS     R12,R4,#+31
   \   00000104   0xD5F4             BPL.N    ??halInternalCrashHandler_6
   \   00000106   0xF04F 0x0C00      MOV      R12,#+0
   \                     ??halInternalCrashHandler_9:
   \   0000010A   0xEB06 0x0E8C      ADD      LR,R6,R12, LSL #+2
   \   0000010E   0xF8DE 0xE078      LDR      LR,[LR, #+120]
   \   00000112   0x45A6             CMP      LR,R4
   \   00000114   0xD004             BEQ.N    ??halInternalCrashHandler_10
   \   00000116   0xF10C 0x0C01      ADD      R12,R12,#+1
   \   0000011A   0xF1BC 0x0F06      CMP      R12,#+6
   \   0000011E   0xDBF4             BLT.N    ??halInternalCrashHandler_9
   \                     ??halInternalCrashHandler_10:
   \   00000120   0xF1BC 0x0F06      CMP      R12,#+6
   \   00000124   0xD1E4             BNE.N    ??halInternalCrashHandler_6
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xBF14             ITE      NE 
   \   0000012A   0x1E40             SUBNE    R0,R0,#+1
   \   0000012C   0x2005             MOVEQ    R0,#+5
   \   0000012E   0xE7DA             B.N      ??halInternalCrashHandler_7
    281              }
    282            }
    283            // Shuffle the returns array so returns[0] has last probable return found.
    284            // If there were fewer than NUM_RETURNS, unused entries will contain zero.
    285            while (i--) {
    286              data = c->returns[0];
   \                     ??halInternalCrashHandler_11:
   \   00000130   0x6F7C             LDR      R4,[R7, #+116]
    287              for (j = 0; j < NUM_RETURNS - 1; j++ ) {
   \   00000132   0xF04F 0x0C00      MOV      R12,#+0
    288                c->returns[j] = c->returns[j+1];
   \                     ??halInternalCrashHandler_12:
   \   00000136   0xEB06 0x018C      ADD      R1,R6,R12, LSL #+2
   \   0000013A   0x6FCA             LDR      R2,[R1, #+124]
   \   0000013C   0x678A             STR      R2,[R1, #+120]
    289              }
   \   0000013E   0xF10C 0x0C01      ADD      R12,R12,#+1
   \   00000142   0xF1BC 0x0F05      CMP      R12,#+5
   \   00000146   0xDBF6             BLT.N    ??halInternalCrashHandler_12
    290              c->returns[NUM_RETURNS - 1] = data;
   \   00000148   0xF8C6 0x408C      STR      R4,[R6, #+140]
    291            }
   \                     ??halInternalCrashHandler_8:
   \   0000014C   0x4601             MOV      R1,R0
   \   0000014E   0x1E48             SUBS     R0,R1,#+1
   \   00000150   0xB2C9             UXTB     R1,R1
   \   00000152   0x2900             CMP      R1,#+0
   \   00000154   0xD1EC             BNE.N    ??halInternalCrashHandler_11
    292          
    293            // Read the highest priority active exception to get reason for fault
    294            activeException = c->icsr.bits.VECTACTIVE;
   \   00000156   0x6D78             LDR      R0,[R7, #+84]
   \   00000158   0x05C0             LSLS     R0,R0,#+23
   \   0000015A   0x0DC0             LSRS     R0,R0,#+23
    295            switch (activeException) {
   \   0000015C   0x2802             CMP      R0,#+2
   \   0000015E   0xD00A             BEQ.N    ??halInternalCrashHandler_13
   \   00000160   0x2803             CMP      R0,#+3
   \   00000162   0xD016             BEQ.N    ??halInternalCrashHandler_14
   \   00000164   0x2804             CMP      R0,#+4
   \   00000166   0xD017             BEQ.N    ??halInternalCrashHandler_15
   \   00000168   0x2805             CMP      R0,#+5
   \   0000016A   0xD018             BEQ.N    ??halInternalCrashHandler_16
   \   0000016C   0x2806             CMP      R0,#+6
   \   0000016E   0xD019             BEQ.N    ??halInternalCrashHandler_17
   \   00000170   0x280C             CMP      R0,#+12
   \   00000172   0xD01D             BEQ.N    ??halInternalCrashHandler_18
   \   00000174   0xE01F             B.N      ??halInternalCrashHandler_19
    296            case NMI_VECTOR_INDEX:
    297              if (INT_NMIFLAG_REG & INT_NMICLK24M_MASK) {
   \                     ??halInternalCrashHandler_13:
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable83_12  ;; 0x4000a01c
   \   0000017A   0x6801             LDR      R1,[R0, #+0]
   \   0000017C   0x0789             LSLS     R1,R1,#+30
   \   0000017E   0xBF48             IT       MI 
   \   00000180   0xF640 0x1502      MOVWMI   R5,#+2306
    298                reason = RESET_FATAL_CRYSTAL;
   \   00000184   0xD41C             BMI.N    ??halInternalCrashHandler_20
    299              } else if (INT_NMIFLAG_REG & INT_NMIWDOG_MASK) {
   \   00000186   0x6800             LDR      R0,[R0, #+0]
   \   00000188   0x07C0             LSLS     R0,R0,#+31
   \   0000018A   0xD519             BPL.N    ??halInternalCrashHandler_20
    300                reason = RESET_WATCHDOG_CAUGHT;
   \   0000018C   0xF240 0x5502      MOVW     R5,#+1282
   \   00000190   0xE016             B.N      ??halInternalCrashHandler_20
    301              }
    302              break;
    303            case HARD_FAULT_VECTOR_INDEX:
    304              reason = RESET_FAULT_HARD;
   \                     ??halInternalCrashHandler_14:
   \   00000192   0xF640 0x2501      MOVW     R5,#+2561
    305              break;
   \   00000196   0xE013             B.N      ??halInternalCrashHandler_20
    306            case MEMORY_FAULT_VECTOR_INDEX:
    307              reason = RESET_FAULT_MEM;
   \                     ??halInternalCrashHandler_15:
   \   00000198   0xF640 0x2502      MOVW     R5,#+2562
    308              break;
   \   0000019C   0xE010             B.N      ??halInternalCrashHandler_20
    309            case BUS_FAULT_VECTOR_INDEX:
    310              reason = RESET_FAULT_BUS;
   \                     ??halInternalCrashHandler_16:
   \   0000019E   0xF640 0x2503      MOVW     R5,#+2563
    311              break;
   \   000001A2   0xE00D             B.N      ??halInternalCrashHandler_20
    312            case USAGE_FAULT_VECTOR_INDEX:
    313              // make sure we didn't already identify the usage fault as an assert
    314              if (reason == RESET_FAULT_UNKNOWN) {
   \                     ??halInternalCrashHandler_17:
   \   000001A4   0xF5B5 0x6F20      CMP      R5,#+2560
   \   000001A8   0xD10A             BNE.N    ??halInternalCrashHandler_20
    315                reason = RESET_FAULT_USAGE;
   \   000001AA   0xF640 0x2504      MOVW     R5,#+2564
   \   000001AE   0xE007             B.N      ??halInternalCrashHandler_20
    316              }
    317              break;
    318            case DEBUG_MONITOR_VECTOR_INDEX:
    319              reason = RESET_FAULT_DBGMON;
   \                     ??halInternalCrashHandler_18:
   \   000001B0   0xF640 0x2505      MOVW     R5,#+2565
    320              break;
   \   000001B4   0xE004             B.N      ??halInternalCrashHandler_20
    321            default:
    322              if (activeException && (activeException < VECTOR_TABLE_LENGTH) ) {
   \                     ??halInternalCrashHandler_19:
   \   000001B6   0xB118             CBZ.N    R0,??halInternalCrashHandler_20
   \   000001B8   0x2824             CMP      R0,#+36
   \   000001BA   0xBF38             IT       CC 
   \   000001BC   0xF640 0x2507      MOVWCC   R5,#+2567
    323                reason = RESET_FAULT_BADVECTOR;
    324              }
    325              break;
    326            }
    327            return reason;
   \                     ??halInternalCrashHandler_20:
   \   000001C0   0x4628             MOV      R0,R5
   \   000001C2   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    328          }
    329          

   \                                 In section .text, align 2, keep-with-next
    330          void halPrintCrashSummary(int8u port)
    331          {
   \                     halPrintCrashSummary:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4680             MOV      R8,R0
    332            HalCrashInfoType *c = &halResetInfo.crash;
    333            int32u sp, stackBegin, stackEnd, size, used;
    334            int16u pct;
    335            int8u *mode, *stack;
    336            int8u bit;
    337          
    338            if (c->LR & 4) {
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable83_5
   \   0000000C   0x6BA8             LDR      R0,[R5, #+56]
   \   0000000E   0x0741             LSLS     R1,R0,#+29
   \   00000010   0xD507             BPL.N    ??halPrintCrashSummary_0
    339              stack = "process";
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "process">`
   \   00000016   0x9103             STR      R1,[SP, #+12]
    340              sp = c->processSP;
   \   00000018   0x6C2E             LDR      R6,[R5, #+64]
    341              used = c->processSPUsed;
   \   0000001A   0x6D2F             LDR      R7,[R5, #+80]
    342              stackBegin = 0;
   \   0000001C   0x2400             MOVS     R4,#+0
    343              stackEnd = 0;
   \   0000001E   0x46A1             MOV      R9,R4
   \   00000020   0xE007             B.N      ??halPrintCrashSummary_1
    344            } else {
    345              stack = "main";
   \                     ??halPrintCrashSummary_0:
   \   00000022   0x.... 0x....      ADR.W    R1,`?<Constant "main">`
   \   00000026   0x9103             STR      R1,[SP, #+12]
    346              sp = c->mainSP;
   \   00000028   0x6BEE             LDR      R6,[R5, #+60]
    347              used = c->mainSPUsed;
   \   0000002A   0x6CEF             LDR      R7,[R5, #+76]
    348              stackBegin = (int32u)c->mainStackBottom;
   \   0000002C   0x6D6C             LDR      R4,[R5, #+84]
    349              stackEnd = (int32u)STACK_SEGMENT_END;
   \   0000002E   0x.... 0x....      LDR.W    R9,??DataTable83_10
    350            }
    351          
    352            mode = (int8u *)((c->LR & 8) ? "Thread" : "Handler");
   \                     ??halPrintCrashSummary_1:
   \   00000032   0x0700             LSLS     R0,R0,#+28
   \   00000034   0xBF4C             ITE      MI 
   \   00000036   0x.... 0x....      ADRMI.W  R2,`?<Constant "Thread">`
   \   0000003A   0x.... 0x....      ADRPL.W  R2,`?<Constant "Handler">`
    353            size = stackEnd - stackBegin;
   \   0000003E   0xEBB9 0x0A04      SUBS     R10,R9,R4
    354            pct = size ? (int16u)( ((100 * used) + (size / 2)) / size) : 0;
   \   00000042   0xD007             BEQ.N    ??halPrintCrashSummary_2
   \   00000044   0x2064             MOVS     R0,#+100
   \   00000046   0xEA4F 0x015A      LSR      R1,R10,#+1
   \   0000004A   0xFB00 0x1007      MLA      R0,R0,R7,R1
   \   0000004E   0xFBB0 0xFBFA      UDIV     R11,R0,R10
   \   00000052   0xE001             B.N      ??halPrintCrashSummary_3
   \                     ??halPrintCrashSummary_2:
   \   00000054   0xF04F 0x0B00      MOV      R11,#+0
    355            emberSerialPrintfLine(port, "%p mode using %p stack (%4x to %4x), SP = %4x",
    356                                  mode, stack, stackBegin, stackEnd, sp);
   \                     ??halPrintCrashSummary_3:
   \   00000058   0x9602             STR      R6,[SP, #+8]
   \   0000005A   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   0000005E   0x9400             STR      R4,[SP, #+0]
   \   00000060   0x9B03             LDR      R3,[SP, #+12]
   \   00000062   0x.... 0x....      ADR.W    R1,`?<Constant "%p mode using %p stac...">`
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       emberSerialPrintfLine
    357            emberSerialPrintfLine(port, "%u bytes used (%u%%) in %p stack"
    358                                  " (out of %u bytes total)", 
    359                                  (int16u)used, pct, stack, (int16u)size);
   \   0000006C   0xFA1F 0xF08A      UXTH     R0,R10
   \   00000070   0x9001             STR      R0,[SP, #+4]
   \   00000072   0x9803             LDR      R0,[SP, #+12]
   \   00000074   0x9000             STR      R0,[SP, #+0]
   \   00000076   0xFA1F 0xF38B      UXTH     R3,R11
   \   0000007A   0xB2BA             UXTH     R2,R7
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant "%u bytes used (%u%%) ...">`
   \   00000080   0x4640             MOV      R0,R8
   \   00000082   0x.... 0x....      BL       emberSerialPrintfLine
    360            if ( !(c->LR & 4) && (used == size - 4*RESETINFO_WORDS)
    361                 && (c->mainStackBottom < (int32u) RESETINFO_SEGMENT_END) ) {
   \   00000086   0xF895 0x0038      LDRB     R0,[R5, #+56]
   \   0000008A   0x0740             LSLS     R0,R0,#+29
   \   0000008C   0xD40C             BMI.N    ??halPrintCrashSummary_4
   \   0000008E   0xF1AA 0x0098      SUB      R0,R10,#+152
   \   00000092   0x4287             CMP      R7,R0
   \   00000094   0xD108             BNE.N    ??halPrintCrashSummary_4
   \   00000096   0x6D68             LDR      R0,[R5, #+84]
   \   00000098   0x....             LDR.N    R1,??DataTable83_11
   \   0000009A   0x4288             CMP      R0,R1
   \   0000009C   0xD204             BCS.N    ??halPrintCrashSummary_4
    362              // Here the stack overlaps the RESETINFO region and when we checked
    363              // stack usage we avoided checking that region because we'd already
    364              // started using it -- so if we found the stack almost full to that
    365              // point, warn that it might actually have been completely full.
    366              emberSerialPrintfLine(port, "Stack _may_ have used up to 100%% of total.");
   \   0000009E   0x.... 0x....      ADR.W    R1,`?<Constant "Stack _may_ have used...">`
   \   000000A2   0x4640             MOV      R0,R8
   \   000000A4   0x.... 0x....      BL       emberSerialPrintfLine
    367            }
    368            // Valid SP range is [stackBegin, stackEnd] inclusive, but contents
    369            // of stack only go into [stackBegin, stackend).
    370            if ((sp > stackEnd) || (sp < stackBegin)) {
   \                     ??halPrintCrashSummary_4:
   \   000000A8   0x45B1             CMP      R9,R6
   \   000000AA   0xBF28             IT       CS 
   \   000000AC   0x42A6             CMPCS    R6,R4
   \   000000AE   0xD205             BCS.N    ??halPrintCrashSummary_5
    371              emberSerialPrintfLine(port, "SP is outside %p stack range!", stack);
   \   000000B0   0x9A03             LDR      R2,[SP, #+12]
   \   000000B2   0x.... 0x....      ADR.W    R1,`?<Constant "SP is outside %p stac...">`
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x.... 0x....      BL       emberSerialPrintfLine
    372            } 
    373            emberSerialWaitSend(port);
   \                     ??halPrintCrashSummary_5:
   \   000000BC   0x4640             MOV      R0,R8
   \   000000BE   0x.... 0x....      BL       emberSerialWaitSend
    374            if (c->intActive.word) {
   \   000000C2   0x6E28             LDR      R0,[R5, #+96]
   \   000000C4   0xB1F8             CBZ.N    R0,??halPrintCrashSummary_6
    375              emberSerialPrintf(port, "Interrupts active (or pre-empted and stacked):");
   \   000000C6   0x.... 0x....      ADR.W    R1,`?<Constant "Interrupts active (or...">`
   \   000000CA   0x4640             MOV      R0,R8
   \   000000CC   0x.... 0x....      BL       emberSerialPrintf
    376              for (bit = INT_TIM1_BIT; bit <= INT_DEBUG_BIT; bit++) {
   \   000000D0   0x2600             MOVS     R6,#+0
   \   000000D2   0x....             ADR.N    R7,??DataTable83  ;; " %p"
   \   000000D4   0x.... 0x....      ADR.W    R4,intActiveBits
    377                if ( (c->intActive.word & (1 << bit)) && *intActiveBits[bit] ) {
   \                     ??halPrintCrashSummary_7:
   \   000000D8   0x6E28             LDR      R0,[R5, #+96]
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x40B1             LSLS     R1,R1,R6
   \   000000DE   0x4208             TST      R0,R1
   \   000000E0   0xBF1E             ITTT     NE 
   \   000000E2   0xF854 0x2026      LDRNE    R2,[R4, R6, LSL #+2]
   \   000000E6   0x7810             LDRBNE   R0,[R2, #+0]
   \   000000E8   0x2800             CMPNE    R0,#+0
   \   000000EA   0xD003             BEQ.N    ??halPrintCrashSummary_8
    378                  emberSerialPrintf(port, " %p", intActiveBits[bit]);
   \   000000EC   0x4639             MOV      R1,R7
   \   000000EE   0x4640             MOV      R0,R8
   \   000000F0   0x.... 0x....      BL       emberSerialPrintf
    379                }
    380              }
   \                     ??halPrintCrashSummary_8:
   \   000000F4   0x1C76             ADDS     R6,R6,#+1
   \   000000F6   0x2E11             CMP      R6,#+17
   \   000000F8   0xDBEE             BLT.N    ??halPrintCrashSummary_7
    381              emberSerialPrintCarriageReturn(port);
   \   000000FA   0x4640             MOV      R0,R8
   \   000000FC   0xB005             ADD      SP,SP,#+20
   \   000000FE   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000102   0x.... 0x....      B.W      emberSerialPrintCarriageReturn
    382            } else {
    383              emberSerialPrintfLine(port, "No interrupts active");
   \                     ??halPrintCrashSummary_6:
   \   00000106   0x.... 0x....      ADR.W    R1,`?<Constant "No interrupts active">`
   \   0000010A   0x4640             MOV      R0,R8
   \   0000010C   0xB005             ADD      SP,SP,#+20
   \   0000010E   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000112   0x.... 0x....      B.W      emberSerialPrintfLine
    384            }
    385          }
    386          

   \                                 In section .text, align 2, keep-with-next
    387          void halPrintCrashDetails(int8u port)
    388          {
   \                     halPrintCrashDetails:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
    389            HalCrashInfoType *c = &halResetInfo.crash;
    390            int16u reason = halGetExtendedResetInfo();
    391            int8u bit;
    392            int8u *chan;
    393          
    394            switch (reason) {
   \   00000006   0x....             LDR.N    R7,??DataTable83_5
   \   00000008   0xF107 0x0544      ADD      R5,R7,#+68
   \   0000000C   0x.... 0x....      ADR.W    R10,`?<Constant "Illegal access addres...">`
   \   00000010   0x.... 0x....      ADR.W    R9,`?<Constant "CFSR.%p">`
   \   00000014   0x.... 0x....      ADR.W    R8,cfsrBits
   \   00000018   0x2601             MOVS     R6,#+1
   \   0000001A   0x.... 0x....      ADR.W    R11,`?<Constant "Instruction address: %4x">`
   \   0000001E   0x.... 0x....      BL       halGetExtendedResetInfo
   \   00000022   0xF240 0x5101      MOVW     R1,#+1281
   \   00000026   0x1A40             SUBS     R0,R0,R1
   \   00000028   0xD016             BEQ.N    ??halPrintCrashDetails_0
   \   0000002A   0x1E40             SUBS     R0,R0,#+1
   \   0000002C   0xD017             BEQ.N    ??halPrintCrashDetails_1
   \   0000002E   0xF240 0x11FF      MOVW     R1,#+511
   \   00000032   0x1A40             SUBS     R0,R0,R1
   \   00000034   0xD035             BEQ.N    ??halPrintCrashDetails_2
   \   00000036   0xF44F 0x7140      MOV      R1,#+768
   \   0000003A   0x1A40             SUBS     R0,R0,R1
   \   0000003C   0xD039             BEQ.N    ??halPrintCrashDetails_3
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0xD052             BEQ.N    ??halPrintCrashDetails_4
   \   00000042   0x1E40             SUBS     R0,R0,#+1
   \   00000044   0xD073             BEQ.N    ??halPrintCrashDetails_5
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \   00000048   0xF000 0x80B2      BEQ.W    ??halPrintCrashDetails_6
   \   0000004C   0x1E40             SUBS     R0,R0,#+1
   \   0000004E   0xF000 0x80CB      BEQ.W    ??halPrintCrashDetails_7
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0xD006             BEQ.N    ??halPrintCrashDetails_8
   \   00000056   0xE0C5             B.N      ??halPrintCrashDetails_9
    395          
    396            case RESET_WATCHDOG_EXPIRED:
    397              emberSerialPrintfLine(port, "Reset cause: Watchdog expired, no reliable extra information");
   \                     ??halPrintCrashDetails_0:
   \   00000058   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Watchdog...">`
   \   0000005C   0xE041             B.N      ??halPrintCrashDetails_10
    398              emberSerialWaitSend(port);
    399              break;
    400            case RESET_WATCHDOG_CAUGHT:
    401              emberSerialPrintfLine(port, "Reset cause: Watchdog caught with enhanced info");
   \                     ??halPrintCrashDetails_1:
   \   0000005E   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Watchdog...">_1`
   \   00000062   0xE0C3             B.N      ??halPrintCrashDetails_11
    402              emberSerialPrintfLine(port, "Instruction address: %4x", c->PC);
    403              emberSerialWaitSend(port);
    404              break;
    405          
    406            case RESET_FAULT_PROTDMA:
    407              switch (c->data.dmaProt.channel){
   \                     ??halPrintCrashDetails_8:
   \   00000064   0x6CE8             LDR      R0,[R5, #+76]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD006             BEQ.N    ??halPrintCrashDetails_12
   \   0000006A   0x2803             CMP      R0,#+3
   \   0000006C   0xD007             BEQ.N    ??halPrintCrashDetails_13
   \   0000006E   0x2804             CMP      R0,#+4
   \   00000070   0xD007             BEQ.N    ??halPrintCrashDetails_14
   \   00000072   0x2805             CMP      R0,#+5
   \   00000074   0xD008             BEQ.N    ??halPrintCrashDetails_15
   \   00000076   0xE00A             B.N      ??halPrintCrashDetails_16
    408              case DMA_PROT_CH_SC1_RX:
    409                chan = "SC1 Rx";
   \                     ??halPrintCrashDetails_12:
   \   00000078   0x.... 0x....      ADR.W    R6,`?<Constant "SC1 Rx">`
    410                break;
   \   0000007C   0xE008             B.N      ??halPrintCrashDetails_17
    411              case DMA_PROT_CH_GP_ADC:
    412                chan = "ADC";
   \                     ??halPrintCrashDetails_13:
   \   0000007E   0x....             ADR.N    R6,??DataTable83_1  ;; "ADC"
    413                break;
   \   00000080   0xE006             B.N      ??halPrintCrashDetails_17
    414              case DMA_PROT_CH_MAC:
    415                chan = "MAC Rx";
   \                     ??halPrintCrashDetails_14:
   \   00000082   0x.... 0x....      ADR.W    R6,`?<Constant "MAC Rx">`
    416                break;
   \   00000086   0xE003             B.N      ??halPrintCrashDetails_17
    417              case DMA_PROT_CH_SC2_RX:
    418                chan = "SC2 Rx";
   \                     ??halPrintCrashDetails_15:
   \   00000088   0x.... 0x....      ADR.W    R6,`?<Constant "SC2 Rx">`
    419                break;
   \   0000008C   0xE000             B.N      ??halPrintCrashDetails_17
    420              default:
    421                chan = "??";
   \                     ??halPrintCrashDetails_16:
   \   0000008E   0x....             ADR.N    R6,??DataTable83_2  ;; 0x3F, 0x3F, 0x00, 0x00
    422                break;
    423              }
    424              emberSerialPrintfLine(port, "Reset cause: DMA protection violation");
   \                     ??halPrintCrashDetails_17:
   \   00000090   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: DMA prot...">`
   \   00000094   0x.... 0x....      BL       ?Subroutine0
    425              emberSerialPrintfLine(port, "DMA: %p, address: %4x", 
    426                                    chan, c->data.dmaProt.address);
   \                     ??CrossCallReturnLabel_10:
   \   00000098   0x6D2B             LDR      R3,[R5, #+80]
   \   0000009A   0x4632             MOV      R2,R6
   \   0000009C   0x.... 0x....      ADR.W    R1,`?<Constant "DMA: %p, address: %4x">`
   \   000000A0   0xE003             B.N      ??halPrintCrashDetails_18
    427              emberSerialWaitSend(port);
    428              break;
    429          
    430            case RESET_CRASH_ASSERT:
    431              emberSerialPrintfLine(port, "Reset cause: Assert %p:%d",
    432                    c->data.assertInfo.file, c->data.assertInfo.line);
   \                     ??halPrintCrashDetails_2:
   \   000000A2   0x6D2B             LDR      R3,[R5, #+80]
   \   000000A4   0x6CEA             LDR      R2,[R5, #+76]
   \   000000A6   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Assert %...">`
   \                     ??halPrintCrashDetails_18:
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       emberSerialPrintfLine
   \   000000B0   0xE093             B.N      ??halPrintCrashDetails_19
    433              emberSerialWaitSend(port);
    434              break;
    435          
    436            case RESET_FAULT_HARD:
    437              emberSerialPrintfLine(port, "Reset cause: Hard Fault");
   \                     ??halPrintCrashDetails_3:
   \   000000B2   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Hard Fault">`
   \   000000B6   0x.... 0x....      BL       ?Subroutine0
    438              if (c->hfsr.bits.VECTTBL) {
   \                     ??CrossCallReturnLabel_9:
   \   000000BA   0xF895 0x0024      LDRB     R0,[R5, #+36]
   \   000000BE   0x0780             LSLS     R0,R0,#+30
   \   000000C0   0xD503             BPL.N    ??CrossCallReturnLabel_8
    439                emberSerialPrintfLine(port, 
    440                        "HFSR.VECTTBL: error reading vector table for an exception");
   \   000000C2   0x.... 0x....      ADR.W    R1,`?<Constant "HFSR.VECTTBL: error r...">`
   \   000000C6   0x.... 0x....      BL       ?Subroutine0
    441              }
    442              if (c->hfsr.bits.FORCED) {
   \                     ??CrossCallReturnLabel_8:
   \   000000CA   0x6A68             LDR      R0,[R5, #+36]
   \   000000CC   0x0040             LSLS     R0,R0,#+1
   \   000000CE   0xD503             BPL.N    ??CrossCallReturnLabel_7
    443                emberSerialPrintfLine(port, 
    444                        "HFSR.FORCED: configurable fault could not activate");
   \   000000D0   0x.... 0x....      ADR.W    R1,`?<Constant "HFSR.FORCED: configur...">`
   \   000000D4   0x.... 0x....      BL       ?Subroutine0
    445              }
    446              if (c->hfsr.bits.DEBUGEVT) {
   \                     ??CrossCallReturnLabel_7:
   \   000000D8   0x6A68             LDR      R0,[R5, #+36]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD57D             BPL.N    ??halPrintCrashDetails_19
    447                emberSerialPrintfLine(port, 
    448                        "HFSR.DEBUGEVT: fault related to debug - e.g., executed BKPT");
   \   000000DE   0x.... 0x....      ADR.W    R1,`?<Constant "HFSR.DEBUGEVT: fault ...">`
    449              }
   \                     ??halPrintCrashDetails_10:
   \   000000E2   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_6:
   \   000000E6   0xE078             B.N      ??halPrintCrashDetails_19
    450              emberSerialWaitSend(port);
    451              break;
    452          
    453            case RESET_FAULT_MEM:
    454              emberSerialPrintfLine(port, "Reset cause: Memory Management Fault");
   \                     ??halPrintCrashDetails_4:
   \   000000E8   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Memory M...">`
   \   000000EC   0x.... 0x....      BL       ?Subroutine0
    455              if (c->cfsr.word & (SCS_CFSR_DACCVIOL_MASK | SCS_CFSR_IACCVIOL) ) {
   \                     ??CrossCallReturnLabel_5:
   \   000000F0   0xF895 0x0020      LDRB     R0,[R5, #+32]
   \   000000F4   0xF010 0x0F03      TST      R0,#0x3
   \   000000F8   0xD001             BEQ.N    ??CrossCallReturnLabel_20
    456                emberSerialPrintfLine(port, "Instruction address: %4x", c->PC);
   \   000000FA   0x.... 0x....      BL       ?Subroutine1
    457              }
    458              if (c->cfsr.bits.MMARVALID) {
   \                     ??CrossCallReturnLabel_20:
   \   000000FE   0xF895 0x0020      LDRB     R0,[R5, #+32]
   \   00000102   0x0600             LSLS     R0,R0,#+24
   \   00000104   0xD503             BPL.N    ??CrossCallReturnLabel_16
    459                emberSerialPrintfLine(port, "Illegal access address: %4x", c->faultAddress);
   \   00000106   0x6AEA             LDR      R2,[R5, #+44]
   \   00000108   0x4651             MOV      R1,R10
   \   0000010A   0x.... 0x....      BL       ??Subroutine1_0
    460              }
    461              for (bit = SCS_CFSR_IACCVIOL_BIT; bit <= SCS_CFSR_MMARVALID_BIT; bit++) {
   \                     ??CrossCallReturnLabel_16:
   \   0000010E   0x2700             MOVS     R7,#+0
    462                if ( (c->cfsr.word & (1 << bit)) && *cfsrBits[bit] ) {
   \                     ??halPrintCrashDetails_20:
   \   00000110   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_21:
   \   00000114   0xBF1E             ITTT     NE 
   \   00000116   0xF858 0x2027      LDRNE    R2,[R8, R7, LSL #+2]
   \   0000011A   0x7810             LDRBNE   R0,[R2, #+0]
   \   0000011C   0x2800             CMPNE    R0,#+0
   \   0000011E   0xD002             BEQ.N    ??CrossCallReturnLabel_15
    463                  emberSerialPrintfLine(port, "CFSR.%p", cfsrBits[bit]);
   \   00000120   0x4649             MOV      R1,R9
   \   00000122   0x.... 0x....      BL       ??Subroutine1_0
    464                }
    465              }
   \                     ??CrossCallReturnLabel_15:
   \   00000126   0x1C7F             ADDS     R7,R7,#+1
   \   00000128   0x2F08             CMP      R7,#+8
   \   0000012A   0xDBF1             BLT.N    ??halPrintCrashDetails_20
   \   0000012C   0xE055             B.N      ??halPrintCrashDetails_19
    466              emberSerialWaitSend(port);
    467              break;
    468          
    469            case RESET_FAULT_BUS:
    470              emberSerialPrintfLine(port, "Reset cause: Bus Fault");
   \                     ??halPrintCrashDetails_5:
   \   0000012E   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Bus Fault">`
   \   00000132   0x.... 0x....      BL       ?Subroutine0
    471              emberSerialPrintfLine(port, "Instruction address: %4x", c->PC);
   \                     ??CrossCallReturnLabel_4:
   \   00000136   0x.... 0x....      BL       ?Subroutine1
    472              if (c->cfsr.bits.IMPRECISERR) {
   \                     ??CrossCallReturnLabel_19:
   \   0000013A   0x6A28             LDR      R0,[R5, #+32]
   \   0000013C   0x0540             LSLS     R0,R0,#+21
   \   0000013E   0xD503             BPL.N    ??CrossCallReturnLabel_3
    473                emberSerialPrintfLine(port, 
    474                  "Address is of an instruction after bus fault occurred, not the cause.");
   \   00000140   0x.... 0x....      ADR.W    R1,`?<Constant "Address is of an inst...">`
   \   00000144   0x.... 0x....      BL       ?Subroutine0
    475              }
    476              if (c->cfsr.bits.BFARVALID) {
   \                     ??CrossCallReturnLabel_3:
   \   00000148   0x6A28             LDR      R0,[R5, #+32]
   \   0000014A   0x0400             LSLS     R0,R0,#+16
   \   0000014C   0xD503             BPL.N    ??CrossCallReturnLabel_14
    477                emberSerialPrintfLine(port, "Illegal access address: %4x", 
    478                                      c->faultAddress);
   \   0000014E   0x6AEA             LDR      R2,[R5, #+44]
   \   00000150   0x4651             MOV      R1,R10
   \   00000152   0x.... 0x....      BL       ??Subroutine1_0
    479              }
    480              for (bit = SCS_CFSR_IBUSERR_BIT; bit <= SCS_CFSR_BFARVALID_BIT; bit++) {
   \                     ??CrossCallReturnLabel_14:
   \   00000156   0x2708             MOVS     R7,#+8
    481                if ( (c->cfsr.word & (1 << bit)) && *cfsrBits[bit] ) {
   \                     ??halPrintCrashDetails_21:
   \   00000158   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_22:
   \   0000015C   0xBF1E             ITTT     NE 
   \   0000015E   0xF858 0x2027      LDRNE    R2,[R8, R7, LSL #+2]
   \   00000162   0x7810             LDRBNE   R0,[R2, #+0]
   \   00000164   0x2800             CMPNE    R0,#+0
   \   00000166   0xD002             BEQ.N    ??CrossCallReturnLabel_13
    482                  emberSerialPrintfLine(port, "CFSR.%p", cfsrBits[bit]);
   \   00000168   0x4649             MOV      R1,R9
   \   0000016A   0x.... 0x....      BL       ??Subroutine1_0
    483                }
    484              }
   \                     ??CrossCallReturnLabel_13:
   \   0000016E   0x1C7F             ADDS     R7,R7,#+1
   \   00000170   0x2F10             CMP      R7,#+16
   \   00000172   0xDBF1             BLT.N    ??halPrintCrashDetails_21
    485              if ( (c->cfsr.word & 0xFF) == 0) {
   \   00000174   0xF895 0x0020      LDRB     R0,[R5, #+32]
   \   00000178   0x0600             LSLS     R0,R0,#+24
   \   0000017A   0xD103             BNE.N    ??CrossCallReturnLabel_2
    486                emberSerialPrintfLine(port, "CFSR.(none) load or store at an illegal address");      
   \   0000017C   0x.... 0x....      ADR.W    R1,`?<Constant "CFSR.(none) load or s...">`
   \   00000180   0x.... 0x....      BL       ?Subroutine0
    487              }
    488              for (bit = SCS_AFSR_RESERVED_BIT; bit <= SCS_AFSR_WRONGSIZE_BIT; bit++) {
   \                     ??CrossCallReturnLabel_2:
   \   00000184   0x2701             MOVS     R7,#+1
   \   00000186   0x.... 0x....      ADR.W    R9,`?<Constant "AFSR.%p">`
   \   0000018A   0x.... 0x....      ADR.W    R8,afsrBits
    489                if ( (c->afsr.word & (1 << bit)) && *afsrBits[bit] ) {
   \                     ??halPrintCrashDetails_22:
   \   0000018E   0x6B28             LDR      R0,[R5, #+48]
   \   00000190   0xFA06 0xF107      LSL      R1,R6,R7
   \   00000194   0x4208             TST      R0,R1
   \   00000196   0xBF1E             ITTT     NE 
   \   00000198   0xF858 0x2027      LDRNE    R2,[R8, R7, LSL #+2]
   \   0000019C   0x7810             LDRBNE   R0,[R2, #+0]
   \   0000019E   0x2800             CMPNE    R0,#+0
   \   000001A0   0xD002             BEQ.N    ??CrossCallReturnLabel_12
    490                  emberSerialPrintfLine(port, "AFSR.%p", afsrBits[bit]);
   \   000001A2   0x4649             MOV      R1,R9
   \   000001A4   0x.... 0x....      BL       ??Subroutine1_0
    491                }
    492              }
   \                     ??CrossCallReturnLabel_12:
   \   000001A8   0x1C7F             ADDS     R7,R7,#+1
   \   000001AA   0x2F04             CMP      R7,#+4
   \   000001AC   0xDBEF             BLT.N    ??halPrintCrashDetails_22
   \   000001AE   0xE014             B.N      ??halPrintCrashDetails_19
    493              emberSerialWaitSend(port);
    494              break;
    495          
    496            case RESET_FAULT_USAGE:
    497              emberSerialPrintfLine(port, "Reset cause: Usage Fault");
   \                     ??halPrintCrashDetails_6:
   \   000001B0   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Usage Fault">`
   \   000001B4   0x.... 0x....      BL       ?Subroutine0
    498              emberSerialPrintfLine(port, "Instruction address: %4x", c->PC);
   \                     ??CrossCallReturnLabel_1:
   \   000001B8   0x.... 0x....      BL       ?Subroutine1
    499              for (bit = SCS_CFSR_UNDEFINSTR_BIT; bit <= SCS_CFSR_DIVBYZERO_BIT; bit++) {
   \                     ??CrossCallReturnLabel_18:
   \   000001BC   0x2710             MOVS     R7,#+16
    500                if ( (c->cfsr.word & (1 << bit)) && *cfsrBits[bit] ) {
   \                     ??halPrintCrashDetails_23:
   \   000001BE   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_23:
   \   000001C2   0xBF1E             ITTT     NE 
   \   000001C4   0xF858 0x2027      LDRNE    R2,[R8, R7, LSL #+2]
   \   000001C8   0x7810             LDRBNE   R0,[R2, #+0]
   \   000001CA   0x2800             CMPNE    R0,#+0
   \   000001CC   0xD002             BEQ.N    ??CrossCallReturnLabel_11
    501                  emberSerialPrintfLine(port, "CFSR.%p", cfsrBits[bit]);
   \   000001CE   0x4649             MOV      R1,R9
   \   000001D0   0x.... 0x....      BL       ??Subroutine1_0
    502                }
    503              }
   \                     ??CrossCallReturnLabel_11:
   \   000001D4   0x1C7F             ADDS     R7,R7,#+1
   \   000001D6   0x2F1A             CMP      R7,#+26
   \   000001D8   0xDBF1             BLT.N    ??halPrintCrashDetails_23
    504              emberSerialWaitSend(port);
   \                     ??halPrintCrashDetails_19:
   \   000001DA   0x4620             MOV      R0,R4
   \   000001DC   0xE8BD 0x4FF2      POP      {R1,R4-R11,LR}
   \   000001E0   0x.... 0x....      B.W      emberSerialWaitSend
    505              break;
    506          
    507            case RESET_FAULT_DBGMON:
    508              emberSerialPrintfLine(port, "Reset cause: Debug Monitor Fault");
    509              emberSerialPrintfLine(port, "Instruction address: %4x", c->PC);
    510              emberSerialWaitSend(port);
    511              break;
    512          
    513            default:
    514              break;
    515            }
    516          }
   \                     ??halPrintCrashDetails_9:
   \   000001E4   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   \                     ??halPrintCrashDetails_7:
   \   000001E8   0x.... 0x....      ADR.W    R1,`?<Constant "Reset cause: Debug Mo...">`
   \                     ??halPrintCrashDetails_11:
   \   000001EC   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   000001F0   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_17:
   \   000001F4   0xE7F1             B.N      ??halPrintCrashDetails_19

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x6A28             LDR      R0,[R5, #+32]
   \   00000002   0xFA06 0xF107      LSL      R1,R6,R7
   \   00000006   0x4208             TST      R0,R1
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x6C7A             LDR      R2,[R7, #+68]
   \   00000002   0x4659             MOV      R1,R11
   \                     ??Subroutine1_0:
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      emberSerialPrintfLine

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0x.... 0x....      B.W      emberSerialPrintfLine
    517          
    518          // Output an array of 32 bit values, 4 per line, each preceded by its name.

   \                                 In section .text, align 2, keep-with-next
    519          void halPrintCrashData(int8u port)
    520          {
   \                     halPrintCrashData:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
    521            int32u *data = (int32u *)&halResetInfo.crash.R0;
   \   00000006   0x.... 0x....      LDR.W    R10,??DataTable83_13
    522            char const *name = nameStrings;
   \   0000000A   0x.... 0x....      ADR.W    R6,nameStrings
    523            char const *separator;
    524            int8u i;
    525          
    526            for (i = 0; *name; i++) {
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x....             ADR.N    R7,??DataTable83_3  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000012   0x....             ADR.N    R4,??DataTable83_4  ;; 0x2C, 0x20, 0x00, 0x00
   \   00000014   0x.... 0x....      ADR.W    R9,`?<Constant "%p = %4x">`
   \   00000018   0xE006             B.N      ??halPrintCrashData_0
    527              emberSerialPrintf(port, "%p = %4x", name, *data++);
    528              while (*name++) {}  // intentionally empty while loop body
    529              separator = (*name && ((i & 3) != 3) ) ? ", " : "\r\n";
    530              emberSerialPrintf(port, separator);
   \                     ??halPrintCrashData_1:
   \   0000001A   0x4640             MOV      R0,R8
   \   0000001C   0x.... 0x....      BL       emberSerialPrintf
    531              emberSerialWaitSend(port);
   \   00000020   0x4640             MOV      R0,R8
   \   00000022   0x.... 0x....      BL       emberSerialWaitSend
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??halPrintCrashData_0:
   \   00000028   0x7830             LDRB     R0,[R6, #+0]
   \   0000002A   0xB1A8             CBZ.N    R0,??halPrintCrashData_2
   \   0000002C   0xF85A 0x3B04      LDR      R3,[R10], #+4
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0x4649             MOV      R1,R9
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0x.... 0x....      BL       emberSerialPrintf
   \                     ??halPrintCrashData_3:
   \   0000003A   0xF816 0x0B01      LDRB     R0,[R6], #+1
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1FB             BNE.N    ??halPrintCrashData_3
   \   00000042   0x7830             LDRB     R0,[R6, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xBF1E             ITTT     NE 
   \   00000048   0xB2ED             UXTBNE   R5,R5
   \   0000004A   0xF005 0x0003      ANDNE    R0,R5,#0x3
   \   0000004E   0x2803             CMPNE    R0,#+3
   \   00000050   0xBF14             ITE      NE 
   \   00000052   0x4621             MOVNE    R1,R4
   \   00000054   0x4639             MOVEQ    R1,R7
   \   00000056   0xE7E0             B.N      ??halPrintCrashData_1
    532            }
    533          }
   \                     ??halPrintCrashData_2:
   \   00000058   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    534          

   \                                 In section .text, align 2, keep-with-next
    535          int16u halGetPCDiagnostics( void )
    536          {
    537            return 0;
   \                     halGetPCDiagnostics:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    538          }
    539          

   \                                 In section .text, align 2, keep-with-next
    540          void halStartPCDiagnostics( void )
    541          {
    542          }
   \                     halStartPCDiagnostics:
   \   00000000   0x4770             BX       LR               ;; return
    543          

   \                                 In section .text, align 2, keep-with-next
    544          void halStopPCDiagnostics( void )
    545          {
    546          }
   \                     halStopPCDiagnostics:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   0x20 0x25          DC8      " %p"
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_1:
   \   00000000   0x41 0x44          DC8      "ADC"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_2:
   \   00000000   0x3F 0x3F          DC8      0x3F, 0x3F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_3:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_4:
   \   00000000   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_5:
   \   00000000   0x........         DC32     halResetInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_6:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_7:
   \   00000000   0xE000E300         DC32     0xe000e300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_8:
   \   00000000   0x........         DC32     SFE(`.text`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_9:
   \   00000000   0x........         DC32     SFB(`.text`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_10:
   \   00000000   0x........         DC32     SFE(CSTACK)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_11:
   \   00000000   0x........         DC32     SFE(RESETINFO)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_12:
   \   00000000   0x4000A01C         DC32     0x4000a01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_13:
   \   00000000   0x........         DC32     halResetInfo+0x4

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IACCVIOL: attempted i...">`:
   \   00000000   0x49 0x41          DC8 49H, 41H, 43H, 43H, 56H, 49H, 4FH, 4CH
   \              0x43 0x43    
   \              0x56 0x49    
   \              0x4F 0x4C    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 61H, 74H, 74H, 65H, 6DH, 70H
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x6D 0x70    
   \   00000010   0x74 0x65          DC8 74H, 65H, 64H, 20H, 69H, 6EH, 73H, 74H
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x73 0x74    
   \   00000018   0x72 0x75          DC8 72H, 75H, 63H, 74H, 69H, 6FH, 6EH, 20H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \   00000020   0x66 0x65          DC8 66H, 65H, 74H, 63H, 68H, 20H, 66H, 72H
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x66 0x72    
   \   00000028   0x6F 0x6D          DC8 6FH, 6DH, 20H, 61H, 20H, 6EH, 6FH, 2DH
   \              0x20 0x61    
   \              0x20 0x6E    
   \              0x6F 0x2D    
   \   00000030   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 65H, 20H
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x65 0x20    
   \   00000038   0x61 0x64          DC8 61H, 64H, 64H, 72H, 65H, 73H, 73H, 0
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DACCVIOL: attempted l...">`:
   \   00000000   0x44 0x41          DC8 44H, 41H, 43H, 43H, 56H, 49H, 4FH, 4CH
   \              0x43 0x43    
   \              0x56 0x49    
   \              0x4F 0x4C    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 61H, 74H, 74H, 65H, 6DH, 70H
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x6D 0x70    
   \   00000010   0x74 0x65          DC8 74H, 65H, 64H, 20H, 6CH, 6FH, 61H, 64H
   \              0x64 0x20    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 72H, 20H, 73H, 74H, 6FH, 72H
   \              0x72 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \   00000020   0x65 0x20          DC8 65H, 20H, 61H, 74H, 20H, 61H, 6EH, 20H
   \              0x61 0x74    
   \              0x20 0x61    
   \              0x6E 0x20    
   \   00000028   0x69 0x6C          DC8 69H, 6CH, 6CH, 65H, 67H, 61H, 6CH, 20H
   \              0x6C 0x65    
   \              0x67 0x61    
   \              0x6C 0x20    
   \   00000030   0x61 0x64          DC8 61H, 64H, 64H, 72H, 65H, 73H, 73H, 0
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MUNSTKERR: unstack fr...">`:
   \   00000000   0x4D 0x55          DC8 4DH, 55H, 4EH, 53H, 54H, 4BH, 45H, 52H
   \              0x4E 0x53    
   \              0x54 0x4B    
   \              0x45 0x52    
   \   00000008   0x52 0x3A          DC8 52H, 3AH, 20H, 75H, 6EH, 73H, 74H, 61H
   \              0x20 0x75    
   \              0x6E 0x73    
   \              0x74 0x61    
   \   00000010   0x63 0x6B          DC8 63H, 6BH, 20H, 66H, 72H, 6FH, 6DH, 20H
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \   00000018   0x65 0x78          DC8 65H, 78H, 63H, 65H, 70H, 74H, 69H, 6FH
   \              0x63 0x65    
   \              0x70 0x74    
   \              0x69 0x6F    
   \   00000020   0x6E 0x20          DC8 6EH, 20H, 72H, 65H, 74H, 75H, 72H, 6EH
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \   00000028   0x20 0x63          DC8 20H, 63H, 61H, 75H, 73H, 65H, 64H, 20H
   \              0x61 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \   00000030   0x61 0x63          DC8 61H, 63H, 63H, 65H, 73H, 73H, 20H, 76H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x20 0x76    
   \   00000038   0x69 0x6F          DC8 69H, 6FH, 6CH, 61H, 74H, 69H, 6FH, 6EH
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MSTKERR: stacking fro...">`:
   \   00000000   0x4D 0x53          DC8 4DH, 53H, 54H, 4BH, 45H, 52H, 52H, 3AH
   \              0x54 0x4B    
   \              0x45 0x52    
   \              0x52 0x3A    
   \   00000008   0x20 0x73          DC8 20H, 73H, 74H, 61H, 63H, 6BH, 69H, 6EH
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x69 0x6E    
   \   00000010   0x67 0x20          DC8 67H, 20H, 66H, 72H, 6FH, 6DH, 20H, 65H
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x65    
   \   00000018   0x78 0x63          DC8 78H, 63H, 65H, 70H, 74H, 69H, 6FH, 6EH
   \              0x65 0x70    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000020   0x20 0x63          DC8 20H, 63H, 61H, 75H, 73H, 65H, 64H, 20H
   \              0x61 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \   00000028   0x61 0x63          DC8 61H, 63H, 63H, 65H, 73H, 73H, 20H, 76H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x20 0x76    
   \   00000030   0x69 0x6F          DC8 69H, 6FH, 6CH, 61H, 74H, 69H, 6FH, 6EH
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MMARVALID: MMAR conta...">`:
   \   00000000   0x4D 0x4D          DC8 "MMARVALID: MMAR contains valid fault address"
   \              0x41 0x52    
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x3A    
   \              0x20 0x4D    
   \              0x4D 0x41    
   \              0x52 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IBUSERR: instruction ...">`:
   \   00000000   0x49 0x42          DC8 "IBUSERR: instruction prefetch caused bus fault"
   \              0x55 0x53    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x69    
   \              0x6E 0x73    
   \              0x74 0x72    
   \              0x75 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x66 0x65    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "PRECISERR: precise da...">`:
   \   00000000   0x50 0x52          DC8 "PRECISERR: precise data bus fault"
   \              0x45 0x43    
   \              0x49 0x53    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x63 0x69    
   \              0x73 0x65    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x62 0x75    
   \              0x73 0x20    
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IMPRECISERR: imprecis...">`:
   \   00000000   0x49 0x4D          DC8 "IMPRECISERR: imprecise data bus fault"
   \              0x50 0x52    
   \              0x45 0x43    
   \              0x49 0x53    
   \              0x45 0x52    
   \              0x52 0x3A    
   \              0x20 0x69    
   \              0x6D 0x70    
   \              0x72 0x65    
   \              0x63 0x69    
   \              0x73 0x65    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x62 0x75    
   \              0x73 0x20    
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNSTKERR: unstacking ...">`:
   \   00000000   0x55 0x4E          DC8 55H, 4EH, 53H, 54H, 4BH, 45H, 52H, 52H
   \              0x53 0x54    
   \              0x4B 0x45    
   \              0x52 0x52    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 75H, 6EH, 73H, 74H, 61H, 63H
   \              0x75 0x6E    
   \              0x73 0x74    
   \              0x61 0x63    
   \   00000010   0x6B 0x69          DC8 6BH, 69H, 6EH, 67H, 20H, 6FH, 6EH, 20H
   \              0x6E 0x67    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \   00000018   0x65 0x78          DC8 65H, 78H, 63H, 65H, 70H, 74H, 69H, 6FH
   \              0x63 0x65    
   \              0x70 0x74    
   \              0x69 0x6F    
   \   00000020   0x6E 0x20          DC8 6EH, 20H, 72H, 65H, 74H, 75H, 72H, 6EH
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \   00000028   0x20 0x63          DC8 20H, 63H, 61H, 75H, 73H, 65H, 64H, 20H
   \              0x61 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \   00000030   0x64 0x61          DC8 64H, 61H, 74H, 61H, 20H, 62H, 75H, 73H
   \              0x74 0x61    
   \              0x20 0x62    
   \              0x75 0x73    
   \   00000038   0x20 0x66          DC8 20H, 66H, 61H, 75H, 6CH, 74H, 0
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "STKERR: stacking on e...">`:
   \   00000000   0x53 0x54          DC8 53H, 54H, 4BH, 45H, 52H, 52H, 3AH, 20H
   \              0x4B 0x45    
   \              0x52 0x52    
   \              0x3A 0x20    
   \   00000008   0x73 0x74          DC8 73H, 74H, 61H, 63H, 6BH, 69H, 6EH, 67H
   \              0x61 0x63    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \   00000010   0x20 0x6F          DC8 20H, 6FH, 6EH, 20H, 65H, 78H, 63H, 65H
   \              0x6E 0x20    
   \              0x65 0x78    
   \              0x63 0x65    
   \   00000018   0x70 0x74          DC8 70H, 74H, 69H, 6FH, 6EH, 20H, 65H, 6EH
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x65 0x6E    
   \   00000020   0x74 0x72          DC8 74H, 72H, 79H, 20H, 63H, 61H, 75H, 73H
   \              0x79 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \   00000028   0x65 0x64          DC8 65H, 64H, 20H, 64H, 61H, 74H, 61H, 20H
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \   00000030   0x62 0x75          DC8 62H, 75H, 73H, 20H, 66H, 61H, 75H, 6CH
   \              0x73 0x20    
   \              0x66 0x61    
   \              0x75 0x6C    
   \   00000038   0x74 0x00          DC8 74H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "BFARVALID: BFAR conta...">`:
   \   00000000   0x42 0x46          DC8 "BFARVALID: BFAR contains valid fault address"
   \              0x41 0x52    
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x3A    
   \              0x20 0x42    
   \              0x46 0x41    
   \              0x52 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x66    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNDEFINSTR: tried to ...">`:
   \   00000000   0x55 0x4E          DC8 55H, 4EH, 44H, 45H, 46H, 49H, 4EH, 53H
   \              0x44 0x45    
   \              0x46 0x49    
   \              0x4E 0x53    
   \   00000008   0x54 0x52          DC8 54H, 52H, 3AH, 20H, 74H, 72H, 69H, 65H
   \              0x3A 0x20    
   \              0x74 0x72    
   \              0x69 0x65    
   \   00000010   0x64 0x20          DC8 64H, 20H, 74H, 6FH, 20H, 65H, 78H, 65H
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x78 0x65    
   \   00000018   0x63 0x75          DC8 63H, 75H, 74H, 65H, 20H, 61H, 6EH, 20H
   \              0x74 0x65    
   \              0x20 0x61    
   \              0x6E 0x20    
   \   00000020   0x75 0x6E          DC8 75H, 6EH, 64H, 65H, 66H, 69H, 6EH, 65H
   \              0x64 0x65    
   \              0x66 0x69    
   \              0x6E 0x65    
   \   00000028   0x64 0x20          DC8 64H, 20H, 69H, 6EH, 73H, 74H, 72H, 75H
   \              0x69 0x6E    
   \              0x73 0x74    
   \              0x72 0x75    
   \   00000030   0x63 0x74          DC8 63H, 74H, 69H, 6FH, 6EH, 0
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVSTATE: invalid EPS...">`:
   \   00000000   0x49 0x4E          DC8 49H, 4EH, 56H, 53H, 54H, 41H, 54H, 45H
   \              0x56 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 69H, 6EH, 76H, 61H, 6CH, 69H
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \   00000010   0x64 0x20          DC8 64H, 20H, 45H, 50H, 53H, 52H, 20H, 2DH
   \              0x45 0x50    
   \              0x53 0x52    
   \              0x20 0x2D    
   \   00000018   0x20 0x65          DC8 20H, 65H, 2EH, 67H, 2EH, 2CH, 20H, 74H
   \              0x2E 0x67    
   \              0x2E 0x2C    
   \              0x20 0x74    
   \   00000020   0x72 0x69          DC8 72H, 69H, 65H, 64H, 20H, 74H, 6FH, 20H
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000028   0x73 0x77          DC8 73H, 77H, 69H, 74H, 63H, 68H, 20H, 74H
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x20 0x74    
   \   00000030   0x6F 0x20          DC8 6FH, 20H, 41H, 52H, 4DH, 20H, 6DH, 6FH
   \              0x41 0x52    
   \              0x4D 0x20    
   \              0x6D 0x6F    
   \   00000038   0x64 0x65          DC8 64H, 65H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVPC: exception retu...">`:
   \   00000000   0x49 0x4E          DC8 "INVPC: exception return integrity checks failed"
   \              0x56 0x50    
   \              0x43 0x3A    
   \              0x20 0x65    
   \              0x78 0x63    
   \              0x65 0x70    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x20    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x67 0x72    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x73    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NOCP: attempted to ex...">`:
   \   00000000   0x4E 0x4F          DC8 4EH, 4FH, 43H, 50H, 3AH, 20H, 61H, 74H
   \              0x43 0x50    
   \              0x3A 0x20    
   \              0x61 0x74    
   \   00000008   0x74 0x65          DC8 74H, 65H, 6DH, 70H, 74H, 65H, 64H, 20H
   \              0x6D 0x70    
   \              0x74 0x65    
   \              0x64 0x20    
   \   00000010   0x74 0x6F          DC8 74H, 6FH, 20H, 65H, 78H, 65H, 63H, 75H
   \              0x20 0x65    
   \              0x78 0x65    
   \              0x63 0x75    
   \   00000018   0x74 0x65          DC8 74H, 65H, 20H, 61H, 20H, 63H, 6FH, 70H
   \              0x20 0x61    
   \              0x20 0x63    
   \              0x6F 0x70    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 63H, 65H, 73H, 73H, 6FH, 72H
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x6F 0x72    
   \   00000028   0x20 0x69          DC8 20H, 69H, 6EH, 73H, 74H, 72H, 75H, 63H
   \              0x6E 0x73    
   \              0x74 0x72    
   \              0x75 0x63    
   \   00000030   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 0
   \              0x6F 0x6E    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNALIGNED: attempted ...">`:
   \   00000000   0x55 0x4E          DC8 "UNALIGNED: attempted an unaligned memory access"
   \              0x41 0x4C    
   \              0x49 0x47    
   \              0x4E 0x45    
   \              0x44 0x3A    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x75 0x6E    
   \              0x61 0x6C    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x6D 0x65    
   \              0x6D 0x6F    
   \              0x72 0x79    
   \              0x20 0x61    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DIVBYZERO: attempted ...">`:
   \   00000000   0x44 0x49          DC8 44H, 49H, 56H, 42H, 59H, 5AH, 45H, 52H
   \              0x56 0x42    
   \              0x59 0x5A    
   \              0x45 0x52    
   \   00000008   0x4F 0x3A          DC8 4FH, 3AH, 20H, 61H, 74H, 74H, 65H, 6DH
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x65 0x6D    
   \   00000010   0x70 0x74          DC8 70H, 74H, 65H, 64H, 20H, 74H, 6FH, 20H
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000018   0x65 0x78          DC8 65H, 78H, 65H, 63H, 75H, 74H, 65H, 20H
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x65 0x20    
   \   00000020   0x53 0x44          DC8 53H, 44H, 49H, 56H, 20H, 6FH, 72H, 20H
   \              0x49 0x56    
   \              0x20 0x6F    
   \              0x72 0x20    
   \   00000028   0x55 0x44          DC8 55H, 44H, 49H, 56H, 20H, 77H, 69H, 74H
   \              0x49 0x56    
   \              0x20 0x77    
   \              0x69 0x74    
   \   00000030   0x68 0x20          DC8 68H, 20H, 64H, 69H, 76H, 69H, 73H, 6FH
   \              0x64 0x69    
   \              0x76 0x69    
   \              0x73 0x6F    
   \   00000038   0x72 0x20          DC8 72H, 20H, 6FH, 66H, 20H, 30H, 0
   \              0x6F 0x66    
   \              0x20 0x30    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "RESERVED: attempted a...">`:
   \   00000000   0x52 0x45          DC8 52H, 45H, 53H, 45H, 52H, 56H, 45H, 44H
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x44    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 61H, 74H, 74H, 65H, 6DH, 70H
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x6D 0x70    
   \   00000010   0x74 0x65          DC8 74H, 65H, 64H, 20H, 61H, 63H, 63H, 65H
   \              0x64 0x20    
   \              0x61 0x63    
   \              0x63 0x65    
   \   00000018   0x73 0x73          DC8 73H, 73H, 20H, 70H, 61H, 73H, 74H, 20H
   \              0x20 0x70    
   \              0x61 0x73    
   \              0x74 0x20    
   \   00000020   0x6C 0x61          DC8 6CH, 61H, 73H, 74H, 20H, 70H, 65H, 72H
   \              0x73 0x74    
   \              0x20 0x70    
   \              0x65 0x72    
   \   00000028   0x69 0x70          DC8 69H, 70H, 68H, 65H, 72H, 61H, 6CH, 20H
   \              0x68 0x65    
   \              0x72 0x61    
   \              0x6C 0x20    
   \   00000030   0x72 0x65          DC8 72H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x65 0x72    
   \   00000038   0x20 0x61          DC8 20H, 61H, 64H, 64H, 72H, 65H, 73H, 73H
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "PROTECTED: attempted ...">`:
   \   00000000   0x50 0x52          DC8 50H, 52H, 4FH, 54H, 45H, 43H, 54H, 45H
   \              0x4F 0x54    
   \              0x45 0x43    
   \              0x54 0x45    
   \   00000008   0x44 0x3A          DC8 44H, 3AH, 20H, 61H, 74H, 74H, 65H, 6DH
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x65 0x6D    
   \   00000010   0x70 0x74          DC8 70H, 74H, 65H, 64H, 20H, 75H, 73H, 65H
   \              0x65 0x64    
   \              0x20 0x75    
   \              0x73 0x65    
   \   00000018   0x72 0x20          DC8 72H, 20H, 6DH, 6FH, 64H, 65H, 20H, 77H
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x20 0x77    
   \   00000020   0x72 0x69          DC8 72H, 69H, 74H, 65H, 20H, 74H, 6FH, 20H
   \              0x74 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000028   0x70 0x72          DC8 70H, 72H, 69H, 76H, 69H, 6CH, 65H, 67H
   \              0x69 0x76    
   \              0x69 0x6C    
   \              0x65 0x67    
   \   00000030   0x65 0x64          DC8 65H, 64H, 20H, 70H, 65H, 72H, 69H, 70H
   \              0x20 0x70    
   \              0x65 0x72    
   \              0x69 0x70    
   \   00000038   0x68 0x65          DC8 68H, 65H, 72H, 61H, 6CH, 0
   \              0x72 0x61    
   \              0x6C 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "WRONGSIZE: attempted ...">`:
   \   00000000   0x57 0x52          DC8 57H, 52H, 4FH, 4EH, 47H, 53H, 49H, 5AH
   \              0x4F 0x4E    
   \              0x47 0x53    
   \              0x49 0x5A    
   \   00000008   0x45 0x3A          DC8 45H, 3AH, 20H, 61H, 74H, 74H, 65H, 6DH
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x65 0x6D    
   \   00000010   0x70 0x74          DC8 70H, 74H, 65H, 64H, 20H, 38H, 2FH, 31H
   \              0x65 0x64    
   \              0x20 0x38    
   \              0x2F 0x31    
   \   00000018   0x36 0x2D          DC8 36H, 2DH, 62H, 69H, 74H, 20H, 61H, 63H
   \              0x62 0x69    
   \              0x74 0x20    
   \              0x61 0x63    
   \   00000020   0x63 0x65          DC8 63H, 65H, 73H, 73H, 20H, 74H, 6FH, 20H
   \              0x73 0x73    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000028   0x70 0x65          DC8 70H, 65H, 72H, 69H, 70H, 68H, 65H, 72H
   \              0x72 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \   00000030   0x61 0x6C          DC8 61H, 6CH, 20H, 72H, 65H, 67H, 69H, 73H
   \              0x20 0x72    
   \              0x65 0x67    
   \              0x69 0x73    
   \   00000038   0x74 0x65          DC8 74H, 65H, 72H, 0
   \              0x72 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Timer1">`:
   \   00000000   0x54 0x69          DC8 "Timer1"
   \              0x6D 0x65    
   \              0x72 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Timer2">`:
   \   00000000   0x54 0x69          DC8 "Timer2"
   \              0x6D 0x65    
   \              0x72 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Management">`:
   \   00000000   0x4D 0x61          DC8 "Management"
   \              0x6E 0x61    
   \              0x67 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Baseband">`:
   \   00000000   0x42 0x61          DC8 "Baseband"
   \              0x73 0x65    
   \              0x62 0x61    
   \              0x6E 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Sleep_Timer">`:
   \   00000000   0x53 0x6C          DC8 "Sleep_Timer"
   \              0x65 0x65    
   \              0x70 0x5F    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SC1">`:
   \   00000000   0x53 0x43          DC8 "SC1"
   \              0x31 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SC2">`:
   \   00000000   0x53 0x43          DC8 "SC2"
   \              0x32 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Security">`:
   \   00000000   0x53 0x65          DC8 "Security"
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MAC_Timer">`:
   \   00000000   0x4D 0x41          DC8 "MAC_Timer"
   \              0x43 0x5F    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x72 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MAC_TX">`:
   \   00000000   0x4D 0x41          DC8 "MAC_TX"
   \              0x43 0x5F    
   \              0x54 0x58    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "MAC_RX">`:
   \   00000000   0x4D 0x41          DC8 "MAC_RX"
   \              0x43 0x5F    
   \              0x52 0x58    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ADC">`:
   \   00000000   0x41 0x44          DC8 "ADC"
   \              0x43 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IRQ_A">`:
   \   00000000   0x49 0x52          DC8 "IRQ_A"
   \              0x51 0x5F    
   \              0x41 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IRQ_B">`:
   \   00000000   0x49 0x52          DC8 "IRQ_B"
   \              0x51 0x5F    
   \              0x42 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IRQ_C">`:
   \   00000000   0x49 0x52          DC8 "IRQ_C"
   \              0x51 0x5F    
   \              0x43 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IRQ_D">`:
   \   00000000   0x49 0x52          DC8 "IRQ_D"
   \              0x51 0x5F    
   \              0x44 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Debug">`:
   \   00000000   0x44 0x65          DC8 "Debug"
   \              0x62 0x75    
   \              0x67 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " %p">`:
   \   00000000   0x20 0x25          DC8 " %p"
   \              0x70 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "??">`:
   \   00000000   0x3F 0x3F          DC8 "??"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ", ">`:
   \   00000000   0x2C 0x20          DC8 ", "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n[ASSERT:%p:%d]\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012[ASSERT:%p:%d]\015\012"
   \              0x5B 0x41    
   \              0x53 0x53    
   \              0x45 0x52    
   \              0x54 0x3A    
   \              0x25 0x70    
   \              0x3A 0x25    
   \              0x64 0x5D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "process">`:
   \   00000000   0x70 0x72          DC8 "process"
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "main">`:
   \   00000000   0x6D 0x61          DC8 "main"
   \              0x69 0x6E    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Thread">`:
   \   00000000   0x54 0x68          DC8 "Thread"
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Handler">`:
   \   00000000   0x48 0x61          DC8 "Handler"
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p mode using %p stac...">`:
   \   00000000   0x25 0x70          DC8 "%p mode using %p stack (%4x to %4x), SP = %4x"
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x25 0x70    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x20 0x28    
   \              0x25 0x34    
   \              0x78 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x34 0x78    
   \              0x29 0x2C    
   \              0x20 0x53    
   \              0x50 0x20    
   \              0x3D 0x20    
   \              0x25 0x34    
   \              0x78 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%u bytes used (%u%%) ...">`:
   \   00000000   0x25 0x75          DC8 25H, 75H, 20H, 62H, 79H, 74H, 65H, 73H
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \   00000008   0x20 0x75          DC8 20H, 75H, 73H, 65H, 64H, 20H, 28H, 25H
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x28 0x25    
   \   00000010   0x75 0x25          DC8 75H, 25H, 25H, 29H, 20H, 69H, 6EH, 20H
   \              0x25 0x29    
   \              0x20 0x69    
   \              0x6E 0x20    
   \   00000018   0x25 0x70          DC8 25H, 70H, 20H, 73H, 74H, 61H, 63H, 6BH
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \   00000020   0x20 0x28          DC8 20H, 28H, 6FH, 75H, 74H, 20H, 6FH, 66H
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x6F 0x66    
   \   00000028   0x20 0x25          DC8 20H, 25H, 75H, 20H, 62H, 79H, 74H, 65H
   \              0x75 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \   00000030   0x73 0x20          DC8 73H, 20H, 74H, 6FH, 74H, 61H, 6CH, 29H
   \              0x74 0x6F    
   \              0x74 0x61    
   \              0x6C 0x29    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Stack _may_ have used...">`:
   \   00000000   0x53 0x74          DC8 "Stack _may_ have used up to 100%% of total."
   \              0x61 0x63    
   \              0x6B 0x20    
   \              0x5F 0x6D    
   \              0x61 0x79    
   \              0x5F 0x20    
   \              0x68 0x61    
   \              0x76 0x65    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x75 0x70    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x31 0x30    
   \              0x30 0x25    
   \              0x25 0x20    
   \              0x6F 0x66    
   \              0x20 0x74    
   \              0x6F 0x74    
   \              0x61 0x6C    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SP is outside %p stac...">`:
   \   00000000   0x53 0x50          DC8 "SP is outside %p stack range!"
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6F 0x75    
   \              0x74 0x73    
   \              0x69 0x64    
   \              0x65 0x20    
   \              0x25 0x70    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x20 0x72    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x21 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Interrupts active (or...">`:
   \   00000000   0x49 0x6E          DC8 "Interrupts active (or pre-empted and stacked):"
   \              0x74 0x65    
   \              0x72 0x72    
   \              0x75 0x70    
   \              0x74 0x73    
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x69 0x76    
   \              0x65 0x20    
   \              0x28 0x6F    
   \              0x72 0x20    
   \              0x70 0x72    
   \              0x65 0x2D    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x65 0x64    
   \              0x29 0x3A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No interrupts active">`:
   \   00000000   0x4E 0x6F          DC8 "No interrupts active"
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x70 0x74    
   \              0x73 0x20    
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Watchdog...">`:
   \   00000000   0x52 0x65          DC8 52H, 65H, 73H, 65H, 74H, 20H, 63H, 61H
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \   00000008   0x75 0x73          DC8 75H, 73H, 65H, 3AH, 20H, 57H, 61H, 74H
   \              0x65 0x3A    
   \              0x20 0x57    
   \              0x61 0x74    
   \   00000010   0x63 0x68          DC8 63H, 68H, 64H, 6FH, 67H, 20H, 65H, 78H
   \              0x64 0x6F    
   \              0x67 0x20    
   \              0x65 0x78    
   \   00000018   0x70 0x69          DC8 70H, 69H, 72H, 65H, 64H, 2CH, 20H, 6EH
   \              0x72 0x65    
   \              0x64 0x2C    
   \              0x20 0x6E    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 72H, 65H, 6CH, 69H, 61H, 62H
   \              0x72 0x65    
   \              0x6C 0x69    
   \              0x61 0x62    
   \   00000028   0x6C 0x65          DC8 6CH, 65H, 20H, 65H, 78H, 74H, 72H, 61H
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x72 0x61    
   \   00000030   0x20 0x69          DC8 20H, 69H, 6EH, 66H, 6FH, 72H, 6DH, 61H
   \              0x6E 0x66    
   \              0x6F 0x72    
   \              0x6D 0x61    
   \   00000038   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 0
   \              0x6F 0x6E    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Watchdog...">_1`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Watchdog caught with enhanced info"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x57    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x64 0x6F    
   \              0x67 0x20    
   \              0x63 0x61    
   \              0x75 0x67    
   \              0x68 0x74    
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x65 0x6E    
   \              0x68 0x61    
   \              0x6E 0x63    
   \              0x65 0x64    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Instruction address: %4x">`:
   \   00000000   0x49 0x6E          DC8 "Instruction address: %4x"
   \              0x73 0x74    
   \              0x72 0x75    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x34 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SC1 Rx">`:
   \   00000000   0x53 0x43          DC8 "SC1 Rx"
   \              0x31 0x20    
   \              0x52 0x78    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MAC Rx">`:
   \   00000000   0x4D 0x41          DC8 "MAC Rx"
   \              0x43 0x20    
   \              0x52 0x78    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SC2 Rx">`:
   \   00000000   0x53 0x43          DC8 "SC2 Rx"
   \              0x32 0x20    
   \              0x52 0x78    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: DMA prot...">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: DMA protection violation"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x44    
   \              0x4D 0x41    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x76 0x69    
   \              0x6F 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DMA: %p, address: %4x">`:
   \   00000000   0x44 0x4D          DC8 "DMA: %p, address: %4x"
   \              0x41 0x3A    
   \              0x20 0x25    
   \              0x70 0x2C    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x3A 0x20    
   \              0x25 0x34    
   \              0x78 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Assert %...">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Assert %p:%d"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x41    
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x25 0x70    
   \              0x3A 0x25    
   \              0x64 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Hard Fault">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Hard Fault"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x48    
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x46 0x61    
   \              0x75 0x6C    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HFSR.VECTTBL: error r...">`:
   \   00000000   0x48 0x46          DC8 48H, 46H, 53H, 52H, 2EH, 56H, 45H, 43H
   \              0x53 0x52    
   \              0x2E 0x56    
   \              0x45 0x43    
   \   00000008   0x54 0x54          DC8 54H, 54H, 42H, 4CH, 3AH, 20H, 65H, 72H
   \              0x42 0x4C    
   \              0x3A 0x20    
   \              0x65 0x72    
   \   00000010   0x72 0x6F          DC8 72H, 6FH, 72H, 20H, 72H, 65H, 61H, 64H
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x61 0x64    
   \   00000018   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 76H, 65H, 63H, 74H
   \              0x67 0x20    
   \              0x76 0x65    
   \              0x63 0x74    
   \   00000020   0x6F 0x72          DC8 6FH, 72H, 20H, 74H, 61H, 62H, 6CH, 65H
   \              0x20 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000028   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 20H, 61H, 6EH, 20H
   \              0x6F 0x72    
   \              0x20 0x61    
   \              0x6E 0x20    
   \   00000030   0x65 0x78          DC8 65H, 78H, 63H, 65H, 70H, 74H, 69H, 6FH
   \              0x63 0x65    
   \              0x70 0x74    
   \              0x69 0x6F    
   \   00000038   0x6E 0x00          DC8 6EH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HFSR.FORCED: configur...">`:
   \   00000000   0x48 0x46          DC8 48H, 46H, 53H, 52H, 2EH, 46H, 4FH, 52H
   \              0x53 0x52    
   \              0x2E 0x46    
   \              0x4F 0x52    
   \   00000008   0x43 0x45          DC8 43H, 45H, 44H, 3AH, 20H, 63H, 6FH, 6EH
   \              0x44 0x3A    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \   00000010   0x66 0x69          DC8 66H, 69H, 67H, 75H, 72H, 61H, 62H, 6CH
   \              0x67 0x75    
   \              0x72 0x61    
   \              0x62 0x6C    
   \   00000018   0x65 0x20          DC8 65H, 20H, 66H, 61H, 75H, 6CH, 74H, 20H
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x20    
   \   00000020   0x63 0x6F          DC8 63H, 6FH, 75H, 6CH, 64H, 20H, 6EH, 6FH
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \   00000028   0x74 0x20          DC8 74H, 20H, 61H, 63H, 74H, 69H, 76H, 61H
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x76 0x61    
   \   00000030   0x74 0x65          DC8 74H, 65H, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HFSR.DEBUGEVT: fault ...">`:
   \   00000000   0x48 0x46          DC8 48H, 46H, 53H, 52H, 2EH, 44H, 45H, 42H
   \              0x53 0x52    
   \              0x2E 0x44    
   \              0x45 0x42    
   \   00000008   0x55 0x47          DC8 55H, 47H, 45H, 56H, 54H, 3AH, 20H, 66H
   \              0x45 0x56    
   \              0x54 0x3A    
   \              0x20 0x66    
   \   00000010   0x61 0x75          DC8 61H, 75H, 6CH, 74H, 20H, 72H, 65H, 6CH
   \              0x6C 0x74    
   \              0x20 0x72    
   \              0x65 0x6C    
   \   00000018   0x61 0x74          DC8 61H, 74H, 65H, 64H, 20H, 74H, 6FH, 20H
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000020   0x64 0x65          DC8 64H, 65H, 62H, 75H, 67H, 20H, 2DH, 20H
   \              0x62 0x75    
   \              0x67 0x20    
   \              0x2D 0x20    
   \   00000028   0x65 0x2E          DC8 65H, 2EH, 67H, 2EH, 2CH, 20H, 65H, 78H
   \              0x67 0x2E    
   \              0x2C 0x20    
   \              0x65 0x78    
   \   00000030   0x65 0x63          DC8 65H, 63H, 75H, 74H, 65H, 64H, 20H, 42H
   \              0x75 0x74    
   \              0x65 0x64    
   \              0x20 0x42    
   \   00000038   0x4B 0x50          DC8 4BH, 50H, 54H, 0
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Memory M...">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Memory Management Fault"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x4D    
   \              0x65 0x6D    
   \              0x6F 0x72    
   \              0x79 0x20    
   \              0x4D 0x61    
   \              0x6E 0x61    
   \              0x67 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Illegal access addres...">`:
   \   00000000   0x49 0x6C          DC8 "Illegal access address: %4x"
   \              0x6C 0x65    
   \              0x67 0x61    
   \              0x6C 0x20    
   \              0x61 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x3A 0x20    
   \              0x25 0x34    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "CFSR.%p">`:
   \   00000000   0x43 0x46          DC8 "CFSR.%p"
   \              0x53 0x52    
   \              0x2E 0x25    
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Bus Fault">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Bus Fault"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x42    
   \              0x75 0x73    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Address is of an inst...">`:
   \   00000000   0x41 0x64          DC8 41H, 64H, 64H, 72H, 65H, 73H, 73H, 20H
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \   00000008   0x69 0x73          DC8 69H, 73H, 20H, 6FH, 66H, 20H, 61H, 6EH
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x61 0x6E    
   \   00000010   0x20 0x69          DC8 20H, 69H, 6EH, 73H, 74H, 72H, 75H, 63H
   \              0x6E 0x73    
   \              0x74 0x72    
   \              0x75 0x63    
   \   00000018   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 20H, 61H, 66H, 74H
   \              0x6F 0x6E    
   \              0x20 0x61    
   \              0x66 0x74    
   \   00000020   0x65 0x72          DC8 65H, 72H, 20H, 62H, 75H, 73H, 20H, 66H
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x20 0x66    
   \   00000028   0x61 0x75          DC8 61H, 75H, 6CH, 74H, 20H, 6FH, 63H, 63H
   \              0x6C 0x74    
   \              0x20 0x6F    
   \              0x63 0x63    
   \   00000030   0x75 0x72          DC8 75H, 72H, 72H, 65H, 64H, 2CH, 20H, 6EH
   \              0x72 0x65    
   \              0x64 0x2C    
   \              0x20 0x6E    
   \   00000038   0x6F 0x74          DC8 6FH, 74H, 20H, 74H, 68H, 65H, 20H, 63H
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x63    
   \   00000040   0x61 0x75          DC8 61H, 75H, 73H, 65H, 2EH, 0
   \              0x73 0x65    
   \              0x2E 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "CFSR.(none) load or s...">`:
   \   00000000   0x43 0x46          DC8 "CFSR.(none) load or store at an illegal address"
   \              0x53 0x52    
   \              0x2E 0x28    
   \              0x6E 0x6F    
   \              0x6E 0x65    
   \              0x29 0x20    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x6F    
   \              0x72 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x61 0x74    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x69 0x6C    
   \              0x6C 0x65    
   \              0x67 0x61    
   \              0x6C 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AFSR.%p">`:
   \   00000000   0x41 0x46          DC8 "AFSR.%p"
   \              0x53 0x52    
   \              0x2E 0x25    
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Usage Fault">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Usage Fault"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x55    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset cause: Debug Mo...">`:
   \   00000000   0x52 0x65          DC8 "Reset cause: Debug Monitor Fault"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x63 0x61    
   \              0x75 0x73    
   \              0x65 0x3A    
   \              0x20 0x44    
   \              0x65 0x62    
   \              0x75 0x67    
   \              0x20 0x4D    
   \              0x6F 0x6E    
   \              0x69 0x74    
   \              0x6F 0x72    
   \              0x20 0x46    
   \              0x61 0x75    
   \              0x6C 0x74    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p = %4x">`:
   \   00000000   0x25 0x70          DC8 "%p = %4x"
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x34 0x78    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    547          
    548          
    549          ///////////////////////////////////////////////////////////////////////////////
    550          // hal/micro/xap2b/diagnostic.h supplemental API:

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  halGetPCDiagnostics
       16  halInternalAssertFailed
             16 -> _disableBasePri
             16 -> emberDebugAssert
             16 -> emberSerialGuaranteedPrintf
              0 -> halInternalAssertFault
             16 -> halInternalResetWatchDog
        0  halInternalAssertFault
       32  halInternalCrashHandler
             32 -> halInternalGetCStackBottom
       32  halPrintCrashData
             32 -> emberSerialPrintf
             32 -> emberSerialWaitSend
       40  halPrintCrashDetails
             40 -> emberSerialPrintfLine
              0 -> emberSerialWaitSend
             40 -> halGetExtendedResetInfo
       56  halPrintCrashSummary
              0 -> emberSerialPrintCarriageReturn
             56 -> emberSerialPrintf
              0 -> emberSerialPrintfLine
             56 -> emberSerialPrintfLine
             56 -> emberSerialWaitSend
        0  halStartPCDiagnostics
        0  halStopPCDiagnostics


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant " %p">
       1  ?<Constant "">
      12  ?<Constant "%p = %4x">
      48  ?<Constant "%p mode using %p stac...">
      60  ?<Constant "%u bytes used (%u%%) ...">
       4  ?<Constant ", ">
       4  ?<Constant "??">
       4  ?<Constant "ADC">
       8  ?<Constant "AFSR.%p">
      72  ?<Constant "Address is of an inst...">
      48  ?<Constant "BFARVALID: BFAR conta...">
      12  ?<Constant "Baseband">
       8  ?<Constant "CFSR.%p">
      48  ?<Constant "CFSR.(none) load or s...">
      56  ?<Constant "DACCVIOL: attempted l...">
      64  ?<Constant "DIVBYZERO: attempted ...">
      24  ?<Constant "DMA: %p, address: %4x">
       8  ?<Constant "Debug">
      60  ?<Constant "HFSR.DEBUGEVT: fault ...">
      52  ?<Constant "HFSR.FORCED: configur...">
      60  ?<Constant "HFSR.VECTTBL: error r...">
       8  ?<Constant "Handler">
      64  ?<Constant "IACCVIOL: attempted i...">
      48  ?<Constant "IBUSERR: instruction ...">
      40  ?<Constant "IMPRECISERR: imprecis...">
      48  ?<Constant "INVPC: exception retu...">
      60  ?<Constant "INVSTATE: invalid EPS...">
       8  ?<Constant "IRQ_A">
       8  ?<Constant "IRQ_B">
       8  ?<Constant "IRQ_C">
       8  ?<Constant "IRQ_D">
      28  ?<Constant "Illegal access addres...">
      28  ?<Constant "Instruction address: %4x">
      48  ?<Constant "Interrupts active (or...">
       8  ?<Constant "MAC Rx">
       8  ?<Constant "MAC_RX">
       8  ?<Constant "MAC_TX">
      12  ?<Constant "MAC_Timer">
      48  ?<Constant "MMARVALID: MMAR conta...">
      60  ?<Constant "MSTKERR: stacking fro...">
      68  ?<Constant "MUNSTKERR: unstack fr...">
      12  ?<Constant "Management">
      56  ?<Constant "NOCP: attempted to ex...">
      24  ?<Constant "No interrupts active">
      36  ?<Constant "PRECISERR: precise da...">
      64  ?<Constant "PROTECTED: attempted ...">
      68  ?<Constant "RESERVED: attempted a...">
      28  ?<Constant "Reset cause: Assert %...">
      24  ?<Constant "Reset cause: Bus Fault">
      40  ?<Constant "Reset cause: DMA prot...">
      36  ?<Constant "Reset cause: Debug Mo...">
      24  ?<Constant "Reset cause: Hard Fault">
      40  ?<Constant "Reset cause: Memory M...">
      28  ?<Constant "Reset cause: Usage Fault">
      64  ?<Constant "Reset cause: Watchdog...">
      48  ?<Constant "Reset cause: Watchdog...">_1
       8  ?<Constant "SC1 Rx">
       4  ?<Constant "SC1">
       8  ?<Constant "SC2 Rx">
       4  ?<Constant "SC2">
      32  ?<Constant "SP is outside %p stac...">
      60  ?<Constant "STKERR: stacking on e...">
      12  ?<Constant "Security">
      12  ?<Constant "Sleep_Timer">
      44  ?<Constant "Stack _may_ have used...">
       8  ?<Constant "Thread">
       8  ?<Constant "Timer1">
       8  ?<Constant "Timer2">
      48  ?<Constant "UNALIGNED: attempted ...">
      56  ?<Constant "UNDEFINSTR: tried to ...">
      64  ?<Constant "UNSTKERR: unstacking ...">
      60  ?<Constant "WRONGSIZE: attempted ...">
       4  ?<Constant "\r\n">
      20  ?<Constant "\r\n[ASSERT:%p:%d]\r\n">
       8  ?<Constant "main">
       8  ?<Constant "process">
       4  ??DataTable83
       4  ??DataTable83_1
       4  ??DataTable83_10
       4  ??DataTable83_11
       4  ??DataTable83_12
       4  ??DataTable83_13
       4  ??DataTable83_2
       4  ??DataTable83_3
       4  ??DataTable83_4
       4  ??DataTable83_5
       4  ??DataTable83_6
       4  ??DataTable83_7
       4  ??DataTable83_8
       4  ??DataTable83_9
       6  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine2
      16  afsrBits
     104  cfsrBits
       4  halGetPCDiagnostics
      46  halInternalAssertFailed
       4  halInternalAssertFault
     454  halInternalCrashHandler
      92  halPrintCrashData
     502  halPrintCrashDetails
     278  halPrintCrashSummary
       2  halStartPCDiagnostics
       2  halStopPCDiagnostics
      68  intActiveBits
     192  nameStrings

 
 1 277 bytes in section .rodata
 2 910 bytes in section .text
 
 2 910 bytes of CODE  memory
 1 277 bytes of CONST memory

Errors: none
Warnings: none
