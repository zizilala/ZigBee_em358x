###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:44 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\af-m #
#                    ain-soc.c                                                #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\af-m #
#                    ain-soc.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorS #
#                    ensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D            #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"af-main-soc.c\"" -lC                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \af-main-soc.lst                                         #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \af-main-soc.o                                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\af-main-soc.c
      1          // *******************************************************************
      2          // * af-main-soc.c
      3          // *
      4          // *
      5          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "app/framework/include/af.h"
      9          #include "app/framework/util/attribute-storage.h"
     10          #include "app/util/serial/command-interpreter2.h"
     11          
     12          // ZDO
     13          #include "app/util/zigbee-framework/zigbee-device-common.h"
     14          #include "app/util/zigbee-framework/zigbee-device-library.h"
     15          
     16          #include "app/util/counters/counters.h"
     17          #include "app/util/security/security.h"
     18          #include "app/util/common/form-and-join.h"
     19          
     20          #include "app/framework/util/service-discovery.h"
     21          #include "app/framework/util/af-main.h"
     22          #include "app/framework/util/util.h"
     23          
     24          #include "app/framework/security/af-security.h"
     25          
     26          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     27          #include "app/framework/plugin/fragmentation/fragmentation.h"
     28          
     29          #if defined(__ICCARM__)
     30            #define EM35X_SERIES
     31          #endif
     32          
     33          #if defined(EM35X_SERIES)
     34          #include "hal/micro/cortexm3/diagnostic.h"
     35          #endif
     36          
     37          // *****************************************************************************
     38          // Globals
     39          
     40          // APP_SERIAL is set in the project files

   \                                 In section .data, align 1
     41          int8u serialPort = APP_SERIAL;
   \                     serialPort:
   \   00000000   0x01               DC8 1
     42          
     43          #if (EMBER_AF_BAUD_RATE == 300)
     44            #define BAUD_RATE BAUD_300
     45          #elif (EMBER_AF_BAUD_RATE == 600)
     46            #define BAUD_RATE BAUD_600
     47          #elif (EMBER_AF_BAUD_RATE == 900)
     48            #define BAUD_RATE BAUD_900
     49          #elif (EMBER_AF_BAUD_RATE == 1200)
     50            #define BAUD_RATE BAUD_1200
     51          #elif (EMBER_AF_BAUD_RATE == 2400)
     52            #define BAUD_RATE BAUD_2400
     53          #elif (EMBER_AF_BAUD_RATE == 4800)
     54            #define BAUD_RATE BAUD_4800
     55          #elif (EMBER_AF_BAUD_RATE == 9600)
     56            #define BAUD_RATE BAUD_9600
     57          #elif (EMBER_AF_BAUD_RATE == 14400)
     58            #define BAUD_RATE BAUD_14400
     59          #elif (EMBER_AF_BAUD_RATE == 19200)
     60            #define BAUD_RATE BAUD_19200
     61          #elif (EMBER_AF_BAUD_RATE == 28800)
     62            #define BAUD_RATE BAUD_28800
     63          #elif (EMBER_AF_BAUD_RATE == 38400)
     64            #define BAUD_RATE BAUD_38400
     65          #elif (EMBER_AF_BAUD_RATE == 50000)
     66            #define BAUD_RATE BAUD_50000
     67          #elif (EMBER_AF_BAUD_RATE == 57600)
     68            #define BAUD_RATE BAUD_57600
     69          #elif (EMBER_AF_BAUD_RATE == 76800)
     70            #define BAUD_RATE BAUD_76800
     71          #elif (EMBER_AF_BAUD_RATE == 100000)
     72            #define BAUD_RATE BAUD_100000
     73          #elif (EMBER_AF_BAUD_RATE == 115200)
     74            #define BAUD_RATE BAUD_115200
     75          #elif (EMBER_AF_BAUD_RATE == 230400)
     76            #define BAUD_RATE BAUD_230400
     77          #elif (EMBER_AF_BAUD_RATE == 460800)
     78            #define BAUD_RATE BAUD_460800
     79          #else
     80            #error EMBER_AF_BAUD_RATE set to an invalid baud rate
     81          #endif
     82          
     83          #if defined(MAIN_FUNCTION_HAS_STANDARD_ARGUMENTS)
     84            #define APP_FRAMEWORK_MAIN_ARGUMENTS argc, argv
     85          #else
     86            #define APP_FRAMEWORK_MAIN_ARGUMENTS 0, NULL
     87          #endif
     88          
     89          // *****************************************************************************
     90          // Forward declarations.
     91          
     92          #if defined(EMBER_TEST) && defined(EMBER_AF_PLUGIN_OTA_STORAGE_SIMPLE_EEPROM)
     93            void emAfSetupFakeEepromForSimulation(void);
     94            #define SETUP_FAKE_EEPROM_FOR_SIMULATION() emAfSetupFakeEepromForSimulation()
     95          #else
     96            #define SETUP_FAKE_EEPROM_FOR_SIMULATION()
     97          #endif
     98          
     99          #if defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)
    100            #define COMMAND_READER_INIT() emberCommandReaderInit()
    101          #else
    102            #define COMMAND_READER_INIT()
    103          #endif
    104          
    105          #ifdef EMBER_AF_DISABLE_FORM_AND_JOIN_TICK
    106            #define FORM_AND_JOIN_TICK()
    107          #else
    108            #define FORM_AND_JOIN_TICK() emberFormAndJoinTick()
    109          #endif
    110          
    111          // *****************************************************************************
    112          // Functions
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void main(void)
    115          {
   \                     main:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    116            EmberStatus status;
    117            int8u reset = halGetResetInfo();
   \   00000004   0x.... 0x....      BL       halGetResetInfo
   \   00000008   0x4604             MOV      R4,R0
    118            int16u extendedResetInfo = 0;
    119          
    120          #if defined(EM35X_SERIES)
    121            // Assume we are on the 35x SOC
    122            extendedResetInfo = halGetExtendedResetInfo();
   \   0000000A   0x.... 0x....      BL       halGetExtendedResetInfo
   \   0000000E   0x4605             MOV      R5,R0
    123          #endif
    124          
    125            SETUP_FAKE_EEPROM_FOR_SIMULATION();
    126          
    127            //Initialize the hal
    128            halInit();
   \   00000010   0x.... 0x....      BL       halInit
    129            INTERRUPTS_ON();  // Safe to enable interrupts at this point
   \   00000014   0x.... 0x....      BL       _enableBasePri
    130          
    131            {
    132              // The SOC does not support a return code from main().  But for consistency
    133              // and to avoid the callback referencing a NULL pointer, we pass in a valid 
    134              // pointer.
    135              int returnCode;
    136              if (emberAfMainStartCallback(&returnCode, APP_FRAMEWORK_MAIN_ARGUMENTS)) {
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       emberAfMainStartCallback
   \   00000022   0xB100             CBZ.N    R0,??main_0
    137                return;
   \   00000024   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    138              }
    139            }
    140          
    141            // Initialize the Ember Stack.
    142            status = emberInit();
   \                     ??main_0:
   \   00000026   0x.... 0x....      BL       emberInit
   \   0000002A   0x4606             MOV      R6,R0
    143          
    144            emberSerialInit(APP_SERIAL, BAUD_RATE, PARITY_NONE, 1);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0x210F             MOVS     R1,#+15
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       emberSerialInit
    145          
    146            emberAfCorePrintln("Reset info: 0x%x (%p)", 
    147                               reset,
    148                               halGetResetString());
   \   00000038   0x.... 0x....      BL       halGetResetString
   \   0000003C   0x4603             MOV      R3,R0
   \   0000003E   0x4622             MOV      R2,R4
   \   00000040   0x.... 0x....      ADR.W    R1,`?<Constant "Reset info: 0x%x (%p)">`
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       emberAfPrintln
    149          
    150          #if defined(EM35X_SERIES)
    151            emberAfCorePrintln("Extended Reset info: 0x%2X (%p)",
    152                               extendedResetInfo,
    153                               halGetExtendedResetString());
   \   0000004A   0x.... 0x....      BL       halGetExtendedResetString
   \   0000004E   0x4603             MOV      R3,R0
   \   00000050   0x462A             MOV      R2,R5
   \   00000052   0x.... 0x....      ADR.W    R1,`?<Constant "Extended Reset info: ...">`
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x.... 0x....      BL       emberAfPrintln
    154          
    155            if (halResetWasCrash()) {
   \   0000005C   0x2401             MOVS     R4,#+1
   \   0000005E   0x.... 0x....      BL       halGetResetInfo
   \   00000062   0xFA04 0xF000      LSL      R0,R4,R0
   \   00000066   0xF240 0x71A1      MOVW     R1,#+1953
   \   0000006A   0x4208             TST      R0,R1
   \   0000006C   0xD00A             BEQ.N    ??main_1
    156              halPrintCrashSummary(serialPort);
   \   0000006E   0x.... 0x....      LDR.W    R4,??DataTable20
   \   00000072   0x7820             LDRB     R0,[R4, #+0]
   \   00000074   0x.... 0x....      BL       halPrintCrashSummary
    157              halPrintCrashDetails(serialPort);
   \   00000078   0x7820             LDRB     R0,[R4, #+0]
   \   0000007A   0x.... 0x....      BL       halPrintCrashDetails
    158              halPrintCrashData(serialPort);
   \   0000007E   0x7820             LDRB     R0,[R4, #+0]
   \   00000080   0x.... 0x....      BL       halPrintCrashData
    159            }
    160          
    161          #endif
    162          
    163            if (status != EMBER_SUCCESS) {
   \                     ??main_1:
   \   00000084   0xB16E             CBZ.N    R6,??main_2
    164              emberAfCorePrintln("%pemberInit 0x%x", "ERROR: ", status);
   \   00000086   0x4633             MOV      R3,R6
   \   00000088   0x.... 0x....      ADR.W    R2,`?<Constant "ERROR: ">`
   \   0000008C   0x.... 0x....      ADR.W    R1,`?<Constant "%pemberInit 0x%x">`
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      BL       emberAfPrintln
    165          
    166              // The app can choose what to do here.  If the app is running
    167              // another device then it could stay running and report the
    168              // error visually for example. This app asserts.
    169              assert(FALSE);
   \   00000096   0x21A9             MOVS     R1,#+169
   \   00000098   0x.... 0x....      ADR.W    R0,`?<Constant "af-main-soc.c">`
   \   0000009C   0x.... 0x....      BL       halInternalAssertFailed
   \   000000A0   0xE004             B.N      ??main_3
    170            } else {
    171              emberAfDebugPrintln("init pass");
   \                     ??main_2:
   \   000000A2   0x.... 0x....      ADR.W    R1,`?<Constant "init pass">`
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x.... 0x....      BL       emberAfPrintln
    172            }
    173          
    174            // This will initialize the stack of networks maintained by the framework,
    175            // including setting the default network.
    176            emAfInitializeNetworkIndexStack();
   \                     ??main_3:
   \   000000AC   0x.... 0x....      BL       emAfInitializeNetworkIndexStack
    177          
    178            // Initialize messageSentCallbacks table
    179            emAfInitializeMessageSentCallbackArray();
   \   000000B0   0x.... 0x....      BL       emAfInitializeMessageSentCallbackArray
    180          
    181            emberAfEndpointConfigure();
   \   000000B4   0x.... 0x....      BL       emberAfEndpointConfigure
    182            emberAfMainInitCallback();
   \   000000B8   0x.... 0x....      BL       emberAfMainInitCallback
    183          
    184            emberAfInit();
   \   000000BC   0x.... 0x....      BL       emberAfInit
    185          
    186            // The address cache needs to be initialized and used with the source routing
    187            // code for the trust center to operate properly.
    188            securityAddressCacheInit(EMBER_AF_PLUGIN_ADDRESS_TABLE_SIZE,                     // offset
    189                                     EMBER_AF_PLUGIN_ADDRESS_TABLE_TRUST_CENTER_CACHE_SIZE); // size
   \   000000C0   0x2102             MOVS     R1,#+2
   \   000000C2   0x2002             MOVS     R0,#+2
   \   000000C4   0x.... 0x....      BL       securityAddressCacheInit
    190          
    191            EM_AF_NETWORK_INIT();
   \   000000C8   0x.... 0x....      BL       emAfNetworkInit
    192          
    193            COMMAND_READER_INIT();
   \   000000CC   0x.... 0x....      BL       emberCommandReaderInit
    194          
    195            // Set the manufacturing code. This is defined by ZigBee document 053874r10
    196            // Ember's ID is 0x1002 and is the default, but this can be overridden in App Builder.
    197            emberSetManufacturerCode(EMBER_AF_MANUFACTURER_CODE);
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   000000D4   0xF241 0x0102      MOVW     R1,#+4098
   \   000000D8   0x8001             STRH     R1,[R0, #+0]
    198          
    199            emberSetMaximumIncomingTransferSize(EMBER_AF_INCOMING_BUFFER_LENGTH);
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   000000DE   0x2152             MOVS     R1,#+82
   \   000000E0   0x8001             STRH     R1,[R0, #+0]
    200            emberSetMaximumOutgoingTransferSize(EMBER_AF_MAXIMUM_SEND_PAYLOAD_LENGTH);
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   000000E6   0x8001             STRH     R1,[R0, #+0]
    201            emberSetTxPowerMode(EMBER_AF_TX_POWER_MODE);
   \   000000E8   0xF44F 0x4000      MOV      R0,#+32768
   \   000000EC   0x.... 0x....      BL       emberSetTxPowerMode
   \   000000F0   0x....             ADR.N    R4,??DataTable18  ;; "%p>"
   \   000000F2   0x.... 0x....      ADR.W    R5,`?<Constant "DoorSensor_SM6011">`
   \   000000F6   0xE001             B.N      ??main_4
    202          
    203            while(TRUE) {
    204              halResetWatchdog();   // Periodically reset the watchdog.
    205              emberTick();          // Allow the stack to run.
    206              // Allow the ZCL clusters to run. This should go immediately after emberTick
    207              emberAfTick();
    208          
    209              FORM_AND_JOIN_TICK();
    210              emberSerialBufferTick();
    211          
    212              emberAfRunEvents();
    213          
    214          #if defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)
    215              if (emberProcessCommandInput(APP_SERIAL)) {
    216                emberAfGuaranteedPrint("%p>", ZA_PROMPT);
    217              }
    218          #endif
    219          
    220          #if defined(EMBER_TEST)
    221              if (1) {
    222                // Simulation only
    223                int32u timeToNextEventMax = emberMsToNextStackEvent();
    224                timeToNextEventMax = emberAfMsToNextEvent(timeToNextEventMax);
    225                simulatedTimePassesMs(timeToNextEventMax);
    226              }
    227          #endif
    228          
    229              // After each interation through the main loop, our network index stack
    230              // should be empty and we should be on the default network index again.
    231              emAfAssertNetworkIndexStackIsEmpty();
   \                     ??main_5:
   \   000000F8   0x.... 0x....      BL       emAfAssertNetworkIndexStackIsEmpty
   \                     ??main_4:
   \   000000FC   0x.... 0x....      BL       halInternalResetWatchDog
   \   00000100   0x.... 0x....      BL       emberTick
   \   00000104   0x.... 0x....      BL       emberAfTick
   \   00000108   0x.... 0x....      BL       emberSerialBufferTick
   \   0000010C   0x.... 0x....      BL       emberAfRunEvents
   \   00000110   0x2101             MOVS     R1,#+1
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x.... 0x....      BL       emberProcessCommandString
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD0ED             BEQ.N    ??main_5
   \   0000011C   0x462A             MOV      R2,R5
   \   0000011E   0x4621             MOV      R1,R4
   \   00000120   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000124   0x.... 0x....      BL       emberAfPrint
   \   00000128   0xE7E6             B.N      ??main_5
    232            }
    233          }
    234          

   \                                 In section .text, align 2, keep-with-next
    235          void emberAfGetMfgString(int8u* returnData)
    236          {
    237            halCommonGetMfgToken(returnData, TOKEN_MFG_STRING);
   \                     emberAfGetMfgString:
   \   00000000   0x2310             MOVS     R3,#+16
   \   00000002   0x227F             MOVS     R2,#+127
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable20_4
   \   00000008   0x8809             LDRH     R1,[R1, #+0]
   \   0000000A   0x.... 0x....      B.W      halInternalGetMfgTokenData
    238          }
    239          

   \                                 In section .text, align 2, keep-with-next
    240          EmberNodeId emberAfGetNodeId(void)
    241          {
    242            return emberGetNodeId();
   \                     emberAfGetNodeId:
   \   00000000   0x.... 0x....      B.W      emberGetNodeId
    243          }
    244          

   \                                 In section .text, align 2, keep-with-next
    245          EmberPanId emberAfGetPanId(void)
    246          {
    247            return emberGetPanId();
   \                     emberAfGetPanId:
   \   00000000   0x.... 0x....      B.W      emberGetPanId
    248          }
    249          

   \                                 In section .text, align 2, keep-with-next
    250          EmberNetworkStatus emberAfNetworkState(void)
    251          {
    252            return emberNetworkState();
   \                     emberAfNetworkState:
   \   00000000   0x.... 0x....      B.W      emberNetworkState
    253          }
    254          

   \                                 In section .text, align 2, keep-with-next
    255          int8u emberAfGetBindingIndex(void)
    256          {
    257            return emberGetBindingIndex();
   \                     emberAfGetBindingIndex:
   \   00000000   0x.... 0x....      B.W      emberGetBindingIndex
    258          }
    259          

   \                                 In section .text, align 2, keep-with-next
    260          int8u emberAfGetStackProfile(void)
    261          {
    262            return EMBER_STACK_PROFILE;
   \                     emberAfGetStackProfile:
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x4770             BX       LR               ;; return
    263          }
    264          

   \                                 In section .text, align 2, keep-with-next
    265          int8u emberAfGetAddressIndex(void)
    266          {
   \                     emberAfGetAddressIndex:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    267            EmberNodeId nodeId = emberGetSender();
   \   00000002   0x.... 0x....      BL       emberGetSender
   \   00000006   0x4604             MOV      R4,R0
    268            int8u i;
    269            for (i = 0; i < EMBER_AF_PLUGIN_ADDRESS_TABLE_SIZE; i++) {
   \   00000008   0x2500             MOVS     R5,#+0
    270              if (emberGetAddressTableRemoteNodeId(i) == nodeId) {
   \                     ??emberAfGetAddressIndex_0:
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       emberGetAddressTableRemoteNodeId
   \   00000010   0x42A0             CMP      R0,R4
   \   00000012   0xD101             BNE.N    ??emberAfGetAddressIndex_1
    271                return i;
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}
    272              }
    273            }
   \                     ??emberAfGetAddressIndex_1:
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \   0000001A   0xB2ED             UXTB     R5,R5
   \   0000001C   0x2D02             CMP      R5,#+2
   \   0000001E   0xD3F4             BCC.N    ??emberAfGetAddressIndex_0
    274            return EMBER_NULL_ADDRESS_TABLE_INDEX;
   \   00000020   0x20FF             MOVS     R0,#+255
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    275          }
    276          
    277          // ******************************************************************
    278          // binding
    279          // ******************************************************************

   \                                 In section .text, align 2, keep-with-next
    280          EmberStatus emberAfSendEndDeviceBind(int8u endpoint)
    281          {
   \                     emberAfSendEndDeviceBind:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    282            EmberStatus status;
    283            EmberApsOption options = ((EMBER_AF_DEFAULT_APS_OPTIONS
    284                                       | EMBER_APS_OPTION_SOURCE_EUI64)
    285                                      & ~EMBER_APS_OPTION_RETRY);
    286          
    287            status = emberAfPushEndpointNetworkIndex(endpoint);
   \   00000004   0x.... 0x....      BL       emberAfPushEndpointNetworkIndex
   \   00000008   0x0005             MOVS     R5,R0
    288            if (status != EMBER_SUCCESS) {
   \   0000000A   0xD118             BNE.N    ??emberAfSendEndDeviceBind_0
    289              return status;
    290            }
    291          
    292            emberAfZdoPrintln("send %x %2x", endpoint, options);
   \   0000000C   0xF240 0x1601      MOVW     R6,#+257
   \   00000010   0xF44F 0x53A8      MOV      R3,#+5376
   \   00000014   0x4622             MOV      R2,R4
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant "send %x %2x">`
   \   0000001A   0x4630             MOV      R0,R6
   \   0000001C   0x.... 0x....      BL       emberAfPrintln
    293            status = emberEndDeviceBindRequest(endpoint, options);
   \   00000020   0xF44F 0x51A8      MOV      R1,#+5376
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       emberEndDeviceBindRequest
   \   0000002A   0x4605             MOV      R5,R0
    294            emberAfZdoPrintln("done: %x.", status);
   \   0000002C   0x462A             MOV      R2,R5
   \   0000002E   0x.... 0x....      ADR.W    R1,`?<Constant "done: %x.">`
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       emberAfPrintln
    295            emberAfZdoFlush();
    296          
    297            emberAfPopNetworkIndex();
   \   00000038   0x.... 0x....      BL       emberAfPopNetworkIndex
    298            return status;
   \   0000003C   0x4628             MOV      R0,R5
   \                     ??emberAfSendEndDeviceBind_0:
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    299          }
    300          

   \                                 In section .text, align 2, keep-with-next
    301          EmberStatus emberRemoteSetBindingHandler(EmberBindingTableEntry *entry)
    302          {
   \                     emberRemoteSetBindingHandler:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    303            EmberStatus status = EMBER_TABLE_FULL;
    304            EmberBindingTableEntry candidate;
    305            int8u i;
    306          
    307            emberAfPushCallbackNetworkIndex();
    308          
    309            // If we receive a bind request for the Key Establishment cluster and we are
    310            // not the trust center, then we are doing partner link key exchange.  We
    311            // don't actually have to create a binding.
    312            if (emberAfGetNodeId() != EMBER_TRUST_CENTER_NODE_ID
    313                && entry->clusterId == ZCL_KEY_ESTABLISHMENT_CLUSTER_ID) {
   \                     ??CrossCallReturnLabel_3:
   \   00000006   0x.... 0x....      BL       emberGetNodeId
   \   0000000A   0xB138             CBZ.N    R0,??emberRemoteSetBindingHandler_0
   \   0000000C   0x8860             LDRH     R0,[R4, #+2]
   \   0000000E   0xF5B0 0x6F00      CMP      R0,#+2048
   \   00000012   0xD103             BNE.N    ??emberRemoteSetBindingHandler_0
    314              status = emberAfPartnerLinkKeyExchangeRequestCallback(entry->identifier);
   \   00000014   0x1D60             ADDS     R0,R4,#+5
   \   00000016   0x.... 0x....      BL       emberAfPartnerLinkKeyExchangeRequestCallback
   \   0000001A   0xE013             B.N      ??emberRemoteSetBindingHandler_1
    315              goto kickout;
    316            }
    317          
    318          
    319            // ask the application if current binding request is allowed or not
    320            status = emberAfRemoteSetBindingPermissionCallback(entry);
   \                     ??emberRemoteSetBindingHandler_0:
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       emberAfRemoteSetBindingPermissionCallback
   \   00000022   0x0005             MOVS     R5,R0
    321            if (status == EMBER_SUCCESS){
   \   00000024   0xD114             BNE.N    ??emberRemoteSetBindingHandler_2
    322              // For all other requests, we search the binding table for an unused entry
    323              // and store the new entry there if we find one.
    324              for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
   \   00000026   0x2600             MOVS     R6,#+0
    325                if (emberGetBinding(i, &candidate) == EMBER_SUCCESS
    326                    && candidate.type == EMBER_UNUSED_BINDING) {
   \                     ??emberRemoteSetBindingHandler_3:
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x.... 0x....      BL       emberGetBinding
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xBF04             ITT      EQ 
   \   00000034   0xF89D 0x0000      LDRBEQ   R0,[SP, #+0]
   \   00000038   0x2800             CMPEQ    R0,#+0
   \   0000003A   0xD105             BNE.N    ??emberRemoteSetBindingHandler_4
    327                  status = emberSetBinding(i, entry);
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x4630             MOV      R0,R6
   \   00000040   0x.... 0x....      BL       emberSetBinding
   \                     ??emberRemoteSetBindingHandler_1:
   \   00000044   0x4605             MOV      R5,R0
    328                  goto kickout;
   \   00000046   0xE003             B.N      ??emberRemoteSetBindingHandler_2
    329                }
    330              }
   \                     ??emberRemoteSetBindingHandler_4:
   \   00000048   0x1C76             ADDS     R6,R6,#+1
   \   0000004A   0xB2F6             UXTB     R6,R6
   \   0000004C   0x2E02             CMP      R6,#+2
   \   0000004E   0xD3EB             BCC.N    ??emberRemoteSetBindingHandler_3
    331            }
    332          
    333          
    334          kickout:
    335            emberAfPopNetworkIndex();
   \                     ??emberRemoteSetBindingHandler_2:
   \   00000050   0x.... 0x....      BL       emberAfPopNetworkIndex
    336            return status;
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0xB004             ADD      SP,SP,#+16
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
    337          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x.... 0x....      B.W      emberAfPushCallbackNetworkIndex
    338          

   \                                 In section .text, align 2, keep-with-next
    339          EmberStatus emberRemoteDeleteBindingHandler(int8u index)
    340          {
   \                     emberRemoteDeleteBindingHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    341            EmberStatus status;
    342            emberAfPushCallbackNetworkIndex();
    343          
    344            // ask the application if current binding request is allowed or not
    345            status = emberAfRemoteDeleteBindingPermissionCallback(index);
   \                     ??CrossCallReturnLabel_2:
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       emberAfRemoteDeleteBindingPermissionCallback
   \   0000000C   0x0005             MOVS     R5,R0
    346            if (status == EMBER_SUCCESS){
   \   0000000E   0xD10B             BNE.N    ??emberRemoteDeleteBindingHandler_0
    347              status = emberDeleteBinding(index);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberDeleteBinding
   \   00000016   0x4605             MOV      R5,R0
    348              emberAfZdoPrintln("delete binding: %x %x", index, status);
   \   00000018   0x462B             MOV      R3,R5
   \   0000001A   0x4622             MOV      R2,R4
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "delete binding: %x %x">`
   \   00000020   0xF240 0x1001      MOVW     R0,#+257
   \   00000024   0x.... 0x....      BL       emberAfPrintln
    349            }
    350          
    351            emberAfPopNetworkIndex();
   \                     ??emberRemoteDeleteBindingHandler_0:
   \   00000028   0x.... 0x....      BL       emberAfPopNetworkIndex
    352            return status;
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    353          }
    354          
    355          // ******************************************************************
    356          // setup endpoints and clusters for responding to ZDO requests
    357          // ******************************************************************

   \                                 In section .text, align 2, keep-with-next
    358          int8u emberGetEndpoint(int8u index)
    359          {
   \                     emberGetEndpoint:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    360            return (((emberAfNetworkIndexFromEndpointIndex(index)
    361                     == emberGetCallbackNetwork())
    362                     && emberAfEndpointIndexIsEnabled(index))
    363                    ? emberAfEndpointFromIndex(index)
    364                    : 0xFF);
   \   00000004   0x.... 0x....      BL       emberGetCallbackNetwork
   \   00000008   0x....             LDR.N    R1,??DataTable20_5
   \   0000000A   0xEB01 0x1104      ADD      R1,R1,R4, LSL #+4
   \   0000000E   0x7B09             LDRB     R1,[R1, #+12]
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xD108             BNE.N    ??emberGetEndpoint_0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emberAfEndpointIndexIsEnabled
   \   0000001A   0xB120             CBZ.N    R0,??emberGetEndpoint_0
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022   0x.... 0x....      B.W      emberAfEndpointFromIndex
   \                     ??emberGetEndpoint_0:
   \   00000026   0x20FF             MOVS     R0,#+255
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    365          }
    366          
    367          // must return the endpoint desc of the endpoint specified

   \                                 In section .text, align 2, keep-with-next
    368          boolean emberGetEndpointDescription(int8u endpoint,
    369                                              EmberEndpointDescription *result)
    370          {
   \                     emberGetEndpointDescription:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    371            int8u endpointIndex = emberAfIndexFromEndpoint(endpoint);
   \   00000006   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   0000000A   0x4606             MOV      R6,R0
    372            if (endpointIndex == 0xFF
    373                || (emberAfNetworkIndexFromEndpointIndex(endpointIndex)
    374                    != emberGetCallbackNetwork())) {
   \   0000000C   0x2EFF             CMP      R6,#+255
   \   0000000E   0xD007             BEQ.N    ??emberGetEndpointDescription_0
   \   00000010   0x.... 0x....      BL       emberGetCallbackNetwork
   \   00000014   0x....             LDR.N    R1,??DataTable20_5
   \   00000016   0xEB01 0x1106      ADD      R1,R1,R6, LSL #+4
   \   0000001A   0x7B0A             LDRB     R2,[R1, #+12]
   \   0000001C   0x4282             CMP      R2,R0
   \   0000001E   0xD001             BEQ.N    ??emberGetEndpointDescription_1
    375              return FALSE;
   \                     ??emberGetEndpointDescription_0:
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD70             POP      {R4-R6,PC}
    376            }
    377            result->profileId          = emberAfProfileIdFromIndex(endpointIndex);
   \                     ??emberGetEndpointDescription_1:
   \   00000024   0x8848             LDRH     R0,[R1, #+2]
   \   00000026   0x8028             STRH     R0,[R5, #+0]
    378            result->deviceId           = emberAfDeviceIdFromIndex(endpointIndex);
   \   00000028   0x8888             LDRH     R0,[R1, #+4]
   \   0000002A   0x8068             STRH     R0,[R5, #+2]
    379            result->deviceVersion      = emberAfDeviceVersionFromIndex(endpointIndex);
   \   0000002C   0x7988             LDRB     R0,[R1, #+6]
   \   0000002E   0x7128             STRB     R0,[R5, #+4]
    380            result->inputClusterCount  = emberAfClusterCount(endpoint, TRUE);
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       emberAfClusterCount
   \   00000038   0x7168             STRB     R0,[R5, #+5]
    381            result->outputClusterCount = emberAfClusterCount(endpoint, FALSE);
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       emberAfClusterCount
   \   00000042   0x71A8             STRB     R0,[R5, #+6]
    382            return TRUE;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    383          }
    384          
    385          // must return the clusterId at listIndex in the list specified for the
    386          // endpoint specified

   \                                 In section .text, align 2, keep-with-next
    387          int16u emberGetEndpointCluster(int8u endpoint,
    388                                         EmberClusterListId listId,
    389                                         int8u listIndex)
    390          {
   \                     emberGetEndpointCluster:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4690             MOV      R8,R2
    391            EmberAfCluster *cluster = NULL;
    392            int8u endpointIndex = emberAfIndexFromEndpoint(endpoint);
   \   0000000A   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   0000000E   0x4607             MOV      R7,R0
    393            if (endpointIndex == 0xFF
    394                || (emberAfNetworkIndexFromEndpointIndex(endpointIndex)
    395                    != emberGetCallbackNetwork())) {
   \   00000010   0xF64F 0x74FF      MOVW     R4,#+65535
   \   00000014   0x2FFF             CMP      R7,#+255
   \   00000016   0xD013             BEQ.N    ??emberGetEndpointCluster_0
   \   00000018   0x.... 0x....      BL       emberGetCallbackNetwork
   \   0000001C   0x....             LDR.N    R1,??DataTable20_5
   \   0000001E   0xEB01 0x1107      ADD      R1,R1,R7, LSL #+4
   \   00000022   0x7B09             LDRB     R1,[R1, #+12]
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xD10B             BNE.N    ??emberGetEndpointCluster_0
    396              return 0xFFFF;
    397            } else if (listId == EMBER_INPUT_CLUSTER_LIST) {
   \   00000028   0xB90E             CBNZ.N   R6,??emberGetEndpointCluster_1
    398              cluster = emberAfGetNthCluster(endpoint, listIndex, TRUE);
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0xE002             B.N      ??emberGetEndpointCluster_2
    399            } else if (listId == EMBER_OUTPUT_CLUSTER_LIST) {
   \                     ??emberGetEndpointCluster_1:
   \   0000002E   0x2E01             CMP      R6,#+1
   \   00000030   0xD106             BNE.N    ??emberGetEndpointCluster_0
    400              cluster = emberAfGetNthCluster(endpoint, listIndex, FALSE);
   \   00000032   0x2200             MOVS     R2,#+0
   \                     ??emberGetEndpointCluster_2:
   \   00000034   0x4641             MOV      R1,R8
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       emberAfGetNthCluster
    401            }
    402            return (cluster == NULL ? 0xFFFF : cluster->clusterId);
   \   0000003C   0xB100             CBZ.N    R0,??emberGetEndpointCluster_0
   \   0000003E   0x8804             LDRH     R4,[R0, #+0]
   \                     ??emberGetEndpointCluster_0:
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    403          }
    404          
    405          
    406          // *******************************************************************
    407          // Handlers required to use the Ember Stack.
    408          
    409          // Called when the stack status changes, usually as a result of an
    410          // attempt to form, join, or leave a network.

   \                                 In section .text, align 2, keep-with-next
    411          void emberStackStatusHandler(EmberStatus status)
    412          {
   \                     emberStackStatusHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    413            emberAfPushCallbackNetworkIndex();
    414            emAfStackStatusHandler(status);
   \                     ??CrossCallReturnLabel_1:
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      BL       emAfStackStatusHandler
    415            emberAfPopNetworkIndex();
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      emberAfPopNetworkIndex
    416          }
    417          
    418          // Copy the message buffer into a RAM buffer.
    419          //   If message is too large, 0 is returned and no copying is done.
    420          //   Otherwise data is copied, and length of copied data is returned.

   \                                 In section .text, align 2, keep-with-next
    421          int8u emAfCopyMessageIntoRamBuffer(EmberMessageBuffer message,
    422                                             int8u *buffer,
    423                                             int16u bufLen)
    424          {
   \                     emAfCopyMessageIntoRamBuffer:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    425            int8u length = emberMessageBufferLength(message);
   \   00000004   0x....             LDR.N    R1,??DataTable20_6
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x5C45             LDRB     R5,[R0, R1]
    426            if (bufLen < length) {
   \   0000000A   0x42AA             CMP      R2,R5
   \   0000000C   0xD20A             BCS.N    ??emAfCopyMessageIntoRamBuffer_0
    427              emberAfAppPrintln("%pmsg too big (%d > %d)", 
    428                                "ERROR: ", 
    429                                length, 
    430                                bufLen);
   \   0000000E   0x9200             STR      R2,[SP, #+0]
   \   00000010   0x462B             MOV      R3,R5
   \   00000012   0x.... 0x....      ADR.W    R2,`?<Constant "ERROR: ">`
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant "%pmsg too big (%d > %d)">`
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x.... 0x....      BL       emberAfPrintln
    431              return 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}
    432            }
    433            emberCopyFromLinkedBuffers(message, 0, buffer, length); // no offset
   \                     ??emAfCopyMessageIntoRamBuffer_0:
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x9100             STR      R1,[SP, #+0]
   \   00000028   0x462B             MOV      R3,R5
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       emReallyCopyToLinkedBuffers
    434            return length;
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    435          }
    436          

   \                                 In section .text, align 2, keep-with-next
    437          void emberIncomingMessageHandler(EmberIncomingMessageType type,
    438                                           EmberApsFrame *apsFrame,
    439                                           EmberMessageBuffer message)
    440          {
   \                     emberIncomingMessageHandler:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    441            int8u lastHopLqi;
    442            int8s lastHopRssi;
    443            int16u messageLength;
    444            int8u messageContents[EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH];
    445          
    446            emberAfPushCallbackNetworkIndex();
   \   0000000A   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    447          
    448            messageLength = emAfCopyMessageIntoRamBuffer(message,
    449                                                         messageContents,
    450                                                         EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH);
   \   0000000E   0x2252             MOVS     R2,#+82
   \   00000010   0xA903             ADD      R1,SP,#+12
   \   00000012   0x4630             MOV      R0,R6
   \   00000014   0x.... 0x....      BL       emAfCopyMessageIntoRamBuffer
   \   00000018   0x0006             MOVS     R6,R0
    451            if (messageLength == 0) {
   \   0000001A   0xD011             BEQ.N    ??emberIncomingMessageHandler_0
    452              goto kickout;
    453            }
    454          
    455            emberGetLastHopLqi(&lastHopLqi);
   \   0000001C   0xF10D 0x0009      ADD      R0,SP,#+9
   \   00000020   0x.... 0x....      BL       emberGetLastHopLqi
    456            emberGetLastHopRssi(&lastHopRssi);
   \   00000024   0xA802             ADD      R0,SP,#+8
   \   00000026   0x.... 0x....      BL       emberGetLastHopRssi
    457          
    458            emAfIncomingMessageHandler(type,
    459                                       apsFrame,
    460                                       lastHopLqi,
    461                                       lastHopRssi,
    462                                       messageLength,
    463                                       messageContents);
   \   0000002A   0xA803             ADD      R0,SP,#+12
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x9600             STR      R6,[SP, #+0]
   \   00000030   0xF99D 0x3008      LDRSB    R3,[SP, #+8]
   \   00000034   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00000038   0x4629             MOV      R1,R5
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       emAfIncomingMessageHandler
    464          
    465          kickout:
    466            emberAfPopNetworkIndex();
   \                     ??emberIncomingMessageHandler_0:
   \   00000040   0x.... 0x....      BL       emberAfPopNetworkIndex
    467          }
   \   00000044   0xB018             ADD      SP,SP,#+96
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    468          
    469          
    470          // Called when a message we sent is acked by the destination or when an
    471          // ack fails to arrive after several retransmissions.

   \                                 In section .text, align 2, keep-with-next
    472          void emberMessageSentHandler(EmberOutgoingMessageType type,
    473                                       int16u indexOrDestination,
    474                                       EmberApsFrame *apsFrame,
    475                                       EmberMessageBuffer message,
    476                                       EmberStatus status)
    477          {
   \                     emberMessageSentHandler:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB098             SUB      SP,SP,#+96
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4690             MOV      R8,R2
   \   0000000C   0x461F             MOV      R7,R3
   \   0000000E   0x9C1E             LDR      R4,[SP, #+120]
    478            int8u messageContents[EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH];
    479            int8u messageLength;
    480            emberAfPushCallbackNetworkIndex();
   \   00000010   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    481          
    482          
    483          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    484            if (emAfFragmentationMessageSent(apsFrame, status)) {
    485              goto kickout;
    486            }
    487          #endif //EMBER_AF_PLUGIN_FRAGMENTATION
    488            
    489            messageLength = emAfCopyMessageIntoRamBuffer(message,
    490                                                         messageContents,
    491                                                         EMBER_AF_MAXIMUM_APS_PAYLOAD_LENGTH);
   \   00000014   0x2252             MOVS     R2,#+82
   \   00000016   0xA903             ADD      R1,SP,#+12
   \   00000018   0x4638             MOV      R0,R7
   \   0000001A   0x.... 0x....      BL       emAfCopyMessageIntoRamBuffer
    492            if (messageLength == 0) {
   \   0000001E   0xB148             CBZ.N    R0,??emberMessageSentHandler_0
    493              // Message too long.  Error printed by above function.
    494              goto kickout;
    495            }
    496          
    497            emAfMessageSentHandler(type,
    498                                   indexOrDestination,
    499                                   apsFrame,
    500                                   status,
    501                                   messageLength,
    502                                   messageContents,
    503                                   message);
   \   00000020   0x9702             STR      R7,[SP, #+8]
   \   00000022   0xA903             ADD      R1,SP,#+12
   \   00000024   0x9101             STR      R1,[SP, #+4]
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x4623             MOV      R3,R4
   \   0000002A   0x4642             MOV      R2,R8
   \   0000002C   0x4631             MOV      R1,R6
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x.... 0x....      BL       emAfMessageSentHandler
    504          
    505          kickout:
    506            emberAfPopNetworkIndex();
   \                     ??emberMessageSentHandler_0:
   \   00000034   0x.... 0x....      BL       emberAfPopNetworkIndex
    507          }
   \   00000038   0xB018             ADD      SP,SP,#+96
   \   0000003A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    508          

   \                                 In section .text, align 2, keep-with-next
    509          EmberStatus emAfSend(EmberOutgoingMessageType type,
    510                               int16u indexOrDestination,
    511                               EmberApsFrame *apsFrame,
    512                               int8u messageLength,
    513                               int8u *message,
    514                               int8u *messageTag)
    515          {
   \                     emAfSend:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x4619             MOV      R1,R3
   \   0000000C   0x9806             LDR      R0,[SP, #+24]
   \   0000000E   0x9F07             LDR      R7,[SP, #+28]
    516            EmberMessageBuffer payload = emberFillLinkedBuffers(message, messageLength);
   \   00000010   0x.... 0x....      BL       emberFillLinkedBuffers
   \   00000014   0x4606             MOV      R6,R0
    517            if (payload == EMBER_NULL_MESSAGE_BUFFER) {
   \   00000016   0x2EFF             CMP      R6,#+255
   \   00000018   0xBF08             IT       EQ 
   \   0000001A   0x2018             MOVEQ    R0,#+24
    518              return EMBER_NO_BUFFERS;
   \   0000001C   0xD022             BEQ.N    ??emAfSend_0
    519            } else {
    520              EmberStatus status;
    521          
    522              *messageTag = payload;
   \   0000001E   0x703E             STRB     R6,[R7, #+0]
    523          
    524              switch (type) {
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD904             BLS.N    ??emAfSend_1
   \   00000026   0x1EC0             SUBS     R0,R0,#+3
   \   00000028   0xD008             BEQ.N    ??emAfSend_2
   \   0000002A   0x1E40             SUBS     R0,R0,#+1
   \   0000002C   0xD00D             BEQ.N    ??emAfSend_3
   \   0000002E   0xE014             B.N      ??emAfSend_4
    525              case EMBER_OUTGOING_DIRECT:
    526              case EMBER_OUTGOING_VIA_ADDRESS_TABLE:
    527              case EMBER_OUTGOING_VIA_BINDING:
    528                status = emberSendUnicast(type, indexOrDestination, apsFrame, payload);
   \                     ??emAfSend_1:
   \   00000030   0x4633             MOV      R3,R6
   \   00000032   0x4642             MOV      R2,R8
   \   00000034   0x4629             MOV      R1,R5
   \   00000036   0x.... 0x....      BL       emberSendUnicast
   \   0000003A   0xE00C             B.N      ??emAfSend_5
    529                break;
    530              case EMBER_OUTGOING_MULTICAST:
    531                status = emberSendMulticast(apsFrame,
    532                                            ZA_MAX_HOPS, // radius
    533                                            ZA_MAX_HOPS, // nonmember radius
    534                                            payload);
   \                     ??emAfSend_2:
   \   0000003C   0x4633             MOV      R3,R6
   \   0000003E   0x220C             MOVS     R2,#+12
   \   00000040   0x210C             MOVS     R1,#+12
   \   00000042   0x4640             MOV      R0,R8
   \   00000044   0x.... 0x....      BL       emberSendMulticast
   \   00000048   0xE005             B.N      ??emAfSend_5
    535                break;
    536              case EMBER_OUTGOING_BROADCAST:
    537                status = emberSendBroadcast(indexOrDestination,
    538                                            apsFrame,
    539                                            ZA_MAX_HOPS, // radius
    540                                            payload);
   \                     ??emAfSend_3:
   \   0000004A   0x4633             MOV      R3,R6
   \   0000004C   0x220C             MOVS     R2,#+12
   \   0000004E   0x4641             MOV      R1,R8
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       emberSendBroadcast
   \                     ??emAfSend_5:
   \   00000056   0x4604             MOV      R4,R0
    541                break;
   \   00000058   0xE000             B.N      ??emAfSend_6
    542              default:
    543                status = EMBER_BAD_ARGUMENT;
   \                     ??emAfSend_4:
   \   0000005A   0x2402             MOVS     R4,#+2
    544                break;
    545              }
    546          
    547              emberReleaseMessageBuffer(payload);
   \                     ??emAfSend_6:
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       emReleaseMessageBuffer
    548          
    549              return status;
   \   00000062   0x4620             MOV      R0,R4
   \                     ??emAfSend_0:
   \   00000064   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    550            }
    551          }
    552          

   \                                 In section .text, align 2, keep-with-next
    553          void emberAfGetEui64(EmberEUI64 returnEui64)
    554          {
    555            MEMCOPY(returnEui64, emberGetEui64(), EUI64_SIZE);
   \                     emberAfGetEui64:
   \   00000000   0x2208             MOVS     R2,#+8
   \   00000002   0x....             LDR.N    R1,??DataTable20_7
   \   00000004   0x.... 0x....      B.W      halCommonMemCopy
    556          }
    557          

   \                                 In section .text, align 2, keep-with-next
    558          EmberStatus emberAfGetNetworkParameters(EmberNodeType* nodeType, 
    559                                                  EmberNetworkParameters* parameters)
    560          {
   \                     emberAfGetNetworkParameters:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    561            EmberStatus status;
    562            status = emberGetNodeType(nodeType);
   \   00000004   0x.... 0x....      BL       emberGetNodeType
    563            if (status != EMBER_SUCCESS) {
   \   00000008   0xB920             CBNZ.N   R0,??emberAfGetNetworkParameters_0
    564              goto kickout;
    565            }
    566            status = emberGetNetworkParameters(parameters);
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      emberGetNetworkParameters
    567          
    568          kickout:
    569            return status;
   \                     ??emberAfGetNetworkParameters_0:
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    570          }
    571          

   \                                 In section .text, align 2, keep-with-next
    572          EmberStatus emberAfGetNodeType(EmberNodeType *nodeType)
    573          {
    574            return emberGetNodeType(nodeType);
   \                     emberAfGetNodeType:
   \   00000000   0x.... 0x....      B.W      emberGetNodeType
    575          }
    576          

   \                                 In section .text, align 2, keep-with-next
    577          int8u emberAfGetSecurityLevel(void)
    578          {
    579            return EMBER_SECURITY_LEVEL;
   \                     emberAfGetSecurityLevel:
   \   00000000   0x2005             MOVS     R0,#+5
   \   00000002   0x4770             BX       LR               ;; return
    580          }
    581          

   \                                 In section .text, align 2, keep-with-next
    582          int8u emberAfGetKeyTableSize(void)
    583          {
    584            return EMBER_KEY_TABLE_SIZE;
   \                     emberAfGetKeyTableSize:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    585          }
    586          

   \                                 In section .text, align 2, keep-with-next
    587          int8u emberAfGetBindingTableSize(void)
    588          {
    589            return EMBER_BINDING_TABLE_SIZE;
   \                     emberAfGetBindingTableSize:
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x4770             BX       LR               ;; return
    590          }
    591          

   \                                 In section .text, align 2, keep-with-next
    592          int8u emberAfGetAddressTableSize(void)
    593          {
    594            return EMBER_ADDRESS_TABLE_SIZE;
   \                     emberAfGetAddressTableSize:
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x4770             BX       LR               ;; return
    595          }
    596          

   \                                 In section .text, align 2, keep-with-next
    597          int8u emberAfGetChildTableSize(void)
    598          {
    599            return EMBER_CHILD_TABLE_SIZE;
   \                     emberAfGetChildTableSize:
   \   00000000   0x2006             MOVS     R0,#+6
   \   00000002   0x4770             BX       LR               ;; return
    600          }
    601          

   \                                 In section .text, align 2, keep-with-next
    602          int8u emberAfGetNeighborTableSize(void)
    603          {
    604            return EMBER_NEIGHBOR_TABLE_SIZE;
   \                     emberAfGetNeighborTableSize:
   \   00000000   0x2010             MOVS     R0,#+16
   \   00000002   0x4770             BX       LR               ;; return
    605          }
    606          

   \                                 In section .text, align 2, keep-with-next
    607          int8u emberAfGetRouteTableSize(void)
    608          {
    609            return EMBER_ROUTE_TABLE_SIZE;
   \                     emberAfGetRouteTableSize:
   \   00000000   0x200A             MOVS     R0,#+10
   \   00000002   0x4770             BX       LR               ;; return
    610          }
    611          

   \                                 In section .text, align 2, keep-with-next
    612          int8u emberAfGetSleepyMulticastConfig(void)
    613          {
    614            return EMBER_SEND_MULTICASTS_TO_SLEEPY_ADDRESS;
   \                     emberAfGetSleepyMulticastConfig:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    615          }
    616          

   \                                 In section .text, align 2, keep-with-next
    617          EmberStatus emberAfGetChildData(int8u index,
    618                                          EmberNodeId *childId,
    619                                          EmberEUI64 childEui64,
    620                                          EmberNodeType *childType)
    621          {
   \                     emberAfGetChildData:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    622            *childId = emberChildId(index);
   \   0000000A   0x.... 0x....      BL       emberChildId
   \   0000000E   0x8028             STRH     R0,[R5, #+0]
    623            return emberGetChildData(index,
    624                                     childEui64,
    625                                     childType);
   \   00000010   0x463A             MOV      R2,R7
   \   00000012   0x4631             MOV      R1,R6
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000001A   0x.... 0x....      B.W      emberGetChildData
    626          }
    627          

   \                                 In section .text, align 2, keep-with-next
    628          int8u emAfGetPacketBufferFreeCount(void)
    629          {
    630            return emberPacketBufferFreeCount();
   \                     emAfGetPacketBufferFreeCount:
   \   00000000   0x....             LDR.N    R0,??DataTable20_8
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    631          }
    632          

   \                                 In section .text, align 2, keep-with-next
    633          int8u emAfGetPacketBufferTotalCount(void)
    634          {
    635            return EMBER_PACKET_BUFFER_COUNT;
   \                     emAfGetPacketBufferTotalCount:
   \   00000000   0x204B             MOVS     R0,#+75
   \   00000002   0x4770             BX       LR               ;; return
    636          }
    637          

   \                                 In section .text, align 2, keep-with-next
    638          void emAfCliVersionCommand(void)
    639          {
   \                     emAfCliVersionCommand:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable20_9
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy
    640            emAfParseAndPrintVersion(emberVersion);
   \   0000000E   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000012   0x.... 0x....      BL       emAfParseAndPrintVersion
    641          }
   \   00000016   0xBD07             POP      {R0-R2,PC}       ;; return
    642          

   \                                 In section .text, align 2, keep-with-next
    643          void emberNetworkFoundHandler(EmberZigbeeNetwork *networkFound)
    644          {
   \                     emberNetworkFoundHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x.... 0x....      BL       ?Subroutine1
    645            int8u lqi;
    646            int8s rssi;
    647            emberAfPushCallbackNetworkIndex();
    648            emberGetLastHopLqi(&lqi);
   \                     ??CrossCallReturnLabel_0:
   \   00000008   0xF10D 0x0001      ADD      R0,SP,#+1
   \   0000000C   0x.... 0x....      BL       emberGetLastHopLqi
    649            emberGetLastHopRssi(&rssi);
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       emberGetLastHopRssi
    650            emberFormAndJoinNetworkFoundHandler(networkFound, lqi, rssi);
   \   00000016   0xF99D 0x2000      LDRSB    R2,[SP, #+0]
   \   0000001A   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       emberFormAndJoinNetworkFoundHandler
    651            emberAfPopNetworkIndex();
   \   00000024   0x.... 0x....      BL       emberAfPopNetworkIndex
    652          }
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    653          

   \                                 In section .text, align 2, keep-with-next
    654          void emberScanCompleteHandler(int8u channel, EmberStatus status)
    655          {
   \                     emberScanCompleteHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    656            emberAfPushCallbackNetworkIndex();
   \   00000006   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    657            emberFormAndJoinScanCompleteHandler(channel, status);
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberFormAndJoinScanCompleteHandler
    658            emberAfPopNetworkIndex();
   \   00000012   0x....             B.N      ?Subroutine0
    659          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000004   0x.... 0x....      B.W      emberAfPopNetworkIndex
    660          

   \                                 In section .text, align 2, keep-with-next
    661          void emberEnergyScanResultHandler(int8u channel, int8s rssi)
    662          {
   \                     emberEnergyScanResultHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    663            emberAfPushCallbackNetworkIndex();
   \   00000006   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    664            emberFormAndJoinEnergyScanResultHandler(channel, rssi);
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberFormAndJoinEnergyScanResultHandler
    665            emberAfPopNetworkIndex();
   \   00000012                      REQUIRE ?Subroutine0
   \   00000012                      ;; // Fall through to label ?Subroutine0
    666          }
    667          

   \                                 In section .text, align 2, keep-with-next
    668          void emAfPrintEzspEndpointFlags(int8u endpoint)
    669          {
    670            // Not applicable for SOC
    671          }
   \                     emAfPrintEzspEndpointFlags:
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x25 0x70          DC8      "%p>"
   \              0x3E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     serialPort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     emManufacturerCode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     emMaximumIncomingTransferSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     emMaximumOutgoingTransferSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     TOKEN_MFG_STRING

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     emMessageBufferLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     emLocalEui64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     emPacketBufferFreeCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x........         DC32     emberVersion

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%p>">`:
   \   00000000   0x25 0x70          DC8 "%p>"
   \              0x3E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset info: 0x%x (%p)">`:
   \   00000000   0x52 0x65          DC8 "Reset info: 0x%x (%p)"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x28    
   \              0x25 0x70    
   \              0x29 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Extended Reset info: ...">`:
   \   00000000   0x45 0x78          DC8 "Extended Reset info: 0x%2X (%p)"
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x20 0x28    
   \              0x25 0x70    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%pemberInit 0x%x">`:
   \   00000000   0x25 0x70          DC8 "%pemberInit 0x%x"
   \              0x65 0x6D    
   \              0x62 0x65    
   \              0x72 0x49    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: ">`:
   \   00000000   0x45 0x52          DC8 "ERROR: "
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "af-main-soc.c">`:
   \   00000000   0x61 0x66          DC8 "af-main-soc.c"
   \              0x2D 0x6D    
   \              0x61 0x69    
   \              0x6E 0x2D    
   \              0x73 0x6F    
   \              0x63 0x2E    
   \              0x63 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "init pass">`:
   \   00000000   0x69 0x6E          DC8 "init pass"
   \              0x69 0x74    
   \              0x20 0x70    
   \              0x61 0x73    
   \              0x73 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DoorSensor_SM6011">`:
   \   00000000   0x44 0x6F          DC8 "DoorSensor_SM6011"
   \              0x6F 0x72    
   \              0x53 0x65    
   \              0x6E 0x73    
   \              0x6F 0x72    
   \              0x5F 0x53    
   \              0x4D 0x36    
   \              0x30 0x31    
   \              0x31 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "send %x %2x">`:
   \   00000000   0x73 0x65          DC8 "send %x %2x"
   \              0x6E 0x64    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "done: %x.">`:
   \   00000000   0x64 0x6F          DC8 "done: %x."
   \              0x6E 0x65    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x2E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "delete binding: %x %x">`:
   \   00000000   0x64 0x65          DC8 "delete binding: %x %x"
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x20 0x62    
   \              0x69 0x6E    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%pmsg too big (%d > %d)">`:
   \   00000000   0x25 0x70          DC8 "%pmsg too big (%d > %d)"
   \              0x6D 0x73    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x62 0x69    
   \              0x67 0x20    
   \              0x28 0x25    
   \              0x64 0x20    
   \              0x3E 0x20    
   \              0x25 0x64    
   \              0x29 0x00    
    672          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  emAfCliVersionCommand
              16 -> __aeabi_memcpy
              16 -> emAfParseAndPrintVersion
       16  emAfCopyMessageIntoRamBuffer
              16 -> emReallyCopyToLinkedBuffers
              16 -> emberAfPrintln
        0  emAfGetPacketBufferFreeCount
        0  emAfGetPacketBufferTotalCount
        0  emAfPrintEzspEndpointFlags
       24  emAfSend
              24 -> emReleaseMessageBuffer
              24 -> emberFillLinkedBuffers
              24 -> emberSendBroadcast
              24 -> emberSendMulticast
              24 -> emberSendUnicast
       16  emberAfGetAddressIndex
              16 -> emberGetAddressTableRemoteNodeId
              16 -> emberGetSender
        0  emberAfGetAddressTableSize
        0  emberAfGetBindingIndex
               0 -> emberGetBindingIndex
        0  emberAfGetBindingTableSize
       24  emberAfGetChildData
              24 -> emberChildId
               0 -> emberGetChildData
        0  emberAfGetChildTableSize
        0  emberAfGetEui64
               0 -> halCommonMemCopy
        0  emberAfGetKeyTableSize
        0  emberAfGetMfgString
               0 -> halInternalGetMfgTokenData
        0  emberAfGetNeighborTableSize
        8  emberAfGetNetworkParameters
               0 -> emberGetNetworkParameters
               8 -> emberGetNodeType
        0  emberAfGetNodeId
               0 -> emberGetNodeId
        0  emberAfGetNodeType
               0 -> emberGetNodeType
        0  emberAfGetPanId
               0 -> emberGetPanId
        0  emberAfGetRouteTableSize
        0  emberAfGetSecurityLevel
        0  emberAfGetSleepyMulticastConfig
        0  emberAfGetStackProfile
        0  emberAfNetworkState
               0 -> emberNetworkState
       16  emberAfSendEndDeviceBind
              16 -> emberAfPopNetworkIndex
              16 -> emberAfPrintln
              16 -> emberAfPushEndpointNetworkIndex
              16 -> emberEndDeviceBindRequest
       16  emberEnergyScanResultHandler
               0 -> emberAfPopNetworkIndex
              16 -> emberAfPushCallbackNetworkIndex
              16 -> emberFormAndJoinEnergyScanResultHandler
        8  emberGetEndpoint
               0 -> emberAfEndpointFromIndex
               8 -> emberAfEndpointIndexIsEnabled
               8 -> emberGetCallbackNetwork
       24  emberGetEndpointCluster
              24 -> emberAfGetNthCluster
              24 -> emberAfIndexFromEndpoint
              24 -> emberGetCallbackNetwork
       16  emberGetEndpointDescription
              16 -> emberAfClusterCount
              16 -> emberAfIndexFromEndpoint
              16 -> emberGetCallbackNetwork
      112  emberIncomingMessageHandler
             112 -> emAfCopyMessageIntoRamBuffer
             112 -> emAfIncomingMessageHandler
             112 -> emberAfPopNetworkIndex
             112 -> emberAfPushCallbackNetworkIndex
             112 -> emberGetLastHopLqi
             112 -> emberGetLastHopRssi
      120  emberMessageSentHandler
             120 -> emAfCopyMessageIntoRamBuffer
             120 -> emAfMessageSentHandler
             120 -> emberAfPopNetworkIndex
             120 -> emberAfPushCallbackNetworkIndex
       16  emberNetworkFoundHandler
              16 -> emberAfPopNetworkIndex
              16 -> emberAfPushCallbackNetworkIndex
              16 -> emberFormAndJoinNetworkFoundHandler
              16 -> emberGetLastHopLqi
              16 -> emberGetLastHopRssi
       16  emberRemoteDeleteBindingHandler
              16 -> emberAfPopNetworkIndex
              16 -> emberAfPrintln
              16 -> emberAfPushCallbackNetworkIndex
              16 -> emberAfRemoteDeleteBindingPermissionCallback
              16 -> emberDeleteBinding
       32  emberRemoteSetBindingHandler
              32 -> emberAfPartnerLinkKeyExchangeRequestCallback
              32 -> emberAfPopNetworkIndex
              32 -> emberAfPushCallbackNetworkIndex
              32 -> emberAfRemoteSetBindingPermissionCallback
              32 -> emberGetBinding
              32 -> emberGetNodeId
              32 -> emberSetBinding
       16  emberScanCompleteHandler
               0 -> emberAfPopNetworkIndex
              16 -> emberAfPushCallbackNetworkIndex
              16 -> emberFormAndJoinScanCompleteHandler
        8  emberStackStatusHandler
               8 -> emAfStackStatusHandler
               0 -> emberAfPopNetworkIndex
               8 -> emberAfPushCallbackNetworkIndex
       24  main
              24 -> _enableBasePri
              24 -> emAfAssertNetworkIndexStackIsEmpty
              24 -> emAfInitializeMessageSentCallbackArray
              24 -> emAfInitializeNetworkIndexStack
              24 -> emAfNetworkInit
              24 -> emberAfEndpointConfigure
              24 -> emberAfInit
              24 -> emberAfMainInitCallback
              24 -> emberAfMainStartCallback
              24 -> emberAfPrint
              24 -> emberAfPrintln
              24 -> emberAfRunEvents
              24 -> emberAfTick
              24 -> emberCommandReaderInit
              24 -> emberInit
              24 -> emberProcessCommandString
              24 -> emberSerialBufferTick
              24 -> emberSerialInit
              24 -> emberSetTxPowerMode
              24 -> emberTick
              24 -> halGetExtendedResetInfo
              24 -> halGetExtendedResetString
              24 -> halGetResetInfo
              24 -> halGetResetString
              24 -> halInit
              24 -> halInternalAssertFailed
              24 -> halInternalResetWatchDog
              24 -> halPrintCrashData
              24 -> halPrintCrashDetails
              24 -> halPrintCrashSummary
              24 -> securityAddressCacheInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%p>">
      20  ?<Constant "%pemberInit 0x%x">
      24  ?<Constant "%pmsg too big (%d > %d)">
      20  ?<Constant "DoorSensor_SM6011">
       8  ?<Constant "ERROR: ">
      32  ?<Constant "Extended Reset info: ...">
      24  ?<Constant "Reset info: 0x%x (%p)">
      16  ?<Constant "af-main-soc.c">
      24  ?<Constant "delete binding: %x %x">
      12  ?<Constant "done: %x.">
      12  ?<Constant "init pass">
      12  ?<Constant "send %x %2x">
       4  ??DataTable18
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
       8  ?Subroutine0
       6  ?Subroutine1
      24  emAfCliVersionCommand
      56  emAfCopyMessageIntoRamBuffer
       6  emAfGetPacketBufferFreeCount
       4  emAfGetPacketBufferTotalCount
       2  emAfPrintEzspEndpointFlags
     104  emAfSend
      36  emberAfGetAddressIndex
       4  emberAfGetAddressTableSize
       4  emberAfGetBindingIndex
       4  emberAfGetBindingTableSize
      30  emberAfGetChildData
       4  emberAfGetChildTableSize
       8  emberAfGetEui64
       4  emberAfGetKeyTableSize
      14  emberAfGetMfgString
       4  emberAfGetNeighborTableSize
      22  emberAfGetNetworkParameters
       4  emberAfGetNodeId
       4  emberAfGetNodeType
       4  emberAfGetPanId
       4  emberAfGetRouteTableSize
       4  emberAfGetSecurityLevel
       4  emberAfGetSleepyMulticastConfig
       4  emberAfGetStackProfile
       4  emberAfNetworkState
      64  emberAfSendEndDeviceBind
      18  emberEnergyScanResultHandler
      42  emberGetEndpoint
      70  emberGetEndpointCluster
      72  emberGetEndpointDescription
      72  emberIncomingMessageHandler
      62  emberMessageSentHandler
      42  emberNetworkFoundHandler
      48  emberRemoteDeleteBindingHandler
      90  emberRemoteSetBindingHandler
      20  emberScanCompleteHandler
      20  emberStackStatusHandler
     298  main
       1  serialPort

 
     1 byte  in section .data
     4 bytes in section .rodata
 1 542 bytes in section .text
 
 1 542 bytes of CODE  memory
     4 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
