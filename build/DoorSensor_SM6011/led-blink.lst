###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:37 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\le #
#                    d-blink\led-blink.c                                      #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\le #
#                    d-blink\led-blink.c -D "GENERATED_TOKEN_HEADER=\"app/bui #
#                    lder/DoorSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D  #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"led-blink.c\"" -lC                  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\le #
#                    d-blink\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder #
#                    \DoorSensor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\ #
#                    app\builder\DoorSensor_SM6011\..\..\..\ -I               #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \led-blink.lst                                           #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \led-blink.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\led-blink\led-blink.c
      1          // ****** LED blinking code
      2          //
      3          // This code provides a few APIs:
      4          // emberAfLedOn( time )
      5          //       time:  the amount of time in seconds for the LED to be on.  
      6          //              will stay on if the time is 0.
      7          // emberAfLedOff( time )
      8          //       time:  the amount of time in seconds for the LED to be off.  
      9          //              will stay on if the time is 0.
     10          // emberAfLedBlink( count )
     11          //       count:  the number of times for the LED to blink.  0 means 
     12          //               keep blinking until further notice.
     13          
     14          #include "app/framework/include/af.h"
     15          #include "hal/micro/micro.h"
     16          // useful defines from led.c
     17          #define GPIO_PxCLR_BASE (GPIO_PACLR_ADDR)
     18          #define GPIO_PxSET_BASE (GPIO_PASET_ADDR)
     19          #define GPIO_PxOUT_BASE (GPIO_PAOUT_ADDR)
     20          // Each port is offset from the previous port by the same amount
     21          #define GPIO_Px_OFFSET  (GPIO_PBCFGL_ADDR-GPIO_PACFGL_ADDR)
     22          

   \                                 In section .bss, align 1
     23          int8u ledBlinkState;
   \                     ledBlinkState:
   \   00000000                      DS8 1
     24          
     25          //EmberEventControl ledEventControl;
     26          EmberEventControl emberAfPluginLedBlinkLedEventFunctionEventControl;
     27          
     28          #define ledEventControl emberAfPluginLedBlinkLedEventFunctionEventControl
     29          #define ledEventFunction emberAfPluginLedBlinkLedEventFunctionEventHandler
     30          
     31          void ledEventFunction( void );
     32          
     33          static int8u ledEventState = 0x00;
     34          static int8u ledBlinkCount = 0x00;
     35          static int16u ledBlinkTime;
     36          
     37          enum {
     38            LED_ON            = 0x00,
     39            LED_OFF           = 0x01,
     40            LED_BLINKING_ON   = 0x02,
     41            LED_BLINKING_OFF  = 0x03,
     42            LED_BLINK_PATTERN = 0x04,
     43          };
     44          
     45          extern int8u gpioOutPowerDown[];
     46          extern int8u gpioOutPowerUp[];
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void setBit(int8u *data, int8u bit)
     49          {
     50            int8u mask = 0x01 << bit;
     51          
     52            *data = *data | mask;
   \                     setBit:
   \   00000000   0x7802             LDRB     R2,[R0, #+0]
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0xFA03 0xF101      LSL      R1,R3,R1
   \   00000008   0x4311             ORRS     R1,R1,R2
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
     53          }
   \   0000000C   0x4770             BX       LR               ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void clearBit(int8u *data, int8u bit)
     56          {
     57            int8u mask = ~(0x01 << bit);
     58          
     59            *data = *data & mask;
   \                     clearBit:
   \   00000000   0x7802             LDRB     R2,[R0, #+0]
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0xFA03 0xF101      LSL      R1,R3,R1
   \   00000008   0xEA22 0x0101      BIC      R1,R2,R1
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
     60          }
   \   0000000E   0x4770             BX       LR               ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void emSleepySetGpio( int8u port, int8u pin )
     63          {
   \                     emSleepySetGpio:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine5
     64            assert( port < 3 );
   \                     ??CrossCallReturnLabel_17:
   \   00000006   0xD302             BCC.N    ??CrossCallReturnLabel_16
   \   00000008   0x2140             MOVS     R1,#+64
   \   0000000A   0x.... 0x....      BL       ?Subroutine4
     65            assert( pin < 8 );
   \                     ??CrossCallReturnLabel_16:
   \   0000000E   0x2D08             CMP      R5,#+8
   \   00000010   0xD302             BCC.N    ??CrossCallReturnLabel_15
   \   00000012   0x2141             MOVS     R1,#+65
   \   00000014   0x.... 0x....      BL       ?Subroutine4
     66          
     67            *((volatile int32u *)(GPIO_PxSET_BASE+(GPIO_Px_OFFSET*(port)))) = BIT(pin);
   \                     ??CrossCallReturnLabel_15:
   \   00000018   0x0260             LSLS     R0,R4,#+9
   \   0000001A   0x....             LDR.N    R1,??DataTable8  ;; 0x4000b010
   \   0000001C   0x.... 0x....      BL       ?Subroutine2
     68          
     69            // Make sure this stays set during the next power cycle
     70            setBit(&(gpioOutPowerUp[port]), pin);
   \                     ??CrossCallReturnLabel_6:
   \   00000020   0x.... 0x....      BL       setBit
     71            setBit(&(gpioOutPowerDown[port]), pin);
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x....             LDR.N    R0,??DataTable8_1
   \   00000028   0x1820             ADDS     R0,R4,R0
   \   0000002A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000002E   0x....             B.N      setBit
     72          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x.... 0x....      ADR.W    R6,`?<Constant "led-blink.c">`
   \   00000008   0x2C03             CMP      R4,#+3
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x4630             MOV      R0,R6
   \   00000002   0x.... 0x....      B.W      halInternalAssertFailed

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x40AA             LSLS     R2,R2,R5
   \   00000004   0x500A             STR      R2,[R1, R0]
   \   00000006   0x4629             MOV      R1,R5
   \   00000008   0x....             LDR.N    R0,??DataTable8_3
   \   0000000A   0x1820             ADDS     R0,R4,R0
   \   0000000C   0x4770             BX       LR
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void emSleepyClearGpio( int8u port, int8u pin )
     75          {
   \                     emSleepyClearGpio:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine5
     76            assert( port < 3 );
   \                     ??CrossCallReturnLabel_18:
   \   00000006   0xD302             BCC.N    ??CrossCallReturnLabel_14
   \   00000008   0x214C             MOVS     R1,#+76
   \   0000000A   0x.... 0x....      BL       ?Subroutine4
     77            assert( pin < 8 );
   \                     ??CrossCallReturnLabel_14:
   \   0000000E   0x2D08             CMP      R5,#+8
   \   00000010   0xD302             BCC.N    ??CrossCallReturnLabel_13
   \   00000012   0x214D             MOVS     R1,#+77
   \   00000014   0x.... 0x....      BL       ?Subroutine4
     78          
     79            *((volatile int32u *)(GPIO_PxCLR_BASE+(GPIO_Px_OFFSET*(port)))) = BIT(pin);
   \                     ??CrossCallReturnLabel_13:
   \   00000018   0x0260             LSLS     R0,R4,#+9
   \   0000001A   0x....             LDR.N    R1,??DataTable8_2  ;; 0x4000b014
   \   0000001C   0x.... 0x....      BL       ?Subroutine2
     80          
     81            // Make sure this stays clear during the next power cycle
     82            clearBit(&(gpioOutPowerUp[port]), pin);
   \                     ??CrossCallReturnLabel_7:
   \   00000020   0x.... 0x....      BL       clearBit
     83            clearBit(&(gpioOutPowerDown[port]), pin);
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x....             LDR.N    R0,??DataTable8_1
   \   00000028   0x1820             ADDS     R0,R4,R0
   \   0000002A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000002E   0x....             B.N      clearBit
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          static void turnLedOn( int8u led )
     87          {
     88            int8u port = (led) >> 3;
     89            int8u pin = (led) & 0x07;
     90          
     91            emSleepyClearGpio( port, pin );
   \                     turnLedOn:
   \   00000000   0xF000 0x0107      AND      R1,R0,#0x7
   \   00000004   0x08C0             LSRS     R0,R0,#+3
   \   00000006   0x....             B.N      emSleepyClearGpio
     92          
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          static void turnLedOff( int8u led )
     96          {
     97          
     98            int8u port = (led) >> 3;
     99            int8u pin = (led) & 0x07;
    100          
    101            emSleepySetGpio( port, pin );
   \                     turnLedOff:
   \   00000000   0xF000 0x0107      AND      R1,R0,#0x7
   \   00000004   0x08C0             LSRS     R0,R0,#+3
   \   00000006   0x....             B.N      emSleepySetGpio
    102          
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          void emberAfLedOn( int8u time )
    106          {
   \                     emberAfLedOn:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    107            turnLedOn(BOARDLED3);
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    108            ledEventState = LED_ON;
   \                     ??CrossCallReturnLabel_12:
   \   00000008   0x....             LDR.N    R0,??DataTable8_4
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    109          
    110            if(time > 0) {
   \   0000000E   0xB104             CBZ.N    R4,??emberAfLedOn_0
    111              emberEventControlSetDelayQS(ledEventControl,
    112                                          ((int16u) time) * 4);
   \   00000010   0x....             B.N      ?Subroutine0
    113            } else {
    114              emberEventControlSetInactive(ledEventControl);
   \                     ??emberAfLedOn_0:
   \   00000012   0x7101             STRB     R1,[R0, #+4]
    115            }
    116          }    
   \   00000014   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x00A1             LSLS     R1,R4,#+2
   \   00000002   0x1D00             ADDS     R0,R0,#+4
   \   00000004   0xE8BD 0x4010      POP      {R4,LR}
   \   00000008   0x.... 0x....      B.W      emEventControlSetDelayQS

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2015             MOVS     R0,#+21
   \   00000002   0x....             B.N      turnLedOn
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void emberAfLedOff( int8u time )
    119          {
   \                     emberAfLedOff:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    120            turnLedOff(BOARDLED3);
   \   00000004   0x.... 0x....      BL       ?Subroutine1
    121            ledEventState = LED_OFF;
   \                     ??CrossCallReturnLabel_5:
   \   00000008   0x....             LDR.N    R0,??DataTable8_4
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    122          
    123            if(time > 0) {
   \   0000000E   0xB104             CBZ.N    R4,??emberAfLedOff_0
    124              emberEventControlSetDelayQS(ledEventControl,
    125                                          ((int16u) time) * 4);
   \   00000010   0x....             B.N      ?Subroutine0
    126            } else {
    127              emberEventControlSetInactive(ledEventControl);
   \                     ??emberAfLedOff_0:
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x7101             STRB     R1,[R0, #+4]
    128            }
    129          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2015             MOVS     R0,#+21
   \   00000002   0x....             B.N      turnLedOff
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void emberAfLedBlink( int8u count, int16u blinkTime )
    132          {
   \                     emberAfLedBlink:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    133            ledBlinkTime = blinkTime;
   \   00000004   0x....             LDR.N    R5,??DataTable8_4
   \   00000006   0x81A9             STRH     R1,[R5, #+12]
    134          
    135            turnLedOff(BOARDLED3);
   \   00000008   0x.... 0x....      BL       ?Subroutine1
    136            ledEventState = LED_BLINKING_OFF;
   \                     ??CrossCallReturnLabel_4:
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0x7028             STRB     R0,[R5, #+0]
    137            emberEventControlSetDelayMS(ledEventControl,
    138                                        ledBlinkTime);
   \   00000010   0x89A9             LDRH     R1,[R5, #+12]
   \   00000012   0x1D28             ADDS     R0,R5,#+4
   \   00000014   0x.... 0x....      BL       emEventControlSetDelayMS
    139            ledBlinkCount = count;
   \   00000018   0x706C             STRB     R4,[R5, #+1]
    140          }
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 4
   \                     ledEventState:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
    141          
    142          int16u blinkPattern[20];
    143          int8u blinkPatternLength;
   \                     blinkPatternLength:
   \   00000002                      DS8 1
    144          int8u blinkPatternPointer;
   \                     blinkPatternPointer:
   \   00000003                      DS8 1
   \                     emberAfPluginLedBlinkLedEventFunctionEventControl:
   \   00000004                      DS8 8
   \   0000000C                      DS8 2
   \   0000000E                      DS8 2
   \                     blinkPattern:
   \   00000010                      DS8 40
    145          

   \                                 In section .text, align 2, keep-with-next
    146          void emberAfLedBlinkPattern( int8u count, int8u length, int16u *pattern )
    147          {
   \                     emberAfLedBlinkPattern:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4606             MOV      R6,R0
   \   00000004   0x460F             MOV      R7,R1
   \   00000006   0x4614             MOV      R4,R2
    148            int8u i;
    149          
    150            if(length < 2) {
   \   00000008   0x2F02             CMP      R7,#+2
   \   0000000A   0xD31A             BCC.N    ??emberAfLedBlinkPattern_0
    151              return;
    152            }
    153          
    154            turnLedOn(BOARDLED3);
   \   0000000C   0x.... 0x....      BL       ?Subroutine3
    155          
    156            ledEventState = LED_BLINK_PATTERN;
   \                     ??CrossCallReturnLabel_11:
   \   00000010   0x....             LDR.N    R5,??DataTable8_4
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x7028             STRB     R0,[R5, #+0]
    157          
    158            if(length > 20) {
   \   00000016   0x2F15             CMP      R7,#+21
   \   00000018   0xBF28             IT       CS 
   \   0000001A   0x2714             MOVCS    R7,#+20
    159              length = 20;
    160            }
    161          
    162            blinkPatternLength = length;
   \   0000001C   0x70AF             STRB     R7,[R5, #+2]
    163            ledBlinkCount = count;
   \   0000001E   0x706E             STRB     R6,[R5, #+1]
    164          
    165            for(i=0; i<blinkPatternLength; i++) {
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE005             B.N      ??emberAfLedBlinkPattern_1
    166              blinkPattern[i] = pattern[i];
   \                     ??emberAfLedBlinkPattern_2:
   \   00000024   0xEB05 0x0140      ADD      R1,R5,R0, LSL #+1
   \   00000028   0xF834 0x2010      LDRH     R2,[R4, R0, LSL #+1]
   \   0000002C   0x820A             STRH     R2,[R1, #+16]
    167            }
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \                     ??emberAfLedBlinkPattern_1:
   \   00000030   0x78A9             LDRB     R1,[R5, #+2]
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xDBF6             BLT.N    ??emberAfLedBlinkPattern_2
    168          
    169            emberEventControlSetDelayMS(ledEventControl,
    170                                        blinkPattern[0]);
   \   00000036   0x8A29             LDRH     R1,[R5, #+16]
   \   00000038   0x1D28             ADDS     R0,R5,#+4
   \   0000003A   0x.... 0x....      BL       emEventControlSetDelayMS
    171            
    172            blinkPatternPointer = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x70E8             STRB     R0,[R5, #+3]
    173          }
   \                     ??emberAfLedBlinkPattern_0:
   \   00000042   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    174          
    175          

   \                                 In section .text, align 2, keep-with-next
    176          void ledEventFunction( void )
    177          {
   \                     emberAfPluginLedBlinkLedEventFunctionEventHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    178            switch(ledEventState) {
   \   00000002   0x....             LDR.N    R4,??DataTable8_4
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0xB130             CBZ.N    R0,??emberAfPluginLedBlinkLedEventFunctionEventHan_0
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD00A             BEQ.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_1
   \   0000000C   0xD306             BCC.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_2
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD01E             BEQ.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_3
   \   00000012   0xD313             BCC.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_4
   \   00000014   0xBD10             POP      {R4,PC}
    179            case LED_ON:
    180              // was on.  this must be time to turn it off.
    181              turnLedOff(BOARDLED3);
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_0:
   \   00000016   0x.... 0x....      BL       ?Subroutine1
    182              emberEventControlSetInactive(ledEventControl);
   \                     ??CrossCallReturnLabel_3:
   \   0000001A   0xE01F             B.N      ??emberAfPluginLedBlinkLedEventFunctionEventHan_5
    183              break;
    184          
    185            case LED_OFF:
    186              // was on.  this must be time to turn it off.
    187              turnLedOn(BOARDLED3);
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_2:
   \   0000001C   0x.... 0x....      BL       ?Subroutine3
    188              emberEventControlSetInactive(ledEventControl);
   \                     ??CrossCallReturnLabel_10:
   \   00000020   0xE01C             B.N      ??emberAfPluginLedBlinkLedEventFunctionEventHan_5
    189              break;
    190          
    191            case LED_BLINKING_ON:
    192              turnLedOff(BOARDLED3);
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_1:
   \   00000022   0x.... 0x....      BL       ?Subroutine1
    193              if(ledBlinkCount > 0) {
   \                     ??CrossCallReturnLabel_2:
   \   00000026   0x7860             LDRB     R0,[R4, #+1]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xBF18             IT       NE 
   \   0000002C   0x28FF             CMPNE    R0,#+255
    194                if(ledBlinkCount != 255) { // blink forever if count is 255
   \   0000002E   0xD003             BEQ.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_6
    195                  ledBlinkCount --;
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0x7060             STRB     R0,[R4, #+1]
    196                }
    197                if (ledBlinkCount > 0) {
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0xB178             CBZ.N    R0,??CrossCallReturnLabel_1
    198                  ledEventState = LED_BLINKING_OFF;
    199                  emberEventControlSetDelayMS(ledEventControl,
    200                                              ledBlinkTime);
    201          
    202                } else {
    203                  ledEventState = LED_OFF;
    204                  emberEventControlSetInactive(ledEventControl);
    205                } 
    206              } else {
    207                ledEventState = LED_BLINKING_OFF;
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_6:
   \   00000038   0x2003             MOVS     R0,#+3
   \   0000003A   0xE002             B.N      ??emberAfPluginLedBlinkLedEventFunctionEventHan_7
    208                emberEventControlSetDelayMS(ledEventControl,
    209                                            ledBlinkTime);
    210              }
    211              break;
    212            case LED_BLINKING_OFF:
    213              turnLedOn(BOARDLED3);
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_4:
   \   0000003C   0x.... 0x....      BL       ?Subroutine3
    214              ledEventState = LED_BLINKING_ON;
   \                     ??CrossCallReturnLabel_9:
   \   00000040   0x2002             MOVS     R0,#+2
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_7:
   \   00000042   0x7020             STRB     R0,[R4, #+0]
    215              emberEventControlSetDelayMS(ledEventControl,
    216                                          ledBlinkTime);
   \   00000044   0x89A1             LDRH     R1,[R4, #+12]
   \   00000046   0x1D20             ADDS     R0,R4,#+4
   \   00000048   0xE8BD 0x4010      POP      {R4,LR}
   \   0000004C   0x.... 0x....      B.W      emEventControlSetDelayMS
    217              break;
    218            case LED_BLINK_PATTERN:
    219              if(ledBlinkCount == 0) {
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_3:
   \   00000050   0x7860             LDRB     R0,[R4, #+1]
   \   00000052   0xB930             CBNZ.N   R0,??emberAfPluginLedBlinkLedEventFunctionEventHan_8
    220                turnLedOff(BOARDLED3);
   \   00000054   0x.... 0x....      BL       ?Subroutine1
    221          
    222                ledEventState = LED_OFF;
   \                     ??CrossCallReturnLabel_1:
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x7020             STRB     R0,[R4, #+0]
    223                emberEventControlSetInactive(ledEventControl);
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_5:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x7120             STRB     R0,[R4, #+4]
    224          
    225                break;
   \   00000060   0xBD10             POP      {R4,PC}
    226              }
    227          
    228              if(blinkPatternPointer %2 == 1) {
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_8:
   \   00000062   0x78E0             LDRB     R0,[R4, #+3]
   \   00000064   0x07C0             LSLS     R0,R0,#+31
   \   00000066   0xD502             BPL.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_9
    229                turnLedOff(BOARDLED3);
   \   00000068   0x.... 0x....      BL       ?Subroutine1
    230              } else {
   \                     ??CrossCallReturnLabel_0:
   \   0000006C   0xE001             B.N      ??CrossCallReturnLabel_8
    231                turnLedOn(BOARDLED3);
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_9:
   \   0000006E   0x.... 0x....      BL       ?Subroutine3
    232              }
    233          
    234              emberEventControlSetDelayMS(ledEventControl,
    235                                        blinkPattern[blinkPatternPointer]);
   \                     ??CrossCallReturnLabel_8:
   \   00000072   0x78E0             LDRB     R0,[R4, #+3]
   \   00000074   0xEB04 0x0040      ADD      R0,R4,R0, LSL #+1
   \   00000078   0x8A01             LDRH     R1,[R0, #+16]
   \   0000007A   0x1D20             ADDS     R0,R4,#+4
   \   0000007C   0x.... 0x....      BL       emEventControlSetDelayMS
    236            
    237              blinkPatternPointer ++;
   \   00000080   0x78E0             LDRB     R0,[R4, #+3]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0x70E0             STRB     R0,[R4, #+3]
    238          
    239              if(blinkPatternPointer >= blinkPatternLength) {
   \   00000086   0x78A1             LDRB     R1,[R4, #+2]
   \   00000088   0xB2C0             UXTB     R0,R0
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD306             BCC.N    ??emberAfPluginLedBlinkLedEventFunctionEventHan_10
    240                blinkPatternPointer = 0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x70E0             STRB     R0,[R4, #+3]
    241          
    242                if(ledBlinkCount != 255) { // blink forever if count is 255
   \   00000092   0x7860             LDRB     R0,[R4, #+1]
   \   00000094   0x28FF             CMP      R0,#+255
   \   00000096   0xBF1C             ITT      NE 
   \   00000098   0x1E40             SUBNE    R0,R0,#+1
   \   0000009A   0x7060             STRBNE   R0,[R4, #+1]
    243                  ledBlinkCount --;
    244                } 
    245              }
    246          
    247            default:
    248              break;
    249            }
    250          }
   \                     ??emberAfPluginLedBlinkLedEventFunctionEventHan_10:
   \   0000009C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x4000B010         DC32     0x4000b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     gpioOutPowerDown

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4000B014         DC32     0x4000b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     gpioOutPowerUp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     ledEventState

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "led-blink.c">`:
   \   00000000   0x6C 0x65          DC8 "led-blink.c"
   \              0x64 0x2D    
   \              0x62 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  clearBit
       16  emSleepyClearGpio
              0 -> clearBit
             16 -> clearBit
             16 -> halInternalAssertFailed
       16  emSleepySetGpio
             16 -> halInternalAssertFailed
              0 -> setBit
             16 -> setBit
       16  emberAfLedBlink
             16 -> emEventControlSetDelayMS
             16 -> turnLedOff
       24  emberAfLedBlinkPattern
             24 -> emEventControlSetDelayMS
             24 -> turnLedOn
        8  emberAfLedOff
              0 -> emEventControlSetDelayQS
              8 -> turnLedOff
        8  emberAfLedOn
              0 -> emEventControlSetDelayQS
              8 -> turnLedOn
        8  emberAfPluginLedBlinkLedEventFunctionEventHandler
              0 -> emEventControlSetDelayMS
              8 -> emEventControlSetDelayMS
              8 -> turnLedOff
              8 -> turnLedOn
        0  setBit
        0  turnLedOff
              0 -> emSleepySetGpio
        0  turnLedOn
              0 -> emSleepyClearGpio


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "led-blink.c">
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
      12  ?Subroutine0
       4  ?Subroutine1
      14  ?Subroutine2
       4  ?Subroutine3
       6  ?Subroutine4
      12  ?Subroutine5
      16  clearBit
      48  emSleepyClearGpio
      48  emSleepySetGpio
      28  emberAfLedBlink
      68  emberAfLedBlinkPattern
      24  emberAfLedOff
      22  emberAfLedOn
     158  emberAfPluginLedBlinkLedEventFunctionEventHandler
       1  ledBlinkState
      56  ledEventState
          ledBlinkCount
          blinkPatternLength
          blinkPatternPointer
          emberAfPluginLedBlinkLedEventFunctionEventControl
          ledBlinkTime
          blinkPattern
      14  setBit
       8  turnLedOff
       8  turnLedOn

 
  57 bytes in section .bss
 526 bytes in section .text
 
 526 bytes of CODE memory
  57 bytes of DATA memory

Errors: none
Warnings: none
