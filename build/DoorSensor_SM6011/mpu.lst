###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:38:01 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\mpu. #
#                    c                                                        #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\mpu. #
#                    c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_SM #
#                    6011/DoorSensor_SM6011_tokens.h\"" -D                    #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"mpu.c\"" -lC                        #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \mpu.lst                                                 #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \mpu.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\mpu.c
      1          //=============================================================================
      2          // FILE
      3          //   mpu.c - Functions to setup and control the EM3588's MPU
      4          //
      5          // DESCRIPTION
      6          //   This file contains the definitions, data table and software used to
      7          //   setup the MPU.
      8          //
      9          //   Author:
     10          //   Copyright 2008-2011 by Ember Corporation. All rights reserved.         *80*
     11          //=============================================================================
     12          
     13          #include PLATFORM_HEADER
     14          #include "hal/micro/cortexm3/mpu.h"
     15          #include "hal/micro/micro.h"
     16          
     17          // Define MPU regions - note that the default vector table at address 0 and
     18          // the ARM PPB peripherals are always accessible in privileged mode.

   \                                 In section .data, align 4
     19          static mpu_t mpuConfig[NUM_MPU_REGIONS] =
   \                     mpuConfig:
   \   00000000   0x08000010         DC32 134217744, 101441575, 1073741841, 303038497, 1073774610, 319816477
   \              0x060BE027   
   \              0x40000011   
   \              0x12100021   
   \              0x40008012   
   \              0x1310031D   
   \   00000018   0x20000013         DC32 536870931, 319488029, 536870932, 269156360, 536870933, 319488018
   \              0x130B001D   
   \              0x20000014   
   \              0x100B0008   
   \              0x20000015   
   \              0x130B0012   
   \   00000030   0x20000016         DC32 536870934, 319488018, 536870935, 319488018
   \              0x130B0012   
   \              0x20000017   
   \              0x130B0012   
     20          {
     21            { MPU_REGION0_BASE, MPU_REGION0_ATTR },
     22            { MPU_REGION1_BASE, MPU_REGION1_ATTR },
     23            { MPU_REGION2_BASE, MPU_REGION2_ATTR },
     24            { MPU_REGION3_BASE, MPU_REGION3_ATTR },
     25            { MPU_REGION4_BASE, MPU_REGION4_ATTR },
     26            { MPU_REGION5_BASE, MPU_REGION5_ATTR },
     27            { MPU_REGION6_BASE, MPU_REGION6_ATTR },
     28            { MPU_REGION7_BASE, MPU_REGION7_ATTR }
     29          };
     30          
     31          // Load the base address and attributes of all 8 MPU regions, then enable
     32          // the MPU. Even though interrupts should be disabled when this function is
     33          // called, the region loading is performed in an atomic block in case they
     34          // are not disabled. After the regions have been defined, the MPU is enabled.
     35          // To be safe, memory barrier instructions are included to make sure that
     36          // the new MPU setup is in effect before returning to the caller.
     37          //
     38          // Note that the PRIVDEFENA bit is not set in the MPU_CTRL register so the 
     39          // default privileged memory map is not enabled. Disabling the default
     40          // memory map enables faults on core accesses (other than vector reads) to 
     41          // the address ranges shown below.
     42          //
     43          //  Address range
     44          //  Flash (ICODE and DCODE)
     45          //    00000000 to 07FFFFFF    no access allowed (read, write or execute)
     46          //    08000000 to 0809FFFF    write not allowed
     47          //    080A0000 to 1FFFFFFF    no access allowed (read, write or execute)
     48          //  SRAM
     49          //    20000000 to 2000FFFF    execute not allowed
     50          //    20010000 to 3FFFFFFF    no access allowed (read, write or execute)
     51          //  Peripheral
     52          //    40020000 to 5FFFFFFF    no access allowed (read, write or execute)
     53          //  External Device / External RAM
     54          //    60000000 to DFFFFFFF    no access allowed (read, write or execute)
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void halInternalEnableMPU(void)
     57          {
     58            halInternalLoadMPU(mpuConfig);
   \                     halInternalEnableMPU:
   \   00000000   0x....             LDR.N    R0,??DataTable2
   \   00000002                      REQUIRE halInternalLoadMPU
   \   00000002                      ;; // Fall through to label halInternalLoadMPU
     59          }
     60          

   \                                 In section .text, align 2, keep-with-next
     61          void halInternalLoadMPU(mpu_t *mp)
     62          {
   \                     halInternalLoadMPU:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     63            int8u i;
     64          
     65            ATOMIC (
     66              MPU_CTRL = 0;       // enable default map while MPU is updated
     67              for (i = 0; i < NUM_MPU_REGIONS; i++) {
     68                MPU_BASE = mp->base;
     69                MPU_ATTR = mp->attr;
     70                mp++;
     71              }
     72              MPU_CTRL = MPU_CTRL_ENABLE;
     73              _executeBarrierInstructions();
     74            )
   \   00000004   0x.... 0x....      BL       _disableBasePri
   \   00000008   0x4605             MOV      R5,R0
   \   0000000A   0x....             LDR.N    R0,??DataTable2_1  ;; 0xe000ed94
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6001             STR      R1,[R0, #+0]
   \   00000010   0x2108             MOVS     R1,#+8
   \                     ??halInternalLoadMPU_0:
   \   00000012   0xF854 0x2B04      LDR      R2,[R4], #+4
   \   00000016   0x6082             STR      R2,[R0, #+8]
   \   00000018   0xF854 0x2B04      LDR      R2,[R4], #+4
   \   0000001C   0x60C2             STR      R2,[R0, #+12]
   \   0000001E   0x1E49             SUBS     R1,R1,#+1
   \   00000020   0xD1F7             BNE.N    ??halInternalLoadMPU_0
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x6001             STR      R1,[R0, #+0]
   \   00000026   0x.... 0x....      BL       _executeBarrierInstructions
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x....             B.N      ?Subroutine0
     75          
     76          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000004   0x.... 0x....      B.W      _writeBasePri
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void halInternalDisableMPU(void)
     79          {
     80            MPU_CTRL = 0;
   \                     halInternalDisableMPU:
   \   00000000   0x....             LDR.N    R0,??DataTable2_1  ;; 0xe000ed94
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
     81            _executeBarrierInstructions();
   \   00000006   0x.... 0x....      B.W      _executeBarrierInstructions
     82          }
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void halInternalSetMPUGuardRegionStart(int32u baseAddress)
     85          {
   \                     halInternalSetMPUGuardRegionStart:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     86            int32u attr = GUARD_REGION_ATTR_EN;
   \   00000002   0x....             LDR.N    R4,??DataTable2_2  ;; 0x100b0009
     87          
     88            // Clear the lower 5 bits of the base address to be sure that it's
     89            // properly aligned
     90            baseAddress &= 0xFFFFFFE0;
   \   00000004   0x0945             LSRS     R5,R0,#+5
   \   00000006   0x016D             LSLS     R5,R5,#+5
     91          
     92            // If the base address is below the reset info then something weird is
     93            // going on so just turn off the guard region
     94            if(baseAddress < (int32u)RESETINFO_SEGMENT_END) {
   \   00000008   0x....             LDR.N    R0,??DataTable2_3
   \   0000000A   0x4285             CMP      R5,R0
   \   0000000C   0xBF38             IT       CC 
   \   0000000E   0x....             LDRCC.N  R4,??DataTable2_4  ;; 0x100b0008
     95              attr = GUARD_REGION_ATTR_DIS;
     96            }
     97          
     98            // Add in the guard region number so the MPU knows which region to configure
     99            baseAddress |= GUARD_REGION & 0x0000001F;
    100          
    101            // Set the base address for the MPU guard region
    102            ATOMIC(
    103              mpuConfig[GUARD_REGION & 0xF].base = baseAddress;
    104              mpuConfig[GUARD_REGION & 0xF].attr = attr;
    105              );
   \   00000010   0x.... 0x....      BL       _disableBasePri
   \   00000014   0x....             LDR.N    R1,??DataTable2
   \   00000016   0xF045 0x0214      ORR      R2,R5,#0x14
   \   0000001A   0x620A             STR      R2,[R1, #+32]
   \   0000001C   0x624C             STR      R4,[R1, #+36]
   \   0000001E                      REQUIRE ?Subroutine0
   \   0000001E                      ;; // Fall through to label ?Subroutine0
    106          }
    107          

   \                                 In section .text, align 2, keep-with-next
    108          boolean halInternalIAmAnEmulator(void)
    109          {
   \                     halInternalIAmAnEmulator:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    110            boolean retval;
    111          
    112            ATOMIC(
    113              MPU_CTRL = 0;
    114              _executeBarrierInstructions();
    115              retval =  ((I_AM_AN_EMULATOR & 1) == 1);
    116              MPU_CTRL = MPU_CTRL_ENABLE;
    117              _executeBarrierInstructions();
    118            )
   \   00000002   0x.... 0x....      BL       _disableBasePri
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x....             LDR.N    R5,??DataTable2_1  ;; 0xe000ed94
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6028             STR      R0,[R5, #+0]
   \   0000000E   0x.... 0x....      BL       _executeBarrierInstructions
   \   00000012   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40009000
   \   00000014   0x6806             LDR      R6,[R0, #+0]
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x6028             STR      R0,[R5, #+0]
   \   0000001A   0x.... 0x....      BL       _executeBarrierInstructions
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       _writeBasePri
    119            return retval;
   \   00000024   0xF006 0x0001      AND      R0,R6,#0x1
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    120          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     mpuConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000ED94         DC32     0xe000ed94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x100B0009         DC32     0x100b0009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     SFE(RESETINFO)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x100B0008         DC32     0x100b0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40009000         DC32     0x40009000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  halInternalDisableMPU
              0 -> _executeBarrierInstructions
        0  halInternalEnableMPU
              0 -> halInternalLoadMPU
       16  halInternalIAmAnEmulator
             16 -> _disableBasePri
             16 -> _executeBarrierInstructions
             16 -> _writeBasePri
       16  halInternalLoadMPU
             16 -> _disableBasePri
             16 -> _executeBarrierInstructions
              0 -> _writeBasePri
       16  halInternalSetMPUGuardRegionStart
             16 -> _disableBasePri
              0 -> _writeBasePri


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       8  ?Subroutine0
      10  halInternalDisableMPU
       2  halInternalEnableMPU
      42  halInternalIAmAnEmulator
      46  halInternalLoadMPU
      30  halInternalSetMPUGuardRegionStart
      64  mpuConfig

 
  64 bytes in section .data
 162 bytes in section .text
 
 162 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: none
