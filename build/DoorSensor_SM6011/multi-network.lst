###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:38:02 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\mult #
#                    i-network.c                                              #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\mult #
#                    i-network.c -D "GENERATED_TOKEN_HEADER=\"app/builder/Doo #
#                    rSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D          #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"multi-network.c\"" -lC              #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \multi-network.lst                                       #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \multi-network.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\multi-network.c
      1          // *******************************************************************
      2          // * multi-network.c
      3          // *
      4          // *
      5          // * Copyright 2012 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "app/framework/include/af.h"
      9          

   \                                 In section .bss, align 4
     10          const EmAfNetwork *emAfCurrentNetwork = NULL;
   \                     emAfCurrentNetwork:
   \   00000000                      DS8 4
     11          
     12          //#define NETWORK_INDEX_DEBUG
     13          #if defined(EMBER_TEST) || defined(NETWORK_INDEX_DEBUG)
     14            #define NETWORK_INDEX_ASSERT(x) assert(x)
     15          #else
     16            #define NETWORK_INDEX_ASSERT(x)
     17          #endif
     18          
     19          #if EMBER_SUPPORTED_NETWORKS == 1

   \                                 In section .text, align 2, keep-with-next
     20          EmberStatus emAfInitializeNetworkIndexStack(void)
     21          {
     22            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     23            NETWORK_INDEX_ASSERT(EMBER_AF_DEFAULT_NETWORK_INDEX == 0);
     24            emAfCurrentNetwork = &emAfNetworks[0];
   \                     emAfInitializeNetworkIndexStack:
   \   00000000   0x....             LDR.N    R0,??DataTable1
   \   00000002   0x....             LDR.N    R1,??DataTable1_1
   \   00000004   0x6001             STR      R1,[R0, #+0]
     25            return EMBER_SUCCESS;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
     26          }
     27          

   \                                 In section .text, align 2, keep-with-next
     28          EmberStatus emberAfPushNetworkIndex(int8u networkIndex)
     29          {
     30            NETWORK_INDEX_ASSERT(networkIndex == 0);
     31            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     32            return (networkIndex == 0 ? EMBER_SUCCESS : EMBER_INVALID_CALL);
   \                     emberAfPushNetworkIndex:
   \   00000000   0xB100             CBZ.N    R0,??emberAfPushNetworkIndex_0
   \   00000002   0x2070             MOVS     R0,#+112
   \                     ??emberAfPushNetworkIndex_0:
   \   00000004   0x4770             BX       LR               ;; return
     33          }
     34          

   \                                 In section .text, align 2, keep-with-next
     35          EmberStatus emberAfPushCallbackNetworkIndex(void)
     36          {
     37            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     38            NETWORK_INDEX_ASSERT(emberGetCallbackNetwork() == 0);
     39            return EMBER_SUCCESS;
   \                     emberAfPushCallbackNetworkIndex:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     40          }
     41          

   \                                 In section .text, align 2, keep-with-next
     42          EmberStatus emberAfPushEndpointNetworkIndex(int8u endpoint)
     43          {
   \                     emberAfPushEndpointNetworkIndex:
   \   00000000   0xB580             PUSH     {R7,LR}
     44            int8u networkIndex = emberAfNetworkIndexFromEndpoint(endpoint);
     45            NETWORK_INDEX_ASSERT(networkIndex != 0xFF);
     46            if (networkIndex == 0xFF) {
   \   00000002   0x.... 0x....      BL       emberAfNetworkIndexFromEndpoint
   \   00000006   0x28FF             CMP      R0,#+255
   \   00000008   0xD101             BNE.N    ??emberAfPushEndpointNetworkIndex_0
     47              return EMBER_INVALID_ENDPOINT;
   \   0000000A   0x20A3             MOVS     R0,#+163
   \   0000000C   0xBD02             POP      {R1,PC}
     48            }
     49            NETWORK_INDEX_ASSERT(networkIndex == 0);
     50            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     51            return EMBER_SUCCESS;
   \                     ??emberAfPushEndpointNetworkIndex_0:
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
     52          }
     53          

   \                                 In section .text, align 2, keep-with-next
     54          EmberStatus emberAfPopNetworkIndex(void)
     55          {
     56            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     57            return EMBER_SUCCESS;
   \                     emberAfPopNetworkIndex:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void emAfAssertNetworkIndexStackIsEmpty(void)
     61          {
     62            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     63          }
   \                     emAfAssertNetworkIndexStackIsEmpty:
   \   00000000   0x4770             BX       LR               ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          int8u emberAfPrimaryEndpointForNetworkIndex(int8u networkIndex)
     66          {
     67            NETWORK_INDEX_ASSERT(networkIndex == 0);
     68            return (networkIndex == 0 ? emberAfPrimaryEndpoint() : 0xFF);
   \                     emberAfPrimaryEndpointForNetworkIndex:
   \   00000000   0xB900             CBNZ.N   R0,??emberAfPrimaryEndpointForNetworkIndex_0
   \   00000002   0x....             B.N      ?Subroutine0
   \                     ??emberAfPrimaryEndpointForNetworkIndex_0:
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x4770             BX       LR               ;; return
     69          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x....             LDR.N    R0,??DataTable1_2
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR
     70          

   \                                 In section .text, align 2, keep-with-next
     71          int8u emberAfPrimaryEndpointForCurrentNetworkIndex(void)
   \                     emberAfPrimaryEndpointForCurrentNetworkIndex:
   \   00000000   0xBF00             Nop      
     72          {
     73            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     74            return emberAfPrimaryEndpoint();
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
     75          }
     76          

   \                                 In section .text, align 2, keep-with-next
     77          int8u emberAfNetworkIndexFromEndpoint(int8u endpoint)
     78          {
   \                     emberAfNetworkIndexFromEndpoint:
   \   00000000   0xB580             PUSH     {R7,LR}
     79            int8u index = emberAfIndexFromEndpoint(endpoint);
     80            NETWORK_INDEX_ASSERT(index != 0xFF);
     81            if (index == 0xFF) {
   \   00000002   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   00000006   0x28FF             CMP      R0,#+255
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x2000             MOVNE    R0,#+0
     82              return 0xFF;
     83            }
     84            NETWORK_INDEX_ASSERT(emberAfNetworkIndexFromEndpointIndex(index) == 0);
     85            return 0;
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
     86          }
     87          

   \                                 In section .text, align 2, keep-with-next
     88          void emberAfNetworkEventControlSetInactive(EmberEventControl *controls)
     89          {
     90            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     91            emberEventControlSetInactive(controls[0]);
   \                     emberAfNetworkEventControlSetInactive:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     92          }
   \   00000004   0x4770             BX       LR               ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          boolean emberAfNetworkEventControlGetActive(EmberEventControl *controls)
     95          {
     96            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
     97            return emberEventControlGetActive(controls[0]);
   \                     emberAfNetworkEventControlGetActive:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0xB100             CBZ.N    R0,??emberAfNetworkEventControlGetActive_0
   \   00000004   0x2001             MOVS     R0,#+1
   \                     ??emberAfNetworkEventControlGetActive_0:
   \   00000006   0x4770             BX       LR               ;; return
     98          }
     99          

   \                                 In section .text, align 2, keep-with-next
    100          void emberAfNetworkEventControlSetActive(EmberEventControl *controls)
    101          {
    102            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    103            emberEventControlSetActive(controls[0]);
   \                     emberAfNetworkEventControlSetActive:
   \   00000000   0x.... 0x....      B.W      emEventControlSetActive
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          EmberStatus emberAfNetworkEventControlSetDelay(EmberEventControl *controls, int32u timeMs)
    107          {
    108            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    109            return emberAfEventControlSetDelay(&controls[0], timeMs);
   \                     emberAfNetworkEventControlSetDelay:
   \   00000000   0x.... 0x....      B.W      emberAfEventControlSetDelay
    110          }
    111          

   \                                 In section .text, align 2, keep-with-next
    112          void emberAfNetworkEventControlSetDelayMS(EmberEventControl *controls, int16u delay)
    113          {
    114            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    115            emberEventControlSetDelayMS(controls[0], delay);
   \                     emberAfNetworkEventControlSetDelayMS:
   \   00000000   0x.... 0x....      B.W      emEventControlSetDelayMS
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void emberAfNetworkEventControlSetDelayQS(EmberEventControl *controls, int16u delay)
    119          {
    120            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    121            emberEventControlSetDelayQS(controls[0], delay);
   \                     emberAfNetworkEventControlSetDelayQS:
   \   00000000   0x.... 0x....      B.W      emEventControlSetDelayQS
    122          }
    123          

   \                                 In section .text, align 2, keep-with-next
    124          void emberAfNetworkEventControlSetDelayMinutes(EmberEventControl *controls, int16u delay)
    125          {
    126            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == 0);
    127            emberEventControlSetDelayMinutes(controls[0], delay);
   \                     emberAfNetworkEventControlSetDelayMinutes:
   \   00000000   0x.... 0x....      B.W      emEventControlSetDelayMinutes
    128          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     emAfCurrentNetwork

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     emAfNetworks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     emAfEndpoints
    129          
    130          #else
    131          
    132          // We use two bits to describe a network index and sixteen bits to store our
    133          // stack of network indices.  This limits us to a maximum of four networks
    134          // indices and a maximum of eight in our stack.  We also remember one default
    135          // network that we resort to when our stack is empty.
    136          static int16u networkIndexStack = 0;
    137          static int8u networkIndices = 0;
    138          #define NETWORK_INDEX_BITS       2
    139          #define NETWORK_INDEX_MAX        (1 << NETWORK_INDEX_BITS)
    140          #define NETWORK_INDEX_MASK       (NETWORK_INDEX_MAX - 1)
    141          #define NETWORK_INDEX_STACK_SIZE (sizeof(networkIndexStack) * 8 / NETWORK_INDEX_BITS)
    142          
    143          static EmberStatus setCurrentNetwork(void)
    144          {
    145            EmberStatus status;
    146            int8u networkIndex = (networkIndices == 0
    147                                  ? EMBER_AF_DEFAULT_NETWORK_INDEX
    148                                  : networkIndexStack & NETWORK_INDEX_MASK);
    149            status = emberSetCurrentNetwork(networkIndex);
    150            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    151            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == networkIndex);
    152            if (status == EMBER_SUCCESS) {
    153              emAfCurrentNetwork = &emAfNetworks[networkIndex];
    154            }
    155            return status;
    156          }
    157          
    158          EmberStatus emAfInitializeNetworkIndexStack(void)
    159          {
    160            EmberStatus status;
    161            NETWORK_INDEX_ASSERT(networkIndices == 0);
    162            if (networkIndices != 0) {
    163              return EMBER_INVALID_CALL;
    164            }
    165            status = setCurrentNetwork();
    166            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    167            NETWORK_INDEX_ASSERT(networkIndices == 0);
    168            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == EMBER_AF_DEFAULT_NETWORK_INDEX);
    169            return status;
    170          }
    171          
    172          EmberStatus emberAfPushNetworkIndex(int8u networkIndex)
    173          {
    174            EmberStatus status;
    175            NETWORK_INDEX_ASSERT(networkIndex < NETWORK_INDEX_MAX);
    176            if (NETWORK_INDEX_MAX <= networkIndex) {
    177              return EMBER_INDEX_OUT_OF_RANGE;
    178            }
    179            NETWORK_INDEX_ASSERT(networkIndices < NETWORK_INDEX_STACK_SIZE);
    180            if (NETWORK_INDEX_STACK_SIZE <= networkIndices) {
    181              return EMBER_TABLE_FULL;
    182            }
    183            networkIndexStack <<= NETWORK_INDEX_BITS;
    184            networkIndexStack |= networkIndex;
    185            networkIndices++;
    186            status = setCurrentNetwork();
    187            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    188            NETWORK_INDEX_ASSERT(0 < networkIndices);
    189            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == networkIndex);
    190            return status;
    191          }
    192          
    193          EmberStatus emberAfPushCallbackNetworkIndex(void)
    194          {
    195            EmberStatus status = emberAfPushNetworkIndex(emberGetCallbackNetwork());
    196            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    197            NETWORK_INDEX_ASSERT(0 < networkIndices);
    198            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == emberGetCallbackNetwork());
    199            return status;
    200          }
    201          
    202          EmberStatus emberAfPushEndpointNetworkIndex(int8u endpoint)
    203          {
    204            EmberStatus status;
    205            int8u networkIndex = emberAfNetworkIndexFromEndpoint(endpoint);
    206            NETWORK_INDEX_ASSERT(networkIndex != 0xFF);
    207            if (networkIndex == 0xFF) {
    208              return EMBER_INVALID_ENDPOINT;
    209            }
    210            status = emberAfPushNetworkIndex(networkIndex);
    211            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    212            NETWORK_INDEX_ASSERT(0 < networkIndices);
    213            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == networkIndex);
    214            return status;
    215          }
    216          
    217          EmberStatus emberAfPopNetworkIndex(void)
    218          {
    219            EmberStatus status;
    220            NETWORK_INDEX_ASSERT(0 < networkIndices);
    221            if (networkIndices == 0) {
    222              return EMBER_INVALID_CALL;
    223            }
    224            networkIndexStack >>= NETWORK_INDEX_BITS;
    225            networkIndices--;
    226            status = setCurrentNetwork();
    227            NETWORK_INDEX_ASSERT(status == EMBER_SUCCESS);
    228            return status;
    229          }
    230          
    231          void emAfAssertNetworkIndexStackIsEmpty(void)
    232          {
    233            NETWORK_INDEX_ASSERT(networkIndices == 0);
    234            NETWORK_INDEX_ASSERT(emberGetCurrentNetwork() == EMBER_AF_DEFAULT_NETWORK_INDEX);
    235          }
    236          
    237          int8u emberAfPrimaryEndpointForNetworkIndex(int8u networkIndex)
    238          {
    239            int8u i;
    240            NETWORK_INDEX_ASSERT(networkIndex < NETWORK_INDEX_MAX);
    241            for (i = 0; i < emberAfEndpointCount(); i++) {
    242              if (emberAfNetworkIndexFromEndpointIndex(i) == networkIndex) {
    243                return emberAfEndpointFromIndex(i);
    244              }
    245            }
    246            return 0xFF;
    247          }
    248          
    249          int8u emberAfPrimaryEndpointForCurrentNetworkIndex(void)
    250          {
    251            return emberAfPrimaryEndpointForNetworkIndex(emberGetCurrentNetwork());
    252          }
    253          
    254          int8u emberAfNetworkIndexFromEndpoint(int8u endpoint)
    255          {
    256            int8u index = emberAfIndexFromEndpoint(endpoint);
    257            NETWORK_INDEX_ASSERT(index != 0xFF);
    258            return (index == 0xFF ? 0xFF : emberAfNetworkIndexFromEndpointIndex(index));
    259          }
    260          
    261          void emberAfNetworkEventControlSetInactive(EmberEventControl *controls)
    262          {
    263            EmberEventControl *control = controls + emberGetCurrentNetwork();
    264            emberEventControlSetInactive(*control);
    265          }
    266          
    267          boolean emberAfNetworkEventControlGetActive(EmberEventControl *controls)
    268          {
    269            EmberEventControl *control = controls + emberGetCurrentNetwork();
    270            return emberEventControlGetActive(*control);
    271          }
    272          
    273          void emberAfNetworkEventControlSetActive(EmberEventControl *controls)
    274          {
    275            EmberEventControl *control = controls + emberGetCurrentNetwork();
    276            emberEventControlSetActive(*control);
    277          }
    278          
    279          EmberStatus emberAfNetworkEventControlSetDelay(EmberEventControl *controls, int32u timeMs)
    280          {
    281            EmberEventControl *control = controls + emberGetCurrentNetwork();
    282            return emberAfEventControlSetDelay(control, timeMs);
    283          }
    284          
    285          void emberAfNetworkEventControlSetDelayMS(EmberEventControl *controls, int16u delay)
    286          {
    287            EmberEventControl *control = controls + emberGetCurrentNetwork();
    288            emberEventControlSetDelayMS(*control, delay);
    289          }
    290          
    291          void emberAfNetworkEventControlSetDelayQS(EmberEventControl *controls, int16u delay)
    292          {
    293            EmberEventControl *control = controls + emberGetCurrentNetwork();
    294            emberEventControlSetDelayQS(*control, delay);
    295          }
    296          
    297          void emberAfNetworkEventControlSetDelayMinutes(EmberEventControl *controls, int16u delay)
    298          {
    299            EmberEventControl *control = controls + emberGetCurrentNetwork();
    300            emberEventControlSetDelayMinutes(*control, delay);
    301          }
    302          
    303          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  emAfAssertNetworkIndexStackIsEmpty
        0  emAfInitializeNetworkIndexStack
        0  emberAfNetworkEventControlGetActive
        0  emberAfNetworkEventControlSetActive
             0 -> emEventControlSetActive
        0  emberAfNetworkEventControlSetDelay
             0 -> emberAfEventControlSetDelay
        0  emberAfNetworkEventControlSetDelayMS
             0 -> emEventControlSetDelayMS
        0  emberAfNetworkEventControlSetDelayMinutes
             0 -> emEventControlSetDelayMinutes
        0  emberAfNetworkEventControlSetDelayQS
             0 -> emEventControlSetDelayQS
        0  emberAfNetworkEventControlSetInactive
        8  emberAfNetworkIndexFromEndpoint
             8 -> emberAfIndexFromEndpoint
        0  emberAfPopNetworkIndex
        0  emberAfPrimaryEndpointForCurrentNetworkIndex
        0  emberAfPrimaryEndpointForNetworkIndex
        0  emberAfPushCallbackNetworkIndex
        8  emberAfPushEndpointNetworkIndex
             8 -> emberAfNetworkIndexFromEndpoint
        0  emberAfPushNetworkIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       6  ?Subroutine0
       2  emAfAssertNetworkIndexStackIsEmpty
       4  emAfCurrentNetwork
      10  emAfInitializeNetworkIndexStack
       8  emberAfNetworkEventControlGetActive
       4  emberAfNetworkEventControlSetActive
       4  emberAfNetworkEventControlSetDelay
       4  emberAfNetworkEventControlSetDelayMS
       4  emberAfNetworkEventControlSetDelayMinutes
       4  emberAfNetworkEventControlSetDelayQS
       6  emberAfNetworkEventControlSetInactive
      14  emberAfNetworkIndexFromEndpoint
       4  emberAfPopNetworkIndex
       2  emberAfPrimaryEndpointForCurrentNetworkIndex
       8  emberAfPrimaryEndpointForNetworkIndex
       4  emberAfPushCallbackNetworkIndex
      18  emberAfPushEndpointNetworkIndex
       6  emberAfPushNetworkIndex

 
   4 bytes in section .bss
 120 bytes in section .text
 
 120 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
