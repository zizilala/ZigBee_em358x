###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:25 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\ #
#                    crypto-state.c                                           #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\ #
#                    crypto-state.c -D "GENERATED_TOKEN_HEADER=\"app/builder/ #
#                    DoorSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D       #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"crypto-state.c\"" -lC               #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\ #
#                     -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSen #
#                    sor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\buil #
#                    der\DoorSensor_SM6011\..\..\..\ -I                       #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \crypto-state.lst                                        #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \crypto-state.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\crypto-state.c
      1          // *****************************************************************************
      2          // * crypto-state.c
      3          // *
      4          // * This file records the state of crypto operations so that the application
      5          // * can defer processing until after crypto operations have completed.
      6          // *
      7          // * Copyright 2010 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          
     11          #include "app/framework/util/common.h"
     12          #include "crypto-state.h"
     13          
     14          //------------------------------------------------------------------------------
     15          

   \                                 In section .data, align 4
     16          static EmAfCryptoStatus cryptoStatus = EM_AF_NO_CRYPTO_OPERATION;
   \                     cryptoStatus:
   \   00000000   0x00               DC8 0
   \   00000001   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000004   0x........         DC32 `?<Constant "No operation">`
   \   00000008   0x........         DC32 `?<Constant "Operation in progress">`, 0H
   \              0x00000000   
     17          #if defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_SECURITY)
     18          static PGM_P cryptoStatusText[] = EM_AF_CRYPTO_STATUS_TEXT;
     19          #endif //defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_SECURITY)
     20          
     21          
     22          // If we are on a host micro, there is the possibility that a crypto
     23          // operation ends on the NCP and we fail to hear about it, in this case
     24          // we need a timeout to safeguard against this flag getting locked
     25          #if defined(EZSP_HOST)
     26          EmberEventControl emAfCryptoOperationTimeoutEventControl;
     27          void emAfCryptoOperationTimeoutEvent(void) {
     28            if (cryptoStatus == EM_AF_CRYPTO_OPERATION_IN_PROGRESS)
     29              emAfSetCryptoStatus(EM_AF_NO_CRYPTO_OPERATION);
     30          }
     31          EmberEventData emAfCryptoEvents[] = {
     32            {&emAfCryptoOperationTimeoutEventControl, emAfCryptoOperationTimeoutEvent},
     33            {NULL, NULL}
     34          };
     35          #endif //EZSP_HOST
     36          
     37          
     38          
     39          
     40          //------------------------------------------------------------------------------
     41          

   \                                 In section .text, align 2, keep-with-next
     42          EmAfCryptoStatus emAfGetCryptoStatus(void)
     43          {
     44          #if defined(EZSP_HOST)
     45            // Everytime someone asks for the crypto state, we check our
     46            // crypto timeout
     47            emberRunEvents(emAfCryptoEvents);
     48          #endif //EZSP_HOST
     49          
     50            return cryptoStatus;
   \                     emAfGetCryptoStatus:
   \   00000000   0x....             LDR.N    R0,??DataTable4
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     51          }
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void emAfSetCryptoStatus(EmAfCryptoStatus newStatus)
     54          {
     55            cryptoStatus = newStatus;
   \                     emAfSetCryptoStatus:
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x7008             STRB     R0,[R1, #+0]
     56            emberAfSecurityPrintln("Crypto state: %p", cryptoStatusText[cryptoStatus]);
   \   00000004   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   00000008   0x6842             LDR      R2,[R0, #+4]
   \   0000000A   0x.... 0x....      ADR.W    R1,`?<Constant "Crypto state: %p">`
   \   0000000E   0x2008             MOVS     R0,#+8
   \   00000010   0x.... 0x....      B.W      emberAfPrintln
     57          
     58          #if defined(EZSP_HOST)
     59            // If crypto is starting, we set the timeout, otherwise we cancel it.
     60            if (cryptoStatus == EM_AF_CRYPTO_OPERATION_IN_PROGRESS)
     61              emberEventControlSetDelayMS(emAfCryptoOperationTimeoutEventControl, 
     62          				CRYPTO_OPERATION_TIMEOUT_MS);
     63            else
     64              emberEventControlSetInactive(emAfCryptoOperationTimeoutEventControl);
     65          #endif //EZSP_HOST
     66          
     67          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     cryptoStatus

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Crypto state: %p">`:
   \   00000000   0x43 0x72          DC8 "Crypto state: %p"
   \              0x79 0x70    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "No operation">`:
   \   00000000   0x4E 0x6F          DC8 "No operation"
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Operation in progress">`:
   \   00000000   0x4F 0x70          DC8 "Operation in progress"
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x69 0x6E    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x65 0x73    
   \              0x73 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  emAfGetCryptoStatus
        0  emAfSetCryptoStatus
             0 -> emberAfPrintln


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "Crypto state: %p">
      16  ?<Constant "No operation">
      24  ?<Constant "Operation in progress">
       4  ??DataTable4
      16  cryptoStatus
          cryptoStatusText
       6  emAfGetCryptoStatus
      20  emAfSetCryptoStatus

 
 16 bytes in section .data
 40 bytes in section .rodata
 50 bytes in section .text
 
 50 bytes of CODE  memory
 40 bytes of CONST memory
 16 bytes of DATA  memory

Errors: none
Warnings: none
