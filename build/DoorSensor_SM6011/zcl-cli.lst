###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:54:02 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\zcl-c #
#                    li.c                                                     #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\zcl-c #
#                    li.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor #
#                    _SM6011/DoorSensor_SM6011_tokens.h\"" -D                 #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"zcl-cli.c\"" -lC                    #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\ -I   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \zcl-cli.lst                                             #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \zcl-cli.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\zcl-cli.c
      1          // *******************************************************************
      2          // * zcl-cli.c
      3          // *
      4          // *
      5          // * Copyright 2013 Silicon Laboratories, Inc.                              *80*
      6          // *******************************************************************
      7          
      8          // common include file
      9          #include "app/framework/util/common.h"
     10          
     11          #include "app/framework/util/af-main.h"
     12          #include "app/framework/util/attribute-storage.h"
     13          #include "app/framework/util/service-discovery.h"
     14          
     15          #include "app/util/serial/command-interpreter2.h"
     16          #include "app/framework/cli/security-cli.h"
     17          
     18          #include "app/util/common/library.h"
     19          
     20          #ifdef EZSP_HOST
     21            // the EM260 host needs to include the config file
     22            #include "app/framework/util/config.h"
     23          #endif
     24          
     25          //------------------------------------------------------------------------------
     26          // Globals
     27          
     28          // EMBER_AF_MAXIMUM_SEND_PAYLOAD_LENGTH is set in config.h
     29          #define APP_ZCL_BUFFER_SIZE EMBER_AF_MAXIMUM_SEND_PAYLOAD_LENGTH
     30          
     31          // The command-interpreter doesn't handle individual arguments longer than
     32          // 255 bytes (since it is uses a 1-byte max-length value
     33          #define APP_ZCL_BUFFER_SIZE_CLI \
     34            (APP_ZCL_BUFFER_SIZE > 255    \
     35             ? 255                        \
     36             : APP_ZCL_BUFFER_SIZE)
     37          

   \                                 In section .bss, align 4
     38          int8u appZclBuffer[APP_ZCL_BUFFER_SIZE];
   \                     appZclBuffer:
   \   00000000                      DS8 84

   \                                 In section .bss, align 4
     39          int16u appZclBufferLen;
     40          boolean zclCmdIsBuilt = FALSE;
     41          
     42          int16u mfgSpecificId = EMBER_AF_NULL_MANUFACTURER_CODE;
     43          EmberApsFrame globalApsFrame;
   \                     globalApsFrame:
   \   00000000                      DS8 12
   \                     zclCmdIsBuilt:
   \   0000000C                      DS8 1
   \   0000000D                      DS8 1
   \                     appZclBufferLen:
   \   0000000E                      DS8 2
   \                     mfgSpecificId:
   \   00000010                      DS8 2
     44          
     45          // a variable containing the number of messages sent from the CLI since the 
     46          // last reset
     47          
     48          #ifdef EMBER_AF_ENABLE_STATISTICS 
     49          int32u haZclCliNumPktsSent = 0;
     50          #endif
     51          
     52          // flag to keep track of the fact that we just sent a read attr for time and
     53          // we should set our time to the result of the read attr response
     54          extern boolean emAfSyncingTime;
     55          
     56          // The direction of global commands, changeable via the "zcl global direction"
     57          // command.  By default, send from client to server, which is how the CLI always
     58          // functioned in the past.
     59          static int8u zclGlobalDirection = ZCL_FRAME_CONTROL_CLIENT_TO_SERVER;
     60          
     61          
     62          // ******************************************************
     63          // zcl command functions
     64          // ******************************************************
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void emAfApsFrameEndpointSetup(int8u srcEndpoint,
     67                                                int8u dstEndpoint) {
   \                     emAfApsFrameEndpointSetup:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
     68            globalApsFrame.sourceEndpoint = (srcEndpoint == 0
     69                                             ? emberAfPrimaryEndpointForCurrentNetworkIndex()
     70                                             : srcEndpoint);
   \   00000004   0xB908             CBNZ.N   R0,??emAfApsFrameEndpointSetup_0
   \   00000006   0x.... 0x....      BL       emberAfPrimaryEndpointForCurrentNetworkIndex
   \                     ??emAfApsFrameEndpointSetup_0:
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable57_2
   \   0000000E   0x7108             STRB     R0,[R1, #+4]
     71            globalApsFrame.destinationEndpoint = dstEndpoint;
   \   00000010   0x714C             STRB     R4,[R1, #+5]
     72          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     73          
     74          // used by zclBufferSetup and emAfCliRawCommand

   \                                 In section .text, align 2, keep-with-next
     75          void emAfApsFrameClusterIdSetup(int16u clusterId)
     76          {
     77            // setup the global options and cluster ID
     78            // send command will setup profile ID and endpoints.
     79            globalApsFrame.options = EMBER_AF_DEFAULT_APS_OPTIONS;
   \                     emAfApsFrameClusterIdSetup:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable57_2
   \   00000004   0xF44F 0x528A      MOV      R2,#+4416
   \   00000008   0x80CA             STRH     R2,[R1, #+6]
     80            globalApsFrame.clusterId = clusterId;
   \   0000000A   0x8048             STRH     R0,[R1, #+2]
     81          }
   \   0000000C   0x4770             BX       LR               ;; return
     82          
     83          // used by zclCommand and emAfCliRawCommand

   \                                 In section .text, align 2, keep-with-next
     84          void cliBufferPrint(void)
     85          {
   \                     cliBufferPrint:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     86            int8u cmdIndex = (appZclBuffer[0] & ZCL_MANUFACTURER_SPECIFIC_MASK) ? 4 : 2;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable57_3
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x0740             LSLS     R0,R0,#+29
   \   0000000C   0xBF4C             ITE      MI 
   \   0000000E   0x2004             MOVMI    R0,#+4
   \   00000010   0x2002             MOVPL    R0,#+2
     87            zclCmdIsBuilt = TRUE;
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable57_2
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x7329             STRB     R1,[R5, #+12]
     88            emberAfGuaranteedPrintln("Msg: clus 0x%2x, cmd 0x%x, len %d",
     89                                     globalApsFrame.clusterId, 
     90                                     appZclBuffer[cmdIndex], 
     91                                     appZclBufferLen);
   \   0000001A   0xF64F 0x76FF      MOVW     R6,#+65535
   \   0000001E   0x89E9             LDRH     R1,[R5, #+14]
   \   00000020   0x9100             STR      R1,[SP, #+0]
   \   00000022   0x5D03             LDRB     R3,[R0, R4]
   \   00000024   0x886A             LDRH     R2,[R5, #+2]
   \   00000026   0x.... 0x....      ADR.W    R1,`?<Constant "Msg: clus 0x%2x, cmd ...">`
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x.... 0x....      BL       emberAfPrintln
     92            emberAfGuaranteedPrint("buffer: ", appZclBufferLen);
   \   00000030   0x89EA             LDRH     R2,[R5, #+14]
   \   00000032   0x.... 0x....      ADR.W    R1,`?<Constant "buffer: ">`
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       emberAfPrint
     93            emberAfGuaranteedPrintBuffer(appZclBuffer, appZclBufferLen, TRUE);
   \   0000003C   0x2301             MOVS     R3,#+1
   \   0000003E   0x89EA             LDRH     R2,[R5, #+14]
   \   00000040   0x4621             MOV      R1,R4
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0x.... 0x....      BL       emberAfPrintBuffer
     94            emberAfGuaranteedPrintln("");
   \   00000048   0x....             ADR.N    R1,??DataTable44  ;; ""
   \   0000004A   0x4630             MOV      R0,R6
   \   0000004C   0xE8BD 0x407C      POP      {R2-R6,LR}
   \   00000050   0x.... 0x....      B.W      emberAfPrintln
     95          }
     96          
     97          // for sending raw (user defined) ZCL messages 
     98          // raw <cluster> <data bytes>
     99          // note: limited to 0xff bytes in length
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void emAfCliRawCommand(void)
    102          {
   \                     emAfCliRawCommand:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    103            int8u seqNumIndex, length;
    104            emAfApsFrameClusterIdSetup((int16u)emberUnsignedCommandArgument(0));
   \   00000002   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_12:
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x.... 0x....      BL       emAfApsFrameClusterIdSetup
    105            emberCopyStringArgument(1, appZclBuffer, APP_ZCL_BUFFER_SIZE_CLI, FALSE);
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable57_3
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2252             MOVS     R2,#+82
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       emberCopyStringArgument
    106            seqNumIndex = (appZclBuffer[0] & ZCL_MANUFACTURER_SPECIFIC_MASK) ? 3 : 1;
   \   0000001C   0x7820             LDRB     R0,[R4, #+0]
   \   0000001E   0x0740             LSLS     R0,R0,#+29
   \   00000020   0xBF4C             ITE      MI 
   \   00000022   0x2503             MOVMI    R5,#+3
   \   00000024   0x2501             MOVPL    R5,#+1
    107            appZclBuffer[seqNumIndex] = emberAfNextSequence();
   \   00000026   0x.... 0x....      BL       emberAfNextSequence
   \   0000002A   0x5528             STRB     R0,[R5, R4]
    108            emberStringCommandArgument(1, &length);
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       emberStringCommandArgument
    109            appZclBufferLen = length;
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable57_2
   \   00000038   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000003C   0x81C1             STRH     R1,[R0, #+14]
    110            cliBufferPrint();
   \   0000003E   0x.... 0x....      BL       cliBufferPrint
    111          }
   \   00000042   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x4604             MOV      R4,R0
   \                     ??Subroutine6_0:
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      B.W      emberUnsignedCommandArgument
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void zclBufferSetup(int8u frameType, int16u clusterId, int8u commandId) 
    114          {
   \                     zclBufferSetup:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4608             MOV      R0,R1
   \   00000008   0x4614             MOV      R4,R2
    115            int8u index = 0;
    116            emAfApsFrameClusterIdSetup(clusterId);
   \   0000000A   0x.... 0x....      BL       emAfApsFrameClusterIdSetup
    117            appZclBuffer[index++] = (frameType
    118                                     | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    119                                     | (mfgSpecificId != EMBER_AF_NULL_MANUFACTURER_CODE
    120                                        ? ZCL_MANUFACTURER_SPECIFIC_MASK
    121                                        : 0));
   \   0000000E   0x2701             MOVS     R7,#+1
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable57_2
   \   00000014   0x8A28             LDRH     R0,[R5, #+16]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xBF14             ITE      NE 
   \   0000001A   0x2104             MOVNE    R1,#+4
   \   0000001C   0x2100             MOVEQ    R1,#+0
   \   0000001E   0x.... 0x....      LDR.W    R6,??DataTable57_3
   \   00000022   0xEA41 0x0108      ORR      R1,R1,R8
   \   00000026   0x7031             STRB     R1,[R6, #+0]
    122            if (mfgSpecificId != EMBER_AF_NULL_MANUFACTURER_CODE) {
   \   00000028   0xB118             CBZ.N    R0,??zclBufferSetup_0
    123              appZclBuffer[index++] = (int8u)mfgSpecificId;
   \   0000002A   0x7070             STRB     R0,[R6, #+1]
    124              appZclBuffer[index++] = (int8u)(mfgSpecificId >> 8);
   \   0000002C   0x0A00             LSRS     R0,R0,#+8
   \   0000002E   0x70B0             STRB     R0,[R6, #+2]
   \   00000030   0x2703             MOVS     R7,#+3
    125            }
    126            appZclBuffer[index++] = emberAfNextSequence();
   \                     ??zclBufferSetup_0:
   \   00000032   0x.... 0x....      BL       emberAfNextSequence
   \   00000036   0x55B8             STRB     R0,[R7, R6]
   \   00000038   0x1C78             ADDS     R0,R7,#+1
    127            appZclBuffer[index++] = commandId;  
   \   0000003A   0xB2C0             UXTB     R0,R0
   \   0000003C   0x5584             STRB     R4,[R0, R6]
    128            appZclBufferLen = index;
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0xB2C0             UXTB     R0,R0
   \   00000042   0x81E8             STRH     R0,[R5, #+14]
    129          }
   \   00000044   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void zclBufferAddByte(int8u byte)
    132          {
    133            appZclBuffer[appZclBufferLen] = byte;
   \                     zclBufferAddByte:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable57_2
   \   00000004   0x89CA             LDRH     R2,[R1, #+14]
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable57_3
   \   0000000A   0x54D0             STRB     R0,[R2, R3]
    134            appZclBufferLen += 1;
   \   0000000C   0x1C50             ADDS     R0,R2,#+1
   \   0000000E   0x81C8             STRH     R0,[R1, #+14]
    135          }
   \   00000010   0x4770             BX       LR               ;; return
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void zclBufferAddWord(int16u word)
    138          {
   \                     zclBufferAddWord:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    139            zclBufferAddByte(LOW_BYTE(word));
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x.... 0x....      BL       zclBufferAddByte
    140            zclBufferAddByte(HIGH_BYTE(word));
   \   0000000A   0x0A20             LSRS     R0,R4,#+8
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x....             B.N      zclBufferAddByte
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          void zclBufferAddInt32(int32u value)
    144          {
   \                     zclBufferAddInt32:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    145            int8u i;
    146            for (i = 0; i < 4; i++) {
   \   00000004   0x2504             MOVS     R5,#+4
    147              zclBufferAddByte(LOW_BYTE(value));
   \                     ??zclBufferAddInt32_0:
   \   00000006   0xB2E0             UXTB     R0,R4
   \   00000008   0x.... 0x....      BL       zclBufferAddByte
    148              value = value >> 8;
   \   0000000C   0x0A24             LSRS     R4,R4,#+8
    149            }
   \   0000000E   0x1E6D             SUBS     R5,R5,#+1
   \   00000010   0xD1F9             BNE.N    ??zclBufferAddInt32_0
    150          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void zclBufferAddBuffer(const int8u *buffer, int8u length)
    153          {
   \                     zclBufferAddBuffer:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    154            MEMCOPY(appZclBuffer + appZclBufferLen, buffer, length);
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable57_2
   \   00000008   0x4622             MOV      R2,R4
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0x89E8             LDRH     R0,[R5, #+14]
   \   0000000E   0x.... 0x....      LDR.W    R3,??DataTable57_3
   \   00000012   0x18C0             ADDS     R0,R0,R3
   \   00000014   0x.... 0x....      BL       halCommonMemCopy
    155            appZclBufferLen += length;
   \   00000018   0x89E8             LDRH     R0,[R5, #+14]
   \   0000001A   0x1820             ADDS     R0,R4,R0
   \   0000001C   0x81E8             STRH     R0,[R5, #+14]
    156          }
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    157          
    158          // Made non-to remove warnings

   \                                 In section .text, align 2, keep-with-next
    159          void zclBufferAddString(const int8u *buffer)
    160          {
   \                     zclBufferAddString:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    161            zclBufferAddBuffer(buffer, emberAfStringLength(buffer) + 1);
   \   00000004   0x.... 0x....      BL       emberAfStringLength
   \   00000008   0x1C41             ADDS     R1,R0,#+1
   \   0000000A   0xB2C9             UXTB     R1,R1
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x....             B.N      zclBufferAddBuffer
    162          }
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void zclBufferAddByteFromArgument(int8u index)
    165          {
   \                     zclBufferAddByteFromArgument:
   \   00000000   0xB580             PUSH     {R7,LR}
    166            zclBufferAddByte((int8u)emberUnsignedCommandArgument(index));
   \   00000002   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000006   0x....             B.N      ?Subroutine0
    167          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xB2C0             UXTB     R0,R0
   \   00000002   0xE8BD 0x4002      POP      {R1,LR}
   \   00000006   0x....             B.N      zclBufferAddByte
    168          

   \                                 In section .text, align 2, keep-with-next
    169          void zclBufferAddInt8sFromArgument(int8u index)
    170          {
   \                     zclBufferAddInt8sFromArgument:
   \   00000000   0xB580             PUSH     {R7,LR}
    171            zclBufferAddByte((int8u)((int8s)emberSignedCommandArgument(index)));
   \   00000002   0x.... 0x....      BL       emberSignedCommandArgument
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
    172          }
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void zclBufferAddWordFromArgument(int8u index)
    175          {
   \                     zclBufferAddWordFromArgument:
   \   00000000   0xB580             PUSH     {R7,LR}
    176            zclBufferAddWord((int16u)emberUnsignedCommandArgument(index));
   \   00000002   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000C   0x....             B.N      zclBufferAddWord
    177          }
    178          

   \                                 In section .text, align 2, keep-with-next
    179          void zclBufferAddInt32FromArgument(int8u index)
    180          {
   \                     zclBufferAddInt32FromArgument:
   \   00000000   0xB580             PUSH     {R7,LR}
    181            zclBufferAddInt32(emberUnsignedCommandArgument(index));
   \   00000002   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0x....             B.N      zclBufferAddInt32
    182          }
    183          
    184          // Writes the length and contents of the string found at argIndex
    185          // into the zcl buffer.

   \                                 In section .text, align 2, keep-with-next
    186          void zclBufferAddLengthAndStringFromArgument(int8u argIndex)
    187          {
   \                     zclBufferAddLengthAndStringFromArgument:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    188            int8u length = emberCopyStringArgument(argIndex,
    189                                                   appZclBuffer + appZclBufferLen + 1,
    190                                                   16,
    191                                                   FALSE);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable57_2
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable57_3
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2210             MOVS     R2,#+16
   \   0000000E   0x89E1             LDRH     R1,[R4, #+14]
   \   00000010   0x1949             ADDS     R1,R1,R5
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0xB240             SXTB     R0,R0
   \   00000016   0x.... 0x....      BL       emberCopyStringArgument
    192            appZclBuffer[appZclBufferLen] = length;
   \   0000001A   0x89E1             LDRH     R1,[R4, #+14]
   \   0000001C   0x5548             STRB     R0,[R1, R5]
    193            appZclBufferLen += length + 1;
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x1840             ADDS     R0,R0,R1
   \   00000022   0x81E0             STRH     R0,[R4, #+14]
    194          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    195          
    196          // This function fully formats the zcl buffer given all the necessary data.
    197          // The format string describes how the subsequent arguments are to be
    198          // written into the zcl buffer.  The format characters are the same as
    199          // those used by the command interpreter, namely:
    200          // 'u'   A one-byte unsigned value.
    201          // 'v'   A two-byte unsigned value encoded low byte first.
    202          // 'w'   A four-byte unsigned value encoded from low to high byte.
    203          // 'b'   A sequence of unsigned bytes.  The first supplied value is a
    204          //       pointer to the data and the second value is the number of bytes.
    205          

   \                                 In section .text, align 2, keep-with-next
    206          void makeZclBuffer(int8u frameControl,
    207                             int16u clusterId,
    208                             int8u commandId,
    209                             char *format,
    210                             ...)
    211          {
   \                     makeZclBuffer:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x461C             MOV      R4,R3
    212            int8u i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    213            va_list argPointer;
    214            zclBufferSetup(frameControl, clusterId, commandId);
   \   00000008   0x.... 0x....      BL       zclBufferSetup
    215            va_start(argPointer, format);
   \   0000000C   0xAE08             ADD      R6,SP,#+32
   \   0000000E   0x.... 0x....      ADR.W    R9,`?<Constant "zcl-cli.c">`
   \   00000012   0xE005             B.N      ??makeZclBuffer_0
    216            
    217            while (format[i] != 0) {
    218              char command = format[i];
    219              switch (command) {
    220              case 'u':
    221                zclBufferAddByte(va_arg(argPointer, int));
    222                break;
    223              case 'v':
    224                zclBufferAddWord(va_arg(argPointer, int));
    225                break;
    226              case 'w':
    227                zclBufferAddInt32(va_arg(argPointer, int));
    228                break;
    229              case 'b': {
    230                int8u *contents = va_arg(argPointer, int8u *);
    231                int8u count = va_arg(argPointer, int);
    232                zclBufferAddByte(count);
    233                zclBufferAddBuffer(contents, count);
    234                break;
    235              }
    236              default:
    237                assert(FALSE);
   \                     ??makeZclBuffer_1:
   \   00000014   0x21ED             MOVS     R1,#+237
   \   00000016   0x4648             MOV      R0,R9
   \   00000018   0x.... 0x....      BL       halInternalAssertFailed
    238              }
    239              i += 1;
   \                     ??makeZclBuffer_2:
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0xB2ED             UXTB     R5,R5
   \                     ??makeZclBuffer_0:
   \   00000020   0x5D28             LDRB     R0,[R5, R4]
   \   00000022   0xB328             CBZ.N    R0,??makeZclBuffer_3
   \   00000024   0x2862             CMP      R0,#+98
   \   00000026   0xD017             BEQ.N    ??makeZclBuffer_4
   \   00000028   0x2875             CMP      R0,#+117
   \   0000002A   0xD004             BEQ.N    ??makeZclBuffer_5
   \   0000002C   0x2876             CMP      R0,#+118
   \   0000002E   0xD008             BEQ.N    ??makeZclBuffer_6
   \   00000030   0x2877             CMP      R0,#+119
   \   00000032   0xD00C             BEQ.N    ??makeZclBuffer_7
   \   00000034   0xE7EE             B.N      ??makeZclBuffer_1
   \                     ??makeZclBuffer_5:
   \   00000036   0xF856 0x0B04      LDR      R0,[R6], #+4
   \   0000003A   0xB2C0             UXTB     R0,R0
   \   0000003C   0x.... 0x....      BL       zclBufferAddByte
   \   00000040   0xE7EC             B.N      ??makeZclBuffer_2
   \                     ??makeZclBuffer_6:
   \   00000042   0xF856 0x0B04      LDR      R0,[R6], #+4
   \   00000046   0xB280             UXTH     R0,R0
   \   00000048   0x.... 0x....      BL       zclBufferAddWord
   \   0000004C   0xE7E6             B.N      ??makeZclBuffer_2
   \                     ??makeZclBuffer_7:
   \   0000004E   0xF856 0x0B04      LDR      R0,[R6], #+4
   \   00000052   0x.... 0x....      BL       zclBufferAddInt32
   \   00000056   0xE7E1             B.N      ??makeZclBuffer_2
   \                     ??makeZclBuffer_4:
   \   00000058   0xF856 0x8B04      LDR      R8,[R6], #+4
   \   0000005C   0xF856 0x7B04      LDR      R7,[R6], #+4
   \   00000060   0xB2F8             UXTB     R0,R7
   \   00000062   0x.... 0x....      BL       zclBufferAddByte
   \   00000066   0xB2F9             UXTB     R1,R7
   \   00000068   0x4640             MOV      R0,R8
   \   0000006A   0x.... 0x....      BL       zclBufferAddBuffer
   \   0000006E   0xE7D5             B.N      ??makeZclBuffer_2
    240            }
    241          
    242            va_end(argPointer);
    243            cliBufferPrint();
   \                     ??makeZclBuffer_3:
   \   00000070   0x.... 0x....      BL       cliBufferPrint
    244          }
   \   00000074   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    245          
    246          // Handles any zcl command where the argument list of the
    247          // command is simply appended to the zcl buffer.  Handles argument types
    248          // 'u', 'v', 'w', and 'b'.  String arguments are written with a length
    249          // byte first.

   \                                 In section .text, align 2, keep-with-next
    250          void zclSimpleCommand(int8u frameControl,
    251                                       int16u clusterId, 
    252                                       int8u commandId)
    253          {
   \                     zclSimpleCommand:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460E             MOV      R6,R1
   \   00000006   0x4617             MOV      R7,R2
    254            int8u argumentIndex, typeIndex;
    255            int8u count = emberCommandArgumentCount();
   \   00000008   0x.... 0x....      BL       emberCommandArgumentCount
   \   0000000C   0x4604             MOV      R4,R0
    256            int8u type;
    257          
    258            zclBufferSetup(frameControl, clusterId, commandId);
   \   0000000E   0x463A             MOV      R2,R7
   \   00000010   0x4631             MOV      R1,R6
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       zclBufferSetup
    259            for (argumentIndex = 0, typeIndex = 0;
   \   00000018   0x2600             MOVS     R6,#+0
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xE003             B.N      ??zclSimpleCommand_0
    260                 argumentIndex < count;
    261                 argumentIndex++) {
    262              type = emberCurrentCommand->argumentTypes[typeIndex];
    263              if (typeIndex + 1 < count
    264                  && emberCurrentCommand->argumentTypes[typeIndex + 1] != '*') {
    265                typeIndex++;
    266              }
    267          
    268              switch (type) {
    269              case 'u':
    270                zclBufferAddByteFromArgument(argumentIndex);
    271                break;
    272              case 'v':
    273                zclBufferAddWordFromArgument(argumentIndex);
    274                break;
    275              case 'w':
    276                zclBufferAddInt32FromArgument(argumentIndex);
    277                break;
    278              case 's':
    279                zclBufferAddInt8sFromArgument(argumentIndex);
    280                break;
    281              case 'b':
    282                zclBufferAddLengthAndStringFromArgument(argumentIndex);
   \                     ??zclSimpleCommand_1:
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0x.... 0x....      BL       zclBufferAddLengthAndStringFromArgument
    283                break;
   \                     ??zclSimpleCommand_2:
   \   00000024   0x1C76             ADDS     R6,R6,#+1
   \                     ??zclSimpleCommand_0:
   \   00000026   0xB2F6             UXTB     R6,R6
   \   00000028   0x42A6             CMP      R6,R4
   \   0000002A   0xDA2A             BGE.N    ??zclSimpleCommand_3
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable57_4
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x6880             LDR      R0,[R0, #+8]
   \   00000034   0x5C29             LDRB     R1,[R5, R0]
   \   00000036   0x1C6A             ADDS     R2,R5,#+1
   \   00000038   0x42A2             CMP      R2,R4
   \   0000003A   0xDA05             BGE.N    ??zclSimpleCommand_4
   \   0000003C   0x1828             ADDS     R0,R5,R0
   \   0000003E   0x7840             LDRB     R0,[R0, #+1]
   \   00000040   0x282A             CMP      R0,#+42
   \   00000042   0xBF1C             ITT      NE 
   \   00000044   0x1C6D             ADDNE    R5,R5,#+1
   \   00000046   0xB2ED             UXTBNE   R5,R5
   \                     ??zclSimpleCommand_4:
   \   00000048   0x292A             CMP      R1,#+42
   \   0000004A   0xD0EB             BEQ.N    ??zclSimpleCommand_2
   \   0000004C   0x2962             CMP      R1,#+98
   \   0000004E   0xD0E6             BEQ.N    ??zclSimpleCommand_1
   \   00000050   0x2973             CMP      R1,#+115
   \   00000052   0xD012             BEQ.N    ??zclSimpleCommand_5
   \   00000054   0x2975             CMP      R1,#+117
   \   00000056   0xD004             BEQ.N    ??zclSimpleCommand_6
   \   00000058   0x2976             CMP      R1,#+118
   \   0000005A   0xD006             BEQ.N    ??zclSimpleCommand_7
   \   0000005C   0x2977             CMP      R1,#+119
   \   0000005E   0xD008             BEQ.N    ??zclSimpleCommand_8
   \   00000060   0xE00F             B.N      ??zclSimpleCommand_3
   \                     ??zclSimpleCommand_6:
   \   00000062   0x4630             MOV      R0,R6
   \   00000064   0x.... 0x....      BL       zclBufferAddByteFromArgument
   \   00000068   0xE7DC             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_7:
   \   0000006A   0x4630             MOV      R0,R6
   \   0000006C   0x.... 0x....      BL       zclBufferAddWordFromArgument
   \   00000070   0xE7D8             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_8:
   \   00000072   0x4630             MOV      R0,R6
   \   00000074   0x.... 0x....      BL       zclBufferAddInt32FromArgument
   \   00000078   0xE7D4             B.N      ??zclSimpleCommand_2
   \                     ??zclSimpleCommand_5:
   \   0000007A   0x4630             MOV      R0,R6
   \   0000007C   0x.... 0x....      BL       zclBufferAddInt8sFromArgument
   \   00000080   0xE7D0             B.N      ??zclSimpleCommand_2
    284              case '*':
    285                break;
    286              case '?':
    287                //lint -fallthrough
    288              case 0:
    289                //lint -fallthrough
    290              default:
    291                goto kickout;
    292              }
    293            }
    294          
    295          kickout:
    296            cliBufferPrint();
   \                     ??zclSimpleCommand_3:
   \   00000082   0xE8BD 0x40F1      POP      {R0,R4-R7,LR}
   \   00000086   0x....             B.N      cliBufferPrint
    297          }
    298          

   \                                 In section .text, align 2, keep-with-next
    299          void zclGlobalSetup(int8u commandId)
    300          {
   \                     zclGlobalSetup:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine6
    301            int16u clusterId = (int16u)emberUnsignedCommandArgument(0);
    302            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | zclGlobalDirection,
    303                           clusterId,
    304                           commandId);
   \                     ??CrossCallReturnLabel_14:
   \   00000006   0x.... 0x....      BL       ?Subroutine8
    305            zclBufferAddWordFromArgument(1);  // attr id
   \                     ??CrossCallReturnLabel_20:
   \   0000000A   0x.... 0x....      BL       ?Subroutine11
    306            if (commandId != ZCL_READ_ATTRIBUTES_COMMAND_ID) {
   \                     ??CrossCallReturnLabel_36:
   \   0000000E   0xB11C             CBZ.N    R4,??zclGlobalSetup_0
    307              zclBufferAddByteFromArgument(2);
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xE8BD 0x4010      POP      {R4,LR}
   \   00000016   0x....             B.N      zclBufferAddByteFromArgument
    308            } 
    309          }
   \                     ??zclGlobalSetup_0:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x4622             MOV      R2,R4
   \                     ??Subroutine8_0:
   \   00000002   0xB281             UXTH     R1,R0
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable57_2
   \   00000008   0x7B40             LDRB     R0,[R0, #+13]
   \   0000000A   0x....             B.N      zclBufferSetup

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x....             B.N      zclBufferAddWordFromArgument
    310          
    311          // zcl global direction <direction:1>

   \                                 In section .text, align 2, keep-with-next
    312          void zclGlobalDirectionCommand(void) 
    313          {
   \                     zclGlobalDirectionCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    314            zclGlobalDirection = ((((int8u)emberUnsignedCommandArgument(0))
    315                                   == ZCL_DIRECTION_CLIENT_TO_SERVER)
    316                                  ? ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    317                                  : ZCL_FRAME_CONTROL_SERVER_TO_CLIENT);
   \   00000002   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_11:
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0xB100             CBZ.N    R0,??zclGlobalDirectionCommand_0
   \   0000000A   0x2008             MOVS     R0,#+8
   \                     ??zclGlobalDirectionCommand_0:
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable57_2
   \   00000010   0x7348             STRB     R0,[R1, #+13]
    318          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    319          
    320          // zcl global read <cluster:2> <attribute:2>

   \                                 In section .text, align 2, keep-with-next
    321          void zclGlobalReadCommand(void) 
    322          {
   \                     zclGlobalReadCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    323            zclGlobalSetup(ZCL_READ_ATTRIBUTES_COMMAND_ID);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             B.N      ?Subroutine1
    324            cliBufferPrint();
    325          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x.... 0x....      BL       zclGlobalSetup
   \   00000004                      REQUIRE ??Subroutine23_0
   \   00000004                      ;; // Fall through to label ??Subroutine23_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine23_0:
   \   00000000   0xE8BD 0x4001      POP      {R0,LR}
   \   00000004   0x....             B.N      cliBufferPrint
    326          
    327          
    328          // zcl global write <cluster:2> <attrID:2> <type:1> <data>
    329          // zcl global uwrite <cluster:2> <attrID:2> <type:1> <data>
    330          // zcl global nwrite <cluster:2> <attrID:2> <type:1> <data>

   \                                 In section .text, align 2, keep-with-next
    331          void zclGlobalWriteCommand(void) 
    332          {
   \                     zclGlobalWriteCommand:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    333            int8u type = (int8u)emberUnsignedCommandArgument(2);
   \   00000002   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_45:
   \   00000006   0x4604             MOV      R4,R0
    334            int8u commandChar = emberCurrentCommand->name[0];
   \   00000008   0x.... 0x....      BL       ?Subroutine17
    335            int8u commandId = (commandChar == 'u'
    336                               ? ZCL_WRITE_ATTRIBUTES_UNDIVIDED_COMMAND_ID
    337                               : (commandChar == 'n'
    338                                  ? ZCL_WRITE_ATTRIBUTES_NO_RESPONSE_COMMAND_ID
    339                                  : ZCL_WRITE_ATTRIBUTES_COMMAND_ID));
   \                     ??CrossCallReturnLabel_59:
   \   0000000C   0x2875             CMP      R0,#+117
   \   0000000E   0xBF08             IT       EQ 
   \   00000010   0x2003             MOVEQ    R0,#+3
   \   00000012   0xD003             BEQ.N    ??zclGlobalWriteCommand_0
   \   00000014   0x286E             CMP      R0,#+110
   \   00000016   0xBF0C             ITE      EQ 
   \   00000018   0x2005             MOVEQ    R0,#+5
   \   0000001A   0x2002             MOVNE    R0,#+2
    340            zclGlobalSetup(commandId);
   \                     ??zclGlobalWriteCommand_0:
   \   0000001C   0x.... 0x....      BL       zclGlobalSetup
    341          
    342            if (emberAfIsThisDataTypeAStringType(type)) {
   \   00000020   0xB2E0             UXTB     R0,R4
   \   00000022   0x.... 0x....      BL       emberAfIsThisDataTypeAStringType
   \   00000026   0xB118             CBZ.N    R0,??zclGlobalWriteCommand_1
    343              // TODO: the maximum length of the string should be obtained from
    344              // the attribute size table.  Currently the following helper function
    345              // has a hard-coded maximum length of 16.
    346              zclBufferAddLengthAndStringFromArgument(3);
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0x.... 0x....      BL       zclBufferAddLengthAndStringFromArgument
   \   0000002E   0xE00E             B.N      ??zclGlobalWriteCommand_2
    347            } else {
    348              int8u length = emberAfGetDataSize(type);
   \                     ??zclGlobalWriteCommand_1:
   \   00000030   0xB2E0             UXTB     R0,R4
   \   00000032   0x.... 0x....      BL       emberAfGetDataSize
   \   00000036   0x4604             MOV      R4,R0
    349              emberCopyStringArgument(3, 
    350                                      appZclBuffer + appZclBufferLen, 
    351                                      length, 
    352                                      TRUE);  // pad with zeroes
   \   00000038   0x.... 0x....      LDR.W    R5,??DataTable57_2
   \   0000003C   0x2301             MOVS     R3,#+1
   \   0000003E   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_53:
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x.... 0x....      BL       emberCopyStringArgument
    353              appZclBufferLen += length;    
   \   00000048   0x89E8             LDRH     R0,[R5, #+14]
   \   0000004A   0x1820             ADDS     R0,R4,R0
   \   0000004C   0x81E8             STRH     R0,[R5, #+14]
    354            }
    355          
    356            cliBufferPrint();
   \                     ??zclGlobalWriteCommand_2:
   \   0000004E   0x....             B.N      ?Subroutine2
    357          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000004   0x....             B.N      cliBufferPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0x4622             MOV      R2,R4
   \   00000002   0x89E8             LDRH     R0,[R5, #+14]
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable57_3
   \   00000008   0x1841             ADDS     R1,R0,R1
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x....             LDR.N    R0,??DataTable57_4
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0x4605             MOV      R5,R0
   \                     ??Subroutine13_0:
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      B.W      emberUnsignedCommandArgument
    358          
    359          // zcl global discover <cluster> <attrID:2> <max # to report:1>

   \                                 In section .text, align 2, keep-with-next
    360          void zclGlobalDiscoverCommand(void)
    361          {
   \                     zclGlobalDiscoverCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    362            zclGlobalSetup(ZCL_DISCOVER_ATTRIBUTES_COMMAND_ID);
   \   00000002   0x200C             MOVS     R0,#+12
   \   00000004                      REQUIRE ?Subroutine1
   \   00000004                      ;; // Fall through to label ?Subroutine1
    363            cliBufferPrint();
    364          }
    365          
    366          // zcl global report <src endpoint id:1> <cluster id:2> <attribute id:2> <mask:1>

   \                                 In section .text, align 2, keep-with-next
    367          void zclGlobalReportCommand(void)
    368          {
   \                     zclGlobalReportCommand:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    369            EmberAfStatus status;
    370            EmberAfClusterId clusterId = (EmberAfClusterId)emberUnsignedCommandArgument(1);
   \   00000004   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_27:
   \   00000008   0x4604             MOV      R4,R0
    371            EmberAfAttributeId attributeId = (EmberAfAttributeId)emberUnsignedCommandArgument(2);
   \   0000000A   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_44:
   \   0000000E   0x4605             MOV      R5,R0
    372            int8u mask = (int8u)emberUnsignedCommandArgument(3);
   \   00000010   0x.... 0x....      BL       ??Subroutine14_0
   \                     ??CrossCallReturnLabel_50:
   \   00000014   0xB2C6             UXTB     R6,R0
    373            EmberAfAttributeType type;
    374            int8u size;
    375            int8u data[ATTRIBUTE_LARGEST];
    376          
    377            status = emberAfReadAttribute((int8u)emberUnsignedCommandArgument(0), // endpoint
    378                                          clusterId,
    379                                          attributeId,
    380                                          (mask == 0
    381                                           ? CLUSTER_MASK_CLIENT
    382                                           : CLUSTER_MASK_SERVER),
    383                                          data,
    384                                          sizeof(data),
    385                                          &type);
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xBF0C             ITE      EQ 
   \   0000001A   0x2780             MOVEQ    R7,#+128
   \   0000001C   0x2740             MOVNE    R7,#+64
   \   0000001E   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_10:
   \   00000022   0xA903             ADD      R1,SP,#+12
   \   00000024   0x9102             STR      R1,[SP, #+8]
   \   00000026   0x2108             MOVS     R1,#+8
   \   00000028   0x9101             STR      R1,[SP, #+4]
   \   0000002A   0xA904             ADD      R1,SP,#+16
   \   0000002C   0x9100             STR      R1,[SP, #+0]
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0xB2AA             UXTH     R2,R5
   \   00000032   0xB2A1             UXTH     R1,R4
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x.... 0x....      BL       emberAfReadAttribute
   \   0000003A   0x0002             MOVS     R2,R0
    386            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000003C   0xD005             BEQ.N    ??zclGlobalReportCommand_0
    387              emberAfReportingPrintln("ERR: reading attribute %x", status);
   \   0000003E   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: reading attribut...">`
   \   00000042   0x2020             MOVS     R0,#+32
   \   00000044   0x.... 0x....      BL       emberAfPrintln
    388              return;
   \   00000048   0xE02D             B.N      ??zclGlobalReportCommand_1
    389            }
    390          
    391            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND
    392                           | (mask == 0
    393                              ? ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    394                              : ZCL_FRAME_CONTROL_SERVER_TO_CLIENT),
    395                           clusterId,
    396                           ZCL_REPORT_ATTRIBUTES_COMMAND_ID);
   \                     ??zclGlobalReportCommand_0:
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xBF0C             ITE      EQ 
   \   0000004E   0x2000             MOVEQ    R0,#+0
   \   00000050   0x2008             MOVNE    R0,#+8
   \   00000052   0x220A             MOVS     R2,#+10
   \   00000054   0xB2A1             UXTH     R1,R4
   \   00000056   0x.... 0x....      BL       zclBufferSetup
    397            zclBufferAddWord(attributeId);
   \   0000005A   0xB2A8             UXTH     R0,R5
   \   0000005C   0x.... 0x....      BL       zclBufferAddWord
    398            zclBufferAddByte(type);
   \   00000060   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000064   0x.... 0x....      BL       zclBufferAddByte
    399          
    400            size = (emberAfIsThisDataTypeAStringType(type)
    401                    ? emberAfStringLength(data) + 1
    402                    : emberAfGetDataSize(type));
   \   00000068   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000006C   0x.... 0x....      BL       emberAfIsThisDataTypeAStringType
   \   00000070   0xB120             CBZ.N    R0,??zclGlobalReportCommand_2
   \   00000072   0xA804             ADD      R0,SP,#+16
   \   00000074   0x.... 0x....      BL       emberAfStringLength
   \   00000078   0x1C44             ADDS     R4,R0,#+1
   \   0000007A   0xE004             B.N      ??zclGlobalReportCommand_3
   \                     ??zclGlobalReportCommand_2:
   \   0000007C   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000080   0x.... 0x....      BL       emberAfGetDataSize
   \   00000084   0x4604             MOV      R4,R0
   \                     ??zclGlobalReportCommand_3:
   \   00000086   0xB2E4             UXTB     R4,R4
    403          #if (BIGENDIAN_CPU)
    404            if (isThisDataTypeSentLittleEndianOTA(type)) {
    405              emberReverseMemCopy(appZclBuffer + appZclBufferLen, data, size);
    406            } else {
    407              MEMCOPY(appZclBuffer + appZclBufferLen, data, size);
    408            }
    409          #else
    410            MEMCOPY(appZclBuffer + appZclBufferLen, data, size);
   \   00000088   0x.... 0x....      LDR.W    R5,??DataTable57_2
   \   0000008C   0x4622             MOV      R2,R4
   \   0000008E   0xA904             ADD      R1,SP,#+16
   \   00000090   0x89E8             LDRH     R0,[R5, #+14]
   \   00000092   0x.... 0x....      LDR.W    R3,??DataTable57_3
   \   00000096   0x18C0             ADDS     R0,R0,R3
   \   00000098   0x.... 0x....      BL       halCommonMemCopy
    411          #endif
    412            appZclBufferLen += size;
   \   0000009C   0x89E8             LDRH     R0,[R5, #+14]
   \   0000009E   0x1820             ADDS     R0,R4,R0
   \   000000A0   0x81E8             STRH     R0,[R5, #+14]
    413          
    414            cliBufferPrint();
   \   000000A2   0x.... 0x....      BL       cliBufferPrint
    415          }
   \                     ??zclGlobalReportCommand_1:
   \   000000A6   0xB007             ADD      SP,SP,#+28
   \   000000A8   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberUnsignedCommandArgument

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0x4606             MOV      R6,R0
   \                     ??Subroutine14_0:
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      B.W      emberUnsignedCommandArgument
    416          
    417          // zcl global report-read <cluster> <attrID:2> <direction:1>

   \                                 In section .text, align 2, keep-with-next
    418          void zclGlobalReportReadCommand(void)
    419          {
   \                     zclGlobalReportReadCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    420            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | zclGlobalDirection,
    421                           (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    422                           ZCL_READ_REPORTING_CONFIGURATION_COMMAND_ID);
   \   00000002   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_9:
   \   00000006   0x2208             MOVS     R2,#+8
   \   00000008   0x.... 0x....      BL       ??Subroutine8_0
    423            zclBufferAddByteFromArgument(2); // direction
   \                     ??CrossCallReturnLabel_18:
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       zclBufferAddByteFromArgument
    424            zclBufferAddWordFromArgument(1); // attribute id
   \   00000012   0x.... 0x....      BL       ?Subroutine11
    425            cliBufferPrint();
   \                     ??CrossCallReturnLabel_35:
   \   00000016   0x....             B.N      ??Subroutine23_0
    426          }
    427          
    428          // zcl global send-me-a-report <cluster id:2> <attribute id:2> <type:1> ...
    429          // ... <min interval:2> <max interval:2> <reportable change:1-4>

   \                                 In section .text, align 2, keep-with-next
    430          void zclGlobalSendMeAReportCommand(void)
    431          {
   \                     zclGlobalSendMeAReportCommand:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    432            int8u type = (int8u)emberUnsignedCommandArgument(2);
   \   00000002   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_43:
   \   00000006   0x.... 0x....      BL       ?Subroutine6
    433          
    434            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | zclGlobalDirection,
    435                           (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    436                           ZCL_CONFIGURE_REPORTING_COMMAND_ID);
   \                     ??CrossCallReturnLabel_13:
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable57_2
   \   0000000E   0x2206             MOVS     R2,#+6
   \   00000010   0xB281             UXTH     R1,R0
   \   00000012   0x7B68             LDRB     R0,[R5, #+13]
   \   00000014   0x.... 0x....      BL       zclBufferSetup
    437            zclBufferAddByte(EMBER_ZCL_REPORTING_DIRECTION_REPORTED);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       zclBufferAddByte
    438            zclBufferAddWordFromArgument(1);  // attribute id
   \   0000001E   0x.... 0x....      BL       ?Subroutine11
    439            zclBufferAddByte(type);           // type
   \                     ??CrossCallReturnLabel_34:
   \   00000022   0xB2E0             UXTB     R0,R4
   \   00000024   0x.... 0x....      BL       zclBufferAddByte
    440            zclBufferAddWordFromArgument(3);  // minimum reporting interval
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0x.... 0x....      BL       zclBufferAddWordFromArgument
    441            zclBufferAddWordFromArgument(4);  // maximum reporting interval
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       zclBufferAddWordFromArgument
    442          
    443            // If the data type is analog, then the reportable change field is the same
    444            // size as the data type.  Otherwise, it is omitted.
    445            if (emberAfGetAttributeAnalogOrDiscreteType(type)
    446                == EMBER_AF_DATA_TYPE_ANALOG) {
   \   00000034   0xB2E0             UXTB     R0,R4
   \   00000036   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
   \   0000003A   0xB960             CBNZ.N   R0,??zclGlobalSendMeAReportCommand_0
    447              int8u dataSize = emberAfGetDataSize(type);
   \   0000003C   0xB2E0             UXTB     R0,R4
   \   0000003E   0x.... 0x....      BL       emberAfGetDataSize
   \   00000042   0x4604             MOV      R4,R0
    448              emberCopyStringArgument(5,
    449                                      appZclBuffer + appZclBufferLen,
    450                                      dataSize,
    451                                      FALSE);
   \   00000044   0x2300             MOVS     R3,#+0
   \   00000046   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_54:
   \   0000004A   0x2005             MOVS     R0,#+5
   \   0000004C   0x.... 0x....      BL       emberCopyStringArgument
    452              appZclBufferLen += dataSize;
   \   00000050   0x89E8             LDRH     R0,[R5, #+14]
   \   00000052   0x1820             ADDS     R0,R4,R0
   \   00000054   0x81E8             STRH     R0,[R5, #+14]
    453            }
    454            cliBufferPrint();
   \                     ??zclGlobalSendMeAReportCommand_0:
   \   00000056                      REQUIRE ?Subroutine2
   \   00000056                      ;; // Fall through to label ?Subroutine2
    455          }
    456          
    457          // zcl global expect-report-from-me <cluster id:2> <attribute id:2> <timeout:2>

   \                                 In section .text, align 2, keep-with-next
    458          void zclGlobalExpectReportFromMeCommand(void)
    459          {
   \                     zclGlobalExpectReportFromMeCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    460            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | zclGlobalDirection,
    461                           (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    462                           ZCL_CONFIGURE_REPORTING_COMMAND_ID);
   \   00000002   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_8:
   \   00000006   0x2206             MOVS     R2,#+6
   \   00000008   0x.... 0x....      BL       ??Subroutine8_0
    463            zclBufferAddByte(EMBER_ZCL_REPORTING_DIRECTION_RECEIVED);
   \                     ??CrossCallReturnLabel_17:
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       zclBufferAddByte
    464            zclBufferAddWordFromArgument(1); // attribute id
   \   00000012   0x.... 0x....      BL       ?Subroutine11
    465            zclBufferAddWordFromArgument(2); // timeout
   \                     ??CrossCallReturnLabel_33:
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       zclBufferAddWordFromArgument
    466            cliBufferPrint();
   \   0000001C   0x....             B.N      ??Subroutine23_0
    467          }
    468          
    469          // zcl global disc-com-gen <cluster id:2> <start command id:1> <max command id:1>
    470          // zcl global disc-com-rec <cluster id:2> <start command id:1> <max command id:1>

   \                                 In section .text, align 2, keep-with-next
    471          void zclGlobalCommandDiscoveryCommand(void)
    472          {
   \                     zclGlobalCommandDiscoveryCommand:
   \   00000000   0xB510             PUSH     {R4,LR}
    473            	zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | zclGlobalDirection,
    474          	                 (EmberAfClusterId)emberUnsignedCommandArgument(0), // cluster id
    475          	                 (emberCurrentCommand->name[9] == 'g' ? 
    476          					   ZCL_DISCOVER_COMMANDS_GENERATED_COMMAND_ID :
    477          					   ZCL_DISCOVER_COMMANDS_RECEIVED_COMMAND_ID));
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable57_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x7A40             LDRB     R0,[R0, #+9]
   \   0000000C   0x2867             CMP      R0,#+103
   \   0000000E   0xBF0C             ITE      EQ 
   \   00000010   0x2413             MOVEQ    R4,#+19
   \   00000012   0x2411             MOVNE    R4,#+17
   \   00000014   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_7:
   \   00000018   0x.... 0x....      BL       ?Subroutine8
    478              zclBufferAddByteFromArgument(1); // start command id
   \                     ??CrossCallReturnLabel_19:
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       zclBufferAddByteFromArgument
    479          	zclBufferAddByteFromArgument(2); // max command ids
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x.... 0x....      BL       zclBufferAddByteFromArgument
    480          	cliBufferPrint();
   \   00000028   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002C   0x....             B.N      cliBufferPrint
    481          }
    482          
    483          // zcl test response on

   \                                 In section .text, align 2, keep-with-next
    484          void zclTestResponseOnCommand(void)
    485          {
    486            emberAfSetNoReplyForNextMessage(FALSE);  
   \                     zclTestResponseOnCommand:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      B.W      emberAfSetNoReplyForNextMessage
    487          }
    488          
    489          // zcl test response off

   \                                 In section .text, align 2, keep-with-next
    490          void zclTestResponseOffCommand(void)
    491          {
    492            emberAfSetNoReplyForNextMessage(TRUE);
   \                     zclTestResponseOffCommand:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberAfSetNoReplyForNextMessage
    493          }
    494          
    495          #ifdef ZCL_USING_BASIC_CLUSTER_CLIENT
    496          // zcl basic rtfd
    497          void zclBasicRtfdCommand(void)
    498          {
    499            zclSimpleClientCommand(ZCL_BASIC_CLUSTER_ID, 
    500                                   ZCL_RESET_TO_FACTORY_DEFAULTS_COMMAND_ID);
    501          }
    502          #endif
    503          

   \                                 In section .text, align 2, keep-with-next
    504          void zclMfgCodeCommand(void)
    505          {
   \                     zclMfgCodeCommand:
   \   00000000   0xB510             PUSH     {R4,LR}
    506            if (zclCmdIsBuilt) {
   \   00000002   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_55:
   \   00000006   0xB130             CBZ.N    R0,??zclMfgCodeCommand_0
    507              emberAfAppPrintln("Command already built.  Cannot set MFG specific code for command.");
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "Command already built...">`
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      emberAfPrintln
    508              return;
    509            }
    510            mfgSpecificId = (int16u)emberUnsignedCommandArgument(0);
   \                     ??zclMfgCodeCommand_0:
   \   00000016   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   0000001A   0x8220             STRH     R0,[R4, #+16]
    511            emberAfAppPrintln("MFG Code Set for next command: 0x%2X", mfgSpecificId);
   \   0000001C   0x8A22             LDRH     R2,[R4, #+16]
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "MFG Code Set for next...">`
   \   00000022   0x2004             MOVS     R0,#+4
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x.... 0x....      B.W      emberAfPrintln
    512          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0x....             LDR.N    R4,??DataTable57_2
   \   00000002   0x7B20             LDRB     R0,[R4, #+12]
   \   00000004   0x4770             BX       LR
    513          

   \                                 In section .text, align 2, keep-with-next
    514          void zclTimeCommand(void)
    515          {
   \                     zclTimeCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    516            emberAfSetTime(emberUnsignedCommandArgument(0));
   \   00000002   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_6:
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0x.... 0x....      B.W      emberAfSetTime
    517          }
    518          
    519          #ifdef ZCL_USING_IDENTIFY_CLUSTER_CLIENT
    520          // zcl identify id <identify time:2>

   \                                 In section .text, align 2, keep-with-next
    521          void zclIdentifyIdCommand(void)
    522          {
    523            zclSimpleClientCommand(ZCL_IDENTIFY_CLUSTER_ID, ZCL_IDENTIFY_COMMAND_ID);
   \                     zclIdentifyIdCommand:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x....             B.N      ?Subroutine4
    524          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x2103             MOVS     R1,#+3
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             B.N      zclSimpleCommand
    525          
    526          // zcl identify query

   \                                 In section .text, align 2, keep-with-next
    527          void zclIdentifyQueryCommand(void)
    528          {
    529            zclSimpleClientCommand(ZCL_IDENTIFY_CLUSTER_ID, ZCL_IDENTIFY_QUERY_COMMAND_ID);
   \                     zclIdentifyQueryCommand:
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002                      REQUIRE ?Subroutine4
   \   00000002                      ;; // Fall through to label ?Subroutine4
    530          }
    531          
    532          // zcl identify trigger <effect id:1> <effect variant:1>

   \                                 In section .text, align 2, keep-with-next
    533          void zclIdentifyTriggerEffectCommand(void)
    534          {
    535            zclSimpleClientCommand(ZCL_IDENTIFY_CLUSTER_ID, ZCL_TRIGGER_EFFECT_COMMAND_ID);
   \                     zclIdentifyTriggerEffectCommand:
   \   00000000   0x2240             MOVS     R2,#+64
   \   00000002   0x....             B.N      ?Subroutine4
    536          }
    537          #endif // ZCL_USING_IDENTIFY_CLUSTER_CLIENT
    538          
    539          #ifdef ZCL_USING_IDENTIFY_CLUSTER_SERVER
    540          // zcl identify on <endpoint:1> <time:2>

   \                                 In section .text, align 2, keep-with-next
    541          void zclIdentifyOnCommand(void)
    542          {
   \                     zclIdentifyOnCommand:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    543            int16u time = (int16u)emberUnsignedCommandArgument(1);
   \   00000002   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_26:
   \   00000006   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    544            if (time == 0) {
   \   0000000A   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000000E   0xB910             CBNZ.N   R0,??zclIdentifyOnCommand_0
    545              time = 60;
   \   00000010   0x203C             MOVS     R0,#+60
   \   00000012   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    546            }
    547            emberAfWriteAttribute((int8u)emberUnsignedCommandArgument(0), // endpoint
    548                                  ZCL_IDENTIFY_CLUSTER_ID,
    549                                  ZCL_IDENTIFY_TIME_ATTRIBUTE_ID,
    550                                  CLUSTER_MASK_SERVER,
    551                                  (int8u *)&time,
    552                                  ZCL_INT16U_ATTRIBUTE_TYPE);
   \                     ??zclIdentifyOnCommand_0:
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             B.N      ?Subroutine5
    553          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000004   0x2121             MOVS     R1,#+33
   \   00000006   0x9101             STR      R1,[SP, #+4]
   \   00000008   0xA902             ADD      R1,SP,#+8
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0x2340             MOVS     R3,#+64
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x2103             MOVS     R1,#+3
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x.... 0x....      BL       emberAfWriteAttribute
   \   00000018   0xBD07             POP      {R0-R2,PC}       ;; return
    554          
    555          // zcl identify off <endpoint:1>

   \                                 In section .text, align 2, keep-with-next
    556          void zclIdentifyOffCommand(void)
    557          {
   \                     zclIdentifyOffCommand:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    558            int16u time = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    559            emberAfWriteAttribute((int8u)emberUnsignedCommandArgument(0), // endpoint
    560                                  ZCL_IDENTIFY_CLUSTER_ID,
    561                                  ZCL_IDENTIFY_TIME_ATTRIBUTE_ID,
    562                                  CLUSTER_MASK_SERVER,
    563                                  (int8u *)&time,
    564                                  ZCL_INT16U_ATTRIBUTE_TYPE);
   \   00000008                      REQUIRE ?Subroutine5
   \   00000008                      ;; // Fall through to label ?Subroutine5
    565          }
    566          #else
    567          // TODO: the generated CLI is sucking in these methods regardless of whether or not it should;
    568          // I suspect it has to do with the segmentaton of CLI commands, and it should be fixed, but 
    569          // for now I'm stubbing them. - Jeremy
    570          void zclIdentifyOnCommand(void)
    571          {
    572          }
    573          
    574          void zclIdentifyOffCommand(void)
    575          {
    576          }
    577          #endif // ZCL_USING_IDENTIFY_CLUSTER_SERVER
    578          
    579          
    580          #ifdef ZCL_USING_GROUPS_CLUSTER_CLIENT
    581          // zcl groups add <group id:2> <name:16>
    582          // zcl groups ad-if-id <group id:2> <name:16>
    583          void zclGroupsAddCommand(void)
    584          {
    585            int8u commandId = (emberCurrentCommand->name[2] == 'd'
    586                               ? ZCL_ADD_GROUP_COMMAND_ID
    587                               : ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID);
    588            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, commandId);
    589          }
    590          
    591          // zcl groups view <group id:2>
    592          void zclGroupsViewCommand(void)
    593          {
    594            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, ZCL_VIEW_GROUP_COMMAND_ID);
    595          }
    596          
    597          // zcl groups get <count:1> [<group id:2> * count]
    598          void zclGroupsGetCommand(void)
    599          {
    600            int8u i;
    601            int8u count = (int8u)emberUnsignedCommandArgument(0);
    602            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
    603                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
    604                           ZCL_GROUPS_CLUSTER_ID,
    605                           ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID);
    606            zclBufferAddByte(count); // group count
    607            for (i = 0; i < count; i++) {
    608              zclBufferAddWordFromArgument(1 + i);
    609            }
    610            cliBufferPrint();
    611          }
    612          
    613          // zcl groups remove <group id:2>
    614          void zclGroupsRemoveCommand(void)
    615          {
    616            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, ZCL_REMOVE_GROUP_COMMAND_ID);
    617          }
    618          
    619          // zcl groups rmall
    620          void zclGroupsRemoveAllCommand(void)
    621          {
    622            zclSimpleClientCommand(ZCL_GROUPS_CLUSTER_ID, 
    623                                   ZCL_REMOVE_ALL_GROUPS_COMMAND_ID);
    624          }
    625          #else
    626          // TODO: the generated CLI is sucking in this method regardless of whether or not it should;
    627          // I suspect it has to do with the segmentaton of CLI commands, and it should be fixed, but 
    628          // for now I'm stubbing it. - Jeremy

   \                                 In section .text, align 2, keep-with-next
    629          void zclGroupsGetCommand(void) 
    630          {
    631          }
   \                     zclGroupsGetCommand:
   \   00000000   0x4770             BX       LR               ;; return
    632          #endif //ZCL_USING_GROUPS_CLUSTER_CLIENT
    633          
    634          #ifdef ZCL_USING_SCENES_CLUSTER_CLIENT
    635          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    636          boolean addScenesOnOffValue;
    637          #endif
    638          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    639          int8u addScenesLevelValue;
    640          #endif
    641          
    642          // zcl scenes add <groupId:2> <sceneId:1> <trans time:2> <name> <extensionFieldSets>
    643          // zcl scenes eadd <groupId:2> <sceneId:1> <trans time:2> <name> <extensionFieldSets>
    644          void zclScenesAddCommand(void)
    645          {
    646            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
    647                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
    648                           ZCL_SCENES_CLUSTER_ID,
    649                           (emberCurrentCommand->name[0] != 'e'
    650                            ? ZCL_ADD_SCENE_COMMAND_ID
    651                            : ZCL_ENHANCED_ADD_SCENE_COMMAND_ID));
    652            zclBufferAddWordFromArgument(0);
    653            zclBufferAddByteFromArgument(1);
    654            zclBufferAddWordFromArgument(2);
    655            zclBufferAddLengthAndStringFromArgument(3);
    656          
    657          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    658            // cluster:2 len:1 value:1 (on/off extension)
    659            zclBufferAddWord(ZCL_ON_OFF_CLUSTER_ID);
    660            zclBufferAddByte(1);
    661            zclBufferAddByte(addScenesOnOffValue);
    662          #endif //ZCL_USING_ON_OFF_CLUSTER_CLIENT
    663          
    664          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    665            // cluster:2 len:1 value:1 (level control extension)
    666            zclBufferAddWord(ZCL_LEVEL_CONTROL_CLUSTER_ID);
    667            zclBufferAddByte(1);
    668            zclBufferAddByte(addScenesLevelValue);
    669          #endif //ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    670          
    671            cliBufferPrint();
    672          }
    673          
    674          // zcl scenes view <groupId:2> <sceneId:1>
    675          // zcl scenes eview <groupId:2> <sceneId:1>
    676          void zclScenesViewCommand(void)
    677          {
    678            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID,
    679                                   (emberCurrentCommand->name[0] != 'e'
    680                                    ? ZCL_VIEW_SCENE_COMMAND_ID
    681                                    : ZCL_ENHANCED_VIEW_SCENE_COMMAND_ID));
    682          }
    683          
    684          // zcl scenes remove <groupId:2> <sceneId:1>
    685          void zclScenesRemoveCommand(void)
    686          {
    687            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_REMOVE_SCENE_COMMAND_ID);
    688          }
    689          
    690          // zcl scenes rmall <groupId:2>
    691          void zclScenesRemoveAllCommand(void)
    692          {
    693            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_REMOVE_ALL_SCENES_COMMAND_ID);
    694          }
    695          
    696          // zcl scenes store <groupId:2> <sceneId:1>
    697          void zclScenesStoreCommand(void)
    698          {
    699            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_STORE_SCENE_COMMAND_ID);
    700          }
    701          
    702          // zcl scenes recall <groupId:2> <sceneId:1>
    703          void zclScenesRecallCommand(void)
    704          {
    705            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_RECALL_SCENE_COMMAND_ID);
    706          }
    707          
    708          // zcl scenes get <groupId:2>
    709          void zclScenesGetMembershipCommand(void)
    710          {
    711            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID);
    712          }
    713          
    714          // zcl scenes copy <mode:1> <group id from:2> <scenes id from:1> <group id to:2> <scene id:1>
    715          void zclScenesCopyCommand(void)
    716          {
    717            zclSimpleClientCommand(ZCL_SCENES_CLUSTER_ID, ZCL_COPY_SCENE_COMMAND_ID);
    718          }
    719          
    720          // zcl scenes set [on|off] <level:1>
    721          void zclScenesSetCommand(void)
    722          {
    723          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    724            addScenesOnOffValue = (emberCurrentCommand->name[1] == 'n');
    725          #endif
    726          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    727            addScenesLevelValue = (int8u)emberUnsignedCommandArgument(0);
    728          #endif
    729          }
    730          #endif //ZCL_USING_SCENES_CLUSTER_CLIENT
    731          
    732          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
    733          // zcl on-off [ off | on | toggle ]
    734          void zclOnOffCommand(void)
    735          {
    736            int8u secondChar = emberCurrentCommand->name[1];
    737            int8u commandId = (secondChar == 'n'
    738                               ? ZCL_ON_COMMAND_ID
    739                               : (secondChar == 'f'
    740                                  ? ZCL_OFF_COMMAND_ID
    741                                  : ZCL_TOGGLE_COMMAND_ID));
    742            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID, commandId);
    743          }
    744          
    745          // zcl on-off offeffect <effect id:1> <effect variant:1>
    746          void zclOnOffOffWithEffectCommand(void)
    747          {
    748            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID, ZCL_OFF_WITH_EFFECT_COMMAND_ID);
    749          }
    750          
    751          // zcl on-off onrecall
    752          void zclOnOffOnWithRecallGlobalSceneCommand(void)
    753          {
    754            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID,
    755                                   ZCL_ON_WITH_RECALL_GLOBAL_SCENE_COMMAND_ID);
    756          }
    757          
    758          // zcl on-off ontimedoff <on off control:1> <on time:2> <off wait time:2>
    759          void zclOnOffOnWithTimedOffCommand(void)
    760          {
    761            zclSimpleClientCommand(ZCL_ON_OFF_CLUSTER_ID,
    762                                   ZCL_ON_WITH_TIMED_OFF_COMMAND_ID);
    763          }
    764          
    765          #endif //ZCL_USING_ON_OFF_CLUSTER_CLIENT
    766          
    767          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    768          // zcl level-control mv-to-level [level:1] [trans time:2]
    769          // zcl level-control o-mv-to-level [level:1] [trans time:2]
    770          void zclLevelControlMoveToLevelCommand(void) 
    771          {
    772            int8u commandId = (emberCurrentCommand->name[0] == 'o'
    773                               ? ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID
    774                               : ZCL_MOVE_TO_LEVEL_COMMAND_ID);
    775            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    776          }
    777          
    778          // zcl level-control move [mode:1] [rate:1]
    779          // zcl level-control o-move [mode:1] [rate:1]
    780          void zclLevelControlMoveCommand(void) 
    781          {
    782            int8u commandId = (emberCurrentCommand->name[0] == 'o'
    783                               ? ZCL_MOVE_WITH_ON_OFF_COMMAND_ID
    784                               : ZCL_MOVE_COMMAND_ID);
    785            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    786          }
    787          
    788          // zcl level-control step [step:1] [step size:1] [trans time:2]
    789          // zcl level-control o-step [step:1] [step size:1] [trans time:2]
    790          void zclLevelControlStepCommand(void) 
    791          {
    792            int8u commandId = (emberCurrentCommand->name[0] == 'o'
    793                               ? ZCL_STEP_WITH_ON_OFF_COMMAND_ID
    794                               : ZCL_STEP_COMMAND_ID);
    795            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    796          }
    797          
    798          // zcl level-control stop
    799          // zcl level-control ostop
    800          void zclLevelControlStopCommand(void) 
    801          {
    802            int8u commandId = (emberCurrentCommand->name[0] == 'o'
    803                               ? ZCL_STOP_WITH_ON_OFF_COMMAND_ID
    804                               : ZCL_STOP_COMMAND_ID);
    805            zclSimpleClientCommand(ZCL_LEVEL_CONTROL_CLUSTER_ID, commandId);
    806          }
    807          #endif //ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
    808          
    809          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
    810          // zcl tstat set <mode:1 int> <amount:1 int>
    811          void zclThermostatSetCommand(void)
    812          {
    813            zclSimpleClientCommand(ZCL_THERMOSTAT_CLUSTER_ID, 
    814                                   ZCL_SETPOINT_RAISE_LOWER_COMMAND_ID);
    815          }
    816          #endif // ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
    817          
    818          #ifdef ZCL_USING_IAS_ZONE_CLUSTER_SERVER
    819          // zcl ias-zone enroll <zone type: 2 int> <manuf code: 2 int>

   \                                 In section .text, align 2, keep-with-next
    820          void zclIasZoneEnrollCommand(void)
    821          {
   \                     zclIasZoneEnrollCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    822            zclSimpleServerCommand(ZCL_IAS_ZONE_CLUSTER_ID, 
    823                                   ZCL_ZONE_ENROLL_REQUEST_COMMAND_ID);
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x....             B.N      ?Subroutine3
    824            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
    825          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0xF44F 0x61A0      MOV      R1,#+1280
   \   00000004   0x2009             MOVS     R0,#+9
   \   00000006   0x.... 0x....      BL       zclSimpleCommand
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable57_2
   \   0000000E   0x88C1             LDRH     R1,[R0, #+6]
   \   00000010   0xF441 0x6180      ORR      R1,R1,#0x400
   \   00000014   0x80C1             STRH     R1,[R0, #+6]
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    826          
    827          // zcl ias-zone sc <zone status: 2 int> <ext status: 1 int> <zone id: 1 int> <delay: 2 int>

   \                                 In section .text, align 2, keep-with-next
    828          void zclIasZoneStatusChangeCommand(void)
    829          {
   \                     zclIasZoneStatusChangeCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    830            zclSimpleServerCommand(ZCL_IAS_ZONE_CLUSTER_ID,
    831                                   ZCL_ZONE_STATUS_CHANGE_NOTIFICATION_COMMAND_ID);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004                      REQUIRE ?Subroutine3
   \   00000004                      ;; // Fall through to label ?Subroutine3
    832            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
    833          }
    834          #endif // ZCL_USING_IAS_ZONE_CLUSTER_SERVER
    835          
    836          #ifdef ZCL_USING_IAS_ACE_CLUSTER_CLIENT
    837          // zcl ias-ace a <int:1>
    838          void zclIasAceArmCommand(void)
    839          {
    840            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_ARM_COMMAND_ID);
    841          }
    842          
    843          // zcl ias-ace b <zones as hex string>
    844          void zclIasAceBypassCommand(void)
    845          {
    846            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_BYPASS_COMMAND_ID);
    847          }
    848          
    849          // zcl ias-ace e
    850          void zclIasAceEmergencyCommand(void)
    851          {
    852            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_EMERGENCY_COMMAND_ID);
    853          }
    854          
    855          // zcl ias-ace f
    856          void zclIasAceFireCommand(void)
    857          {
    858            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_FIRE_COMMAND_ID);
    859          }
    860          
    861          // zcl ias-ace p
    862          void zclIasAcePanicCommand(void)
    863          {
    864            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, ZCL_PANIC_COMMAND_ID);
    865          }
    866          
    867          // zcl ias-ace getzm
    868          void zclIasAceGetZoneMapCommand(void)
    869          {
    870            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, 
    871                                   ZCL_GET_ZONE_ID_MAP_COMMAND_ID);
    872          }
    873          
    874          // zcl ias-ace getzi <zone id:1>
    875          void zclIasAceGetZoneInfoCommand(void)
    876          {
    877            zclSimpleClientCommand(ZCL_IAS_ACE_CLUSTER_ID, 
    878                                   ZCL_GET_ZONE_INFORMATION_COMMAND_ID);
    879          }
    880          #endif // ZCL_USING_IAS_ACE_CLUSTER_CLIENT
    881          
    882          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
    883          // zcl colorcontrol movetohue <hue:1> <direction:1> <transition time:2>
    884          // zcl colorcontrol emovetohue <enhanced hue:2> <direction:1> <transition time:2>
    885          void zclColorControlMoveToHueCommand(void)
    886          {
    887            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    888                                   (emberCurrentCommand->name[0] != 'e'
    889                                    ? ZCL_MOVE_TO_HUE_COMMAND_ID
    890                                    : ZCL_ENHANCED_MOVE_TO_HUE_COMMAND_ID));
    891          }
    892          
    893          // zcl colorcontrol movehue <move mode:1> <rate:1>
    894          // zcl colorcontrol emovehue <move mode:1> <rate:2>
    895          void zclColorControlMoveHueCommand(void)
    896          {
    897            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    898                                   (emberCurrentCommand->name[0] != 'e'
    899                                    ? ZCL_MOVE_HUE_COMMAND_ID
    900                                    : ZCL_ENHANCED_MOVE_HUE_COMMAND_ID));
    901          }
    902          
    903          // zcl colorcontrol stephue <step mode:1> <step size:1> <transition time:1>
    904          // zcl colorcontrol estephue <step mode:1> <step size:2> <transition time:2>
    905          void zclColorControlStepHueCommand(void)
    906          {
    907            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    908                                   (emberCurrentCommand->name[0] != 'e'
    909                                    ? ZCL_STEP_HUE_COMMAND_ID
    910                                    : ZCL_ENHANCED_STEP_HUE_COMMAND_ID));
    911          }
    912          
    913          // zcl colorcontrol movetosat <saturation:1> <transition time:2>
    914          void zclColorControlMoveToSatCommand(void)
    915          {
    916            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    917                                   ZCL_MOVE_TO_SATURATION_COMMAND_ID);
    918          }
    919          
    920          // zcl colorcontrol movesat <move mode:1> <rate:1>
    921          void zclColorControlMoveSatCommand(void)
    922          {
    923            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    924                                   ZCL_MOVE_SATURATION_COMMAND_ID);
    925          }
    926          
    927          // zcl colorcontrol stepsat <step mode:1> <step size:1> <transition time:1>
    928          void zclColorControlStepSatCommand(void)
    929          {
    930            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    931                                   ZCL_STEP_SATURATION_COMMAND_ID);
    932          }
    933          
    934          // zcl colorcontrol movetohueandsat <hue:1> <saturation:1> <transition time:2>
    935          // zcl colorcontrol emovetohueandsat <enhanced hue:2> <saturation:1> <transition time:2>
    936          void zclColorControlMoveToHueAndSatCommand(void)
    937          {
    938            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    939                                   (emberCurrentCommand->name[0] != 'e'
    940                                    ? ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID
    941                                    : ZCL_ENHANCED_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID));
    942          }
    943          
    944          // zcl colorcontrol movetocolor <color x:2> <color y:2> <transition time:2>
    945          void zclColorControlMoveToColorCommand(void)
    946          {
    947            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    948                                   ZCL_MOVE_TO_COLOR_COMMAND_ID);
    949          }
    950          
    951          // zcl colorcontrol movecolor <rate x:2> <rate y:2>
    952          // zcl colorcontrol movecolortemp <move mode:1> <rate:2> <color temperature min:2> <color temperature max:2>
    953          void zclColorControlMoveColorCommand(void)
    954          {
    955            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    956                                   (emberCurrentCommand->argumentTypes[0] == 'v'
    957                                    ? ZCL_MOVE_COLOR_COMMAND_ID
    958                                    : ZCL_MOVE_COLOR_TEMPERATURE_COMMAND_ID));
    959          }
    960          
    961          // zcl colorcontrol stepcolor <step x:2> <step y:2> <transition time:2>
    962          // zcl colorcontrol stepcolortemp <step mode:1> <step size:2> <transition time:2> <color temperature min:2> <color temperature max:2>
    963          void zclColorControlStepColorCommand(void)
    964          {
    965            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    966                                   (emberCurrentCommand->argumentTypes[0] == 'v'
    967                                    ? ZCL_STEP_COLOR_COMMAND_ID
    968                                    : ZCL_STEP_COLOR_TEMPERATUE_COMMAND_ID));
    969          }
    970          
    971          // zcl colorcontrol movetocolortemp <color temperature:2> <transition time:2>
    972          void zclColorControlMoveToColorTemperatureCommand(void)
    973          {
    974            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    975                                   ZCL_MOVE_TO_COLOR_TEMPERATURE_COMMAND_ID);
    976          }
    977          
    978          // zcl colorcontrol loop <update flags:1> <action:1> <direction:1> <time:2> <start hue:2>
    979          void zclColorControlColorLoopSetCommand(void)
    980          {
    981            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    982                                   ZCL_COLOR_LOOP_SET_COMMAND_ID);
    983          }
    984          
    985          // zcl colorcontrol stopmovestep
    986          void zclColorControlStopMoveStepCommand(void)
    987          {
    988            zclSimpleClientCommand(ZCL_COLOR_CONTROL_CLUSTER_ID,
    989                                   ZCL_STOP_MOVE_STEP_COMMAND_ID);
    990          }
    991          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
    992          
    993          #ifdef ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
    994          void zclPollControlFastPollStopCommand(void)
    995          {
    996            zclSimpleClientCommand(ZCL_POLL_CONTROL_CLUSTER_ID,
    997                                   ZCL_FAST_POLL_STOP_COMMAND_ID);
    998          }
    999          
   1000          // zcl poll-control long <long poll interval:4>
   1001          // zcl poll-control short <short poll interval:2>
   1002          void zclPollControlSetPollIntervalCommand(void)
   1003          {
   1004            zclSimpleClientCommand(ZCL_POLL_CONTROL_CLUSTER_ID,
   1005                                   (emberCurrentCommand->name[0] == 'l'
   1006                                    ? ZCL_SET_LONG_POLL_INTERVAL_COMMAND_ID
   1007                                    : ZCL_SET_SHORT_POLL_INTERVAL_COMMAND_ID));
   1008          }
   1009          #endif
   1010          
   1011          #ifdef ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   1012          //zcl power-profile profile <profile id:1>
   1013          void zclPowerProfileRequestCommand(void)
   1014          {
   1015            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1016                                   ZCL_POWER_PROFILE_REQUEST_COMMAND_ID);
   1017          }
   1018          
   1019          //zcl power-profile state
   1020          void zclPowerProfileStateRequestCommand(void)
   1021          {
   1022            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1023                                   ZCL_POWER_PROFILE_STATE_REQUEST_COMMAND_ID);
   1024          }
   1025          
   1026          //zcl power-profile energy-phases-schedule <profile id:1> <num scheduled phases:1> [<energy phase ID:1> <scheduled time:2> * num scheduled phases]
   1027          void zclPowerProfileEnergyPhasesScheduleNotificationCommand(void)
   1028          {
   1029            int8u i;
   1030            int8u numScheduledPhases = (int8u)emberUnsignedCommandArgument(1);
   1031            
   1032            //Check if an even number of args and minimum number of args were supplied
   1033            if(emberCommandArgumentCount()&1 || emberCommandArgumentCount() < 2)
   1034            {
   1035              emberAfGuaranteedPrintln("Wrong number of args");
   1036              emberAfGuaranteedPrintln("Usage:");
   1037              emberAfGuaranteedPrint("<profile id:1> <num scheduled phases:1> ");
   1038              emberAfGuaranteedPrint("[<energy phase ID:1> <scheduled time:2> * ");
   1039              emberAfGuaranteedPrintln("num scheduled phases]");
   1040            } else {
   1041              zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1042                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1043                           ZCL_POWER_PROFILE_CLUSTER_ID,
   1044                           ZCL_ENERGY_PHASES_SCHEDULE_NOTIFICATION_COMMAND_ID);
   1045                
   1046              zclBufferAddByteFromArgument(0);   // profile id
   1047              zclBufferAddByte(numScheduledPhases); // number scheduled phase count
   1048              
   1049              //Add energy phase ID and scheduled time pairs
   1050              for (i = 2; (i+1) < emberCommandArgumentCount(); i+=2) {
   1051                zclBufferAddByteFromArgument(i);
   1052                zclBufferAddWordFromArgument(i+1);
   1053              }
   1054              cliBufferPrint();
   1055            }
   1056          }
   1057          
   1058          //zcl power-profile schedule-constraints <profile id:1>
   1059          void zclPowerProfileScheduleConstraintsRequestCommand(void)
   1060          {
   1061            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1062                                   ZCL_POWER_PROFILE_SCHEDULE_CONSTRAINTS_REQUEST_COMMAND_ID);
   1063          }
   1064          
   1065          //zcl power-profile energy-phases-schedule-states <profile id:1>
   1066          void zclPowerProfileEnergyPhasesScheduleStateRequestCommand(void)
   1067          {
   1068            zclSimpleClientCommand(ZCL_POWER_PROFILE_CLUSTER_ID,
   1069                                   ZCL_ENERGY_PHASES_SCHEDULE_STATE_REQUEST_COMMAND_ID);
   1070          }
   1071          #endif //ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   1072          
   1073          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   1074          static void zclWindowCoveringUpCommand(void)
   1075          {
   1076            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1077                                   ZCL_WINDOW_COVERING_UP_OPEN_COMMAND_ID);
   1078          }
   1079          
   1080          static void zclWindowCoveringDownCommand(void)
   1081          {
   1082            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1083                                   ZCL_WINDOW_COVERING_DOWN_CLOSE_COMMAND_ID);
   1084          }
   1085          
   1086          static void zclWindowCoveringStopCommand(void)
   1087          {
   1088            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1089                                   ZCL_WINDOW_COVERING_STOP_COMMAND_ID);
   1090          }
   1091          
   1092          static void zclWindowCoveringGoToLiftValueCommand(void)
   1093          {
   1094            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1095                                   ZCL_WINDOW_COVERING_GO_TO_LIFT_VALUE_COMMAND_ID);
   1096          }
   1097          
   1098          static void zclWindowCoveringGoToLiftPercentageCommand(void)
   1099          {
   1100            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1101                                   ZCL_WINDOW_COVERING_GO_TO_LIFT_PERCENTAGE_COMMAND_ID);
   1102          }
   1103          
   1104          static void zclWindowCoveringGoToTiltValueCommand(void)
   1105          {
   1106            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1107                                   ZCL_WINDOW_COVERING_GO_TO_TILT_VALUE_COMMAND_ID);
   1108          }
   1109          
   1110          static void zclWindowCoveringGoToTiltPercentageCommand(void)
   1111          {
   1112            zclSimpleClientCommand(ZCL_WINDOW_COVERING_CLUSTER_ID,
   1113                                   ZCL_WINDOW_COVERING_GO_TO_TILT_PERCENTAGE_COMMAND_ID);
   1114          }
   1115          #endif //ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   1116          
   1117          #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER
   1118          // zcl drlc lce <eventId:4> <start:4> <duration:2> <event control:1>
   1119          void zclDrlcLoadControlEventCommand(void)
   1120          {
   1121            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1122                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1123                           ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1124                           ZCL_LOAD_CONTROL_EVENT_COMMAND_ID);
   1125            zclBufferAddInt32FromArgument(0);  // event id
   1126            zclBufferAddWord(0x0fff);          // all device classes
   1127            zclBufferAddByte(0);               // all uegs
   1128            zclBufferAddInt32FromArgument(1);  // start
   1129            zclBufferAddWordFromArgument(2);   // duration
   1130            zclBufferAddByte(1);               // criticality level, normal
   1131            zclBufferAddByte(0);               // 1.1c cooling temp offset
   1132            zclBufferAddByte(0);               // 1.1c heating temp offset
   1133            zclBufferAddWord(0x1a09);          // cool temp set point 23.3c
   1134            zclBufferAddWord(0x1a09);          // heat temp set point
   1135            zclBufferAddByte(0x0a);            // -10% avg load percent
   1136            zclBufferAddByte(0);               // duty cycle
   1137            zclBufferAddByteFromArgument(3);   // event control
   1138            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1139            cliBufferPrint();
   1140          }
   1141          
   1142          // zcl drlc cl <eventId:4> <device class:2> <ueg: 1> <cancel control: 1> <start time:4>
   1143          void zclDrlcCancelCommand(void)
   1144          {
   1145            zclSimpleServerCommand(ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1146                                   ZCL_CANCEL_LOAD_CONTROL_EVENT_COMMAND_ID);
   1147            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1148          }
   1149          
   1150          // zcl drlc ca
   1151          void zclDrlcCancelAllCommand(void)
   1152          {
   1153            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1154                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1155                           ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1156                           ZCL_CANCEL_ALL_LOAD_CONTROL_EVENTS_COMMAND_ID);
   1157            zclBufferAddByte(0);  // bogus time
   1158            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1159            cliBufferPrint();
   1160          }
   1161          
   1162          #else
   1163          // TODO: the generated CLI is sucking in this method regardless of whether or not it should;
   1164          // I suspect it has to do with the segmentaton of CLI commands, and it should be fixed, but 
   1165          // for now I'm stubbing it. - Jeremy

   \                                 In section .text, align 2, keep-with-next
   1166          void zclDrlcLoadControlEventCommand(void)
   1167          {
   1168          }
   \                     zclDrlcLoadControlEventCommand:
   \   00000000   0x4770             BX       LR               ;; return
   1169          
   1170          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER
   1171          
   1172          #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT
   1173          // zcl drlc gse <start time:4> <number of events:1>
   1174          void zclDrlcGetScheduledEventsCommand(void)
   1175          {
   1176            zclSimpleClientCommand(ZCL_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_ID,
   1177                                   ZCL_GET_SCHEDULED_EVENTS_COMMAND_ID);
   1178          }
   1179          
   1180          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT
   1181          
   1182          
   1183          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   1184          // zcl sm  gp <type:1> <time:4> <intervals:1>
   1185          void zclSimpleMeteringGetProfileCommand(void)
   1186          {
   1187            zclSimpleClientCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1188                                   ZCL_GET_PROFILE_COMMAND_ID);
   1189          }
   1190          
   1191          // zcl sm fp <update period:1> <duration:1>
   1192          void zclSimpleMeteringFastPollCommand(void)
   1193          {
   1194            zclSimpleClientCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1195                                   ZCL_REQUEST_FAST_POLL_MODE_COMMAND_ID);
   1196          }
   1197          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   1198          
   1199          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   1200          // zcl sm rm
   1201          void zclSimpleMeteringRequestMirrorCommand(void)
   1202          {
   1203            zclSimpleServerCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1204                                   ZCL_REQUEST_MIRROR_COMMAND_ID);
   1205          }
   1206          
   1207          // zcl sm dm
   1208          void zclSimpleMeteringDeleteMirrorCommand(void)
   1209          {
   1210            zclSimpleServerCommand(ZCL_SIMPLE_METERING_CLUSTER_ID,
   1211                                   ZCL_MIRROR_REMOVED_COMMAND_ID);
   1212          }
   1213          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   1214          
   1215          #ifdef ZCL_USING_PRICE_CLUSTER_CLIENT
   1216          // zcl price current
   1217          void zclPriceGetCurrentCommand(void)
   1218          {
   1219            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1220                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1221                           ZCL_PRICE_CLUSTER_ID,
   1222                           ZCL_GET_CURRENT_PRICE_COMMAND_ID);
   1223            zclBufferAddByte(0);  // command options
   1224            cliBufferPrint();
   1225          }
   1226          
   1227          // zcl price scheduled <startTime:4> <num-events:1>
   1228          void zclPriceGetScheduleCommand(void)
   1229          {
   1230            zclSimpleClientCommand(ZCL_PRICE_CLUSTER_ID,
   1231                                   ZCL_GET_SCHEDULED_PRICES_COMMAND_ID);
   1232          }
   1233          #endif //ZCL_USING_PRICE_CLUSTER_CLIENT
   1234          
   1235          
   1236          #ifdef ZCL_USING_MESSAGING_CLUSTER_CLIENT
   1237          // zcl message get
   1238          void zclMessageGetCommand(void)
   1239          {
   1240            zclSimpleClientCommand(ZCL_MESSAGING_CLUSTER_ID,
   1241                                   ZCL_GET_LAST_MESSAGE_COMMAND_ID);
   1242          }
   1243          #endif //ZCL_USING_MESSAGING_CLUSTER_CLIENT
   1244          
   1245          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   1246          // zcl tunnel match <address bytes>
   1247          void zclTunnelMatchCommand(void)
   1248          {
   1249            zclSimpleClientCommand(ZCL_GENERIC_TUNNEL_CLUSTER_ID,
   1250                                   ZCL_MATCH_PROTOCOL_ADDRESS_COMMAND_ID);
   1251          }
   1252          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   1253          
   1254          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   1255          // zcl tunnel advertise <address bytes>
   1256          void zclTunnelAdvertiseCommand(void)
   1257          {
   1258            zclSimpleServerCommand(ZCL_GENERIC_TUNNEL_CLUSTER_ID,
   1259                                   ZCL_ADVERTISE_PROTOCOL_ADDRESS_COMMAND_ID);
   1260          }
   1261          
   1262          // zcl tunnel response
   1263          void zclTunnelResponseCommand(void)
   1264          {
   1265            zclSimpleServerCommand(ZCL_GENERIC_TUNNEL_CLUSTER_ID,
   1266                                   ZCL_MATCH_PROTOCOL_ADDRESS_RESPONSE_COMMAND_ID);
   1267          }
   1268          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   1269          
   1270          #ifdef ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   1271          // zcl bacnet transfer-npdu fixed <length:1> <bytes>
   1272          void zclBacnetTransferFixedCommand(void)
   1273          {
   1274            // not done yet
   1275          }
   1276          
   1277          // zcl bacnet transfer-npdu random <length:1>
   1278          void zclBacnetTransferRandomCommand(void)
   1279          {
   1280            int8u i;
   1281            int8u length = (int8u)emberUnsignedCommandArgument(0);
   1282            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1283                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1284                           ZCL_BACNET_PROTOCOL_TUNNEL_CLUSTER_ID,
   1285                           ZCL_TRANSFER_NPDU_COMMAND_ID);
   1286            zclBufferAddByte(length);
   1287            for (i = 0; i < length; i++) {
   1288              zclBufferAddByte(LOW_BYTE(halCommonGetRandom()));
   1289            }
   1290            cliBufferPrint();  
   1291          }
   1292          
   1293          // zcl bacnet transfer-npdu whois
   1294          void zclBacnetTransferWhoisCommand(void)
   1295          {
   1296            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1297                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1298                           ZCL_BACNET_PROTOCOL_TUNNEL_CLUSTER_ID,
   1299                           ZCL_TRANSFER_NPDU_COMMAND_ID);
   1300            //zclBufferAddByte(0);            // what is this?
   1301            zclBufferAddInt32(0xFFFF2001);
   1302            zclBufferAddInt32(0x0810FF00);
   1303            cliBufferPrint();
   1304          }
   1305          #endif //ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   1306          
   1307          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   1308          // zcl lock [ lock | unlock ]
   1309          void zclDoorLockCommand(void)
   1310          {
   1311            zclSimpleClientCommand(ZCL_DOOR_LOCK_CLUSTER_ID,
   1312                                   (emberCurrentCommand->name[0] == 'l'
   1313                                    ? ZCL_LOCK_DOOR_COMMAND_ID
   1314                                    : ZCL_UNLOCK_DOOR_COMMAND_ID));
   1315          }
   1316          #endif //ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   1317          
   1318          #ifdef ZCL_USING_TUNNELING_CLUSTER_CLIENT
   1319          // zcl tunneling request <protocol id:1> <manufacturer code:2> <flow control:1> <maxIncomingTxSize:2>
   1320          void zclTunnelingRequestCommand(void)
   1321          {
   1322            zclSimpleClientCommand(ZCL_TUNNELING_CLUSTER_ID,
   1323                                   ZCL_REQUEST_TUNNEL_COMMAND_ID);
   1324            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1325          }
   1326          
   1327          // zcl tunneling close <tunnel id:2>
   1328          void zclTunnelingCloseCommand(void)
   1329          {
   1330            zclSimpleClientCommand(ZCL_TUNNELING_CLUSTER_ID,
   1331                                   ZCL_CLOSE_TUNNEL_COMMAND_ID);
   1332            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1333          }
   1334          
   1335          // zcl tunneling transfer-to-server <tunnel id:2> <data>
   1336          void zclTunnelingTransferToServerCommand(void)
   1337          {
   1338            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1339                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1340                           ZCL_TUNNELING_CLUSTER_ID,
   1341                           ZCL_TRANSFER_DATA_CLIENT_TO_SERVER_COMMAND_ID);
   1342            zclBufferAddWordFromArgument(0);              // tunnel id
   1343            appZclBufferLen += emberCopyStringArgument(1, // data
   1344                                                       appZclBuffer + appZclBufferLen,
   1345                                                       0xFF,   // copy as much data as possible
   1346                                                       FALSE); // no padding
   1347            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1348            cliBufferPrint();
   1349          }
   1350          
   1351          // zcl tunneling random-to-server <tunnel id:2> <length:2>
   1352          void zclTunnelingRandomToServerCommand(void)
   1353          {
   1354            int16u length = (int16u)emberUnsignedCommandArgument(1); // length of random data
   1355            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1356                           | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1357                           ZCL_TUNNELING_CLUSTER_ID,
   1358                           ZCL_TRANSFER_DATA_CLIENT_TO_SERVER_COMMAND_ID);
   1359            zclBufferAddWordFromArgument(0); // tunnel id
   1360            appZclBufferLen = (appZclBufferLen + length < APP_ZCL_BUFFER_SIZE
   1361                               ? appZclBufferLen + length
   1362                               : APP_ZCL_BUFFER_SIZE);
   1363            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1364            cliBufferPrint();
   1365          }
   1366          #endif //ZCL_USING_TUNNELING_CLUSTER_CLIENT
   1367          
   1368          #ifdef ZCL_USING_TUNNELING_CLUSTER_SERVER
   1369          // zcl tunneling transfer-to-client <tunnel id:2> <data>
   1370          void zclTunnelingTransferToClientCommand(void)
   1371          {
   1372            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1373                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1374                           ZCL_TUNNELING_CLUSTER_ID,
   1375                           ZCL_TRANSFER_DATA_SERVER_TO_CLIENT_COMMAND_ID);
   1376            zclBufferAddWordFromArgument(0);              // tunnel id
   1377            appZclBufferLen += emberCopyStringArgument(1, // data
   1378                                                       appZclBuffer + appZclBufferLen,
   1379                                                       0xFF,   // copy as much data as possible
   1380                                                       FALSE); // no padding
   1381            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1382            cliBufferPrint();
   1383          }
   1384          
   1385          // zcl tunneling random-to-client <tunnel id:2> <length:2>
   1386          void zclTunnelingRandomToClientCommand(void)
   1387          {
   1388            int16u length = (int16u)emberUnsignedCommandArgument(1); // length of random data
   1389            zclBufferSetup(ZCL_CLUSTER_SPECIFIC_COMMAND
   1390                           | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT,
   1391                           ZCL_TUNNELING_CLUSTER_ID,
   1392                           ZCL_TRANSFER_DATA_SERVER_TO_CLIENT_COMMAND_ID);
   1393            zclBufferAddWordFromArgument(0); // tunnel id
   1394            appZclBufferLen = (appZclBufferLen + length < APP_ZCL_BUFFER_SIZE
   1395                               ? appZclBufferLen + length
   1396                               : APP_ZCL_BUFFER_SIZE);
   1397            globalApsFrame.options |= EMBER_APS_OPTION_SOURCE_EUI64;
   1398            cliBufferPrint();
   1399          }
   1400          #endif //ZCL_USING_TUNNELING_CLUSTER_SERVER
   1401          
   1402          // ******************************************************
   1403          // send <id> <src endpoint> <dst endpoint>
   1404          // send_multicast <group id> <src endpoint>
   1405          //
   1406          // FFFC = all routers
   1407          // FFFD = all non-sleepy
   1408          // FFFF = all devices, include sleepy
   1409          // ******************************************************

   \                                 In section .text, align 2, keep-with-next
   1410          void emAfCliSendCommand(void)
   1411          {
   \                     emAfCliSendCommand:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   1412            int16u destination = (int16u)emberUnsignedCommandArgument(0);
   \   00000006   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_5:
   \   0000000A   0x4606             MOV      R6,R0
   1413            int8u srcEndpoint = (int8u)emberUnsignedCommandArgument(1);
   \   0000000C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_25:
   \   00000010   0x.... 0x....      BL       ?Subroutine13
   1414            int8u dstEndpoint = (int8u)emberUnsignedCommandArgument(2);
   1415            int8u *commandName = (int8u *)emberCurrentCommand->name;
   \                     ??CrossCallReturnLabel_48:
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable57_4
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0x680F             LDR      R7,[R1, #+0]
   1416            EmberStatus status;
   1417            int8u label;
   1418          
   1419            // check that cmd is built
   1420            if (zclCmdIsBuilt == FALSE) {
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable57_2
   \   00000020   0x7B21             LDRB     R1,[R4, #+12]
   \   00000022   0xB939             CBNZ.N   R1,??emAfCliSendCommand_0
   1421              emberAfCorePrintln("no cmd");
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "no cmd">`
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xB004             ADD      SP,SP,#+16
   \   0000002C   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000030   0x.... 0x....      B.W      emberAfPrintln
   1422              return;
   1423            }
   1424          
   1425            emAfApsFrameEndpointSetup(srcEndpoint, dstEndpoint);
   \                     ??emAfCliSendCommand_0:
   \   00000034   0xB2C1             UXTB     R1,R0
   \   00000036   0xB2E8             UXTB     R0,R5
   \   00000038   0x.... 0x....      BL       emAfApsFrameEndpointSetup
   1426          
   1427            if (commandName[4] == '_') {
   \   0000003C   0x89E2             LDRH     R2,[R4, #+14]
   \   0000003E   0x.... 0x....      LDR.W    R5,??DataTable57_3
   \   00000042   0x7938             LDRB     R0,[R7, #+4]
   \   00000044   0x285F             CMP      R0,#+95
   \   00000046   0xD106             BNE.N    ??emAfCliSendCommand_1
   1428              label = 'M';
   \   00000048   0x274D             MOVS     R7,#+77
   1429              status = emberAfSendMulticast(destination,
   1430                                            &globalApsFrame,
   1431                                            appZclBufferLen,
   1432                                            appZclBuffer);
   \   0000004A   0x462B             MOV      R3,R5
   \   0000004C   0x4621             MOV      R1,R4
   \   0000004E   0xB2B0             UXTH     R0,R6
   \   00000050   0x.... 0x....      BL       emberAfSendMulticast
   \   00000054   0xE013             B.N      ??emAfCliSendCommand_2
   1433            } else if (destination >= EMBER_BROADCAST_ADDRESS) {
   \                     ??emAfCliSendCommand_1:
   \   00000056   0xF64F 0x70FC      MOVW     R0,#+65532
   \   0000005A   0xB2B6             UXTH     R6,R6
   \   0000005C   0x4286             CMP      R6,R0
   \   0000005E   0xD306             BCC.N    ??emAfCliSendCommand_3
   1434              label = 'B';
   \   00000060   0x2742             MOVS     R7,#+66
   1435              status = emberAfSendBroadcast(destination,
   1436                                            &globalApsFrame,
   1437                                            appZclBufferLen,
   1438                                            appZclBuffer);
   \   00000062   0x462B             MOV      R3,R5
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0x.... 0x....      BL       emberAfSendBroadcast
   \   0000006C   0xE007             B.N      ??emAfCliSendCommand_2
   1439            } else {
   1440              label = 'U';
   \                     ??emAfCliSendCommand_3:
   \   0000006E   0x2755             MOVS     R7,#+85
   1441              status = emberAfSendUnicast(EMBER_OUTGOING_DIRECT,
   1442                                          destination,
   1443                                          &globalApsFrame,
   1444                                          appZclBufferLen,
   1445                                          appZclBuffer);
   \   00000070   0x9500             STR      R5,[SP, #+0]
   \   00000072   0x4613             MOV      R3,R2
   \   00000074   0x4622             MOV      R2,R4
   \   00000076   0x4631             MOV      R1,R6
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       emberAfSendUnicast
   1446            }
   1447          
   1448            if (status != EMBER_SUCCESS) {
   \                     ??emAfCliSendCommand_2:
   \   0000007E   0x0006             MOVS     R6,R0
   \   00000080   0xD005             BEQ.N    ??emAfCliSendCommand_4
   1449              emberAfCorePrintln("Error: CLI Send failed, status: 0x%X", status);
   \   00000082   0x4632             MOV      R2,R6
   \   00000084   0x.... 0x....      ADR.W    R1,`?<Constant "Error: CLI Send faile...">`
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x.... 0x....      BL       emberAfPrintln
   1450            }
   1451          
   1452            emberAfDebugPrintln("T%4x:TX (%p) %ccast 0x%x%p",
   1453                                emberAfGetCurrentTime(),
   1454                                "CLI",
   1455                                label,
   1456                                status,
   1457                                ((globalApsFrame.options & EMBER_APS_OPTION_ENCRYPTION)
   1458                                 ? " w/ link key" : ""));
   \                     ??emAfCliSendCommand_4:
   \   0000008E   0x79A0             LDRB     R0,[R4, #+6]
   \   00000090   0x0680             LSLS     R0,R0,#+26
   \   00000092   0xBF4C             ITE      MI 
   \   00000094   0x.... 0x....      ADRMI.W  R8,`?<Constant " w/ link key">`
   \   00000098   0x.... 0x....      ADRPL.W  R8,??DataTable56  ;; ""
   \   0000009C   0x.... 0x....      BL       emberAfGetCurrentTime
   \   000000A0   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   000000A4   0x9601             STR      R6,[SP, #+4]
   \   000000A6   0x9700             STR      R7,[SP, #+0]
   \   000000A8   0x.... 0x....      BL       ?Subroutine7
   1459            emberAfDebugPrint("TX buffer: [");
   \                     ??CrossCallReturnLabel_16:
   \   000000AC   0x.... 0x....      BL       ?Subroutine18
   1460            emberAfDebugFlush();
   1461            emberAfDebugPrintBuffer(appZclBuffer, appZclBufferLen, TRUE);
   \                     ??CrossCallReturnLabel_62:
   \   000000B0   0x2301             MOVS     R3,#+1
   \   000000B2   0x89E2             LDRH     R2,[R4, #+14]
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x2002             MOVS     R0,#+2
   \   000000B8   0x.... 0x....      BL       emberAfPrintBuffer
   1462            emberAfDebugPrintln("]");
   \   000000BC   0x....             ADR.N    R1,??DataTable56_1  ;; "]"
   \   000000BE   0x2002             MOVS     R0,#+2
   \   000000C0   0x.... 0x....      BL       emberAfPrintln
   1463            emberAfDebugFlush();
   1464          
   1465            zclCmdIsBuilt = FALSE;
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x7320             STRB     R0,[R4, #+12]
   1466            mfgSpecificId = EMBER_AF_NULL_MANUFACTURER_CODE;
   \   000000C8   0x8220             STRH     R0,[R4, #+16]
   1467          }
   \   000000CA   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "TX buffer: [">`
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      B.W      emberAfPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x....             ADR.N    R3,??DataTable57  ;; "CLI"
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "T%4x:TX (%p) %ccast 0...">`
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      B.W      emberAfPrintln
   1468          
   1469          // **********************************************************************
   1470          // bsend <src endpoint> - send using a binding based on the clusterId in
   1471          //            the globalApsFrame and the srcEndpoint specified (if the
   1472          //            src endpoint is zero it only sends based on the clusterId)
   1473          //
   1474          // **********************************************************************

   \                                 In section .text, align 2, keep-with-next
   1475          void emAfCliBsendCommand(void)
   1476          {
   \                     emAfCliBsendCommand:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   1477            int8u srcEndpointToUse, i;
   1478            EmberStatus status;
   1479            EmberBindingTableEntry candidate;
   1480          
   1481            // check that cmd is built
   1482            if (zclCmdIsBuilt == FALSE) {
   \   00000006   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_56:
   \   0000000A   0xB920             CBNZ.N   R0,??emAfCliBsendCommand_0
   1483              emberAfCorePrintln("cmd not built");
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "cmd not built">`
   \   00000010   0x.... 0x....      BL       ??Subroutine10_0
   1484              return;
   \                     ??CrossCallReturnLabel_30:
   \   00000014   0xE04F             B.N      ??emAfCliBsendCommand_1
   1485            }
   1486          
   1487            srcEndpointToUse = (int8u)emberUnsignedCommandArgument(0);
   \                     ??emAfCliBsendCommand_0:
   \   00000016   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_4:
   \   0000001A   0xB2C5             UXTB     R5,R0
   1488          
   1489            emberAfCorePrintln("src ep %x, clus %2x",
   1490                               srcEndpointToUse, 
   1491                               globalApsFrame.clusterId);
   \   0000001C   0x8863             LDRH     R3,[R4, #+2]
   \   0000001E   0x462A             MOV      R2,R5
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant "src ep %x, clus %2x">`
   \   00000024   0x.... 0x....      BL       ?Subroutine12
   1492          
   1493            // find a binding to send on
   1494            for (i = 0; i < EMBER_BINDING_TABLE_SIZE; i++) {
   \                     ??CrossCallReturnLabel_40:
   \   00000028   0x2600             MOVS     R6,#+0
   \   0000002A   0x.... 0x....      ADR.W    R11,`?<Constant " w/ link key">`
   \   0000002E   0x.... 0x....      LDR.W    R8,??DataTable57_3
   \   00000032   0x.... 0x....      ADR.W    R9,`?<Constant "sending to bind %x">`
   1495              status = emberGetBinding(i, &candidate);
   1496          
   1497              // if we can read the binding, it is unicast, the endpoint is the
   1498              // one we want (or we have no preference) and the cluster matches
   1499              // then use that binding to send the message
   1500              if (status == EMBER_SUCCESS
   1501                  && candidate.type == EMBER_UNICAST_BINDING
   1502                  && (srcEndpointToUse == 0
   1503                      || candidate.local == srcEndpointToUse)
   1504                  && candidate.clusterId == globalApsFrame.clusterId) {
   \                     ??emAfCliBsendCommand_2:
   \   00000036   0xA903             ADD      R1,SP,#+12
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       emberGetBinding
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xBF04             ITT      EQ 
   \   00000042   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   00000046   0x2801             CMPEQ    R0,#+1
   \   00000048   0xD132             BNE.N    ??emAfCliBsendCommand_3
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xBF1C             ITT      NE 
   \   0000004E   0xF89D 0x000D      LDRBNE   R0,[SP, #+13]
   \   00000052   0x42A8             CMPNE    R0,R5
   \   00000054   0xBF02             ITTT     EQ 
   \   00000056   0xF8BD 0x000E      LDRHEQ   R0,[SP, #+14]
   \   0000005A   0x8861             LDRHEQ   R1,[R4, #+2]
   \   0000005C   0x4288             CMPEQ    R0,R1
   \   0000005E   0xD127             BNE.N    ??emAfCliBsendCommand_3
   1505                emberAfCorePrintln("sending to bind %x", i);
   \   00000060   0x4632             MOV      R2,R6
   \   00000062   0x4649             MOV      R1,R9
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x.... 0x....      BL       emberAfPrintln
   1506          
   1507                status = emberAfSendUnicast(EMBER_OUTGOING_VIA_BINDING,
   1508                                            i,
   1509                                            &globalApsFrame,
   1510                                            appZclBufferLen,
   1511                                            appZclBuffer);
   \   0000006A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000006E   0x89E3             LDRH     R3,[R4, #+14]
   \   00000070   0x4622             MOV      R2,R4
   \   00000072   0x4631             MOV      R1,R6
   \   00000074   0x2002             MOVS     R0,#+2
   \   00000076   0x.... 0x....      BL       emberAfSendUnicast
   \   0000007A   0x4682             MOV      R10,R0
   1512          
   1513                emberAfDebugPrintln("T%4x:TX (%p) %ccast 0x%x%p",
   1514                                   emberAfGetCurrentTime(),
   1515                                   "CLI",
   1516                                   'U',
   1517                                   status,
   1518                                   ((globalApsFrame.options & EMBER_APS_OPTION_ENCRYPTION)
   1519                                    ? " w/ link key" : ""));
   \   0000007C   0x79A0             LDRB     R0,[R4, #+6]
   \   0000007E   0x0680             LSLS     R0,R0,#+26
   \   00000080   0xBF4C             ITE      MI 
   \   00000082   0x465F             MOVMI    R7,R11
   \   00000084   0x....             ADRPL.N  R7,??DataTable56  ;; ""
   \   00000086   0x.... 0x....      BL       emberAfGetCurrentTime
   \   0000008A   0x9702             STR      R7,[SP, #+8]
   \   0000008C   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \   00000090   0x2155             MOVS     R1,#+85
   \   00000092   0x9100             STR      R1,[SP, #+0]
   \   00000094   0x.... 0x....      BL       ?Subroutine7
   1520                emberAfDebugPrint("TX buffer: [");
   \                     ??CrossCallReturnLabel_15:
   \   00000098   0x.... 0x....      BL       ?Subroutine18
   1521                emberAfDebugFlush();
   1522                emberAfDebugPrintBuffer(appZclBuffer, appZclBufferLen, TRUE);
   \                     ??CrossCallReturnLabel_61:
   \   0000009C   0x2301             MOVS     R3,#+1
   \   0000009E   0x89E2             LDRH     R2,[R4, #+14]
   \   000000A0   0x4641             MOV      R1,R8
   \   000000A2   0x2002             MOVS     R0,#+2
   \   000000A4   0x.... 0x....      BL       emberAfPrintBuffer
   1523                emberAfDebugPrintln("]");
   \   000000A8   0x....             ADR.N    R1,??DataTable56_1  ;; "]"
   \   000000AA   0x2002             MOVS     R0,#+2
   \   000000AC   0x.... 0x....      BL       emberAfPrintln
   1524                emberAfDebugFlush();
   1525              }
   1526            }
   \                     ??emAfCliBsendCommand_3:
   \   000000B0   0x1C76             ADDS     R6,R6,#+1
   \   000000B2   0x2E02             CMP      R6,#+2
   \   000000B4   0xD3BF             BCC.N    ??emAfCliBsendCommand_2
   \                     ??emAfCliBsendCommand_1:
   \   000000B6   0xB007             ADD      SP,SP,#+28
   \   000000B8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1527          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "no cmd">`
   \                     ??Subroutine10_0:
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      B.W      emberAfPrintln
   1528          
   1529          
   1530          // timesync <id> <src endpoint> <dest endpoint>
   1531          //
   1532          // This sends a read attr for the time of the device specified. It sets a flag
   1533          // so when it gets the response it writes the time to its own time attr

   \                                 In section .text, align 2, keep-with-next
   1534          void emAfCliTimesyncCommand(void)
   1535          {
   \                     emAfCliTimesyncCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
   1536            // send a read attr for time 
   1537            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1538                           ZCL_TIME_CLUSTER_ID,
   1539                           ZCL_READ_ATTRIBUTES_COMMAND_ID);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x210A             MOVS     R1,#+10
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       zclBufferSetup
   1540            zclBufferAddWord(ZCL_TIME_ATTRIBUTE_ID);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       zclBufferAddWord
   1541            emAfSyncingTime = TRUE;
   \   00000012   0x....             LDR.N    R0,??DataTable57_5
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x7001             STRB     R1,[R0, #+0]
   1542            cliBufferPrint();
   \   00000018   0x.... 0x....      BL       cliBufferPrint
   1543            emAfCliSendCommand();
   \   0000001C   0xE8BD 0x4001      POP      {R0,LR}
   \   00000020   0x....             B.N      emAfCliSendCommand
   1544          }
   1545          
   1546          
   1547          // interpan group <groupId:2> <destPAN:2> <destProfileID:2>
   1548          // interpan short <shortId:2> <destPAN:2> <destProfileID:2>

   \                                 In section .text, align 2, keep-with-next
   1549          void interpanCommand(void) 
   1550          {
   \                     interpanCommand:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   1551            EmberStatus status;
   1552            EmberAfInterpanHeader header;
   1553            int16u shortOrGroupId;
   1554          
   1555            if (zclCmdIsBuilt == FALSE) {
   \   00000004   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_57:
   \   00000008   0xB910             CBNZ.N   R0,??interpanCommand_0
   1556              emberAfCorePrintln("no cmd");
   \   0000000A   0x.... 0x....      BL       ?Subroutine10
   1557              return;
   \                     ??CrossCallReturnLabel_32:
   \   0000000E   0xE026             B.N      ??CrossCallReturnLabel_71
   1558            }
   1559          
   1560            MEMSET(&header, 0, sizeof(EmberAfInterpanHeader));
   \                     ??interpanCommand_0:
   \   00000010   0x.... 0x....      BL       ?Subroutine19
   1561            shortOrGroupId = (int16u)emberUnsignedCommandArgument(0);
   \                     ??CrossCallReturnLabel_64:
   \   00000014   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_3:
   \   00000018   0x4605             MOV      R5,R0
   1562            header.panId = (int16u)emberUnsignedCommandArgument(1);
   \   0000001A   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_24:
   \   0000001E   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1563            header.profileId = (int16u)emberUnsignedCommandArgument(2);
   \   00000022   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_42:
   \   00000026   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1564            header.clusterId = globalApsFrame.clusterId;
   \   0000002A   0x8860             LDRH     R0,[R4, #+2]
   \   0000002C   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   1565          
   1566            if (emberCurrentCommand->name[0] == 'g') {
   \   00000030   0xB2AD             UXTH     R5,R5
   \   00000032   0x462B             MOV      R3,R5
   \   00000034   0x.... 0x....      ADR.W    R1,`?<Constant "interpan %p %2x">`
   \   00000038   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_60:
   \   0000003C   0x2867             CMP      R0,#+103
   \   0000003E   0xBF07             ITTEE    EQ 
   \   00000040   0xF8AD 0x5012      STRHEQ   R5,[SP, #+18]
   \   00000044   0x.... 0x....      ADREQ.W  R2,`?<Constant "group">`
   \   00000048   0xF8AD 0x500A      STRHNE   R5,[SP, #+10]
   \   0000004C   0x.... 0x....      ADRNE.W  R2,`?<Constant "short">`
   1567              header.groupId = shortOrGroupId;
   1568              emberAfDebugPrintln("interpan %p %2x", "group", header.groupId);    
   1569            } else {
   1570              header.shortAddress = shortOrGroupId;
   1571              emberAfDebugPrintln("interpan %p %2x", "short", shortOrGroupId);
   \   00000050   0x.... 0x....      BL       ??Subroutine24_0
   1572            }
   1573          
   1574            status = emberAfInterpanSendMessageCallback(&header,
   1575                                                        appZclBufferLen,
   1576                                                        appZclBuffer);
   \                     ??CrossCallReturnLabel_69:
   \   00000054   0x.... 0x....      BL       ?Subroutine21
   1577            if (status != EMBER_SUCCESS) {
   \                     ??CrossCallReturnLabel_66:
   \   00000058   0xB108             CBZ.N    R0,??CrossCallReturnLabel_71
   1578              emberAfDebugPrintln("%psend failed: 0x%X",
   1579                                  "ERR: Inter-PAN ",
   1580                                  status);
   \   0000005A   0x.... 0x....      BL       ?Subroutine20
   1581            }
   \                     ??CrossCallReturnLabel_71:
   \   0000005E   0xB007             ADD      SP,SP,#+28
   \   00000060   0xBD30             POP      {R4,R5,PC}       ;; return
   1582          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x....             LDR.N    R2,??DataTable57_3
   \   00000002   0x89E1             LDRH     R1,[R4, #+14]
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      B.W      emberAfInterpanSendMessageCallback

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x4603             MOV      R3,R0
   \   00000002   0x.... 0x....      ADR.W    R2,`?<Constant "ERR: Inter-PAN ">`
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "%psend failed: 0x%X">`
   \   0000000A                      REQUIRE ??Subroutine24_0
   \   0000000A                      ;; // Fall through to label ??Subroutine24_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine24_0:
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0x2216             MOVS     R2,#+22
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      B.W      halCommonMemSet
   1583          
   1584          // interpan long  <longId:8>  <destPAN:2> <destProfileID:2> <options:2>
   1585          //    Options: Bit(0) = encrypt.  Can only encrypt with this CLI command
   1586          //    since long address must be present.

   \                                 In section .text, align 2, keep-with-next
   1587          void interpanLongCommand(void) 
   1588          {
   \                     interpanLongCommand:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   1589            EmberStatus status;
   1590            EmberAfInterpanHeader header;
   1591          
   1592            if (zclCmdIsBuilt == FALSE) {
   \   00000004   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_58:
   \   00000008   0xB910             CBNZ.N   R0,??interpanLongCommand_0
   1593              emberAfCorePrintln("no cmd");
   \   0000000A   0x.... 0x....      BL       ?Subroutine10
   1594              return;
   \                     ??CrossCallReturnLabel_31:
   \   0000000E   0xE01C             B.N      ??CrossCallReturnLabel_70
   1595            }
   1596          
   1597            MEMSET(&header, 0, sizeof(EmberAfInterpanHeader));
   \                     ??interpanLongCommand_0:
   \   00000010   0x.... 0x....      BL       ?Subroutine19
   1598            header.panId = (int16u)emberUnsignedCommandArgument(1);
   \                     ??CrossCallReturnLabel_63:
   \   00000014   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_23:
   \   00000018   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1599            header.profileId = (int16u)emberUnsignedCommandArgument(2);
   \   0000001C   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_41:
   \   00000020   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1600            header.options = ((int16u)emberUnsignedCommandArgument(3)
   1601                              | EMBER_AF_INTERPAN_OPTION_MAC_HAS_LONG_ADDRESS);
   \   00000024   0x.... 0x....      BL       ??Subroutine14_0
   \                     ??CrossCallReturnLabel_49:
   \   00000028   0xF040 0x0002      ORR      R0,R0,#0x2
   \   0000002C   0xF8AD 0x0014      STRH     R0,[SP, #+20]
   1602            header.clusterId = globalApsFrame.clusterId;
   \   00000030   0x8860             LDRH     R0,[R4, #+2]
   \   00000032   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   1603            
   1604            emberAfCopyBigEndianEui64Argument(0, header.longAddress);
   \   00000036   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x.... 0x....      BL       emberAfCopyBigEndianEui64Argument
   1605          
   1606            status = emberAfInterpanSendMessageCallback(&header,
   1607                                                        appZclBufferLen,
   1608                                                        appZclBuffer);
   \   00000040   0x.... 0x....      BL       ?Subroutine21
   1609            if (status != EMBER_SUCCESS) {
   \                     ??CrossCallReturnLabel_65:
   \   00000044   0xB108             CBZ.N    R0,??CrossCallReturnLabel_70
   1610              emberAfDebugPrintln("%psend failed: 0x%X",
   1611                                  "ERR: Inter-PAN ",
   1612                                  status);
   \   00000046   0x.... 0x....      BL       ?Subroutine20
   1613            }
   \                     ??CrossCallReturnLabel_70:
   \   0000004A   0xB006             ADD      SP,SP,#+24
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return
   1614          }
   1615          

   \                                 In section .text, align 2, keep-with-next
   1616          void printTimeCommand(void) 
   1617          {
   \                     printTimeCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
   1618            emberAfPrintTime(emberAfGetCurrentTime());
   \   00000002   0x.... 0x....      BL       emberAfGetCurrentTime
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0x.... 0x....      B.W      emberAfPrintTime
   1619          }
   1620          
   1621          // read <endpoint:1> <cluster:2> <attribute:2> <mask:1>

   \                                 In section .text, align 2, keep-with-next
   1622          void emAfCliReadCommand(void)
   1623          {
   \                     emAfCliReadCommand:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   1624            EmberAfStatus status;
   1625            int8u endpoint = (int8u)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_2:
   \   00000008   0x4604             MOV      R4,R0
   1626            EmberAfClusterId cluster = (EmberAfClusterId)emberUnsignedCommandArgument(1);
   \   0000000A   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_22:
   \   0000000E   0x.... 0x....      BL       ?Subroutine13
   1627            EmberAfAttributeId attribute = (EmberAfAttributeId)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_47:
   \   00000012   0x.... 0x....      BL       ?Subroutine14
   1628            boolean serverAttribute = (boolean)emberUnsignedCommandArgument(3);
   \                     ??CrossCallReturnLabel_52:
   \   00000016   0xB2C7             UXTB     R7,R0
   1629            int8u data[ATTRIBUTE_LARGEST];
   1630            int8u dataType;
   1631            
   1632            emberAfCorePrint("%p: ep: %d, cl: 0x%2X, attr: 0x%2X", 
   1633                             "read",
   1634                             endpoint,
   1635                             cluster,
   1636                             attribute);
   \   00000018   0xB2B6             UXTH     R6,R6
   \   0000001A   0x9601             STR      R6,[SP, #+4]
   \   0000001C   0xB2AD             UXTH     R5,R5
   \   0000001E   0x9500             STR      R5,[SP, #+0]
   \   00000020   0xB2E4             UXTB     R4,R4
   \   00000022   0x4623             MOV      R3,R4
   \   00000024   0x.... 0x....      ADR.W    R2,`?<Constant "read">`
   \   00000028   0x.... 0x....      BL       ?Subroutine22
   1637            emberAfCorePrintln(", svr: %c", (serverAttribute ? 'y' : 'n'));
   \                     ??CrossCallReturnLabel_68:
   \   0000002C   0x2F00             CMP      R7,#+0
   \   0000002E   0xBF14             ITE      NE 
   \   00000030   0x2279             MOVNE    R2,#+121
   \   00000032   0x226E             MOVEQ    R2,#+110
   \   00000034   0x.... 0x....      ADR.W    R1,`?<Constant ", svr: %c">`
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       emberAfPrintln
   1638          
   1639            status = emberAfReadAttribute(endpoint,
   1640                                          cluster,
   1641                                          attribute,
   1642                                          (serverAttribute
   1643                                           ? CLUSTER_MASK_SERVER
   1644                                           : CLUSTER_MASK_CLIENT),
   1645                                          data,
   1646                                          sizeof(data),
   1647                                          &dataType);
   \   0000003E   0x2F00             CMP      R7,#+0
   \   00000040   0xBF14             ITE      NE 
   \   00000042   0x2340             MOVNE    R3,#+64
   \   00000044   0x2380             MOVEQ    R3,#+128
   \   00000046   0xA803             ADD      R0,SP,#+12
   \   00000048   0x9002             STR      R0,[SP, #+8]
   \   0000004A   0x2008             MOVS     R0,#+8
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   \   0000004E   0xA804             ADD      R0,SP,#+16
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x4632             MOV      R2,R6
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       emberAfReadAttribute
   1648            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   0000005C   0xB9B8             CBNZ.N   R0,??emAfCliReadCommand_0
   1649              if (emberAfIsThisDataTypeAStringType(dataType)) {
   \   0000005E   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000062   0x.... 0x....      BL       emberAfIsThisDataTypeAStringType
   \   00000066   0xB120             CBZ.N    R0,??emAfCliReadCommand_1
   1650                emberAfCorePrintString(data);
   \   00000068   0xA904             ADD      R1,SP,#+16
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x.... 0x....      BL       emberAfPrintString
   \   00000070   0xE009             B.N      ??emAfCliReadCommand_2
   1651              } else {
   1652                emberAfCorePrintBuffer(data, emberAfGetDataSize(dataType), TRUE);
   \                     ??emAfCliReadCommand_1:
   \   00000072   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000076   0x.... 0x....      BL       emberAfGetDataSize
   \   0000007A   0x2301             MOVS     R3,#+1
   \   0000007C   0x4602             MOV      R2,R0
   \   0000007E   0xA904             ADD      R1,SP,#+16
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      BL       emberAfPrintBuffer
   1653              }
   1654              emberAfCorePrintln("");
   \                     ??emAfCliReadCommand_2:
   \   00000086   0x....             ADR.N    R1,??DataTable56  ;; ""
   \   00000088   0x.... 0x....      BL       ??Subroutine10_0
   1655            } else {
   \                     ??CrossCallReturnLabel_29:
   \   0000008C   0xE006             B.N      ??CrossCallReturnLabel_39
   1656              emberAfCorePrintln("%p: read: 0x%x", "Error", status);
   \                     ??emAfCliReadCommand_0:
   \   0000008E   0x4603             MOV      R3,R0
   \   00000090   0x.... 0x....      ADR.W    R2,`?<Constant "Error">`
   \   00000094   0x.... 0x....      ADR.W    R1,`?<Constant "%p: read: 0x%x">`
   \   00000098   0x.... 0x....      BL       ?Subroutine12
   1657            }
   1658          }
   \                     ??CrossCallReturnLabel_39:
   \   0000009C   0xB007             ADD      SP,SP,#+28
   \   0000009E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "%p: ep: %d, cl: 0x%2X...">`
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      B.W      emberAfPrint
   1659          
   1660          // ******************************************************
   1661          // write <ep> <cluster> <attrID> <mask> <dataType> <data bytes>
   1662          // ******************************************************

   \                                 In section .text, align 2, keep-with-next
   1663          void emAfCliWriteCommand(void) 
   1664          {
   \                     emAfCliWriteCommand:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   1665            //int8u i;
   1666            boolean result;
   1667            int8u data[ATTRIBUTE_LARGEST];
   1668          
   1669            int8u  endpoint  = (int8u)emberUnsignedCommandArgument(0);
   \   00000006   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_1:
   \   0000000A   0x4680             MOV      R8,R0
   1670            int16u cluster   = (int16u)emberUnsignedCommandArgument(1);
   \   0000000C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_21:
   \   00000010   0x.... 0x....      BL       ?Subroutine13
   1671            int16u attribute = (int16u)emberUnsignedCommandArgument(2);
   \                     ??CrossCallReturnLabel_46:
   \   00000014   0x.... 0x....      BL       ?Subroutine14
   1672            boolean serverAttribute = (boolean)emberUnsignedCommandArgument(3);
   \                     ??CrossCallReturnLabel_51:
   \   00000018   0xB2C7             UXTB     R7,R0
   1673            int8u  dataType  = (int8u)emberUnsignedCommandArgument(4);
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x.... 0x....      BL       emberUnsignedCommandArgument
   \   00000020   0x4604             MOV      R4,R0
   1674            
   1675            emberAfCorePrint("%p: ep: %d, cl: 0x%2X, attr: 0x%2X",
   1676                             "write",
   1677                             endpoint, 
   1678                             cluster, 
   1679                             attribute);
   \   00000022   0x.... 0x....      ADR.W    R9,`?<Constant "write">`
   \   00000026   0xB2B6             UXTH     R6,R6
   \   00000028   0x9601             STR      R6,[SP, #+4]
   \   0000002A   0xB2AD             UXTH     R5,R5
   \   0000002C   0x9500             STR      R5,[SP, #+0]
   \   0000002E   0xFA5F 0xF888      UXTB     R8,R8
   \   00000032   0x4643             MOV      R3,R8
   \   00000034   0x464A             MOV      R2,R9
   \   00000036   0x.... 0x....      BL       ?Subroutine22
   1680            emberAfCorePrintln(", svr: %c, dtype: 0x%X",
   1681                               (serverAttribute ? 'y' : 'n'),
   1682                               dataType);
   \                     ??CrossCallReturnLabel_67:
   \   0000003A   0x2F00             CMP      R7,#+0
   \   0000003C   0xBF14             ITE      NE 
   \   0000003E   0x2279             MOVNE    R2,#+121
   \   00000040   0x226E             MOVEQ    R2,#+110
   \   00000042   0xB2E4             UXTB     R4,R4
   \   00000044   0x4623             MOV      R3,R4
   \   00000046   0x.... 0x....      ADR.W    R1,`?<Constant ", svr: %c, dtype: 0x%X">`
   \   0000004A   0x.... 0x....      BL       ?Subroutine12
   1683          
   1684            // If the data type is a string, automatically prepend a length to the data;
   1685            // otherwise, just copy the raw bytes.
   1686            MEMSET(data, 0, ATTRIBUTE_LARGEST);
   \                     ??CrossCallReturnLabel_38:
   \   0000004E   0x2208             MOVS     R2,#+8
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0xA802             ADD      R0,SP,#+8
   \   00000054   0x.... 0x....      BL       halCommonMemSet
   1687            if (emberAfIsThisDataTypeAStringType(dataType)) {
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       emberAfIsThisDataTypeAStringType
   \   0000005E   0xB148             CBZ.N    R0,??emAfCliWriteCommand_0
   1688              data[0] = emberCopyStringArgument(5,
   1689                                                data + 1,
   1690                                                ATTRIBUTE_LARGEST - 1,
   1691                                                FALSE);
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0x2207             MOVS     R2,#+7
   \   00000064   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000068   0x2005             MOVS     R0,#+5
   \   0000006A   0x.... 0x....      BL       emberCopyStringArgument
   \   0000006E   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000072   0xE008             B.N      ??emAfCliWriteCommand_1
   1692            } else {
   1693               emberCopyStringArgument(5,
   1694                                       data,
   1695                                       emberAfGetDataSize(dataType),
   1696                                       FALSE);
   \                     ??emAfCliWriteCommand_0:
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       emberAfGetDataSize
   \   0000007A   0x2300             MOVS     R3,#+0
   \   0000007C   0x4602             MOV      R2,R0
   \   0000007E   0xA902             ADD      R1,SP,#+8
   \   00000080   0x2005             MOVS     R0,#+5
   \   00000082   0x.... 0x....      BL       emberCopyStringArgument
   1697            }
   1698          
   1699          
   1700            result = emberAfWriteAttribute(endpoint,
   1701                                           cluster,
   1702                                           attribute,
   1703                                           (serverAttribute
   1704                                            ? CLUSTER_MASK_SERVER
   1705                                            : CLUSTER_MASK_CLIENT),
   1706                                           (int8u *)&data,
   1707                                           dataType);
   \                     ??emAfCliWriteCommand_1:
   \   00000086   0x2F00             CMP      R7,#+0
   \   00000088   0xBF14             ITE      NE 
   \   0000008A   0x2340             MOVNE    R3,#+64
   \   0000008C   0x2380             MOVEQ    R3,#+128
   \   0000008E   0x9401             STR      R4,[SP, #+4]
   \   00000090   0xA802             ADD      R0,SP,#+8
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0x4632             MOV      R2,R6
   \   00000096   0x4629             MOV      R1,R5
   \   00000098   0x4640             MOV      R0,R8
   \   0000009A   0x.... 0x....      BL       emberAfWriteAttribute
   \   0000009E   0x4601             MOV      R1,R0
   1708            emAfPrintStatus("write", result);
   \   000000A0   0x4648             MOV      R0,R9
   \   000000A2   0x.... 0x....      BL       emAfPrintStatus
   1709            emberAfCorePrintln("");
   \   000000A6   0x....             ADR.N    R1,??DataTable57_1  ;; ""
   \   000000A8   0x.... 0x....      BL       ??Subroutine10_0
   1710          }
   \                     ??CrossCallReturnLabel_28:
   \   000000AC   0xB005             ADD      SP,SP,#+20
   \   000000AE   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1711          

   \                                 In section .text, align 2, keep-with-next
   1712          void eraseKeyTableEntry(int8u index)
   1713          {
   \                     eraseKeyTableEntry:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
   1714            EmberStatus status = emberEraseKeyTableEntry(index);
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x4602             MOV      R2,R0
   \   0000000E   0x4621             MOV      R1,R4
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       emSetKeyTableEntry
   1715            
   1716            if (status != EMBER_SUCCESS) {
   \   00000016   0xB140             CBZ.N    R0,??eraseKeyTableEntry_0
   1717              emberAfCorePrintln("%perase key %d: 0x%x",
   1718                                 "ERROR: ",
   1719                                 index,
   1720                                 status);
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x4623             MOV      R3,R4
   \   0000001C   0x.... 0x....      ADR.W    R2,`?<Constant "ERROR: ">`
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant "%perase key %d: 0x%x">`
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       emberAfPrintln
   1721            }
   1722          }
   \                     ??eraseKeyTableEntry_0:
   \   0000002A   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1723          
   1724          // keys clear

   \                                 In section .text, align 2, keep-with-next
   1725          void keysClearCommand(void)
   1726          {
   1727          #if EMBER_KEY_TABLE_SIZE
   1728            int8u i;
   1729            for (i = 0; i < EMBER_KEY_TABLE_SIZE; i++) {
   1730              eraseKeyTableEntry(i);
   1731            }
   1732          #endif
   1733          }
   \                     keysClearCommand:
   \   00000000   0x4770             BX       LR               ;; return
   1734          
   1735          // keys print

   \                                 In section .text, align 2, keep-with-next
   1736          void keysPrintCommand(void)
   1737          {
   \                     keysPrintCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
   1738            emberAfCorePrintln("%pSECURITY_LEVEL: %x",
   1739                               "EMBER_",
   1740                               EMBER_SECURITY_LEVEL);
   \   00000002   0x2305             MOVS     R3,#+5
   \   00000004   0x.... 0x....      ADR.W    R2,`?<Constant "EMBER_">`
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "%pSECURITY_LEVEL: %x">`
   \   0000000C   0x.... 0x....      BL       ?Subroutine12
   1741            printKeyInfo();
   \                     ??CrossCallReturnLabel_37:
   \   00000010   0xE8BD 0x4001      POP      {R0,LR}
   \   00000014   0x.... 0x....      B.W      printKeyInfo
   1742          }
   1743          
   1744          // keys delete <index:1>

   \                                 In section .text, align 2, keep-with-next
   1745          void keysDeleteCommand(void)
   1746          {
   \                     keysDeleteCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
   1747            int8u index = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ??Subroutine6_0
   1748            eraseKeyTableEntry(index);
   \                     ??CrossCallReturnLabel_0:
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000C   0x....             B.N      eraseKeyTableEntry
   1749          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_1:
   \   00000000   0x5D 0x00          DC8      "]",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   0x43 0x4C          DC8      "CLI"
   \              0x49 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_1:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_2:
   \   00000000   0x........         DC32     globalApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_3:
   \   00000000   0x........         DC32     appZclBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_4:
   \   00000000   0x........         DC32     emberCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_5:
   \   00000000   0x........         DC32     emAfSyncingTime

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "CLI">`:
   \   00000000   0x43 0x4C          DC8 "CLI"
   \              0x49 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Msg: clus 0x%2x, cmd ...">`:
   \   00000000   0x4D 0x73          DC8 "Msg: clus 0x%2x, cmd 0x%x, len %d"
   \              0x67 0x3A    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x2C    
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x2C    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "]">`:
   \   00000000   0x5D 0x00          DC8 "]"

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "buffer: ">`:
   \   00000000   0x62 0x75          DC8 "buffer: "
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "zcl-cli.c">`:
   \   00000000   0x7A 0x63          DC8 "zcl-cli.c"
   \              0x6C 0x2D    
   \              0x63 0x6C    
   \              0x69 0x2E    
   \              0x63 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: reading attribut...">`:
   \   00000000   0x45 0x52          DC8 "ERR: reading attribute %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x72 0x69    
   \              0x62 0x75    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Command already built...">`:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000008   0x61 0x6C          DC8 61H, 6CH, 72H, 65H, 61H, 64H, 79H, 20H
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \   00000010   0x62 0x75          DC8 62H, 75H, 69H, 6CH, 74H, 2EH, 20H, 20H
   \              0x69 0x6C    
   \              0x74 0x2E    
   \              0x20 0x20    
   \   00000018   0x43 0x61          DC8 43H, 61H, 6EH, 6EH, 6FH, 74H, 20H, 73H
   \              0x6E 0x6E    
   \              0x6F 0x74    
   \              0x20 0x73    
   \   00000020   0x65 0x74          DC8 65H, 74H, 20H, 4DH, 46H, 47H, 20H, 73H
   \              0x20 0x4D    
   \              0x46 0x47    
   \              0x20 0x73    
   \   00000028   0x70 0x65          DC8 70H, 65H, 63H, 69H, 66H, 69H, 63H, 20H
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x63 0x20    
   \   00000030   0x63 0x6F          DC8 63H, 6FH, 64H, 65H, 20H, 66H, 6FH, 72H
   \              0x64 0x65    
   \              0x20 0x66    
   \              0x6F 0x72    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 6DH, 6DH, 61H, 6EH, 64H
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \   00000040   0x2E 0x00          DC8 2EH, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MFG Code Set for next...">`:
   \   00000000   0x4D 0x46          DC8 "MFG Code Set for next command: 0x%2X"
   \              0x47 0x20    
   \              0x43 0x6F    
   \              0x64 0x65    
   \              0x20 0x53    
   \              0x65 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x6E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "no cmd">`:
   \   00000000   0x6E 0x6F          DC8 "no cmd"
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: CLI Send faile...">`:
   \   00000000   0x45 0x72          DC8 "Error: CLI Send failed, status: 0x%X"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x43    
   \              0x4C 0x49    
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "T%4x:TX (%p) %ccast 0...">`:
   \   00000000   0x54 0x25          DC8 "T%4x:TX (%p) %ccast 0x%x%p"
   \              0x34 0x78    
   \              0x3A 0x54    
   \              0x58 0x20    
   \              0x28 0x25    
   \              0x70 0x29    
   \              0x20 0x25    
   \              0x63 0x63    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x25 0x70    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " w/ link key">`:
   \   00000000   0x20 0x77          DC8 " w/ link key"
   \              0x2F 0x20    
   \              0x6C 0x69    
   \              0x6E 0x6B    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TX buffer: [">`:
   \   00000000   0x54 0x58          DC8 "TX buffer: ["
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x3A    
   \              0x20 0x5B    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "cmd not built">`:
   \   00000000   0x63 0x6D          DC8 "cmd not built"
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x62 0x75    
   \              0x69 0x6C    
   \              0x74 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "src ep %x, clus %2x">`:
   \   00000000   0x73 0x72          DC8 "src ep %x, clus %2x"
   \              0x63 0x20    
   \              0x65 0x70    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x20    
   \              0x25 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sending to bind %x">`:
   \   00000000   0x73 0x65          DC8 "sending to bind %x"
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \              0x69 0x6E    
   \              0x64 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "interpan %p %2x">`:
   \   00000000   0x69 0x6E          DC8 "interpan %p %2x"
   \              0x74 0x65    
   \              0x72 0x70    
   \              0x61 0x6E    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x25 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "group">`:
   \   00000000   0x67 0x72          DC8 "group"
   \              0x6F 0x75    
   \              0x70 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "short">`:
   \   00000000   0x73 0x68          DC8 "short"
   \              0x6F 0x72    
   \              0x74 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%psend failed: 0x%X">`:
   \   00000000   0x25 0x70          DC8 "%psend failed: 0x%X"
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: Inter-PAN ">`:
   \   00000000   0x45 0x52          DC8 "ERR: Inter-PAN "
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x2D 0x50    
   \              0x41 0x4E    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: ep: %d, cl: 0x%2X...">`:
   \   00000000   0x25 0x70          DC8 "%p: ep: %d, cl: 0x%2X, attr: 0x%2X"
   \              0x3A 0x20    
   \              0x65 0x70    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x63 0x6C    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x2C    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x72 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "read">`:
   \   00000000   0x72 0x65          DC8 "read"
   \              0x61 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", svr: %c">`:
   \   00000000   0x2C 0x20          DC8 ", svr: %c"
   \              0x73 0x76    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x63 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: read: 0x%x">`:
   \   00000000   0x25 0x70          DC8 "%p: read: 0x%x"
   \              0x3A 0x20    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error">`:
   \   00000000   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "write">`:
   \   00000000   0x77 0x72          DC8 "write"
   \              0x69 0x74    
   \              0x65 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", svr: %c, dtype: 0x%X">`:
   \   00000000   0x2C 0x20          DC8 ", svr: %c, dtype: 0x%X"
   \              0x73 0x76    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x63 0x2C    
   \              0x20 0x64    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%perase key %d: 0x%x">`:
   \   00000000   0x25 0x70          DC8 "%perase key %d: 0x%x"
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: ">`:
   \   00000000   0x45 0x52          DC8 "ERROR: "
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%pSECURITY_LEVEL: %x">`:
   \   00000000   0x25 0x70          DC8 "%pSECURITY_LEVEL: %x"
   \              0x53 0x45    
   \              0x43 0x55    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x5F 0x4C    
   \              0x45 0x56    
   \              0x45 0x4C    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EMBER_">`:
   \   00000000   0x45 0x4D          DC8 "EMBER_"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x00         
   \   00000007   0x00               DC8 0
   1750          
   1751          #ifdef CERTIFICATION_TESTING
   1752          void attributeReadCausingFragmentedResponseCommand(void)
   1753          {
   1754            zclBufferSetup(ZCL_PROFILE_WIDE_COMMAND | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER,
   1755                           0x0000,
   1756                           ZCL_READ_ATTRIBUTES_COMMAND_ID);
   1757            zclBufferAddWord(0x0000);
   1758            zclBufferAddWord(0x1000);
   1759            zclBufferAddWord(0x1001);
   1760            zclBufferAddWord(0x1002);
   1761            zclBufferAddWord(0x1003);
   1762            zclBufferAddWord(0x1004);
   1763            zclBufferAddWord(0x1005);
   1764            zclBufferAddWord(0x1006);
   1765            zclBufferAddWord(0x1007);
   1766            zclBufferAddWord(0x1008);
   1767            zclBufferAddWord(0x1009);
   1768            zclBufferAddWord(0x100A);
   1769            zclBufferAddWord(0x100B);
   1770            zclBufferAddWord(0x100C);
   1771            zclBufferAddWord(0x100D);
   1772            zclBufferAddWord(0x100E);
   1773            zclBufferAddWord(0x100F);
   1774            zclBufferAddWord(0x1010);
   1775            zclBufferAddWord(0x1011);
   1776            zclBufferAddWord(0x1012);
   1777            zclBufferAddWord(0x1013);
   1778            zclBufferAddWord(0x1014);
   1779            zclBufferAddWord(0x1015);
   1780            zclBufferAddWord(0x1016);
   1781            zclBufferAddWord(0x1017);
   1782            zclBufferAddWord(0x1018);
   1783            zclBufferAddWord(0x1019);
   1784            zclBufferAddWord(0x101A);
   1785            zclBufferAddWord(0x2001);
   1786            zclBufferAddWord(0x2002);
   1787            zclBufferAddWord(0x2003);
   1788            zclBufferAddWord(0x2004);
   1789            zclBufferAddWord(0x2005);
   1790            zclBufferAddWord(0x2006);
   1791            zclBufferAddWord(0x2007);
   1792            zclBufferAddWord(0x2008);
   1793            zclBufferAddWord(0x2009);
   1794            cliBufferPrint();
   1795          }
   1796          #endif //CERTIFICATION_TESTING
   1797          
   1798          
   1799          
   1800          //******************************************************************
   1801          // zcl command table entries
   1802          //******************************************************************
   1803          
   1804          #ifndef EMBER_AF_GENERATE_CLI
   1805          
   1806          /**
   1807           * @addtogroup cli
   1808           * @{
   1809           */
   1810          /**
   1811           * @brief Commands used to send global commands in the zcl
   1812           *
   1813           *        <b>zcl global read &lt;cluster&gt; &lt;attribute id&gt; </b>
   1814           *        - <i> Creates a global read command message to read from 
   1815           *              the cluster and attribute specified.
   1816           *          - cluster - int16u. The cluster id to read from.
   1817           *          - attribute id - int16u. The attribute id to read from</i>
   1818           *
   1819           *        <b>zcl global write &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; &lt;data&gt;</b>
   1820           *        - <i> Creates a global write  command message to write to 
   1821           *              the cluster and attribute specified.
   1822           *          - cluster - int16u. The cluster id to read from.
   1823           *          - attribute id - int16u. The attribute id to read from
   1824           *          - data type - int8u. The two byte zigbee type value
   1825           *          - data - byte array. The data to write</i>
   1826           *
   1827           *        <b>zcl global uwrite &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; &lt;data&gt;</b>
   1828           *        - <i> Creates a global write command message to write to the 
   1829           *              cluster and attribute specified. 
   1830           *          - cluster - int16u. The cluster id to read from.
   1831           *          - attribute id - int16u. The attribute id to read from
   1832           *          - data type - int8u. The two byte zigbee type value
   1833           *          - data - byte array. The data to write</i>
   1834           *
   1835           *        <b>zcl global nwrite &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; &lt;data&gt;</b>
   1836           *        - <i> Creates a global write command message to write to the 
   1837           *              cluster and attribute specified. 
   1838           *          - cluster - int16u. The cluster id to read from.
   1839           *          - attribute id - int16u. The attribute id to read from
   1840           *          - data type - int8u. The two byte zigbee type value
   1841           *          - data - byte array. The data to write</i>
   1842           *
   1843           *        <b>zcl global discover &lt;cluster&gt; &lt;attribute id&gt; &lt;max&gt;</b>
   1844           *        - <i> Creates discovery message for devices with the associated 
   1845           *              cluster and attribute 
   1846           *          - cluster - int16u. The cluster id to read from.
   1847           *          - attribute id - int16u. The attribute id to read from
   1848           *          - max - int8u. Max number of discovery responses.</i>
   1849           *
   1850           *        <b>zcl global report-read &lt;cluster&gt; &lt;attribute id&gt; &lt;direction&gt;</b>
   1851           *        - <i> Creates a global read reporting command for the associated 
   1852           *              cluster, attribute and server/client direction.
   1853           *          - cluster - int16u. The cluster id to read from.
   1854           *          - attribute id - int16u. The attribute id to read from
   1855           *          - direction - int8u. 0 for client-to-server, 1 for server-to-client.</i>
   1856           *
   1857           *        <b>zcl global send-me-a-report &lt;cluster&gt; &lt;attribute id&gt; &lt;data type&gt; 
   1858           *           &lt;min report time&gt; &lt;max report time&gt; &lt;reportable change&gt;</b>
   1859           *        - <i> Creates a global send me a report command for the associated values.
   1860           *          - cluster - int16u. The cluster id for requested report.
   1861           *          - attribute id - int16u. The attribute for requested report.
   1862           *          - data type - int8u. The two byte zigbee type value for the requested report
   1863           *          - min report time - int16u. Minimum number of seconds between reports.
   1864           *          - max report time - int16u. Maximum number of seconds between reports.
   1865           *          - reportable change - byte array. Amount of change to trigger a report.
   1866           *
   1867           *        <b>zcl global expect-report-from-me &lt;cluster&gt &lt;attribute id&gt; &lt;timeout&gt;</b>
   1868           *        - <i> Create a expect-report-from-me message with associated values.
   1869           *          - cluster - int16u. The cluster id for requested report.
   1870           *          - attribute id - int16u. The attribute for requested report.
   1871           *          - timeout - int16u. The maximum amount of time between reports.
   1872           *
   1873           *        <b>zcl global direction &lt;direction&gt;</b>
   1874           *        - <i> Sets the direction for global commands, either client to server 
   1875           *              or server to client.
   1876           *          - direction - int8u. The direction for global commands.
   1877           *            client-to-server == 0, server-to-client == 1.</i>
   1878           *
   1879           *        <b>zcl global disc-com-gen &lt;start command id&gt; &lt;max command ids&gt;</b>
   1880           *        - <i> Sends a global Discover Commands Generated command.
   1881           *          - start command id - int8u. The command id to start discovery at.
   1882           *          - max command ids - int8u. The maximum number of command ids to return.
   1883           *
   1884           *        <b>zcl global disc-com-rec &lt;start command id&gt; &lt;max command ids&gt;</b>
   1885           *        - <i> Sends a global Discover Commands Received command.
   1886           *          - start command id - int8u. The command id to start discovery at.
   1887           *          - max command ids - int8u. The maximum number of command ids to return.
   1888           */
   1889          #define EMBER_AF_DOXYGEN_CLI__ZCL_GLOBAL_COMMANDS
   1890          /** @} END addtogroup */
   1891          EmberCommandEntry zclGlobalCommands[] = {
   1892            {"read", zclGlobalReadCommand, "vv"},
   1893            {"write", zclGlobalWriteCommand, "vvub"},
   1894            {"uwrite", zclGlobalWriteCommand, "vvub"},
   1895            {"nwrite", zclGlobalWriteCommand, "vvub"},
   1896            {"discover", zclGlobalDiscoverCommand, "vvu"},
   1897            {"report-read", zclGlobalReportReadCommand, "vvu"},
   1898            {"send-me-a-report", zclGlobalSendMeAReportCommand, "vvuvvb"},
   1899            {"expect-report-from-me", zclGlobalExpectReportFromMeCommand, "vvv"},
   1900            {"report", zclGlobalReportCommand, "uvvu"},
   1901            {"direction", zclGlobalDirectionCommand, "u"},
   1902            {"disc-com-gen", zclGlobalCommandDiscoveryCommand, "vuu"},
   1903            {"disc-com-rec", zclGlobalCommandDiscoveryCommand, "vuu"},
   1904            { NULL }
   1905          };
   1906          
   1907          EmberCommandEntry zclTestResponseCommands[] = {
   1908            {"on", zclTestResponseOnCommand, ""},
   1909            {"off", zclTestResponseOffCommand, ""},  
   1910            { NULL }
   1911          };
   1912          
   1913          EmberCommandEntry zclTestCommands[] = {
   1914            {"response", NULL, (PGM_P)zclTestResponseCommands},
   1915            { NULL }
   1916          };
   1917          
   1918          #ifdef ZCL_USING_BASIC_CLUSTER_CLIENT
   1919          EmberCommandEntry zclBasicCommands[] = {
   1920            {"rtfd", zclBasicRtfdCommand, ""},
   1921            { NULL }
   1922          };
   1923          #endif
   1924          
   1925          #if defined(ZCL_USING_IDENTIFY_CLUSTER_CLIENT) || defined(ZCL_USING_IDENTIFY_CLUSTER_SERVER)
   1926          EmberCommandEntry zclIdentifyCommands[] = {
   1927            #ifdef ZCL_USING_IDENTIFY_CLUSTER_CLIENT
   1928            {"id", zclIdentifyIdCommand, "v"},
   1929            {"query", zclIdentifyQueryCommand, ""},
   1930            {"trigger", zclIdentifyTriggerEffectCommand, "uu"},
   1931            #endif
   1932            #ifdef ZCL_USING_IDENTIFY_CLUSTER_SERVER
   1933            {"on", zclIdentifyOnCommand, "uv"},
   1934            {"off", zclIdentifyOffCommand, "u"},
   1935            #endif
   1936            { NULL }
   1937          };
   1938          #endif
   1939          
   1940          #ifdef ZCL_USING_GROUPS_CLUSTER_CLIENT
   1941          EmberCommandEntry zclGroupsCommands[] = {
   1942            {"add", zclGroupsAddCommand, "vb"},
   1943            {"ad-if-id", zclGroupsAddCommand, "vb"},
   1944            {"view", zclGroupsViewCommand, "v"},
   1945            {"get", zclGroupsGetCommand, "uv*"},
   1946            {"remove", zclGroupsRemoveCommand, "v"},
   1947            {"rmall", zclGroupsRemoveAllCommand, ""},
   1948            { NULL }
   1949          };
   1950          #endif
   1951          
   1952          #ifdef ZCL_USING_SCENES_CLUSTER_CLIENT
   1953          EmberCommandEntry zclScenesSetCommands[] = {
   1954            {"on", zclScenesSetCommand, "u"},
   1955            {"off", zclScenesSetCommand, "u"},
   1956            { NULL }
   1957          };
   1958          
   1959          EmberCommandEntry zclScenesCommands[] = {
   1960            {"add", zclScenesAddCommand, "vuvb"},
   1961            {"view", zclScenesViewCommand, "vu"},
   1962            {"remove", zclScenesRemoveCommand, "vu"},
   1963            {"rmall", zclScenesRemoveAllCommand, "v"},
   1964            {"store", zclScenesStoreCommand, "vu"},
   1965            {"recall", zclScenesRecallCommand, "vu"},
   1966            {"get", zclScenesGetMembershipCommand, "v"},
   1967            {"eadd", zclScenesAddCommand, "vuvb"},
   1968            {"eview", zclScenesViewCommand, "vu"},
   1969            {"copy", zclScenesCopyCommand, "uvuvu"},
   1970            {"set", NULL, (PGM_P)zclScenesSetCommands},
   1971            { NULL }
   1972          };
   1973          #endif
   1974          
   1975          #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
   1976          EmberCommandEntry zclOnOffCommands[] = {
   1977            {"on", zclOnOffCommand, ""},
   1978            {"off", zclOnOffCommand, ""},
   1979            {"toggle", zclOnOffCommand, ""},
   1980            {"offeffect", zclOnOffOffWithEffectCommand, "uu"},
   1981            {"onrecall", zclOnOffOnWithRecallGlobalSceneCommand, ""},
   1982            {"ontimedoff", zclOnOffOnWithTimedOffCommand, "uvv"},
   1983            { NULL }
   1984          };
   1985          #endif
   1986          
   1987          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
   1988          EmberCommandEntry zclLevelControlCommands[] = {
   1989            {"mv-to-level", zclLevelControlMoveToLevelCommand, "uv"},
   1990            {"move", zclLevelControlMoveCommand, "uu"},
   1991            {"step", zclLevelControlStepCommand, "uuv"},
   1992            {"stop", zclLevelControlStopCommand, ""},
   1993            {"o-mv-to-level", zclLevelControlMoveToLevelCommand, "uv"},
   1994            {"o-move", zclLevelControlMoveCommand, "uu"},
   1995            {"o-step", zclLevelControlStepCommand, "uuv"},
   1996            {"o-stop", zclLevelControlStopCommand, ""},
   1997            { NULL }
   1998          };
   1999          #endif
   2000          
   2001          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
   2002          EmberCommandEntry zclThermostatCommands[] = {
   2003            {"set", zclThermostatSetCommand, "uu"},
   2004            { NULL }
   2005          };
   2006          #endif
   2007          
   2008          #ifdef ZCL_USING_IAS_ZONE_CLUSTER_SERVER
   2009          EmberCommandEntry zclIasZoneCommands[] = {
   2010            {"enroll", zclIasZoneEnrollCommand, "vv"},
   2011            {"sc", zclIasZoneStatusChangeCommand, "vuuv"},
   2012            { NULL }
   2013          };
   2014          #endif
   2015          
   2016          #ifdef ZCL_USING_IAS_ACE_CLUSTER_CLIENT
   2017          EmberCommandEntry zclIasAceCommands[] = {
   2018            {"a", zclIasAceArmCommand, "ubu"},
   2019            {"b", zclIasAceBypassCommand, "b"},
   2020            {"e", zclIasAceEmergencyCommand, ""},
   2021            {"f", zclIasAceFireCommand, ""},
   2022            {"p", zclIasAcePanicCommand, ""},
   2023            {"getzm", zclIasAceGetZoneMapCommand, ""},
   2024            {"getzi", zclIasAceGetZoneInfoCommand, "u"},
   2025            { NULL }
   2026          };
   2027          #endif
   2028          
   2029          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
   2030          EmberCommandEntry zclColorControlCommands[] = {
   2031            {"movetohue", zclColorControlMoveToHueCommand, "uuv"},
   2032            {"movehue", zclColorControlMoveHueCommand, "uu"},
   2033            {"stephue", zclColorControlStepHueCommand, "uuu"},
   2034            {"movetosat", zclColorControlMoveToSatCommand, "uv"},
   2035            {"movesat", zclColorControlMoveSatCommand, "uu"},
   2036            {"stepsat", zclColorControlStepSatCommand, "uuu"},
   2037            {"movetohueandsat", zclColorControlMoveToHueAndSatCommand, "uuv"},
   2038            {"movetocolor",     zclColorControlMoveToColorCommand, "vvv"},
   2039            {"movecolor",       zclColorControlMoveColorCommand, "vv"},
   2040            {"stepcolor",       zclColorControlStepColorCommand, "vvv"},
   2041            {"movetocolortemp", zclColorControlMoveToColorTemperatureCommand, "vv"},
   2042            {"emovetohue", zclColorControlMoveToHueCommand, "vuv"},
   2043            {"emovehue", zclColorControlMoveHueCommand, "uv"},
   2044            {"estephue", zclColorControlStepHueCommand, "uvv"},
   2045            {"emovetohueandsat", zclColorControlMoveToHueAndSatCommand, "vuv"},
   2046            {"loop", zclColorControlColorLoopSetCommand, "uuuvv"},
   2047            {"stopmovestep", zclColorControlStopMoveStepCommand, ""},
   2048            {"movecolortemp", zclColorControlMoveColorCommand, "uvvv"},
   2049            {"stepcolortemp", zclColorControlStepColorCommand, "uvvvv"},
   2050            { NULL }
   2051          };
   2052          #endif
   2053          
   2054          #ifdef ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
   2055          EmberCommandEntry zclPollControlCommands[] = {
   2056            emberCommandEntryAction("stop",  zclPollControlFastPollStopCommand,    "",  "Fast Poll Stop"),
   2057            emberCommandEntryAction("long",  zclPollControlSetPollIntervalCommand, "w", "Set Long Poll Interval"),
   2058            emberCommandEntryAction("short", zclPollControlSetPollIntervalCommand, "v", "Set Short Poll Interval"),
   2059            emberCommandEntryTerminator(),
   2060          };
   2061          #endif
   2062          
   2063          #ifdef ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   2064          EmberCommandEntry zclPowerProfileCommands[] = {
   2065            emberCommandEntryAction("profile",  zclPowerProfileRequestCommand,
   2066                                    "u", "Request Profile"),
   2067            emberCommandEntryAction("state",  zclPowerProfileStateRequestCommand,
   2068                                    "", "Request State"),
   2069            emberCommandEntryAction("energy-phases-schedule",
   2070                                    zclPowerProfileEnergyPhasesScheduleNotificationCommand,
   2071                                    "?", "Notify Energy Phase Schedule"),
   2072            emberCommandEntryAction("schedule-constraints",
   2073                                    zclPowerProfileScheduleConstraintsRequestCommand,
   2074                                    "u", "Request Schedule Constraints"),
   2075            emberCommandEntryAction("energy-phases-schedule-states",
   2076                                    zclPowerProfileEnergyPhasesScheduleStateRequestCommand,
   2077                                    "u", "Request Energy Phases Schedule States"),
   2078            emberCommandEntryTerminator(),
   2079          };
   2080          #endif //ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   2081          
   2082          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   2083          EmberCommandEntry zclWindowCoveringCommands[] = {
   2084            emberCommandEntryAction("up",  zclWindowCoveringUpCommand,
   2085                                    "", "Up"),
   2086            emberCommandEntryAction("down",  zclWindowCoveringDownCommand,
   2087                                    "", "Down"),
   2088            emberCommandEntryAction("stop",
   2089                                    zclWindowCoveringStopCommand,
   2090                                    "", "Stop"),
   2091            emberCommandEntryAction("go-to-lift-value",
   2092                                    zclWindowCoveringGoToLiftValueCommand,
   2093                                    "v", "Go To Lift Value"),
   2094            emberCommandEntryAction("go-to-lift-percent",
   2095                                    zclWindowCoveringGoToLiftPercentageCommand,
   2096                                    "u", "Go To Lift Percentage"),
   2097            emberCommandEntryAction("go-to-tilt-value",
   2098                                    zclWindowCoveringGoToTiltValueCommand,
   2099                                    "v", "Go To Tilt Value"),
   2100            emberCommandEntryAction("go-to-tilt-percentage",
   2101                                    zclWindowCoveringGoToTiltPercentageCommand,
   2102                                    "u", "Go To Tilt Percentage"),
   2103            emberCommandEntryTerminator(),
   2104          };
   2105          #endif //ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   2106          
   2107          #if defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT) || defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER)
   2108          
   2109          EmberCommandEntry zclDrlcCommands[] = {
   2110            #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER
   2111            
   2112            {"lce", zclDrlcLoadControlEventCommand, "wwvu"},
   2113            {"cl", zclDrlcCancelCommand, "wvuuw"},
   2114            {"ca", zclDrlcCancelAllCommand, ""},
   2115            #endif
   2116            #ifdef ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT
   2117            {"gse", zclDrlcGetScheduledEventsCommand, "wu"},
   2118            #endif
   2119            { NULL }
   2120          };
   2121          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT || SERVER
   2122          
   2123          
   2124          
   2125          #if defined(ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT) || defined(ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER)
   2126          EmberCommandEntry zclSimpleMeteringCommands[] = {
   2127          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   2128            {"gp", zclSimpleMeteringGetProfileCommand, "uwu"},
   2129            {"fp", zclSimpleMeteringFastPollCommand, "uu"},
   2130          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
   2131          #ifdef ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2132            {"rm", zclSimpleMeteringRequestMirrorCommand, ""},
   2133            {"dm", zclSimpleMeteringDeleteMirrorCommand, ""},
   2134          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2135            { NULL }
   2136          };
   2137          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT || ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2138          
   2139          #ifdef ZCL_USING_PRICE_CLUSTER_CLIENT
   2140          EmberCommandEntry zclPriceClientCommands[] = {
   2141            {"cu", zclPriceGetCurrentCommand, ""},
   2142            {"sc", zclPriceGetScheduleCommand, "wu"},
   2143            { NULL }
   2144          };
   2145          #endif //ZCL_USING_PRICE_CLUSTER_CLIENT
   2146          
   2147          EmberCommandEntry zclMessageCommands[] = {
   2148          #ifdef ZCL_USING_MESSAGING_CLUSTER_CLIENT
   2149            {"get", zclMessageGetCommand, ""},
   2150          #endif //ZCL_USING_MESSAGING_CLUSTER_CLIENT
   2151            { NULL }
   2152          };
   2153          
   2154          #if defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT) || defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER)
   2155          EmberCommandEntry zclTunnelCommands[] = {
   2156          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   2157            {"match", zclTunnelMatchCommand, "b"},
   2158          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT
   2159          #ifdef ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2160            {"advertise", zclTunnelAdvertiseCommand, "b"},
   2161            {"response", zclTunnelResponseCommand, ""},
   2162          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2163            { NULL }
   2164          };
   2165          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT || ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2166          
   2167          #ifdef ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   2168          EmberCommandEntry zclBacnetTransferCommands[] = {
   2169            {"fixed", zclBacnetTransferFixedCommand, "ub"},
   2170            {"random", zclBacnetTransferRandomCommand, "u"},
   2171            {"whois", zclBacnetTransferWhoisCommand, ""}, //removed length byte from whois
   2172            { NULL },
   2173          };
   2174          
   2175          EmberCommandEntry zclBacnetCommands[] = {
   2176            {"transfer-npdu", NULL, (PGM_P)zclBacnetTransferCommands},
   2177            { NULL }
   2178          };
   2179          #endif
   2180          
   2181          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2182          EmberCommandEntry zclDoorLockCommands[] = {
   2183            {"lock", zclDoorLockCommand, ""},
   2184            {"unlock", zclDoorLockCommand, ""},
   2185            { NULL }
   2186          };
   2187          #endif //ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2188          
   2189          #if defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2190          EmberCommandEntry zclTunnelingCommands[] = {
   2191          #ifdef ZCL_USING_TUNNELING_CLUSTER_CLIENT
   2192            {"request", zclTunnelingRequestCommand, "uvuv"},
   2193            {"close", zclTunnelingCloseCommand, "v"},
   2194            {"transfer-to-server", zclTunnelingTransferToServerCommand, "vb"},
   2195            {"random-to-server", zclTunnelingRandomToServerCommand, "vv"},
   2196          #endif //ZCL_USING_TUNNELING_CLUSTER_CLIENT
   2197          #ifdef ZCL_USING_TUNNELING_CLUSTER_SERVER
   2198            {"transfer-to-client", zclTunnelingTransferToClientCommand, "vb"},
   2199            {"random-to-client", zclTunnelingRandomToClientCommand, "vv"},
   2200          #endif //ZCL_USING_TUNNELING_CLUSTER_SERVER
   2201            { NULL }
   2202          };
   2203          #endif //defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2204          
   2205          EmberCommandEntry zclCommands[] = {
   2206          
   2207          //#define CERTIFICATION_TESTING
   2208          #ifdef CERTIFICATION_TESTING
   2209            {"attr-read-frag-resp", attributeReadCausingFragmentedResponseCommand, ""},
   2210          #endif //CERTIFICATION_TESTING
   2211          
   2212            {"mfg-code", zclMfgCodeCommand, "v" },
   2213          
   2214            {"global", NULL, (PGM_P)zclGlobalCommands},
   2215            {"test", NULL, (PGM_P)zclTestCommands},
   2216            {"time", zclTimeCommand, "w"},
   2217            #ifdef ZCL_USING_BASIC_CLUSTER_CLIENT  
   2218            {"basic", NULL, (PGM_P)zclBasicCommands},
   2219            #endif
   2220          
   2221            #if defined(ZCL_USING_IDENTIFY_CLUSTER_CLIENT) || defined(ZCL_USING_IDENTIFY_CLUSTER_SERVER)
   2222            {"identify", NULL, (PGM_P)zclIdentifyCommands},
   2223            #endif //ZCL_USING_IDENTIFY_CLUSTER_CLIENT || SERVER
   2224            #ifdef ZCL_USING_GROUPS_CLUSTER_CLIENT
   2225            {"groups", NULL, (PGM_P)zclGroupsCommands},
   2226            #endif
   2227            #ifdef ZCL_USING_SCENES_CLUSTER_CLIENT
   2228            {"scenes", NULL, (PGM_P)zclScenesCommands},
   2229            #endif
   2230            #ifdef ZCL_USING_ON_OFF_CLUSTER_CLIENT
   2231            {"on-off", NULL, (PGM_P)zclOnOffCommands},
   2232            #endif
   2233            #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
   2234            {"level-control", NULL, (PGM_P)zclLevelControlCommands},
   2235            #endif
   2236            #ifdef ZCL_USING_THERMOSTAT_CLUSTER_CLIENT
   2237            {"tstat", NULL, (PGM_P)zclThermostatCommands},
   2238            #endif
   2239            #ifdef ZCL_USING_IAS_ZONE_CLUSTER_SERVER
   2240            {"ias-zone", NULL, (PGM_P)zclIasZoneCommands},
   2241            #endif
   2242            #ifdef ZCL_USING_IAS_ACE_CLUSTER_CLIENT
   2243            {"ias-ace", NULL, (PGM_P)zclIasAceCommands},
   2244            #endif
   2245            #ifdef ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
   2246            emberCommandEntrySubMenu("poll-control", zclPollControlCommands, "Poll Control commands"),
   2247            #endif
   2248            #ifdef ZCL_USING_POWER_PROFILE_CLUSTER_CLIENT
   2249            emberCommandEntrySubMenu("power-profile", zclPowerProfileCommands, "Power Profile commands"),
   2250            #endif
   2251            #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_CLIENT
   2252            emberCommandEntrySubMenu("window-covering", zclWindowCoveringCommands, "Window Covering commands"),
   2253            #endif
   2254            #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
   2255            {"colorcontrol", NULL, (PGM_P)zclColorControlCommands},
   2256            #endif
   2257          #if defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT) || defined(ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_SERVER)
   2258            {"drlc", NULL, (PGM_P)zclDrlcCommands},
   2259          #endif //ZCL_USING_DEMAND_RESPONSE_LOAD_CONTROL_CLUSTER_CLIENT || SERVER
   2260          #if defined(ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT) || defined(ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER)
   2261            {"sm", NULL, (PGM_P)zclSimpleMeteringCommands},
   2262          #endif //ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT || ZCL_USING_SIMPLE_METERING_CLUSTER_SERVER
   2263            #ifdef ZCL_USING_PRICE_CLUSTER_CLIENT
   2264            {"pr", NULL, (PGM_P)zclPriceClientCommands},
   2265            #endif
   2266            #if defined(ZCL_USING_MESSAGING_CLUSTER_CLIENT) 
   2267            {"message", NULL, (PGM_P)zclMessageCommands},
   2268            #endif
   2269          #if defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT) || defined(ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER)
   2270            {"tunnel", NULL, (PGM_P)zclTunnelCommands},
   2271          #endif //ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLIENT || ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
   2272            #ifdef ZCL_USING_BACNET_PROTOCOL_TUNNEL_CLUSTER_CLIENT
   2273            {"bacnet", NULL, (PGM_P)zclBacnetCommands},
   2274            #endif
   2275          
   2276            #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2277            {"lock", NULL, (PGM_P)zclDoorLockCommands},
   2278            #endif //ZCL_USING_DOOR_LOCK_CLUSTER_CLIENT
   2279          
   2280          #if defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2281            {"tunneling", NULL, (PGM_P)zclTunnelingCommands},
   2282          #endif //defined(ZCL_USING_TUNNELING_CLUSTER_CLIENT) || defined(ZCL_USING_TUNNELING_CLUSTER_SERVER)
   2283          
   2284          
   2285            { NULL }
   2286          };
   2287          
   2288          // ******************************************************
   2289          // keys command functions
   2290          // ******************************************************
   2291          
   2292          EmberCommandEntry keysCommands[] = {
   2293            emberCommandEntryAction("clear", keysClearCommand, "", "Clear all link keys"),
   2294            emberCommandEntryAction("print", keysPrintCommand, "", "Print the NWK and link key table"),
   2295            emberCommandEntryAction("delete", keysDeleteCommand, "u", "Delete the specified link key index"),
   2296            emberCommandEntryTerminator(),
   2297          };
   2298          
   2299          // ******************************************************
   2300          // Print commands.
   2301          //
   2302          // print attr
   2303          // print time
   2304          // ******************************************************
   2305          
   2306          EmberCommandEntry printCommands[] = {
   2307            emberCommandEntryAction("time", printTimeCommand, "", "Print current time attribute"),
   2308            emberCommandEntryAction("attr", emberAfPrintAttributeTable, "", "Print the attribute table"),
   2309            emberCommandEntryTerminator(),
   2310          };
   2311          
   2312          // ******************************************************
   2313          // interpan commands
   2314          //
   2315          // mac is     : [FC 2; seq 1; dest PAN 2; dest addr 2|8; src pan 2; src addr 8]
   2316          // stub nwk is: [Frame Control 2]
   2317          // stub APS is: [FC 1; groupId 0|2; clusterId 2; appProfileId 2]
   2318          //
   2319          // MAC FC = bits 0,1,2: frame type (Data) 1
   2320          //          bit 3: security enabled = false (0)
   2321          //          bit 4: frame pending  = false (0)
   2322          //          bit 5: ack required = true (1)
   2323          //          bit 6: intra PAN = false (0)
   2324          //          bit 7,8,9: reserved (0)
   2325          //          bit 10,11: dest addr mode = group (1), short (2), long(3)
   2326          //          bit 12,13: reserved (0)
   2327          //          bit 14,15: src addr mode = long(3)
   2328          //   for GROUP_DEST FC is: 0xC421
   2329          //   for SHORT_DEST FC is: 0xC821
   2330          //   for LONG_DEST FC is : 0xCC21
   2331          //
   2332          // Stub NWK FC: bits 0,1: frame type 3 (0b11)
   2333          //              bits 2-5: protocol version 2 (0b0010)
   2334          //              bits 6-15: reserved (0)
   2335          //   this is always 0x000B
   2336          //
   2337          // stub APS FC: bits 0,1: 3 (0b11)
   2338          //              bits 2,3: delivery mode unicast(0), bcast(2), group(3)
   2339          //              bit 4: reserved (0)
   2340          //              bit 5: security: none (0)
   2341          //              bit 6: ack request: NO ack (0)
   2342          //              bit 7: ext header present: No (0)
   2343          //   this is 03 for unicast, 0B for bcast, 0F for group
   2344          //
   2345          // ******************************************************
   2346          
   2347          EmberCommandEntry interpanCommands[] = {
   2348            {"group", interpanCommand, "vvv"},
   2349            {"short", interpanCommand, "vvv"},
   2350            {"long",  interpanLongCommand, "bvvv"},
   2351            { NULL }
   2352          };
   2353          
   2354          #endif // EMBER_AF_GENERATE_CLI
   2355          
   2356          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  cliBufferPrint
             24 -> emberAfPrint
             24 -> emberAfPrintBuffer
              0 -> emberAfPrintln
             24 -> emberAfPrintln
        0  emAfApsFrameClusterIdSetup
        8  emAfApsFrameEndpointSetup
              8 -> emberAfPrimaryEndpointForCurrentNetworkIndex
       64  emAfCliBsendCommand
             64 -> emberAfGetCurrentTime
             64 -> emberAfPrint
             64 -> emberAfPrintBuffer
             64 -> emberAfPrintln
             64 -> emberAfSendUnicast
             64 -> emberGetBinding
             64 -> emberUnsignedCommandArgument
       16  emAfCliRawCommand
             16 -> cliBufferPrint
             16 -> emAfApsFrameClusterIdSetup
             16 -> emberAfNextSequence
             16 -> emberCopyStringArgument
             16 -> emberStringCommandArgument
             16 -> emberUnsignedCommandArgument
       48  emAfCliReadCommand
             48 -> emberAfGetDataSize
             48 -> emberAfIsThisDataTypeAStringType
             48 -> emberAfPrint
             48 -> emberAfPrintBuffer
             48 -> emberAfPrintString
             48 -> emberAfPrintln
             48 -> emberAfReadAttribute
             48 -> emberUnsignedCommandArgument
       40  emAfCliSendCommand
             40 -> emAfApsFrameEndpointSetup
             40 -> emberAfGetCurrentTime
             40 -> emberAfPrint
             40 -> emberAfPrintBuffer
              0 -> emberAfPrintln
             40 -> emberAfPrintln
             40 -> emberAfSendBroadcast
             40 -> emberAfSendMulticast
             40 -> emberAfSendUnicast
             40 -> emberUnsignedCommandArgument
        8  emAfCliTimesyncCommand
              8 -> cliBufferPrint
              0 -> emAfCliSendCommand
              8 -> zclBufferAddWord
              8 -> zclBufferSetup
       48  emAfCliWriteCommand
             48 -> emAfPrintStatus
             48 -> emberAfGetDataSize
             48 -> emberAfIsThisDataTypeAStringType
             48 -> emberAfPrint
             48 -> emberAfPrintln
             48 -> emberAfWriteAttribute
             48 -> emberCopyStringArgument
             48 -> emberUnsignedCommandArgument
             48 -> halCommonMemSet
       16  eraseKeyTableEntry
             16 -> emSetKeyTableEntry
             16 -> emberAfPrintln
       40  interpanCommand
             40 -> emberAfInterpanSendMessageCallback
             40 -> emberAfPrintln
             40 -> emberUnsignedCommandArgument
             40 -> halCommonMemSet
       32  interpanLongCommand
             32 -> emberAfCopyBigEndianEui64Argument
             32 -> emberAfInterpanSendMessageCallback
             32 -> emberAfPrintln
             32 -> emberUnsignedCommandArgument
             32 -> halCommonMemSet
        0  keysClearCommand
        8  keysDeleteCommand
              8 -> emberUnsignedCommandArgument
              0 -> eraseKeyTableEntry
        8  keysPrintCommand
              8 -> emberAfPrintln
              0 -> printKeyInfo
       32  makeZclBuffer
             32 -> cliBufferPrint
             32 -> halInternalAssertFailed
             32 -> zclBufferAddBuffer
             32 -> zclBufferAddByte
             32 -> zclBufferAddInt32
             32 -> zclBufferAddWord
             32 -> zclBufferSetup
        8  printTimeCommand
              8 -> emberAfGetCurrentTime
              0 -> emberAfPrintTime
       16  zclBufferAddBuffer
             16 -> halCommonMemCopy
        0  zclBufferAddByte
        8  zclBufferAddByteFromArgument
              8 -> emberUnsignedCommandArgument
              0 -> zclBufferAddByte
       16  zclBufferAddInt32
             16 -> zclBufferAddByte
        8  zclBufferAddInt32FromArgument
              8 -> emberUnsignedCommandArgument
              0 -> zclBufferAddInt32
        8  zclBufferAddInt8sFromArgument
              8 -> emberSignedCommandArgument
              0 -> zclBufferAddByte
       16  zclBufferAddLengthAndStringFromArgument
             16 -> emberCopyStringArgument
        8  zclBufferAddString
              8 -> emberAfStringLength
              0 -> zclBufferAddBuffer
        8  zclBufferAddWord
              0 -> zclBufferAddByte
              8 -> zclBufferAddByte
        8  zclBufferAddWordFromArgument
              8 -> emberUnsignedCommandArgument
              0 -> zclBufferAddWord
       24  zclBufferSetup
             24 -> emAfApsFrameClusterIdSetup
             24 -> emberAfNextSequence
        0  zclDrlcLoadControlEventCommand
        8  zclGlobalCommandDiscoveryCommand
              0 -> cliBufferPrint
              8 -> emberUnsignedCommandArgument
              8 -> zclBufferAddByteFromArgument
              8 -> zclBufferSetup
        8  zclGlobalDirectionCommand
              8 -> emberUnsignedCommandArgument
        8  zclGlobalDiscoverCommand
              0 -> cliBufferPrint
              8 -> zclGlobalSetup
        8  zclGlobalExpectReportFromMeCommand
              0 -> cliBufferPrint
              8 -> emberUnsignedCommandArgument
              8 -> zclBufferAddByte
              8 -> zclBufferAddWordFromArgument
              8 -> zclBufferSetup
        8  zclGlobalReadCommand
              0 -> cliBufferPrint
              8 -> zclGlobalSetup
       48  zclGlobalReportCommand
             48 -> cliBufferPrint
             48 -> emberAfGetDataSize
             48 -> emberAfIsThisDataTypeAStringType
             48 -> emberAfPrintln
             48 -> emberAfReadAttribute
             48 -> emberAfStringLength
             48 -> emberUnsignedCommandArgument
             48 -> halCommonMemCopy
             48 -> zclBufferAddByte
             48 -> zclBufferAddWord
             48 -> zclBufferSetup
        8  zclGlobalReportReadCommand
              0 -> cliBufferPrint
              8 -> emberUnsignedCommandArgument
              8 -> zclBufferAddByteFromArgument
              8 -> zclBufferAddWordFromArgument
              8 -> zclBufferSetup
       16  zclGlobalSendMeAReportCommand
              0 -> cliBufferPrint
             16 -> emberAfGetAttributeAnalogOrDiscreteType
             16 -> emberAfGetDataSize
             16 -> emberCopyStringArgument
             16 -> emberUnsignedCommandArgument
             16 -> zclBufferAddByte
             16 -> zclBufferAddWordFromArgument
             16 -> zclBufferSetup
        8  zclGlobalSetup
              8 -> emberUnsignedCommandArgument
              0 -> zclBufferAddByteFromArgument
              8 -> zclBufferAddWordFromArgument
              8 -> zclBufferSetup
       16  zclGlobalWriteCommand
              0 -> cliBufferPrint
             16 -> emberAfGetDataSize
             16 -> emberAfIsThisDataTypeAStringType
             16 -> emberCopyStringArgument
             16 -> emberUnsignedCommandArgument
             16 -> zclBufferAddLengthAndStringFromArgument
             16 -> zclGlobalSetup
        0  zclGroupsGetCommand
        8  zclIasZoneEnrollCommand
              8 -> zclSimpleCommand
        8  zclIasZoneStatusChangeCommand
              8 -> zclSimpleCommand
        0  zclIdentifyIdCommand
              0 -> zclSimpleCommand
       16  zclIdentifyOffCommand
             16 -> emberAfWriteAttribute
             16 -> emberUnsignedCommandArgument
       16  zclIdentifyOnCommand
             16 -> emberAfWriteAttribute
             16 -> emberUnsignedCommandArgument
        0  zclIdentifyQueryCommand
              0 -> zclSimpleCommand
        0  zclIdentifyTriggerEffectCommand
              0 -> zclSimpleCommand
        8  zclMfgCodeCommand
              0 -> emberAfPrintln
              8 -> emberUnsignedCommandArgument
       24  zclSimpleCommand
              0 -> cliBufferPrint
             24 -> emberCommandArgumentCount
             24 -> zclBufferAddByteFromArgument
             24 -> zclBufferAddInt32FromArgument
             24 -> zclBufferAddInt8sFromArgument
             24 -> zclBufferAddLengthAndStringFromArgument
             24 -> zclBufferAddWordFromArgument
             24 -> zclBufferSetup
        0  zclTestResponseOffCommand
              0 -> emberAfSetNoReplyForNextMessage
        0  zclTestResponseOnCommand
              0 -> emberAfSetNoReplyForNextMessage
        8  zclTimeCommand
              0 -> emberAfSetTime
              8 -> emberUnsignedCommandArgument


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant " w/ link key">
       1  ?<Constant "">
      36  ?<Constant "%p: ep: %d, cl: 0x%2X...">
      16  ?<Constant "%p: read: 0x%x">
      24  ?<Constant "%pSECURITY_LEVEL: %x">
      24  ?<Constant "%perase key %d: 0x%x">
      20  ?<Constant "%psend failed: 0x%X">
      12  ?<Constant ", svr: %c">
      24  ?<Constant ", svr: %c, dtype: 0x%X">
       4  ?<Constant "CLI">
      68  ?<Constant "Command already built...">
       8  ?<Constant "EMBER_">
      16  ?<Constant "ERR: Inter-PAN ">
      28  ?<Constant "ERR: reading attribut...">
       8  ?<Constant "ERROR: ">
       8  ?<Constant "Error">
      40  ?<Constant "Error: CLI Send faile...">
      40  ?<Constant "MFG Code Set for next...">
      36  ?<Constant "Msg: clus 0x%2x, cmd ...">
      28  ?<Constant "T%4x:TX (%p) %ccast 0...">
      16  ?<Constant "TX buffer: [">
       2  ?<Constant "]">
      12  ?<Constant "buffer: ">
      16  ?<Constant "cmd not built">
       8  ?<Constant "group">
      16  ?<Constant "interpan %p %2x">
       8  ?<Constant "no cmd">
       8  ?<Constant "read">
      20  ?<Constant "sending to bind %x">
       8  ?<Constant "short">
      20  ?<Constant "src ep %x, clus %2x">
       8  ?<Constant "write">
      12  ?<Constant "zcl-cli.c">
       4  ??DataTable44
       4  ??DataTable56
       4  ??DataTable56_1
       4  ??DataTable57
       4  ??DataTable57_1
       4  ??DataTable57_2
       4  ??DataTable57_3
       4  ??DataTable57_4
       4  ??DataTable57_5
       6  ??Subroutine23_0
       6  ??Subroutine24_0
       8  ?Subroutine0
       4  ?Subroutine1
      10  ?Subroutine10
       4  ?Subroutine11
       6  ?Subroutine12
       8  ?Subroutine13
       8  ?Subroutine14
      12  ?Subroutine15
       6  ?Subroutine16
      10  ?Subroutine17
      10  ?Subroutine18
      10  ?Subroutine19
       6  ?Subroutine2
      10  ?Subroutine20
      10  ?Subroutine21
      10  ?Subroutine22
      24  ?Subroutine3
       6  ?Subroutine4
      26  ?Subroutine5
       8  ?Subroutine6
      14  ?Subroutine7
      12  ?Subroutine8
       6  ?Subroutine9
      84  appZclBuffer
      84  cliBufferPrint
      14  emAfApsFrameClusterIdSetup
      20  emAfApsFrameEndpointSetup
     188  emAfCliBsendCommand
      68  emAfCliRawCommand
     160  emAfCliReadCommand
     206  emAfCliSendCommand
      34  emAfCliTimesyncCommand
     178  emAfCliWriteCommand
      44  eraseKeyTableEntry
      18  globalApsFrame
          zclCmdIsBuilt
          zclGlobalDirection
          appZclBufferLen
          mfgSpecificId
      98  interpanCommand
      78  interpanLongCommand
       2  keysClearCommand
      14  keysDeleteCommand
      24  keysPrintCommand
     120  makeZclBuffer
      14  printTimeCommand
      32  zclBufferAddBuffer
      18  zclBufferAddByte
       8  zclBufferAddByteFromArgument
      20  zclBufferAddInt32
      12  zclBufferAddInt32FromArgument
       6  zclBufferAddInt8sFromArgument
      38  zclBufferAddLengthAndStringFromArgument
      20  zclBufferAddString
      18  zclBufferAddWord
      14  zclBufferAddWordFromArgument
      72  zclBufferSetup
       2  zclDrlcLoadControlEventCommand
      46  zclGlobalCommandDiscoveryCommand
      20  zclGlobalDirectionCommand
       4  zclGlobalDiscoverCommand
      30  zclGlobalExpectReportFromMeCommand
       6  zclGlobalReadCommand
     170  zclGlobalReportCommand
      24  zclGlobalReportReadCommand
      86  zclGlobalSendMeAReportCommand
      26  zclGlobalSetup
      80  zclGlobalWriteCommand
       2  zclGroupsGetCommand
       6  zclIasZoneEnrollCommand
       4  zclIasZoneStatusChangeCommand
       4  zclIdentifyIdCommand
       8  zclIdentifyOffCommand
      26  zclIdentifyOnCommand
       2  zclIdentifyQueryCommand
       4  zclIdentifyTriggerEffectCommand
      44  zclMfgCodeCommand
     136  zclSimpleCommand
       6  zclTestResponseOffCommand
       6  zclTestResponseOnCommand
      14  zclTimeCommand

 
   102 bytes in section .bss
     7 bytes in section .rodata
 3 240 bytes in section .text
 
 3 240 bytes of CODE  memory
     7 bytes of CONST memory
   102 bytes of DATA  memory

Errors: none
Warnings: none
