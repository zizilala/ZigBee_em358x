###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:17 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\mfg- #
#                    token.c                                                  #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\mfg- #
#                    token.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSen #
#                    sor_SM6011/DoorSensor_SM6011_tokens.h\"" -D              #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"mfg-token.c\"" -lC                  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \mfg-token.lst                                           #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \mfg-token.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\mfg-token.c
      1          /** @file hal/micro/cortexm3/mfg-token.c
      2           * @brief Cortex-M3 Manufacturing-Token system
      3           *
      4           * <!-- Copyright 2009 by Ember Corporation. All rights reserved.        *80*-->
      5           */
      6          #include PLATFORM_HEADER
      7          #include "include/error.h"
      8          #include "hal/micro/cortexm3/flash.h"
      9          #include "mfg-token.h"
     10          
     11          
     12          
     13          
     14          #define DEFINETOKENS
     15          #define TOKEN_MFG(name,creator,iscnt,isidx,type,arraysize,...) \
     16            const int16u TOKEN_##name = TOKEN_##name##_ADDRESS;
     17            #include "hal/micro/cortexm3/token-manufacturing.h"

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CHIP_DATA
   \                     TOKEN_MFG_CHIP_DATA:
   \   00000000   0x077E             DC16 1918

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_PART_DATA
   \                     TOKEN_MFG_PART_DATA:
   \   00000000   0x0796             DC16 1942

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TESTER_DATA
   \                     TOKEN_MFG_TESTER_DATA:
   \   00000000   0x079C             DC16 1948

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EMBER_EUI_64
   \                     TOKEN_MFG_EMBER_EUI_64:
   \   00000000   0x07A2             DC16 1954

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_NORMAL
   \                     TOKEN_MFG_ANALOG_TRIM_NORMAL:
   \   00000000   0x07AA             DC16 1962

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_BOOST
   \                     TOKEN_MFG_ANALOG_TRIM_BOOST:
   \   00000000   0x07BE             DC16 1982

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ANALOG_TRIM_BOTH
   \                     TOKEN_MFG_ANALOG_TRIM_BOTH:
   \   00000000   0x07D2             DC16 2002

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_REG_TRIM
   \                     TOKEN_MFG_REG_TRIM:
   \   00000000   0x07DC             DC16 2012

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_1V8_REG_VOLTAGE
   \                     TOKEN_MFG_1V8_REG_VOLTAGE:
   \   00000000   0x07DE             DC16 2014

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_VREF_VOLTAGE
   \                     TOKEN_MFG_VREF_VOLTAGE:
   \   00000000   0x07E0             DC16 2016

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TEMP_CAL
   \                     TOKEN_MFG_TEMP_CAL:
   \   00000000   0x07E2             DC16 2018

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_TEST_TEMP
   \                     TOKEN_MFG_TEST_TEMP:
   \   00000000   0x07E4             DC16 2020

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_VERSION
   \                     TOKEN_MFG_FIB_VERSION:
   \   00000000   0x07F4             DC16 2036

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_CHECKSUM
   \                     TOKEN_MFG_FIB_CHECKSUM:
   \   00000000   0x07F6             DC16 2038

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_FIB_OBS
   \                     TOKEN_MFG_FIB_OBS:
   \   00000000   0x07F8             DC16 2040

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CIB_OBS
   \                     TOKEN_MFG_CIB_OBS:
   \   00000000   0x0800             DC16 2048

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CUSTOM_VERSION
   \                     TOKEN_MFG_CUSTOM_VERSION:
   \   00000000   0x0810             DC16 2064

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CUSTOM_EUI_64
   \                     TOKEN_MFG_CUSTOM_EUI_64:
   \   00000000   0x0812             DC16 2066

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_STRING
   \                     TOKEN_MFG_STRING:
   \   00000000   0x081A             DC16 2074

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_BOARD_NAME
   \                     TOKEN_MFG_BOARD_NAME:
   \   00000000   0x082A             DC16 2090

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_MANUF_ID
   \                     TOKEN_MFG_MANUF_ID:
   \   00000000   0x083A             DC16 2106

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_PHY_CONFIG
   \                     TOKEN_MFG_PHY_CONFIG:
   \   00000000   0x083C             DC16 2108

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_BOOTLOAD_AES_KEY
   \                     TOKEN_MFG_BOOTLOAD_AES_KEY:
   \   00000000   0x083E             DC16 2110

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EZSP_STORAGE
   \                     TOKEN_MFG_EZSP_STORAGE:
   \   00000000   0x084E             DC16 2126

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_ASH_CONFIG
   \                     TOKEN_MFG_ASH_CONFIG:
   \   00000000   0x0856             DC16 2134

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CBKE_DATA
   \                     TOKEN_MFG_CBKE_DATA:
   \   00000000   0x087E             DC16 2174

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_INSTALLATION_CODE
   \                     TOKEN_MFG_INSTALLATION_CODE:
   \   00000000   0x08DA             DC16 2266

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_OSC24M_BIAS_TRIM
   \                     TOKEN_MFG_OSC24M_BIAS_TRIM:
   \   00000000   0x08EE             DC16 2286

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_SYNTH_FREQ_OFFSET
   \                     TOKEN_MFG_SYNTH_FREQ_OFFSET:
   \   00000000   0x08F0             DC16 2288

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_OSC24M_SETTLE_DELAY
   \                     TOKEN_MFG_OSC24M_SETTLE_DELAY:
   \   00000000   0x08F2             DC16 2290

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_SECURITY_CONFIG
   \                     TOKEN_MFG_SECURITY_CONFIG:
   \   00000000   0x08F4             DC16 2292

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CCA_THRESHOLD
   \                     TOKEN_MFG_CCA_THRESHOLD:
   \   00000000   0x08F6             DC16 2294

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_SECURE_BOOTLOADER_KEY
   \                     TOKEN_MFG_SECURE_BOOTLOADER_KEY:
   \   00000000   0x08F8             DC16 2296

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_CBKE_283K1_DATA
   \                     TOKEN_MFG_CBKE_283K1_DATA:
   \   00000000   0x090E             DC16 2318

   \                                 In section .rodata, align 2, keep-with-next
   \   __absolute int16u const TOKEN_MFG_EUI_64
   \                     TOKEN_MFG_EUI_64:
   \   00000000   0x8000             DC16 32768
     18          #undef TOKEN_DEF
     19          #undef TOKEN_MFG
     20          #undef DEFINETOKENS
     21          
     22          
     23          
     24          
     25          
     26          
     27          
     28          

   \                                 In section .text, align 4, keep-with-next
     29          static const int8u nullEui[] = { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
   \                     nullEui:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
     30          
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void halInternalGetMfgTokenData(void *data,
     33                                          int16u token,
     34                                          int8u index,
     35                                          int8u len)
     36          {
   \                     halInternalGetMfgTokenData:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
     37            int8u *ram = (int8u*)data;
     38            
     39            //0x7F is a non-indexed token.  Remap to 0 for the address calculation
     40            index = (index==0x7F) ? 0 : index;
   \   00000008   0x287F             CMP      R0,#+127
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x2000             MOVEQ    R0,#+0
     41            
     42            if(token == MFG_EUI_64_LOCATION) {
   \   0000000E   0xF5B1 0x4F00      CMP      R1,#+32768
   \   00000012   0xD11A             BNE.N    ??halInternalGetMfgTokenData_0
     43              //There are two EUI64's stored in the Info Blocks, Ember and Custom.
     44              //0x0A00 is the address used by the generic EUI64 token, and it is
     45              //token.c's responbility to pick the returned EUI64 from either Ember
     46              //or Custom.  Return the Custom EUI64 if it is not all FF's, otherwise
     47              //return the Ember EUI64.
     48              tokTypeMfgEui64 eui64;
     49              halCommonGetMfgToken(&eui64, TOKEN_MFG_CUSTOM_EUI_64);
   \   00000014   0x2308             MOVS     R3,#+8
   \   00000016   0x227F             MOVS     R2,#+127
   \   00000018   0xF640 0x0112      MOVW     R1,#+2066
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0xF7FF 0xFFEF      BL       halInternalGetMfgTokenData
     50              if(MEMCOMPARE(eui64,nullEui, 8 /*EUI64_SIZE*/) == 0) {
   \   00000022   0x2208             MOVS     R2,#+8
   \   00000024   0x.... 0x....      ADR.W    R1,nullEui
   \   00000028   0xA800             ADD      R0,SP,#+0
   \   0000002A   0x.... 0x....      BL       halCommonMemCompare
   \   0000002E   0xB930             CBNZ.N   R0,??halInternalGetMfgTokenData_1
     51                halCommonGetMfgToken(&eui64, TOKEN_MFG_EMBER_EUI_64);
   \   00000030   0x2308             MOVS     R3,#+8
   \   00000032   0x227F             MOVS     R2,#+127
   \   00000034   0xF240 0x71A2      MOVW     R1,#+1954
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0xF7FF 0xFFE1      BL       halInternalGetMfgTokenData
     52              }
     53              MEMCOPY(ram, eui64, 8 /*EUI64_SIZE*/);
   \                     ??halInternalGetMfgTokenData_1:
   \   0000003E   0x2208             MOVS     R2,#+8
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       halCommonMemCopy
   \   00000048   0xBD37             POP      {R0-R2,R4,R5,PC}
     54            } else {
     55              //read from the Information Blocks.  The token ID is only the
     56              //bottom 16bits of the token's actual address.  Since the info blocks
     57              //exist in the range DATA_BIG_INFO_BASE-DATA_BIG_INFO_END, we need
     58              //to OR the ID with DATA_BIG_INFO_BASE to get the real address.
     59              int32u realAddress = (DATA_BIG_INFO_BASE|token) + (len*index);
     60              int8u *flash = (int8u *)realAddress;
     61          
     62          
     63          
     64          
     65          
     66          
     67          
     68          
     69          
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          
     78          
     79          
     80          
     81          
     82          
     83              MEMCOPY(ram, flash, len);
   \                     ??halInternalGetMfgTokenData_0:
   \   0000004A   0x461A             MOV      R2,R3
   \   0000004C   0x....             LDR.N    R5,??DataTable38  ;; 0x8080000
   \   0000004E   0x4329             ORRS     R1,R5,R1
   \   00000050   0xFB00 0x1103      MLA      R1,R0,R3,R1
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       halCommonMemCopy
     84            }
     85          }
   \   0000005A   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
     86          
     87          

   \                                 In section .text, align 2, keep-with-next
     88          void halInternalSetMfgTokenData(int16u token, void *data, int8u len)
     89          {
   \                     halInternalSetMfgTokenData:
   \   00000000   0xE92D 0x44FC      PUSH     {R2-R7,R10,LR}
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
     90            EmberStatus flashStatus;
     91            int32u realAddress = (DATA_BIG_INFO_BASE|token);
   \   00000008   0x....             LDR.N    R1,??DataTable38  ;; 0x8080000
   \   0000000A   0xEA41 0x0600      ORR      R6,R1,R0
     92            int8u * flash = (int8u *)realAddress;
     93            int32u i;
     94            
     95            //The flash library (and hardware) requires the address and length to both
     96            //be multiples of 16bits.  Since this API is only valid for writing to
     97            //the CIB, verify that the token+len falls within the CIB.
     98            assert((token&1) != 1);
   \   0000000E   0x.... 0x....      ADR.W    R10,`?<Constant "mfg-token.c">`
   \   00000012   0x07C0             LSLS     R0,R0,#+31
   \   00000014   0xD502             BPL.N    ??CrossCallReturnLabel_3
   \   00000016   0x2162             MOVS     R1,#+98
   \   00000018   0x.... 0x....      BL       ?Subroutine0
     99            assert((len&1) != 1);
   \                     ??CrossCallReturnLabel_3:
   \   0000001C   0x07E8             LSLS     R0,R5,#+31
   \   0000001E   0xD502             BPL.N    ??CrossCallReturnLabel_2
   \   00000020   0x2163             MOVS     R1,#+99
   \   00000022   0x.... 0x....      BL       ?Subroutine0
    100            assert((realAddress>=CIB_BOTTOM) && ((realAddress+len-1)<=CIB_TOP));
   \                     ??CrossCallReturnLabel_2:
   \   00000026   0x....             LDR.N    R0,??DataTable38_1  ;; 0x8080800
   \   00000028   0x4286             CMP      R6,R0
   \   0000002A   0xD304             BCC.N    ??halInternalSetMfgTokenData_0
   \   0000002C   0x19A8             ADDS     R0,R5,R6
   \   0000002E   0x1E40             SUBS     R0,R0,#+1
   \   00000030   0x....             LDR.N    R1,??DataTable38_2  ;; 0x8081000
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD302             BCC.N    ??CrossCallReturnLabel_1
   \                     ??halInternalSetMfgTokenData_0:
   \   00000036   0x2164             MOVS     R1,#+100
   \   00000038   0x.... 0x....      BL       ?Subroutine0
    101            
    102            //CIB manufacturing tokens can only be written by on-chip code if the token
    103            //is currently unprogrammed.  Verify the entire token is unwritten.  The
    104            //flash library performs a similar check, but verifying here ensures that
    105            //the entire token is unprogrammed and will prevent partial writes.
    106            for(i=0;i<len;i++) {
   \                     ??CrossCallReturnLabel_1:
   \   0000003C   0x2700             MOVS     R7,#+0
   \   0000003E   0xE006             B.N      ??halInternalSetMfgTokenData_1
    107              assert(flash[i] == 0xFF);
   \                     ??halInternalSetMfgTokenData_2:
   \   00000040   0x5DB8             LDRB     R0,[R7, R6]
   \   00000042   0x28FF             CMP      R0,#+255
   \   00000044   0xD002             BEQ.N    ??CrossCallReturnLabel_0
   \   00000046   0x216B             MOVS     R1,#+107
   \   00000048   0x.... 0x....      BL       ?Subroutine0
    108            }
   \                     ??CrossCallReturnLabel_0:
   \   0000004C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??halInternalSetMfgTokenData_1:
   \   0000004E   0x42AF             CMP      R7,R5
   \   00000050   0xD3F6             BCC.N    ??halInternalSetMfgTokenData_2
    109            
    110            //Remember, the flash library operates in 16bit quantities, but the
    111            //token system operates in 8bit quantities.  Hence the divide by 2.
    112            flashStatus = halInternalFlashWrite(realAddress, data, (len/2));
    113            assert(flashStatus == EMBER_SUCCESS);
   \   00000052   0x086A             LSRS     R2,R5,#+1
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       halInternalFlashWrite
   \   0000005C   0xB128             CBZ.N    R0,??halInternalSetMfgTokenData_3
   \   0000005E   0x2171             MOVS     R1,#+113
   \   00000060   0x4650             MOV      R0,R10
   \   00000062   0xE8BD 0x44FC      POP      {R2-R7,R10,LR}
   \   00000066   0x.... 0x....      B.W      halInternalAssertFailed
    114          }
   \                     ??halInternalSetMfgTokenData_3:
   \   0000006A   0xE8BD 0x84F3      POP      {R0,R1,R4-R7,R10,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x4650             MOV      R0,R10
   \   00000002   0x.... 0x....      B.W      halInternalAssertFailed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   0x08080000         DC32     0x8080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_1:
   \   00000000   0x08080800         DC32     0x8080800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_2:
   \   00000000   0x08081000         DC32     0x8081000

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "mfg-token.c">`:
   \   00000000   0x6D 0x66          DC8 "mfg-token.c"
   \              0x67 0x2D    
   \              0x74 0x6F    
   \              0x6B 0x65    
   \              0x6E 0x2E    
   \              0x63 0x00    
    115          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  halInternalGetMfgTokenData
             24 -> halCommonMemCompare
             24 -> halCommonMemCopy
             24 -> halInternalGetMfgTokenData
       32  halInternalSetMfgTokenData
              0 -> halInternalAssertFailed
             32 -> halInternalAssertFailed
             32 -> halInternalFlashWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "mfg-token.c">
       4  ??DataTable38
       4  ??DataTable38_1
       4  ??DataTable38_2
       6  ?Subroutine0
       2  TOKEN_MFG_1V8_REG_VOLTAGE
       2  TOKEN_MFG_ANALOG_TRIM_BOOST
       2  TOKEN_MFG_ANALOG_TRIM_BOTH
       2  TOKEN_MFG_ANALOG_TRIM_NORMAL
       2  TOKEN_MFG_ASH_CONFIG
       2  TOKEN_MFG_BOARD_NAME
       2  TOKEN_MFG_BOOTLOAD_AES_KEY
       2  TOKEN_MFG_CBKE_283K1_DATA
       2  TOKEN_MFG_CBKE_DATA
       2  TOKEN_MFG_CCA_THRESHOLD
       2  TOKEN_MFG_CHIP_DATA
       2  TOKEN_MFG_CIB_OBS
       2  TOKEN_MFG_CUSTOM_EUI_64
       2  TOKEN_MFG_CUSTOM_VERSION
       2  TOKEN_MFG_EMBER_EUI_64
       2  TOKEN_MFG_EUI_64
       2  TOKEN_MFG_EZSP_STORAGE
       2  TOKEN_MFG_FIB_CHECKSUM
       2  TOKEN_MFG_FIB_OBS
       2  TOKEN_MFG_FIB_VERSION
       2  TOKEN_MFG_INSTALLATION_CODE
       2  TOKEN_MFG_MANUF_ID
       2  TOKEN_MFG_OSC24M_BIAS_TRIM
       2  TOKEN_MFG_OSC24M_SETTLE_DELAY
       2  TOKEN_MFG_PART_DATA
       2  TOKEN_MFG_PHY_CONFIG
       2  TOKEN_MFG_REG_TRIM
       2  TOKEN_MFG_SECURE_BOOTLOADER_KEY
       2  TOKEN_MFG_SECURITY_CONFIG
       2  TOKEN_MFG_STRING
       2  TOKEN_MFG_SYNTH_FREQ_OFFSET
       2  TOKEN_MFG_TEMP_CAL
       2  TOKEN_MFG_TESTER_DATA
       2  TOKEN_MFG_TEST_TEMP
       2  TOKEN_MFG_VREF_VOLTAGE
      92  halInternalGetMfgTokenData
     110  halInternalSetMfgTokenData
       8  nullEui

 
  70 bytes in section .rodata
 240 bytes in section .text
 
 240 bytes of CODE  memory
  70 bytes of CONST memory

Errors: none
Warnings: none
