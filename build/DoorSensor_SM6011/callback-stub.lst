###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:33 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\callback-stub.c                                   #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\callback-stub.c -D "GENERATED_TOKEN_HEADER=\"app/ #
#                    builder/DoorSensor_SM6011/DoorSensor_SM6011_tokens.h\""  #
#                    -D "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/ #
#                    DoorSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D           #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"callback-stub.c\"" -lC              #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\a #
#                    pp\builder\DoorSensor_SM6011\..\..\..\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \callback-stub.lst                                       #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \callback-stub.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\callback-stub.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This c file provides stubs for all callbacks. These stubs
      6          // will be used in the case where user defined implementations
      7          // of the callbacks have not been provided.
      8          #include "app/framework/include/af.h"
      9          
     10          /** @brief Allow Network Write Attribute
     11           *
     12           * This function is called by the application framework before it writes an
     13           * attribute in response to a write attribute request from an external device.
     14           * The value passed into this callback is the value to which the attribute is to
     15           * be set by the framework.
     16                  Example:	In mirroring simple metering data
     17           * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
     18           * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
     19           * attributes on its mirror. The-meter-mirror sample application, located in
     20           * app/framework/sample-apps, uses this callback to allow the mirrored device to
     21           * write simple metering attributes on the mirror regardless of the fact that
     22           * most simple metering attributes are defined as read-only by the ZigBee
     23           * specification.
     24                  Note:	The ZCL specification does not (as of this
     25           * writing) specify any permission-level security for writing writeable
     26           * attributes. As far as the ZCL specification is concerned, if an attribute is
     27           * writeable, any device that has a link key for the device should be able to
     28           * write that attribute. Furthermore if an attribute is read only, it should not
     29           * be written over the air. Thus, if you implement permissions for writing
     30           * attributes as a feature, you MAY be operating outside the specification. This
     31           * is unlikely to be a problem for writing read-only attributes, but it may be a
     32           * problem for attributes that are writeable according to the specification but
     33           * restricted by the application implementing this callback.
     34           *
     35           * @param endpoint   Ver.: always
     36           * @param clusterId   Ver.: always
     37           * @param attributeId   Ver.: always
     38           * @param mask   Ver.: always
     39           * @param manufacturerCode   Ver.: always
     40           * @param value   Ver.: always
     41           * @param type   Ver.: always
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
     44                                                                                    EmberAfClusterId clusterId,
     45                                                                                    EmberAfAttributeId attributeId,
     46                                                                                    int8u mask,
     47                                                                                    int16u manufacturerCode,
     48                                                                                    int8u* value,
     49                                                                                    int8u type)
     50          {
     51            return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
   \                     emberAfAllowNetworkWriteAttributeCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     52          }
     53          
     54          /** @brief Clear Group Table
     55           *
     56           * This function is called by the framework when the application should clear
     57           * the group table.
     58           *
     59           * @param endpoint The endpoint.  Ver.: always
     60           */

   \                                 In section .text, align 2, keep-with-next
     61          void emberAfGroupsClusterClearGroupTableCallback(int8u endpoint)
     62          {
     63          }
   \                     emberAfGroupsClusterClearGroupTableCallback:
   \   00000000   0x4770             BX       LR               ;; return
     64          
     65          /** @brief ClearSceneTable
     66           *
     67           * This function is called by the framework when the application should clear
     68           * the scene table.
     69           *
     70           * @param endpoint The endpoint.  Ver.: always
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          void emberAfScenesClusterClearSceneTableCallback(int8u endpoint)
     73          {
     74          }
   \                     emberAfScenesClusterClearSceneTableCallback:
   \   00000000   0x4770             BX       LR               ;; return
     75          
     76          /** @brief Client Command Received
     77           *
     78           * This function is called by the application framework when a server-to-client
     79           * key establishment command is received but has yet to be handled by the
     80           * framework code.  This function should return a boolean value indicating
     81           * whether the command has been handled by the application code and should not
     82           * be further processed by the framework.
     83           *
     84           * @param cmd   Ver.: always
     85           */

   \                                 In section .text, align 2, keep-with-next
     86          boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand * cmd)
     87          {
     88            return FALSE;
   \                     emberAfKeyEstablishmentClusterClientCommandReceivedCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     89          }
     90          
     91          /** @brief Cluster Init
     92           *
     93           * This function is called when a specific cluster is initialized. It gives the
     94           * application an opportunity to take care of cluster initialization procedures.
     95           * It is called exactly once for each endpoint where cluster is present.
     96           *
     97           * @param endpoint   Ver.: always
     98           * @param clusterId   Ver.: always
     99           */

   \                                 In section .text, align 2, keep-with-next
    100          void emberAfClusterInitCallback(int8u endpoint,
    101                                          EmberAfClusterId clusterId)
    102          {
    103          }
   \                     emberAfClusterInitCallback:
   \   00000000   0x4770             BX       LR               ;; return
    104          
    105          /** @brief Cluster Security Custom
    106           *
    107           * This callback is fired when determining if APS encryption is required for a
    108           * cluster outside of the specification's required clusters.  In other words,
    109           * for the Smart Energy profile this would be a cluster beyond the list that
    110           * normally requires APS encryption.
    111           *
    112           * @param profileId The profile ID  Ver.: always
    113           * @param clusterId The cluster ID  Ver.: always
    114           * @param incoming Whether this is an incoming or outgoing message.  Ver.:
    115           * always
    116           * @param commandId The ZCL command ID being sent/received.  Ver.: always
    117           */

   \                                 In section .text, align 2, keep-with-next
    118          boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
    119                                                       EmberAfClusterId clusterId,
    120                                                       boolean incoming,
    121                                                       int8u commandId)
    122          {
    123            // By default, assume APS encryption is not required.
    124            return FALSE;
   \                     emberAfClusterSecurityCustomCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    125          }
    126          
    127          /** @brief Configure Reporting Response
    128           *
    129           * This function is called by the application framework when a Configure
    130           * Reporting Response command is received from an external device.  The
    131           * application should return TRUE if the message was processed or FALSE if it
    132           * was not.
    133           *
    134           * @param clusterId The cluster identifier of this response.  Ver.: always
    135           * @param buffer Buffer containing the list of attribute status records.  Ver.:
    136           * always
    137           * @param bufLen The length in bytes of the list.  Ver.: always
    138           */

   \                                 In section .text, align 2, keep-with-next
    139          boolean emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
    140                                                            int8u * buffer,
    141                                                            int16u bufLen)
    142          {
    143            return FALSE;
   \                     emberAfConfigureReportingResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    144          }
    145          
    146          /** @brief Default Response
    147           *
    148           * This function is called by the application framework when a Default Response
    149           * command is received from an external device.  The application should return
    150           * TRUE if the message was processed or FALSE if it was not.
    151           *
    152           * @param clusterId The cluster identifier of this response.  Ver.: always
    153           * @param commandId The command identifier to which this is a response.  Ver.:
    154           * always
    155           * @param status Specifies either SUCCESS or the nature of the error that was
    156           * detected in the received command.  Ver.: always
    157           */

   \                                 In section .text, align 2, keep-with-next
    158          boolean emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
    159                                                 int8u commandId,
    160                                                 EmberAfStatus status)
    161          {
    162            return FALSE;
   \                     emberAfDefaultResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    163          }
    164          
    165          /** @brief Delivery Status
    166           *
    167           * @deprecated This callback has been deprecated and will be removed in a future
    168           * release. In lieu, the plugin-specific MessageSent callback or the main
    169           * MessageSent callback should be utilized.
    170           *
    171           * @param type   Ver.: always
    172           * @param status   Ver.: always
    173           */

   \                                 In section .text, align 2, keep-with-next
    174          void emberAfDeliveryStatusCallback(EmberOutgoingMessageType type,
    175                                             EmberStatus status)
    176          {
    177          }
   \                     emberAfDeliveryStatusCallback:
   \   00000000   0x4770             BX       LR               ;; return
    178          
    179          /** @brief Discover Attributes Response
    180           *
    181           * This function is called by the application framework when a Discover
    182           * Attributes Response or Discover Attributes Extended Response command is
    183           * received from an external device.  The Discover Attributes Response command
    184           * contains a boolean indicating if discovery is complete and a list of zero or
    185           * more attribute identifier/type records. The final argument indicates whether
    186           * the response is in the extended format or not.  The application should return
    187           * TRUE if the message was processed or FALSE if it was not.
    188           *
    189           * @param clusterId The cluster identifier of this response.  Ver.: always
    190           * @param discoveryComplete Indicates whether there are more attributes to be
    191           * discovered.  TRUE if there are no more attributes to be discovered.  Ver.:
    192           * always
    193           * @param buffer Buffer containing the list of attribute identifier/type
    194           * records.  Ver.: always
    195           * @param bufLen The length in bytes of the list.  Ver.: always
    196           * @param extended Indicates whether the response is in the extended format or
    197           * not.  Ver.: always
    198           */

   \                                 In section .text, align 2, keep-with-next
    199          boolean emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
    200                                                            boolean discoveryComplete,
    201                                                            int8u * buffer,
    202                                                            int16u bufLen,
    203                                                            boolean extended)
    204          {
    205            return FALSE;
   \                     emberAfDiscoverAttributesResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    206          }
    207          
    208          /** @brief Discover Commands Generated Response
    209           *
    210           * This function is called by the framework when Discover Commands Generated
    211           * Response is received.
    212           *
    213           * @param clusterId The cluster identifier of this response.  Ver.: always
    214           * @param manufacturerCode Manufacturer code  Ver.: always
    215           * @param discoveryComplete Indicates whether there are more commands to be
    216           * discovered.  Ver.: always
    217           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    218           * always
    219           * @param commandIdCount The length of bytes of the list, whish is the same as
    220           * the number of identifiers.  Ver.: always
    221           */

   \                                 In section .text, align 2, keep-with-next
    222          boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
    223                                                                   int16u manufacturerCode,
    224                                                                   boolean discoveryComplete,
    225                                                                   int8u * commandIds,
    226                                                                   int16u commandIdCount)
    227          {
    228            return FALSE;
   \                     emberAfDiscoverCommandsGeneratedResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    229          }
    230          
    231          /** @brief Discover Commands Received Response
    232           *
    233           * This function is called by the framework when Discover Commands Received
    234           * Response is received.
    235           *
    236           * @param clusterId The cluster identifier of this response.  Ver.: always
    237           * @param manufacturerCode Manufacturer code  Ver.: always
    238           * @param discoveryComplete Indicates whether there are more commands to be
    239           * discovered.  Ver.: always
    240           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    241           * always
    242           * @param commandIdCount The length of bytes of the list, whish is the same as
    243           * the number of identifiers.  Ver.: always
    244           */

   \                                 In section .text, align 2, keep-with-next
    245          boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
    246                                                                  int16u manufacturerCode,
    247                                                                  boolean discoveryComplete,
    248                                                                  int8u * commandIds,
    249                                                                  int16u commandIdCount)
    250          {
    251            return FALSE;
   \                     emberAfDiscoverCommandsReceivedResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    252          }
    253          
    254          /** @brief Endpoint In Group
    255           *
    256           * This function is called by the framework when it needs to determine if an
    257           * endpoint is a member of a group.  The application should return TRUE if the
    258           * endpoint is a member of the group and FALSE otherwise.
    259           *
    260           * @param endpoint The endpoint.  Ver.: always
    261           * @param groupId The group identifier.  Ver.: always
    262           */

   \                                 In section .text, align 2, keep-with-next
    263          boolean emberAfGroupsClusterEndpointInGroupCallback(int8u endpoint,
    264                                                              int16u groupId)
    265          {
    266            return FALSE;
   \                     emberAfGroupsClusterEndpointInGroupCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    267          }
    268          
    269          /** @brief External Attribute Read
    270           *
    271           * Like emberAfExternalAttributeWriteCallback above, this function is called
    272           * when the framework needs to read an attribute that is not stored within the
    273           * Application Framework's data structures.
    274                  All of the important
    275           * information about the attribute itself is passed as a pointer to an
    276           * EmberAfAttributeMetadata struct, which is stored within the application and
    277           * used to manage the attribute. A complete description of the
    278           * EmberAfAttributeMetadata struct is provided in
    279           * app/framework/include/af-types.h
    280                  This function assumes that the
    281           * application is able to read the attribute, write it into the passed buffer,
    282           * and return immediately. Any attributes that require a state machine for
    283           * reading and writing are not really candidates for externalization at the
    284           * present time. The Application Framework does not currently include a state
    285           * machine for reading or writing attributes that must take place across a
    286           * series of application ticks. Attributes that cannot be read in a timely
    287           * manner should be stored within the Application Framework and updated
    288           * occasionally by the application code from within the
    289           * emberAfMainTickCallback.
    290                  If the application was successfully able to
    291           * read the attribute and write it into the passed buffer, it should return a
    292           * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
    293           * application was not able to read the attribute.
    294           *
    295           * @param endpoint   Ver.: always
    296           * @param clusterId   Ver.: always
    297           * @param attributeMetadata   Ver.: always
    298           * @param manufacturerCode   Ver.: always
    299           * @param buffer   Ver.: always
    300           */

   \                                 In section .text, align 2, keep-with-next
    301          EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
    302                                                             EmberAfClusterId clusterId,
    303                                                             EmberAfAttributeMetadata * attributeMetadata,
    304                                                             int16u manufacturerCode,
    305                                                             int8u * buffer)
    306          {
    307            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeReadCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    308          }
    309          
    310          /** @brief External Attribute Write
    311           *
    312           * This function is called whenever the Application Framework needs to write an
    313           * attribute which is not stored within the data structures of the Application
    314           * Framework itself. One of the new features in Version 2 is the ability to
    315           * store attributes outside the Framework. This is particularly useful for
    316           * attributes that do not need to be stored because they can be read off the
    317           * hardware when they are needed, or are stored in some central location used by
    318           * many modules within the system. In this case, you can indicate that the
    319           * attribute is stored externally. When the framework needs to write an external
    320           * attribute, it makes a call to this callback.
    321                  This callback is very
    322           * useful for host micros which need to store attributes in persistent memory.
    323           * Because each host micro (used with an Ember NCP) has its own type of
    324           * persistent memory storage, the Application Framework does not include the
    325           * ability to mark attributes as stored in flash the way that it does for Ember
    326           * SoCs like the EM35x. On a host micro, any attributes that need to be stored
    327           * in persistent memory should be marked as external and accessed through the
    328           * external read and write callbacks. Any host code associated with the
    329           * persistent storage should be implemented within this callback.
    330                  All of
    331           * the important information about the attribute itself is passed as a pointer
    332           * to an EmberAfAttributeMetadata struct, which is stored within the application
    333           * and used to manage the attribute. A complete description of the
    334           * EmberAfAttributeMetadata struct is provided in
    335           * app/framework/include/af-types.h.
    336                  This function assumes that the
    337           * application is able to write the attribute and return immediately. Any
    338           * attributes that require a state machine for reading and writing are not
    339           * candidates for externalization at the present time. The Application Framework
    340           * does not currently include a state machine for reading or writing attributes
    341           * that must take place across a series of application ticks. Attributes that
    342           * cannot be written immediately should be stored within the Application
    343           * Framework and updated occasionally by the application code from within the
    344           * emberAfMainTickCallback.
    345                  If the application was successfully able to
    346           * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
    347           * other return value indicates the application was not able to write the
    348           * attribute.
    349           *
    350           * @param endpoint   Ver.: always
    351           * @param clusterId   Ver.: always
    352           * @param attributeMetadata   Ver.: always
    353           * @param manufacturerCode   Ver.: always
    354           * @param buffer   Ver.: always
    355           */

   \                                 In section .text, align 2, keep-with-next
    356          EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
    357                                                              EmberAfClusterId clusterId,
    358                                                              EmberAfAttributeMetadata * attributeMetadata,
    359                                                              int16u manufacturerCode,
    360                                                              int8u * buffer)
    361          {
    362            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeWriteCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    363          }
    364          
    365          /** @brief Get Current Time
    366           *
    367           * This callback is called when device attempts to get current time from the
    368           * hardware. If this device has means to retrieve exact time, then this method
    369           * should implement it. If the callback can't provide the exact time it should
    370           * return 0 to indicate failure. Default action is to return 0, which indicates
    371           * that device does not have access to real time.
    372           *
    373           */

   \                                 In section .text, align 2, keep-with-next
    374          int32u emberAfGetCurrentTimeCallback(void)
    375          {
    376            return 0;
   \                     emberAfGetCurrentTimeCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    377          }
    378          
    379          /** @brief Get Source Route Overhead
    380           *
    381           * This function is called by the framework to determine the overhead required
    382           * in the network frame for source routing to a particular destination.
    383           *
    384           * @param destination The node id of the destination  Ver.: always
    385           */

   \                                 In section .text, align 2, keep-with-next
    386          int8u emberAfGetSourceRouteOverheadCallback(EmberNodeId destination)
    387          {
    388            return 0;
   \                     emberAfGetSourceRouteOverheadCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    389          }
    390          
    391          /** @brief Initiate Inter Pan Key Establishment
    392           *
    393           * This function is called by the framework to initiate key establishment with a
    394           * remote device on a different PAN.  The application should return
    395           * EMBER_SUCCESS if key establishment was initiated successfully.  The
    396           * application should call ::emberAfInterPanKeyEstablishmentCallback as events
    397           * occur.
    398           *
    399           * @param panId The PAN id of the remote device.  Ver.: always
    400           * @param eui64 The EUI64 of the remote device.  Ver.: always
    401           */

   \                                 In section .text, align 2, keep-with-next
    402          EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
    403                                                                      const EmberEUI64 eui64)
    404          {
    405            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateInterPanKeyEstablishmentCallback:
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    406          }
    407          
    408          /** @brief Initiate Key Establishment
    409           *
    410           * This function is called by the framework to initiate key establishment with a
    411           * remote device.  The application should return EMBER_SUCCESS if key
    412           * establishment was initiated successfully.  The application should call
    413           * ::emberAfKeyEstablishmentCallback as events occur.
    414           *
    415           * @param nodeId The node id of the remote device.  Ver.: always
    416           * @param endpoint The endpoint on the remote device.  Ver.: always
    417           */

   \                                 In section .text, align 2, keep-with-next
    418          EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
    419                                                              int8u endpoint)
    420          {
    421            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateKeyEstablishmentCallback:
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    422          }
    423          
    424          /** @brief Initiate Partner Link Key Exchange
    425           *
    426           * This function is called by the framework to initiate a partner link key
    427           * exchange with a remote device.  The application should return EMBER_SUCCESS
    428           * if the partner link key exchange was initiated successfully.  When the
    429           * partner link key exchange completes, the application should call the given
    430           * callback.
    431           *
    432           * @param target The node id of the remote device.  Ver.: always
    433           * @param endpoint The key establishment endpoint of the remote device.  Ver.:
    434           * always
    435           * @param callback The callback that should be called when the partner link key
    436           * exchange completse.  Ver.: always
    437           */

   \                                 In section .text, align 2, keep-with-next
    438          EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
    439                                                                    int8u endpoint,
    440                                                                    EmberAfPartnerLinkKeyExchangeCallback * callback)
    441          {
    442            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiatePartnerLinkKeyExchangeCallback:
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    443          }
    444          
    445          /** @brief Inter Pan Key Establishment
    446           *
    447           * A callback by the key-establishment code to indicate an event has occurred. 
    448           * For error codes this is purely a notification.  For non-error status codes
    449           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    450           * disallow the operation.  If the application returns TRUE then the key
    451           * establishment is allowed to proceed.  If it returns FALSE, then key
    452           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    453           *
    454           * @param status   Ver.: always
    455           * @param amInitiator   Ver.: always
    456           * @param panId   Ver.: always
    457           * @param eui64   Ver.: always
    458           * @param delayInSeconds   Ver.: always
    459           */

   \                                 In section .text, align 2, keep-with-next
    460          boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    461                                                          boolean amInitiator,
    462                                                          EmberPanId panId,
    463                                                          const EmberEUI64 eui64,
    464                                                          int8u delayInSeconds)
    465          {
    466            return TRUE;
   \                     emberAfInterPanKeyEstablishmentCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    467          }
    468          
    469          /** @brief Interpan Send Message
    470           *
    471           * This function will send a raw MAC message with interpan frame format using
    472           * the passed parameters.
    473           *
    474           * @param header Interpan header info  Ver.: always
    475           * @param messageLength The length of the message received or to send  Ver.:
    476           * always
    477           * @param message The message data received or to send.  Ver.: always
    478           */

   \                                 In section .text, align 2, keep-with-next
    479          EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
    480                                                         int16u messageLength,
    481                                                         int8u* message)
    482          {
    483            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInterpanSendMessageCallback:
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    484          }
    485          
    486          /** @brief Key Establishment
    487           *
    488           * A callback by the key-establishment code to indicate an event has occurred. 
    489           * For error codes this is purely a notification.  For non-error status codes
    490           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    491           * disallow the operation.  If the application returns TRUE then the key
    492           * establishment is allowed to proceed.  If it returns FALSE, then key
    493           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    494           *
    495           * @param status   Ver.: always
    496           * @param amInitiator   Ver.: always
    497           * @param partnerShortId   Ver.: always
    498           * @param delayInSeconds   Ver.: always
    499           */

   \                                 In section .text, align 2, keep-with-next
    500          boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    501                                                  boolean amInitiator,
    502                                                  EmberNodeId partnerShortId,
    503                                                  int8u delayInSeconds)
    504          {
    505            return TRUE;
   \                     emberAfKeyEstablishmentCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    506          }
    507          
    508          /** @brief Level Control Effect
    509           *
    510           * This is called by the framework when the on/off cluster initiates a command
    511           * that must effect a level control change.
    512           *
    513           * @param endpoint   Ver.: always
    514           * @param newValue   Ver.: always
    515           */

   \                                 In section .text, align 2, keep-with-next
    516          void emberAfOnOffClusterLevelControlEffectCallback(int8u endpoint,
    517                                                             boolean newValue)
    518          {
    519          }
   \                     emberAfOnOffClusterLevelControlEffectCallback:
   \   00000000   0x4770             BX       LR               ;; return
    520          
    521          /** @brief Main Init
    522           *
    523           * This function is called from the application's main function. It gives the
    524           * application a chance to do any initialization required at system startup. Any
    525           * code that you would normally put into the top of the application's main()
    526           * routine should be put into this function.
    527                  Note: No callback in the
    528           * Application Framework is associated with resource cleanup. If you are
    529           * implementing your application on a Unix host where resource cleanup is a
    530           * consideration, we expect that you will use the standard Posix system calls,
    531           * including the use of atexit() and handlers for signals such as SIGTERM,
    532           * SIGINT, SIGCHLD, SIGPIPE and so on. If you use the signal() function to
    533           * register your signal handler, please mind the returned value which may be an
    534           * Application Framework function. If the return value is non-null, please make
    535           * sure that you call the returned function from your handler to avoid negating
    536           * the resource cleanup of the Application Framework itself.
    537           *
    538           */
    539          //	void emberAfMainInitCallback(void)      //By Ray 150203
    540          //	{
    541          //	}
    542          
    543          /** @brief Main Start
    544           *
    545           * This function is called at the start of main after the HAL has been
    546           * initialized.  The standard main function arguments of argc and argv are
    547           * passed in.  However not all platforms have support for main() function
    548           * arguments.  Those that do not are passed NULL for argv, therefore argv should
    549           * be checked for NULL before using it.  If the callback determines that the
    550           * program must exit, it should return TRUE.  The value returned by main() will
    551           * be the value written to the returnCode pointer.  Otherwise the callback
    552           * should return FALSE to let normal execution continue.
    553           *
    554           * @param returnCode   Ver.: always
    555           * @param argc   Ver.: always
    556           * @param argv   Ver.: always
    557           */

   \                                 In section .text, align 2, keep-with-next
    558          boolean emberAfMainStartCallback(int* returnCode,
    559                                           int argc,
    560                                           char** argv)
    561          {
    562            // NOTE:  argc and argv may not be supported on all platforms, so argv MUST be
    563            // checked for NULL before referencing it.  On those platforms without argc 
    564            // and argv "0" and "NULL" are passed respectively.
    565          
    566            return FALSE;  // exit?
   \                     emberAfMainStartCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    567          }
    568          
    569          /** @brief Main Tick
    570           *
    571           * Whenever main application tick is called, this callback will be called at the
    572           * end of the main tick execution.
    573           *
    574           */

   \                                 In section .text, align 2, keep-with-next
    575          void emberAfMainTickCallback(void)
    576          {
    577          }
   \                     emberAfMainTickCallback:
   \   00000000   0x4770             BX       LR               ;; return
    578          
    579          /** @brief Make Invalid
    580           *
    581           * This function is called to invalidate the valid attribute in the Scenes
    582           * cluster.
    583           *
    584           * @param endpoint   Ver.: always
    585           */

   \                                 In section .text, align 2, keep-with-next
    586          EmberAfStatus emberAfScenesClusterMakeInvalidCallback(int8u endpoint)
    587          {
    588            return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     emberAfScenesClusterMakeInvalidCallback:
   \   00000000   0x2081             MOVS     R0,#+129
   \   00000002   0x4770             BX       LR               ;; return
    589          }
    590          
    591          /** @brief Message Sent
    592           *
    593           * This function is called by the application framework from the message sent
    594           * handler, when it is informed by the stack regarding the message sent status.
    595           * All of the values passed to the emberMessageSentHandler are passed on to this
    596           * callback. This provides an opportunity for the application to verify that its
    597           * message has been sent successfully and take the appropriate action. This
    598           * callback should return a boolean value of TRUE or FALSE. A value of TRUE
    599           * indicates that the message sent notification has been handled and should not
    600           * be handled by the application framework.
    601           *
    602           * @param type   Ver.: always
    603           * @param indexOrDestination   Ver.: always
    604           * @param apsFrame   Ver.: always
    605           * @param msgLen   Ver.: always
    606           * @param message   Ver.: always
    607           * @param status   Ver.: always
    608           */

   \                                 In section .text, align 2, keep-with-next
    609          boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
    610                                             int16u indexOrDestination,
    611                                             EmberApsFrame* apsFrame,
    612                                             int16u msgLen,
    613                                             int8u* message,
    614                                             EmberStatus status)
    615          {
    616            return FALSE;
   \                     emberAfMessageSentCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    617          }
    618          
    619          /** @brief Ncp Init
    620           *
    621           * This callback is used for initializing the network coprocessor either at
    622           * startup, or upon reset. It is should be used to perform any kind of EZSP
    623           * initialization and is called twice every time when NCP is reset. In the first
    624           * invocation, memoryAllocation will be TRUE and the application should only
    625           * issue EZSP commands that affect memory allocation on the NCP.  In the second
    626           * invocation, memoryAllocation will be FALSE and the application should only
    627           * issue EZSP commands that do not affect memory allocation on the NCP.  In an
    628           * SOC environment, this callbacks is not used.
    629           *
    630           * @param memoryAllocation   Ver.: always
    631           */

   \                                 In section .text, align 2, keep-with-next
    632          void emberAfNcpInitCallback(boolean memoryAllocation)
    633          {
    634          }
   \                     emberAfNcpInitCallback:
   \   00000000   0x4770             BX       LR               ;; return
    635          
    636          /** @brief Network Key Update Complete
    637           *
    638           * This is called by the framework when a network key update operation started
    639           * by the trust center is complete.
    640           *
    641           * @param status   Ver.: always
    642           */

   \                                 In section .text, align 2, keep-with-next
    643          void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status)
    644          {
    645          }
   \                     emberAfNetworkKeyUpdateCompleteCallback:
   \   00000000   0x4770             BX       LR               ;; return
    646          
    647          /** @brief Ota Bootload
    648           *
    649           * The platform specific routine to bootload the device from a ZigBee
    650           * over-the-air upgrade file.
    651           *
    652           * @param id A pointer to the structure that contains the information about what
    653           * OTA image to bootload.  Ver.: always
    654           * @param ncpUpgradeTagId The tag ID of the upgrade data that will be used to
    655           * bootload the device.  Ver.: always
    656           */

   \                                 In section .text, align 2, keep-with-next
    657          int8u emberAfOtaBootloadCallback(const EmberAfOtaImageId* id,
    658                                           int16u ncpUpgradeTagId)
    659          {
   \                     emberAfOtaBootloadCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
    660            // Please implement me
    661            emberAfCorePrintln("Not supported.");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "Not supported.">`
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       emberAfPrintln
    662            return 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    663          }
    664          
    665          /** @brief Ota Client Bootload
    666           *
    667           * This callback is fired when the OTA Client recevies a command to bootload the
    668           * newly downloaded OTA image.  This callback will perform the platform specific
    669           * to bootload their device.
    670           *
    671           * @param id This is the identifier relating to the image that has been
    672           * downloaded and is ready for bootload.  Ver.: always
    673           */

   \                                 In section .text, align 2, keep-with-next
    674          void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id)
    675          {
    676            // Any final preperation prior to the bootload should be done here.
    677            // It is assumed that the device will reset in most all cases.
    678            // Please implement me.
    679          }
   \                     emberAfOtaClientBootloadCallback:
   \   00000000   0x4770             BX       LR               ;; return
    680          
    681          /** @brief Ota Client Custom Verify
    682           *
    683           * This callback is executed by the OTA client after the signature verification
    684           * has successfully completed.  It allows the device to do its own custom
    685           * verification of the image (such as verifying that the EBL is intact).
    686           *
    687           * @param newVerification This indicates if a new verification should be
    688           * started.  Ver.: always
    689           * @param id This is ID of the image to be verified.  Ver.: always
    690           */

   \                                 In section .text, align 2, keep-with-next
    691          EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(boolean newVerification,
    692                                                                        const EmberAfOtaImageId* id)
    693          {
    694            // Manufacturing specific checks can be made to the image in this function to
    695            // determine if it is valid.  This function is called AFTER cryptographic 
    696            // checks have passed.  If the cryptographic checks failed, this function will
    697            // never be called.
    698            
    699            // The function shall return one of the following based on its own 
    700            // verification process.
    701            // 1) EMBER_AF_IMAGE_GOOD - the image has passed all checks
    702            // 2) EMBER_AF_IMAGE_BAD  - the image is not valid 
    703            // 3) EMBER_AF_IMAGE_VERIFY_IN_PROGRESS - the image is valid so far, but more
    704            //      checks are needed.  This callback shall be re-executed later to 
    705            //      continue verification.  This allows other code in the framework to run.
    706            return EMBER_AF_IMAGE_GOOD;
   \                     emberAfOtaClientCustomVerifyCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    707          }
    708          
    709          /** @brief Ota Client Download Complete
    710           *
    711           * This callback indicates that the OTA client has completed the download of a
    712           * file.  If the file has been completely downloaded and cryptographic checks
    713           * have been turned on, then those will be performed prior to this callback and
    714           * that outcome included in the 'success' result.  On failure, this callback is
    715           * merely informative, and the return type is ignored.  On succesful download,
    716           * this callback allows the client to perform any additional verification of the
    717           * downloaded image and return that result to the OTA server.
    718           *
    719           * @param success This indicates the success or failure of the download and
    720           * cryptographic verification process (if applicable).  Ver.: always
    721           * @param id This is the image identifier information that corresponds to the
    722           * download result.  Ver.: always
    723           */

   \                                 In section .text, align 2, keep-with-next
    724          boolean emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult success,
    725                                                           const EmberAfOtaImageId* id)
    726          {
   \                     emberAfOtaClientDownloadCompleteCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
    727            // At this point the image has been completely downloaded and cryptographic 
    728            // checks (if applicable) have been performed.
    729          
    730            if (!success) {
   \   00000002   0xB928             CBNZ.N   R0,??emberAfOtaClientDownloadCompleteCallback_0
    731              emberAfOtaBootloadClusterPrintln("Download failed.");
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "Download failed.">`
   \   00000008   0xF44F 0x70A0      MOV      R0,#+320
   \   0000000C   0x.... 0x....      BL       emberAfPrintln
    732              return TRUE;   // return value is ignored
    733            }
    734            
    735            // This is for any additional validation that needs to be performed
    736            // on the image by the application.
    737            
    738            // The results of checks here will be returned back to the OTA server
    739            // in the Upgrade End request.
    740            return TRUE;
   \                     ??emberAfOtaClientDownloadCompleteCallback_0:
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    741          }
    742          
    743          /** @brief Ota Client Incoming Message Raw
    744           *
    745           * This callback is for processing incoming messages for the Over-the-air
    746           * bootload cluster client.  ZCL will not process the message and instead hand
    747           * the raw over the air data to the callback for its own processing.
    748           *
    749           * @param message A pointer to the structure containing the message buffer and
    750           * other information about it.  Ver.: always
    751           */

   \                                 In section .text, align 2, keep-with-next
    752          boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand * message)
    753          {
    754            return FALSE;
   \                     emberAfOtaClientIncomingMessageRawCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    755          }
    756          
    757          /** @brief Ota Client Start
    758           *
    759           * This callback should be called when the profile specific registration has
    760           * completed successfully.  It will start the client's state machine that will
    761           * find the OTA server, query it for the next image, download the image, wait
    762           * for the bootload message, and kick off the bootload.
    763           *
    764           */

   \                                 In section .text, align 2, keep-with-next
    765          void emberAfOtaClientStartCallback(void)
    766          {
    767          }
   \                     emberAfOtaClientStartCallback:
   \   00000000   0x4770             BX       LR               ;; return
    768          
    769          /** @brief Ota Client Version Info
    770           *
    771           * This function is called by the OTA client when a new query will occur to the
    772           * server asking what the next version of firmware is.  The client can inform
    773           * the cluster software as to what information to use in the query (and
    774           * subsequent download).
    775           *
    776           * @param currentImageInfo This is the information to use in the next query by
    777           * the client cluster code.  It contains the manufacturer ID, image type ID, and
    778           * the firmware version to be specified in the query message sent to the server.
    779           *  Ver.: always
    780           * @param hardwareVersion This is a pointer to the hardware version to use in
    781           * the query.  If no hardware version should be used, then
    782           * EMBER_AF_INVALID_HARDWARE_VERSION should be used.  Ver.: always
    783           */

   \                                 In section .text, align 2, keep-with-next
    784          void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
    785                                                   int16u* hardwareVersion)
    786          {
    787            // Customer will fill in the image info with their manufacturer ID,
    788            // image type ID, and current software version number.
    789            // The deviceSpecificFileEui64 can be ignored.
    790          
    791            // It may be necessary to dynamically determine this by talking to
    792            // another device, as is the case with a host talking to an NCP device.
    793          
    794            // However, this routine will be called repeatedly so it may be wise
    795            // to cache the data!
    796          
    797          /* This is commented out since the #defines below are not defined.
    798          
    799            if (currentImageInfo != NULL) {
    800              MEMSET(currentImageInfo, 0, sizeof(EmberAfOtaImageId));
    801              currentImageInfo->manufacturerId  = EMBER_AF_MANUFACTURER_CODE;
    802              currentImageInfo->imageTypeId     = EMBER_AF_IMAGE_TYPE_ID;
    803              currentImageInfo->firmwareVersion = EMBER_AF_CUSTOM_FIRMWARE_VERSION;
    804            }
    805          
    806            if (hardwareVersion != NULL) {
    807              *hardwareVersion = EMBER_AF_INVALID_HARDWARE_VERSION;
    808            }
    809          
    810            assert(FALSE);
    811          */
    812          }
   \                     emberAfOtaClientVersionInfoCallback:
   \   00000000   0x4770             BX       LR               ;; return
    813          
    814          /** @brief Ota Page Request Server Policy
    815           *
    816           * This callback is called by the OTA server page request code when it wants to
    817           * determine if it is allowed for an OTA client to make a page request.  It is
    818           * only called if page request support has been enabled on the server.  It
    819           * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
    820           * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
    821           *
    822           */

   \                                 In section .text, align 2, keep-with-next
    823          int8u emberAfOtaPageRequestServerPolicyCallback(void)
    824          {
    825            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaPageRequestServerPolicyCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    826          }
    827          
    828          /** @brief Ota Server Block Size
    829           *
    830           * This function provides a way for the server to adjust the block size of its
    831           * response to an Image block request by a client.
    832           *
    833           * @param clientNodeId The node Id of OTA client making an image block request. 
    834           * Ver.: always
    835           */

   \                                 In section .text, align 2, keep-with-next
    836          int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId)
    837          {
   \                     emberAfOtaServerBlockSizeCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    838            // This function provides a way for the server to potentially
    839            // adjust the block size based on the client who is requesting.
    840            // In other words if we are using source routing we will limit
    841            // data returned by enough to put a source route into the message.
    842          
    843            // Image Block Response Message Format
    844            // Status Code: 1-byte
    845            // Manuf Code:  2-bytes
    846            // Image Type:  2-bytes
    847            // File Ver:    4-bytes
    848            // File Offset: 4-bytes
    849            // Data Size:   1-byte
    850            // Data:        variable
    851            const int8u IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);
    852          
    853            EmberApsFrame apsFrame;
    854            int8u maxSize;
    855            apsFrame.options = EMBER_APS_OPTION_NONE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    856          
    857            if (emberAfIsCurrentSecurityProfileSmartEnergy()) {
   \   0000000C   0x.... 0x....      BL       emberAfIsCurrentSecurityProfileSmartEnergy
   \   00000010   0xB128             CBZ.N    R0,??emberAfOtaServerBlockSizeCallback_0
    858              apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
   \   00000012   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000016   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    859            }
    860          
    861            maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
    862                                                     clientNodeId,
    863                                                     &apsFrame);
    864            maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
    865            return maxSize;
   \                     ??emberAfOtaServerBlockSizeCallback_0:
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   00000028   0x3811             SUBS     R0,R0,#+17
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    866          }
    867          
    868          /** @brief Ota Server Image Block Request
    869           *
    870           * This function is called when the server application receives an image block
    871           * request by a client.
    872           *
    873           * @param data A struct containing the details of the image block response and
    874           * values that can be returned by the application to effect the behavior of the
    875           * server's response.  Ver.: always
    876           */

   \                                 In section .text, align 2, keep-with-next
    877          int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data)
    878          {
    879            // This function should return one of the following:
    880            //   EMBER_ZCL_STATUS_SUCCESS - This indicates that the OTA server code should
    881            //     respond to the image block request normally.
    882            //   EMBER_ZCL_STATUS_ABORT - This indicates to the OTA server that it should
    883            //     tell the client to abort the download and make no more image block requests.
    884            //   EMBER_ZCL_STATUS_WAIT_FOR_DATA - This indicates to the OTA server to tell
    885            //     the client it should delay before asking for that data block again.
    886            //     The 'waitTimeInMinutesResponse' value should be filled in with the delay value.
    887            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaServerImageBlockRequestCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    888          }
    889          
    890          /** @brief Ota Server Incoming Message Raw
    891           *
    892           * This callback is for processing incoming messages for the Over-the-air
    893           * bootload cluster server.  ZCL will not process the message and instead hand
    894           * the raw over the air data to the callback for its own processing.
    895           *
    896           * @param message A pointer to the structure containing the message buffer and
    897           * other information about it.  Ver.: always
    898           */

   \                                 In section .text, align 2, keep-with-next
    899          boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand * message)
    900          {
    901            return FALSE;
   \                     emberAfOtaServerIncomingMessageRawCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    902          }
    903          
    904          /** @brief Ota Server Query
    905           *
    906           * This callback is fired when the OTA server receives a query request by the
    907           * client.  The callback lets the server application indicate to the client what
    908           * the 'next' version of software is for the device, or if there is not one
    909           * available.
    910           *
    911           * @param currentImageId This is the current software image that the client
    912           * hase.  Ver.: always
    913           * @param hardwareVersion If this value is non-NULL, it indicates the hardware
    914           * version of the client device.  If NULL, the client did not specify a hardware
    915           * version.  Ver.: always
    916           * @param nextUpgradeImageId This is a pointer to a data structure containing
    917           * the 'next' software version for the client to download.  Ver.: always
    918           */

   \                                 In section .text, align 2, keep-with-next
    919          int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
    920                                              int16u* hardwareVersion,
    921                                              EmberAfOtaImageId* nextUpgradeImageId)
    922          {
    923            // If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
    924            // and populate the 'nextUpgradeImageId' structure with the appropriate values.
    925            // If no new software image is available (i.e. the client should not download a firmware image)
    926            // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
    927            return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
   \                     emberAfOtaServerQueryCallback:
   \   00000000   0x2098             MOVS     R0,#+152
   \   00000002   0x4770             BX       LR               ;; return
    928          }
    929          
    930          /** @brief Ota Server Send Image Notify
    931           *
    932           * This callback is an indication to the OTA server that it should send out
    933           * notification about an OTA file that is available for download.
    934           *
    935           * @param dest The destination of the image notify message.  May be a broadcast
    936           * address.  Ver.: always
    937           * @param endpoint The destination endpoint of the image notify message.  May be
    938           * a broadcast endpoint.  Ver.: always
    939           * @param payloadType The type of data the image notify message will contain.  0
    940           * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID. 
    941           * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
    942           * @param queryJitter The percentage of nodes that should respond to this
    943           * message, from 1-100.  On receipt of this message, each recipient will
    944           * randomly choose a percentage and only query the server if their percentage is
    945           * below this value.  Ver.: always
    946           * @param id The image information that will be put in the message.  The data
    947           * within this struct that will be appended to the message is determined by the
    948           * previous 'payloadType' argument.  Ver.: always
    949           */

   \                                 In section .text, align 2, keep-with-next
    950          boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
    951                                                          int8u endpoint,
    952                                                          int8u payloadType,
    953                                                          int8u queryJitter,
    954                                                          const EmberAfOtaImageId* id)
    955          {
    956            return FALSE;
   \                     emberAfOtaServerSendImageNotifyCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    957          }
    958          
    959          /** @brief Ota Server Upgrade End Request
    960           *
    961           * This function is called when the OTA server receives a request an upgrade end
    962           * request.  If the request indicated a successful download by the client, the
    963           * server must tell the client when and if to upgrade to the downloaded image.
    964           *
    965           * @param source The node ID of the device that sent the upgrade end request. 
    966           * Ver.: always
    967           * @param status This is the ZCL status sent by the client indicating the result
    968           * of its attempt to download the new upgrade image.  If the status is not
    969           * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
    970           * response mesasge will be generated by the server.  Ver.: always
    971           * @param returnValue If the server returns TRUE indicating that the client
    972           * should apply the upgrade, this time value indicates when in the future the
    973           * client should apply the upgrade.  Ver.: always
    974           * @param imageId This variable indicates the software version that the client
    975           * successfully downloaded and is asking to upgrade to.  Ver.: always
    976           */

   \                                 In section .text, align 2, keep-with-next
    977          boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
    978                                                            int8u status,
    979                                                            int32u* returnValue,
    980                                                            const EmberAfOtaImageId* imageId)
    981          {
    982            // If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
    983            // merely informative and no response message will be generated by the server.
    984            // If the server wants the client to NOT apply the upgrade, then it should
    985            // return FALSE.
    986            // If the server wants the client to apply the upgrade, it should return TRUE
    987            // and set the 'returnValue' parameter to when it wants the client to
    988            // apply the upgrade.  There are three possible values:
    989            //   0               =  Apply the upgrade now
    990            //   0xFFFFFFFF      =  Don't apply yet, ask again later.
    991            //   (anything-else) =  Apply the upgrade X minutes from now.
    992            *returnValue = 0;
   \                     emberAfOtaServerUpgradeEndRequestCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x6010             STR      R0,[R2, #+0]
    993            return TRUE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
    994          }
    995          
    996          /** @brief Ota Storage Check Temp Data
    997           *
    998           * This callback will validate temporary data in the storage device to determine
    999           * whether it is a complete file, a partially downloaded file, or there is no
   1000           * file present.  When a complete or partial file is found it will return
   1001           * EMBER_AF_OTA_STORAGE_SUCCESS or EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND,
   1002           * respectively.  In that case, the currentOffset, totalImageSize, and
   1003           * newFileInfo will be populated with data.  When EMBER_AF_OTA_STORAGE_ERROR is
   1004           * returned, no temporary data is present.
   1005           *
   1006           * @param currentOffset A pointer to a value that will be written with the
   1007           * offset within the total file size that has been successfully stored in the
   1008           * storage device.  This will indicate how much data has been currently
   1009           * dowloaded.  Ver.: always
   1010           * @param totalImageSize A pointer to a value that will be written with the
   1011           * total image size of the OTA file when a download has completed.  This does
   1012           * not indicate how much data has actually been downloaded currently.  Ver.:
   1013           * always
   1014           * @param newFileInfo This is the image id of the temporary file data stored in
   1015           * the storage device.  Ver.: always
   1016           */

   \                                 In section .text, align 2, keep-with-next
   1017          EmberAfOtaStorageStatus emberAfOtaStorageCheckTempDataCallback(int32u* currentOffset,
   1018                                                                         int32u* totalImageSize,
   1019                                                                         EmberAfOtaImageId* newFileInfo)
   1020          {
   1021            // If the image data cannot be successfully verified, an error should be returned.
   1022            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageCheckTempDataCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1023          }
   1024          
   1025          /** @brief Ota Storage Clear Temp Data
   1026           *
   1027           * This function clears any existing temp data that was downloaed.  It is used
   1028           * immediately prior to downloading a raw image over the air.
   1029           *
   1030           */

   \                                 In section .text, align 2, keep-with-next
   1031          EmberAfOtaStorageStatus emberAfOtaStorageClearTempDataCallback(void)
   1032          {
   1033            // If the image data cannot be stored, an error should be returned.
   1034            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageClearTempDataCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1035          }
   1036          
   1037          /** @brief Ota Storage Close
   1038           *
   1039           * This callback shuts down the ZigBee Over-the-air storage module.
   1040           *
   1041           */

   \                                 In section .text, align 2, keep-with-next
   1042          void emberAfOtaStorageCloseCallback(void)
   1043          {
   1044            // Please implement me.
   1045            assert(FALSE);
   \                     emberAfOtaStorageCloseCallback:
   \   00000000   0xF240 0x4115      MOVW     R1,#+1045
   \   00000004   0x....             B.N      ?Subroutine2
   1046          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      B.W      halInternalAssertFailed
   1047          
   1048          /** @brief Ota Storage Driver Download Finish
   1049           *
   1050           * This callback defines the low-level means by which a device records the final
   1051           * offset value of the download image.
   1052           *
   1053           * @param offset The value of the final offset of the image download.  Ver.:
   1054           * always
   1055           */

   \                                 In section .text, align 2, keep-with-next
   1056          void emberAfOtaStorageDriverDownloadFinishCallback(int32u offset)
   1057          {
   1058            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1059            // Please implement me.
   1060            assert(FALSE);
   \                     emberAfOtaStorageDriverDownloadFinishCallback:
   \   00000000   0xF240 0x4124      MOVW     R1,#+1060
   \   00000004                      REQUIRE ?Subroutine2
   \   00000004                      ;; // Fall through to label ?Subroutine2
   1061          }
   1062          
   1063          /** @brief Ota Storage Driver Init
   1064           *
   1065           * The initialization code for the OTA storage driver.
   1066           *
   1067           */

   \                                 In section .text, align 2, keep-with-next
   1068          boolean emberAfOtaStorageDriverInitCallback(void)
   1069          {
   \                     emberAfOtaStorageDriverInitCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
   1070            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1071            // Please implement me.
   1072            assert(FALSE);
   \   00000002   0xF44F 0x6186      MOV      R1,#+1072
   \   00000006   0x....             B.N      ?Subroutine0
   1073            return FALSE;
   1074          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      BL       halInternalAssertFailed
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   1075          
   1076          /** @brief Ota Storage Driver Invalidate Image
   1077           *
   1078           * This callback invalidates the image stored on disk so that it will not be
   1079           * bootloaded, and it will not be a valid image that is in the middle of
   1080           * downloading.
   1081           *
   1082           */

   \                                 In section .text, align 2, keep-with-next
   1083          EmberAfOtaStorageStatus emberAfOtaStorageDriverInvalidateImageCallback(void)
   1084          {
   \                     emberAfOtaStorageDriverInvalidateImageCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
   1085            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1086            // Please implement me.
   1087            assert(FALSE);
   \   00000002   0xF240 0x413F      MOVW     R1,#+1087
   \   00000006   0x....             B.N      ?Subroutine1
   1088            return EMBER_AF_OTA_STORAGE_ERROR;
   1089          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x.... 0x....      ADR.W    R0,`?<Constant "callback-stub.c">`
   \   00000004   0x.... 0x....      BL       halInternalAssertFailed
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   1090          
   1091          /** @brief Ota Storage Driver Prepare To Resume Download
   1092           *
   1093           * This callback allows the underlying storage driver to prepare to resume the
   1094           * OTA file download.  For example, the driver may exceute a page erase to
   1095           * insure the next page is ready to be written to.
   1096           *
   1097           */

   \                                 In section .text, align 2, keep-with-next
   1098          EmberAfOtaStorageStatus emberAfOtaStorageDriverPrepareToResumeDownloadCallback(void)
   1099          {
   \                     emberAfOtaStorageDriverPrepareToResumeDownloadCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
   1100            assert(FALSE);
   \   00000002   0xF240 0x414C      MOVW     R1,#+1100
   \   00000006                      REQUIRE ?Subroutine1
   \   00000006                      ;; // Fall through to label ?Subroutine1
   1101            return EMBER_AF_OTA_STORAGE_ERROR;
   1102          }
   1103          
   1104          /** @brief Ota Storage Driver Read
   1105           *
   1106           * This callback defines the low-level means by which a device reads from the
   1107           * OTA storage device.
   1108           *
   1109           * @param offset The address offset from the start of the storage device where
   1110           * data is to be read.  Ver.: always
   1111           * @param length The length of the data to be read from the storage device. 
   1112           * Ver.: always
   1113           * @param returnData A pointer where the data read from the device should be
   1114           * written to.  Ver.: always
   1115           */

   \                                 In section .text, align 2, keep-with-next
   1116          boolean emberAfOtaStorageDriverReadCallback(int32u offset,
   1117                                                      int32u length,
   1118                                                      int8u* returnData)
   1119          {
   \                     emberAfOtaStorageDriverReadCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
   1120            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1121            // Please implement me.
   1122            assert(FALSE);
   \   00000002   0xF240 0x4162      MOVW     R1,#+1122
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
   1123            return FALSE;
   1124          }
   1125          
   1126          /** @brief Ota Storage Driver Retrieve Last Stored Offset
   1127           *
   1128           * This callback defines the low-level means by which a device retrieves the
   1129           * last persistently recorded download offset.  This may be different than last
   1130           * actual download offset.
   1131           *
   1132           */

   \                                 In section .text, align 2, keep-with-next
   1133          int32u emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback(void)
   1134          {
   \                     emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
   1135            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1136            // Please implement me.
   1137            assert(FALSE);
   \   00000002   0xF240 0x4171      MOVW     R1,#+1137
   \   00000006   0x....             B.N      ?Subroutine0
   1138            return 0;
   1139          }
   1140          
   1141          /** @brief Ota Storage Driver Write
   1142           *
   1143           * This callback defines the low-level means by which a device reads from the
   1144           * OTA storage device.
   1145           *
   1146           * @param dataToWrite A pointer to the data that will be written to the storage
   1147           * device.  Ver.: always
   1148           * @param offset The address offset from the start of the storage device where
   1149           * data will be written.  Ver.: always
   1150           * @param length The length of the data to be written to the storage device. 
   1151           * Ver.: always
   1152           */

   \                                 In section .text, align 2, keep-with-next
   1153          boolean emberAfOtaStorageDriverWriteCallback(const int8u* dataToWrite,
   1154                                                       int32u offset,
   1155                                                       int32u length)
   1156          {
   \                     emberAfOtaStorageDriverWriteCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
   1157            // The storage driver and the rest of the OTA bootload code will not function correctly unless it is implemnted.
   1158            // Please implement me.
   1159            assert(FALSE);
   \   00000002   0xF240 0x4187      MOVW     R1,#+1159
   \   00000006   0x....             B.N      ?Subroutine0
   1160            return FALSE;
   1161          }
   1162          
   1163          /** @brief Ota Storage Finish Download
   1164           *
   1165           * This function indicates to the storage module that the download has finished.
   1166           *
   1167           * @param offset The final offset of the downloaded file (i.e. the total size) 
   1168           * Ver.: always
   1169           */

   \                                 In section .text, align 2, keep-with-next
   1170          EmberAfOtaStorageStatus emberAfOtaStorageFinishDownloadCallback(int32u offset)
   1171          {
   1172            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageFinishDownloadCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1173          }
   1174          
   1175          /** @brief Ota Storage Get Count
   1176           *
   1177           * This callback returns the total number of ZigBee Over-the-air upgrade images
   1178           * stored in the storage module.
   1179           *
   1180           */

   \                                 In section .text, align 2, keep-with-next
   1181          int8u emberAfOtaStorageGetCountCallback(void)
   1182          {
   1183            return 0;
   \                     emberAfOtaStorageGetCountCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1184          }
   1185          
   1186          /** @brief Ota Storage Get Full Header
   1187           *
   1188           * This callback populates the EmberAfOtaHeader structure pointed to by the
   1189           * returnData with data about the OTA file stored in the storage module.
   1190           *
   1191           * @param id This is a pointer to the image id for the OTA file to retrieve
   1192           * information about.  Ver.: always
   1193           * @param returnData This is a pointer to the location of the structure that
   1194           * will be populated with data.  Ver.: always
   1195           */

   \                                 In section .text, align 2, keep-with-next
   1196          EmberAfOtaStorageStatus emberAfOtaStorageGetFullHeaderCallback(const EmberAfOtaImageId* id,
   1197                                                                         EmberAfOtaHeader* returnData)
   1198          {
   1199            // If the requested image cannot be found, then an error shouldb e returned.
   1200            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageGetFullHeaderCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1201          }
   1202          
   1203          /** @brief Ota Storage Get Total Image Size
   1204           *
   1205           * This function returns the total size of the ZigBee Over-the-air file with the
   1206           * passed parameters.  If no file is found with those parameters, 0 is returned.
   1207           *
   1208           * @param id A pointer to the image identifier for the OTA file to retrieve
   1209           * information for.  Ver.: always
   1210           */

   \                                 In section .text, align 2, keep-with-next
   1211          int32u emberAfOtaStorageGetTotalImageSizeCallback(const EmberAfOtaImageId* id)
   1212          {
   1213            // On failure this should return an image size of zero.
   1214            return 0;
   \                     emberAfOtaStorageGetTotalImageSizeCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1215          }
   1216          
   1217          /** @brief Ota Storage Init
   1218           *
   1219           * This callback initializes the ZigBee Over-the-air storage module.
   1220           *
   1221           */

   \                                 In section .text, align 2, keep-with-next
   1222          EmberAfOtaStorageStatus emberAfOtaStorageInitCallback(void)
   1223          {
   1224            return EMBER_AF_OTA_STORAGE_SUCCESS;
   \                     emberAfOtaStorageInitCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1225          }
   1226          
   1227          /** @brief Ota Storage Iterator First
   1228           *
   1229           * This callback lets you walk through the list of all OTA files by jumping to
   1230           * the first file in the list maintained by the storage module.  If there is no
   1231           * file then emberAfOtaInvalidImageId is returned.
   1232           *
   1233           */

   \                                 In section .text, align 2, keep-with-next
   1234          EmberAfOtaImageId emberAfOtaStorageIteratorFirstCallback(void)
   1235          {
   1236            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1237          
   1238            // If there are no images at all, this function should return the invalid image id.
   1239            return emberAfInvalidImageId;
   \                     emberAfOtaStorageIteratorFirstCallback:
   \   00000000   0x....             B.N      ?Subroutine3
   1240          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x....             LDR.N    R1,??DataTable3
   \   00000002   0x2210             MOVS     R2,#+16
   \   00000004   0x.... 0x....      B.W      __aeabi_memcpy4
   1241          
   1242          /** @brief Ota Storage Iterator Next
   1243           *
   1244           * This callback lets you walk through the list of all OTA files by jumping to
   1245           * the next file in the list maintained by the storage module.  If there is no
   1246           * next file then emberAfOtaInvalidImageId is returned.
   1247           *
   1248           */

   \                                 In section .text, align 2, keep-with-next
   1249          EmberAfOtaImageId emberAfOtaStorageIteratorNextCallback(void)
   \                     emberAfOtaStorageIteratorNextCallback:
   \   00000000   0xBF00             Nop      
   1250          {
   1251            // It is expected that the storage module maintain its own internal iterator that the 'first' and 'next' functions will manipulate.
   1252          
   1253            // If there are no more images, this function should return the invalid image id.
   1254            return emberAfInvalidImageId;
   \   00000002                      REQUIRE ?Subroutine3
   \   00000002                      ;; // Fall through to label ?Subroutine3
   1255          }
   1256          
   1257          /** @brief Ota Storage Read Image Data
   1258           *
   1259           * This callback reads data from the specified OTA file and returns that data to
   1260           * the caller.
   1261           *
   1262           * @param id This is a pointer to the image id for the OTA file to retrieve data
   1263           * from.  Ver.: always
   1264           * @param offset This is the offset relative to the start of the image where the
   1265           * data should be read from.  Ver.: always
   1266           * @param length This is the length of data that will be read.  Ver.: always
   1267           * @param returnData This is a pointer to where the data read out of the file
   1268           * will be written to  Ver.: always
   1269           * @param returnedLength This is a pointer to a variable where the actual length
   1270           * of data read will be written to.  A short read may occur if the end of file
   1271           * was reached.  Ver.: always
   1272           */

   \                                 In section .text, align 2, keep-with-next
   1273          EmberAfOtaStorageStatus emberAfOtaStorageReadImageDataCallback(const EmberAfOtaImageId* id,
   1274                                                                         int32u offset,
   1275                                                                         int32u length,
   1276                                                                         int8u* returnData,
   1277                                                                         int32u* returnedLength)
   1278          {
   1279            // If the requested image cannot be found, then an error should be returned.
   1280            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageReadImageDataCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1281          }
   1282          
   1283          /** @brief Ota Storage Search
   1284           *
   1285           * This callback searches through the list of all images for one that matches
   1286           * the passed parameters.  On success an image identifier is returned with a
   1287           * matching image.  On failure emberAfInvalidImageId is returned.
   1288           *
   1289           * @param manufacturerId The ZigBee assigned identifier of the manufacturer
   1290           * contained in the OTA image being searched for.  Ver.: always
   1291           * @param imageTypeId The image type identifier contained in the OTA image being
   1292           * searched for.  Ver.: always
   1293           * @param hardwareVersion This is a pointer to the hardware version that will be
   1294           * used in the search.  If the pointer is NULL, hardware version will not be
   1295           * considered when searching for matching images.  If it points to a value, the
   1296           * search will only consider images where that value falls between the minimum
   1297           * and maxmimum hardware version specified in the OTA file.  If no hardware
   1298           * version is present in an OTA file but the other parameters match, the file
   1299           * will be considered a match  Ver.: always
   1300           */

   \                                 In section .text, align 2, keep-with-next
   1301          EmberAfOtaImageId emberAfOtaStorageSearchCallback(int16u manufacturerId,
   1302                                                            int16u imageTypeId,
   1303                                                            const int16u* hardwareVersion)
   1304          {
   1305            // If no image is found that matches the search criteria, this function should return the invalid image id.
   1306            return emberAfInvalidImageId;
   \                     emberAfOtaStorageSearchCallback:
   \   00000000   0x....             B.N      ?Subroutine3
   1307          }
   1308          
   1309          /** @brief Ota Storage Write Temp Data
   1310           *
   1311           * This function writes to the temporary data in the storage device at the
   1312           * specified offset.  It is used when downloading a raw image over the air.
   1313           *
   1314           * @param offset The location within the download image file where to write the
   1315           * data.  Ver.: always
   1316           * @param length The length of data to write.  Ver.: always
   1317           * @param data A pointer to the temporary data that will be written to the
   1318           * storage device.  Ver.: always
   1319           */

   \                                 In section .text, align 2, keep-with-next
   1320          EmberAfOtaStorageStatus emberAfOtaStorageWriteTempDataCallback(int32u offset,
   1321                                                                         int32u length,
   1322                                                                         const int8u* data)
   1323          {
   1324            // If the image data cannot be stored, an error should be returned.
   1325            return EMBER_AF_OTA_STORAGE_ERROR;
   \                     emberAfOtaStorageWriteTempDataCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1326          }
   1327          
   1328          /** @brief Partner Link Key Exchange Request
   1329           *
   1330           * This function is called by the framework on SOC platforms when a remote node
   1331           * requests a partner link key exchange.  The application should return
   1332           * EMBER_SUCCESS to accept the request or any other status to reject it.  On
   1333           * network coprocessor platforms, this function will not be called because the
   1334           * NCP handles partner link key exchange requests based on the binding policy.
   1335           *
   1336           * @param partner The EUI of the remote node.  Ver.: always
   1337           */

   \                                 In section .text, align 2, keep-with-next
   1338          EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner)
   1339          {
   1340            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfPartnerLinkKeyExchangeRequestCallback:
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1341          }
   1342          
   1343          /** @brief Partner Link Key Exchange Response
   1344           *
   1345           * This function is called by the framework when a remote node requests a
   1346           * partner link key exchange.  The application should return TRUE to accept the
   1347           * request or FALSE to reject it.  On network coprocessor platforms, this
   1348           * function will not be called because the NCP handles partner link key exchange
   1349           * requests based on the binding policy.
   1350           *
   1351           * @param sender The EUI of the remote node.  Ver.: always
   1352           * @param status The ZDO response status.  Ver.: always
   1353           */

   \                                 In section .text, align 2, keep-with-next
   1354          void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
   1355                                                             EmberZdoStatus status)
   1356          {
   1357          }
   \                     emberAfPartnerLinkKeyExchangeResponseCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1358          
   1359          /** @brief Performing Key Establishment
   1360           *
   1361           * This function is called by the framework to determine if the device is
   1362           * performing key establishment.  The application should return TRUE if key
   1363           * establishment is in progress.
   1364           *
   1365           */

   \                                 In section .text, align 2, keep-with-next
   1366          boolean emberAfPerformingKeyEstablishmentCallback(void)
   1367          {
   1368            return FALSE;
   \                     emberAfPerformingKeyEstablishmentCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1369          }
   1370          
   1371          /** @brief Rollover
   1372           *
   1373           * This function is called every time a counter exceeds its threshold.
   1374           *
   1375           * @param type The counter that rolled over  Ver.: always
   1376           */

   \                                 In section .text, align 2, keep-with-next
   1377          void emberAfPluginCountersRolloverCallback(EmberCounterType type)
   1378          {
   1379          }
   \                     emberAfPluginCountersRolloverCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1380          
   1381          /** @brief Poll Completed
   1382           *
   1383           * This function is called by the End Device Support plugin after a poll is
   1384           * completed.
   1385           *
   1386           * @param status Return status of a completed poll operation  Ver.: always
   1387           */

   \                                 In section .text, align 2, keep-with-next
   1388          void emberAfPluginEndDeviceSupportPollCompletedCallback(EmberStatus status)
   1389          {
   1390          }
   \                     emberAfPluginEndDeviceSupportPollCompletedCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1391          
   1392          /** @brief Active
   1393           *
   1394           * This function is called by the Idle/Sleep plugin after idling.
   1395           *
   1396           */

   \                                 In section .text, align 2, keep-with-next
   1397          void emberAfPluginIdleSleepActiveCallback(void)
   1398          {
   1399          }
   \                     emberAfPluginIdleSleepActiveCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1400          
   1401          /** @brief Ok To Idle
   1402           *
   1403           * This function is called by the Idle/Sleep plugin before idling.  The
   1404           * application should return TRUE if the device may idle or FALSE otherwise.
   1405           *
   1406           */

   \                                 In section .text, align 2, keep-with-next
   1407          boolean emberAfPluginIdleSleepOkToIdleCallback(void)
   1408          {
   1409            return TRUE;
   \                     emberAfPluginIdleSleepOkToIdleCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1410          }
   1411          
   1412          /** @brief Ok To Sleep
   1413           *
   1414           * This function is called by the Idle/Sleep plugin before sleeping.  The
   1415           * application should return TRUE if the device may sleep or FALSE otherwise.
   1416           *
   1417           * @param durationMs The maximum duration in milliseconds that the device will
   1418           * sleep.  Ver.: always
   1419           */

   \                                 In section .text, align 2, keep-with-next
   1420          boolean emberAfPluginIdleSleepOkToSleepCallback(int32u durationMs)
   1421          {
   1422            return TRUE;
   \                     emberAfPluginIdleSleepOkToSleepCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1423          }
   1424          
   1425          /** @brief Wake Up
   1426           *
   1427           * This function is called by the Idle/Sleep plugin after sleeping.
   1428           *
   1429           * @param durationMs The duration in milliseconds that the device slept.  Ver.:
   1430           * always
   1431           */

   \                                 In section .text, align 2, keep-with-next
   1432          void emberAfPluginIdleSleepWakeUpCallback(int32u durationMs)
   1433          {
   1434          }
   \                     emberAfPluginIdleSleepWakeUpCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1435          
   1436          /** @brief Configured
   1437           *
   1438           * This callback is called by the Reporting plugin whenever a reporting entry is
   1439           * configured, including when entries are deleted or updated.  The application
   1440           * can use this callback for scheduling readings or measurements based on the
   1441           * minimum and maximum reporting interval for the entry.  The application should
   1442           * return EMBER_ZCL_STATUS_SUCCESS if it can support the configuration or an
   1443           * error status otherwise.  Note: attribute reporting is required for many
   1444           * clusters and attributes, so rejecting a reporting configuration may violate
   1445           * ZigBee specifications.
   1446           *
   1447           * @param entry   Ver.: always
   1448           */

   \                                 In section .text, align 2, keep-with-next
   1449          EmberAfStatus emberAfPluginReportingConfiguredCallback(const EmberAfPluginReportingEntry * entry)
   1450          {
   1451            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPluginReportingConfiguredCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1452          }
   1453          
   1454          /** @brief Post Attribute Change
   1455           *
   1456           * This function is called by the application framework after it changes an
   1457           * attribute value. The value passed into this callback is the value to which
   1458           * the attribute was set by the framework.
   1459           *
   1460           * @param endpoint   Ver.: always
   1461           * @param clusterId   Ver.: always
   1462           * @param attributeId   Ver.: always
   1463           * @param mask   Ver.: always
   1464           * @param manufacturerCode   Ver.: always
   1465           * @param type   Ver.: always
   1466           * @param size   Ver.: always
   1467           * @param value   Ver.: always
   1468           */

   \                                 In section .text, align 2, keep-with-next
   1469          void emberAfPostAttributeChangeCallback(int8u endpoint,
   1470                                                  EmberAfClusterId clusterId,
   1471                                                  EmberAfAttributeId attributeId,
   1472                                                  int8u mask,
   1473                                                  int16u manufacturerCode,
   1474                                                  int8u type,
   1475                                                  int8u size,
   1476                                                  int8u* value)
   1477          {
   1478          }
   \                     emberAfPostAttributeChangeCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1479          
   1480          /** @brief Post Wake Up
   1481           *
   1482           * @deprecated This callback has been deprecated and will be removed in a future
   1483           * release.  Customers should use the new ::emberAfPluginIdleSleepWakeUpCallback
   1484           * instead.
   1485           *
   1486           * @param sleepDuration   Ver.: always
   1487           */

   \                                 In section .text, align 2, keep-with-next
   1488          void emberAfPostWakeUpCallback(int32u sleepDuration)
   1489          {
   1490          }
   \                     emberAfPostWakeUpCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1491          
   1492          /** @brief Pre Attribute Change
   1493           *
   1494           * This function is called by the application framework before it changes an
   1495           * attribute value. The value passed into this callback is the value to which
   1496           * the attribute is to be set by the framework.
   1497           *
   1498           * @param endpoint   Ver.: always
   1499           * @param clusterId   Ver.: always
   1500           * @param attributeId   Ver.: always
   1501           * @param mask   Ver.: always
   1502           * @param manufacturerCode   Ver.: always
   1503           * @param type   Ver.: always
   1504           * @param size   Ver.: always
   1505           * @param value   Ver.: always
   1506           */

   \                                 In section .text, align 2, keep-with-next
   1507          void emberAfPreAttributeChangeCallback(int8u endpoint,
   1508                                                 EmberAfClusterId clusterId,
   1509                                                 EmberAfAttributeId attributeId,
   1510                                                 int8u mask,
   1511                                                 int16u manufacturerCode,
   1512                                                 int8u type,
   1513                                                 int8u size,
   1514                                                 int8u* value)
   1515          {
   1516          }
   \                     emberAfPreAttributeChangeCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1517          
   1518          /** @brief Pre Command Received
   1519           *
   1520           * This callback is the second in the Application Framework's message processing
   1521           * chain. At this point in the processing of incoming over-the-air messages, the
   1522           * application has determined that the incoming message is a ZCL command. It
   1523           * parses enough of the message to populate an EmberAfClusterCommand struct. The
   1524           * Application Framework defines this struct value in a local scope to the
   1525           * command processing but also makes it available through a global pointer
   1526           * called emberAfCurrentCommand, in app/framework/util/util.c. When command
   1527           * processing is complete, this pointer is cleared.
   1528           *
   1529           * @param cmd   Ver.: always
   1530           */

   \                                 In section .text, align 2, keep-with-next
   1531          boolean emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd)
   1532          {
   1533            return FALSE;
   \                     emberAfPreCommandReceivedCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1534          }
   1535          
   1536          /** @brief Pre Go To Sleep
   1537           *
   1538           * @deprecated This callback has been deprecated and will be removed in a future
   1539           * release.  Customers should use the new
   1540           * ::emberAfPluginIdleSleepOkToSleepCallback instead.  The application will only
   1541           * deep sleep if this callback returns FALSE.
   1542           *
   1543           * @param sleepDurationAttempt   Ver.: always
   1544           */

   \                                 In section .text, align 2, keep-with-next
   1545          boolean emberAfPreGoToSleepCallback(int32u sleepDurationAttempt)
   1546          {
   1547            return FALSE;
   \                     emberAfPreGoToSleepCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1548          }
   1549          
   1550          /** @brief Pre Message Received
   1551           *
   1552           * This callback is the first in the Application Framework's message processing
   1553           * chain. The Application Framework calls it when a message has been received
   1554           * over the air but has not yet been parsed by the ZCL command-handling code. If
   1555           * you wish to parse some messages that are completely outside the ZCL
   1556           * specification or are not handled by the Application Framework's command
   1557           * handling code, you should intercept them for parsing in this callback. 
   1558               
   1559           *   This callback returns a Boolean value indicating whether or not the message
   1560           * has been handled. If the callback returns a value of TRUE, then the
   1561           * Application Framework assumes that the message has been handled and it does
   1562           * nothing else with it. If the callback returns a value of FALSE, then the
   1563           * application framework continues to process the message as it would with any
   1564           * incoming message.
   1565                  Note: 	This callback receives a pointer to an
   1566           * incoming message struct. This struct allows the application framework to
   1567           * provide a unified interface between both Host devices, which receive their
   1568           * message through the ezspIncomingMessageHandler, and SoC devices, which
   1569           * receive their message through emberIncomingMessageHandler.
   1570           *
   1571           * @param incomingMessage   Ver.: always
   1572           */

   \                                 In section .text, align 2, keep-with-next
   1573          boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage)
   1574          {
   1575            return FALSE;
   \                     emberAfPreMessageReceivedCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1576          }
   1577          
   1578          /** @brief Pre ZDO Message Received
   1579           *
   1580           * This function passes the application an incoming ZDO message and gives the
   1581           * appictation the opportunity to handle it. By default, this callback returns
   1582           * FALSE indicating that the incoming ZDO message has not been handled and
   1583           * should be handled by the Application Framework.
   1584           *
   1585           * @param emberNodeId   Ver.: always
   1586           * @param apsFrame   Ver.: always
   1587           * @param message   Ver.: always
   1588           * @param length   Ver.: always
   1589           */

   \                                 In section .text, align 2, keep-with-next
   1590          boolean emberAfPreZDOMessageReceivedCallback(EmberNodeId emberNodeId,
   1591                                                       EmberApsFrame* apsFrame,
   1592                                                       int8u* message,
   1593                                                       int16u length)
   1594          {
   1595            return FALSE;
   \                     emberAfPreZDOMessageReceivedCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1596          }
   1597          
   1598          /** @brief Read Attributes Response
   1599           *
   1600           * This function is called by the application framework when a Read Attributes
   1601           * Response command is received from an external device.  The application should
   1602           * return TRUE if the message was processed or FALSE if it was not.
   1603           *
   1604           * @param clusterId The cluster identifier of this response.  Ver.: always
   1605           * @param buffer Buffer containing the list of read attribute status records. 
   1606           * Ver.: always
   1607           * @param bufLen The length in bytes of the list.  Ver.: always
   1608           */

   \                                 In section .text, align 2, keep-with-next
   1609          boolean emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
   1610                                                        int8u * buffer,
   1611                                                        int16u bufLen)
   1612          {
   1613            return FALSE;
   \                     emberAfReadAttributesResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1614          }
   1615          
   1616          /** @brief Read Reporting Configuration Response
   1617           *
   1618           * This function is called by the application framework when a Read Reporting
   1619           * Configuration Response command is received from an external device.  The
   1620           * application should return TRUE if the message was processed or FALSE if it
   1621           * was not.
   1622           *
   1623           * @param clusterId The cluster identifier of this response.  Ver.: always
   1624           * @param buffer Buffer containing the list of attribute reporting configuration
   1625           * records.  Ver.: always
   1626           * @param bufLen The length in bytes of the list.  Ver.: always
   1627           */

   \                                 In section .text, align 2, keep-with-next
   1628          boolean emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
   1629                                                                    int8u * buffer,
   1630                                                                    int16u bufLen)
   1631          {
   1632            return FALSE;
   \                     emberAfReadReportingConfigurationResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1633          }
   1634          
   1635          /** @brief Recall Saved Scene
   1636           *
   1637           * This function is called by the framework when the application should recall a
   1638           * saved scene.
   1639           *
   1640           * @param endpoint The endpoint.  Ver.: always
   1641           * @param groupId The group identifier.  Ver.: always
   1642           * @param sceneId The scene identifier.  Ver.: always
   1643           */

   \                                 In section .text, align 2, keep-with-next
   1644          EmberAfStatus emberAfScenesClusterRecallSavedSceneCallback(int8u endpoint,
   1645                                                                     int16u groupId,
   1646                                                                     int8u sceneId)
   1647          {
   1648            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfScenesClusterRecallSavedSceneCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1649          }
   1650          
   1651          /** @brief Registration Abort
   1652           *
   1653           * This callback is called when the device should abort the registration
   1654           * process.
   1655           *
   1656           */

   \                                 In section .text, align 2, keep-with-next
   1657          void emberAfRegistrationAbortCallback(void)
   1658          {
   1659          }
   \                     emberAfRegistrationAbortCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1660          
   1661          /** @brief Registration
   1662           *
   1663           * This callback is called when the device joins a network and the process of
   1664           * registration is complete. This callback provides a success value of TRUE if
   1665           * the registration process was successful and a value of FALSE if registration
   1666           * failed.
   1667           *
   1668           * @param success TRUE if registration succeeded, FALSE otherwise.  Ver.: always
   1669           */

   \                                 In section .text, align 2, keep-with-next
   1670          void emberAfRegistrationCallback(boolean success)
   1671          {
   1672          }
   \                     emberAfRegistrationCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1673          
   1674          /** @brief Registration Start
   1675           *
   1676           * This callback is called when the device joins a network and the registration
   1677           * process should begin.  The application should return EMBER_SUCCESS if the
   1678           * registration process started successfully.  When registration is complete,
   1679           * the application should call emberAfRegistrationCallback with an indication of
   1680           * success or failure.
   1681           *
   1682           */

   \                                 In section .text, align 2, keep-with-next
   1683          EmberStatus emberAfRegistrationStartCallback(void)
   1684          {
   1685            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfRegistrationStartCallback:
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1686          }
   1687          
   1688          /** @brief Remote Delete Binding Permission
   1689           *
   1690           * This function is called by the framework to request permission to service the
   1691           * remote delete binding request. Return EMBER_SUCCESS to allow request,
   1692           * anything else to disallow request.
   1693           *
   1694           * @param index index to an Ember binding table entry  Ver.: always
   1695           */

   \                                 In section .text, align 2, keep-with-next
   1696          EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index)
   1697          {
   1698            return EMBER_SUCCESS; // default
   \                     emberAfRemoteDeleteBindingPermissionCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1699          }
   1700          
   1701          /** @brief Remote Set Binding Permission
   1702           *
   1703           * This function is called by the framework to request permission to service the
   1704           * remote set binding request. Return EMBER_SUCCESS to allow request, anything
   1705           * else to disallow request.
   1706           *
   1707           * @param entry Ember Binding Tablet Entry  Ver.: always
   1708           */

   \                                 In section .text, align 2, keep-with-next
   1709          EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry * entry)
   1710          {
   1711            return EMBER_SUCCESS; // default
   \                     emberAfRemoteSetBindingPermissionCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1712          }
   1713          
   1714          /** @brief Remove Scenes In Group
   1715           *
   1716           * This function removes the scenes from a specified group.
   1717           *
   1718           * @param endpoint Endpoint  Ver.: always
   1719           * @param groupId Group ID  Ver.: always
   1720           */

   \                                 In section .text, align 2, keep-with-next
   1721          void emberAfScenesClusterRemoveScenesInGroupCallback(int8u endpoint,
   1722                                                               int16u groupId)
   1723          {
   1724          }
   \                     emberAfScenesClusterRemoveScenesInGroupCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1725          
   1726          /** @brief Report Attributes
   1727           *
   1728           * This function is called by the application framework when a Report Attributes
   1729           * command is received from an external device.  The application should return
   1730           * TRUE if the message was processed or FALSE if it was not.
   1731           *
   1732           * @param clusterId The cluster identifier of this command.  Ver.: always
   1733           * @param buffer Buffer containing the list of attribute report records.  Ver.:
   1734           * always
   1735           * @param bufLen The length in bytes of the list.  Ver.: always
   1736           */

   \                                 In section .text, align 2, keep-with-next
   1737          boolean emberAfReportAttributesCallback(EmberAfClusterId clusterId,
   1738                                                  int8u * buffer,
   1739                                                  int16u bufLen)
   1740          {
   1741            return FALSE;
   \                     emberAfReportAttributesCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1742          }
   1743          
   1744          /** @brief Security Init
   1745           *
   1746           * This callback is called by the framework to give the application a chance to
   1747           * modify the security settings of the node during network initialization. 
   1748           * Depending on the context when this callback is called, the pointer to the
   1749           * initial security state may be NULL, which means the initial security state
   1750           * can no longer be modified as the node is already operating on the network.
   1751           *
   1752           * @param state   Ver.: always
   1753           * @param extended   Ver.: always
   1754           * @param trustCenter   Ver.: always
   1755           */

   \                                 In section .text, align 2, keep-with-next
   1756          void emberAfSecurityInitCallback(EmberInitialSecurityState * state,
   1757                                           EmberExtendedSecurityBitmask * extended,
   1758                                           boolean trustCenter)
   1759          {
   1760          }
   \                     emberAfSecurityInitCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1761          
   1762          /** @brief Server Command Received
   1763           *
   1764           * This function is called by the application framework when a client-to-server
   1765           * key establishment command is received but has yet to be handled by the
   1766           * framework code.  This function should return a boolean value indicating
   1767           * whether the command has been handled by the application code and should not
   1768           * be further processed by the framework.
   1769           *
   1770           * @param cmd   Ver.: always
   1771           */

   \                                 In section .text, align 2, keep-with-next
   1772          boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand * cmd)
   1773          {
   1774            return FALSE;
   \                     emberAfKeyEstablishmentClusterServerCommandReceivedCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1775          }
   1776          
   1777          /** @brief Set Source Route Overhead
   1778           *
   1779           * This function is called by the framework when it has information about the
   1780           * source route overhead to a particular destination. The application may use
   1781           * this information to cache the source route overhead.
   1782           *
   1783           * @param destination The node id of the destination  Ver.: always
   1784           * @param overhead The overhead in bytes  Ver.: always
   1785           */

   \                                 In section .text, align 2, keep-with-next
   1786          void emberAfSetSourceRouteOverheadCallback(EmberNodeId destination,
   1787                                                     int8u overhead)
   1788          {
   1789          }
   \                     emberAfSetSourceRouteOverheadCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1790          
   1791          /** @brief Set Time
   1792           *
   1793           * This callback should be implemented, if the device has access to real time
   1794           * clock, and has an ability to update that clock. The application framework
   1795           * expects to be passed the utcTime which is the number of seconds since the
   1796           * year 2000. Default implementation does nothing. Note: This function used to
   1797           * take time in year, month, day, hour, min, sec. We have changed this to
   1798           * utcTime in order to conserve code space.
   1799           *
   1800           * @param utcTime   Ver.: always
   1801           */

   \                                 In section .text, align 2, keep-with-next
   1802          void emberAfSetTimeCallback(int32u utcTime)
   1803          {
   1804          }
   \                     emberAfSetTimeCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1805          
   1806          /** @brief Set Value
   1807           *
   1808           * This function is called when the on/off value needs to be set, either through
   1809           * normal channels or as a result of a level change.
   1810           *
   1811           * @param endpoint   Ver.: always
   1812           * @param command   Ver.: always
   1813           * @param initiatedByLevelChange   Ver.: always
   1814           */

   \                                 In section .text, align 2, keep-with-next
   1815          EmberAfStatus emberAfOnOffClusterSetValueCallback(int8u endpoint,
   1816                                                            int8u command,
   1817                                                            boolean initiatedByLevelChange)
   1818          {
   1819            return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     emberAfOnOffClusterSetValueCallback:
   \   00000000   0x2081             MOVS     R0,#+129
   \   00000002   0x4770             BX       LR               ;; return
   1820          }
   1821          
   1822          /** @brief Stack Status
   1823           *
   1824           * This function is called by the application framework from the stack status
   1825           * handler.  This callbacks provides applications an opportunity to be notified
   1826           * of changes to the stack status and take appropriate action.  The return code
   1827           * from this callback is ignored by the framework.  The framework will always
   1828           * process the stack status after the callback returns.
   1829           *
   1830           * @param status   Ver.: always
   1831           */

   \                                 In section .text, align 2, keep-with-next
   1832          boolean emberAfStackStatusCallback(EmberStatus status)
   1833          {
   1834            return FALSE;
   \                     emberAfStackStatusCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1835          }
   1836          
   1837          /** @brief Store Current Scene
   1838           *
   1839           * This function is called by the framework when the application should store
   1840           * the current scene.  If an entry already exists in the scene table with the
   1841           * same scene and group ids, the application should update the entry with the
   1842           * current scene.  Otherwise, a new entry should be adde to the scene table, if
   1843           * possible.
   1844           *
   1845           * @param endpoint The endpoint.  Ver.: always
   1846           * @param groupId The group identifier.  Ver.: always
   1847           * @param sceneId The scene identifier.  Ver.: always
   1848           */

   \                                 In section .text, align 2, keep-with-next
   1849          EmberAfStatus emberAfScenesClusterStoreCurrentSceneCallback(int8u endpoint,
   1850                                                                      int16u groupId,
   1851                                                                      int8u sceneId)
   1852          {
   1853            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfScenesClusterStoreCurrentSceneCallback:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1854          }
   1855          
   1856          /** @brief Trust Center Join
   1857           *
   1858           * This callback is called from within the application framework's
   1859           * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
   1860           * This callback provides the same arguments passed to the
   1861           * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
   1862           * please see documentation included in stack/include/trust-center.h.
   1863           *
   1864           * @param newNodeId   Ver.: always
   1865           * @param newNodeEui64   Ver.: always
   1866           * @param parentOfNewNode   Ver.: always
   1867           * @param status   Ver.: always
   1868           * @param decision   Ver.: always
   1869           */

   \                                 In section .text, align 2, keep-with-next
   1870          void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
   1871                                              EmberEUI64 newNodeEui64,
   1872                                              EmberNodeId parentOfNewNode,
   1873                                              EmberDeviceUpdate status,
   1874                                              EmberJoinDecision decision)
   1875          {
   1876          }
   \                     emberAfTrustCenterJoinCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1877          
   1878          /** @brief Trust Center Keepalive Abort
   1879           *
   1880           * This callback is called when the device should abort the trust center
   1881           * keepalive process.
   1882           *
   1883           */

   \                                 In section .text, align 2, keep-with-next
   1884          void emberAfTrustCenterKeepaliveAbortCallback(void)
   1885          {
   1886          }
   \                     emberAfTrustCenterKeepaliveAbortCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1887          
   1888          /** @brief Trust Center Keepalive Update
   1889           *
   1890           * This callback is called when the device finishes registration (successfully
   1891           * or otherwise) and the trust center keepalive process must be updated.  If the
   1892           * keepalive process has not been started, then it is started.  Otherwise if the
   1893           * keepalive is in the process of searching for the TC, it will process the
   1894           * result of that Trust Center search operation.
   1895           *
   1896           * @param registrationComplete   Ver.: always
   1897           */

   \                                 In section .text, align 2, keep-with-next
   1898          void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete)
   1899          {
   1900          }
   \                     emberAfTrustCenterKeepaliveUpdateCallback:
   \   00000000   0x4770             BX       LR               ;; return
   1901          
   1902          /** @brief Write Attributes Response
   1903           *
   1904           * This function is called by the application framework when a Write Attributes
   1905           * Response command is received from an external device.  The application should
   1906           * return TRUE if the message was processed or FALSE if it was not.
   1907           *
   1908           * @param clusterId The cluster identifier of this response.  Ver.: always
   1909           * @param buffer Buffer containing the list of write attribute status records. 
   1910           * Ver.: always
   1911           * @param bufLen The length in bytes of the list.  Ver.: always
   1912           */

   \                                 In section .text, align 2, keep-with-next
   1913          boolean emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
   1914                                                         int8u * buffer,
   1915                                                         int16u bufLen)
   1916          {
   1917            return FALSE;
   \                     emberAfWriteAttributesResponseCallback:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1918          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     emberAfInvalidImageId

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Not supported.">`:
   \   00000000   0x4E 0x6F          DC8 "Not supported."
   \              0x74 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Download failed.">`:
   \   00000000   0x44 0x6F          DC8 "Download failed."
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "callback-stub.c">`:
   \   00000000   0x63 0x61          DC8 "callback-stub.c"
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x2D 0x73    
   \              0x74 0x75    
   \              0x62 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  emberAfAllowNetworkWriteAttributeCallback
        0  emberAfClusterInitCallback
        0  emberAfClusterSecurityCustomCallback
        0  emberAfConfigureReportingResponseCallback
        0  emberAfDefaultResponseCallback
        0  emberAfDeliveryStatusCallback
        0  emberAfDiscoverAttributesResponseCallback
        0  emberAfDiscoverCommandsGeneratedResponseCallback
        0  emberAfDiscoverCommandsReceivedResponseCallback
        0  emberAfExternalAttributeReadCallback
        0  emberAfExternalAttributeWriteCallback
        0  emberAfGetCurrentTimeCallback
        0  emberAfGetSourceRouteOverheadCallback
        0  emberAfGroupsClusterClearGroupTableCallback
        0  emberAfGroupsClusterEndpointInGroupCallback
        0  emberAfInitiateInterPanKeyEstablishmentCallback
        0  emberAfInitiateKeyEstablishmentCallback
        0  emberAfInitiatePartnerLinkKeyExchangeCallback
        0  emberAfInterPanKeyEstablishmentCallback
        0  emberAfInterpanSendMessageCallback
        0  emberAfKeyEstablishmentCallback
        0  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
        0  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
        0  emberAfMainStartCallback
        0  emberAfMainTickCallback
        0  emberAfMessageSentCallback
        0  emberAfNcpInitCallback
        0  emberAfNetworkKeyUpdateCompleteCallback
        0  emberAfOnOffClusterLevelControlEffectCallback
        0  emberAfOnOffClusterSetValueCallback
        8  emberAfOtaBootloadCallback
              8 -> emberAfPrintln
        0  emberAfOtaClientBootloadCallback
        0  emberAfOtaClientCustomVerifyCallback
        8  emberAfOtaClientDownloadCompleteCallback
              8 -> emberAfPrintln
        0  emberAfOtaClientIncomingMessageRawCallback
        0  emberAfOtaClientStartCallback
        0  emberAfOtaClientVersionInfoCallback
        0  emberAfOtaPageRequestServerPolicyCallback
       24  emberAfOtaServerBlockSizeCallback
             24 -> emberAfIsCurrentSecurityProfileSmartEnergy
             24 -> emberAfMaximumApsPayloadLength
        0  emberAfOtaServerImageBlockRequestCallback
        0  emberAfOtaServerIncomingMessageRawCallback
        0  emberAfOtaServerQueryCallback
        0  emberAfOtaServerSendImageNotifyCallback
        0  emberAfOtaServerUpgradeEndRequestCallback
        0  emberAfOtaStorageCheckTempDataCallback
        0  emberAfOtaStorageClearTempDataCallback
        0  emberAfOtaStorageCloseCallback
              0 -> halInternalAssertFailed
        0  emberAfOtaStorageDriverDownloadFinishCallback
              0 -> halInternalAssertFailed
        8  emberAfOtaStorageDriverInitCallback
              8 -> halInternalAssertFailed
        8  emberAfOtaStorageDriverInvalidateImageCallback
              8 -> halInternalAssertFailed
        8  emberAfOtaStorageDriverPrepareToResumeDownloadCallback
              8 -> halInternalAssertFailed
        8  emberAfOtaStorageDriverReadCallback
              8 -> halInternalAssertFailed
        8  emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
              8 -> halInternalAssertFailed
        8  emberAfOtaStorageDriverWriteCallback
              8 -> halInternalAssertFailed
        0  emberAfOtaStorageFinishDownloadCallback
        0  emberAfOtaStorageGetCountCallback
        0  emberAfOtaStorageGetFullHeaderCallback
        0  emberAfOtaStorageGetTotalImageSizeCallback
        0  emberAfOtaStorageInitCallback
        0  emberAfOtaStorageIteratorFirstCallback
              0 -> __aeabi_memcpy4
        0  emberAfOtaStorageIteratorNextCallback
              0 -> __aeabi_memcpy4
        0  emberAfOtaStorageReadImageDataCallback
        0  emberAfOtaStorageSearchCallback
              0 -> __aeabi_memcpy4
        0  emberAfOtaStorageWriteTempDataCallback
        0  emberAfPartnerLinkKeyExchangeRequestCallback
        0  emberAfPartnerLinkKeyExchangeResponseCallback
        0  emberAfPerformingKeyEstablishmentCallback
        0  emberAfPluginCountersRolloverCallback
        0  emberAfPluginEndDeviceSupportPollCompletedCallback
        0  emberAfPluginIdleSleepActiveCallback
        0  emberAfPluginIdleSleepOkToIdleCallback
        0  emberAfPluginIdleSleepOkToSleepCallback
        0  emberAfPluginIdleSleepWakeUpCallback
        0  emberAfPluginReportingConfiguredCallback
        0  emberAfPostAttributeChangeCallback
        0  emberAfPostWakeUpCallback
        0  emberAfPreAttributeChangeCallback
        0  emberAfPreCommandReceivedCallback
        0  emberAfPreGoToSleepCallback
        0  emberAfPreMessageReceivedCallback
        0  emberAfPreZDOMessageReceivedCallback
        0  emberAfReadAttributesResponseCallback
        0  emberAfReadReportingConfigurationResponseCallback
        0  emberAfRegistrationAbortCallback
        0  emberAfRegistrationCallback
        0  emberAfRegistrationStartCallback
        0  emberAfRemoteDeleteBindingPermissionCallback
        0  emberAfRemoteSetBindingPermissionCallback
        0  emberAfReportAttributesCallback
        0  emberAfScenesClusterClearSceneTableCallback
        0  emberAfScenesClusterMakeInvalidCallback
        0  emberAfScenesClusterRecallSavedSceneCallback
        0  emberAfScenesClusterRemoveScenesInGroupCallback
        0  emberAfScenesClusterStoreCurrentSceneCallback
        0  emberAfSecurityInitCallback
        0  emberAfSetSourceRouteOverheadCallback
        0  emberAfSetTimeCallback
        0  emberAfStackStatusCallback
        0  emberAfTrustCenterJoinCallback
        0  emberAfTrustCenterKeepaliveAbortCallback
        0  emberAfTrustCenterKeepaliveUpdateCallback
        0  emberAfWriteAttributesResponseCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "Download failed.">
      16  ?<Constant "Not supported.">
      16  ?<Constant "callback-stub.c">
       4  ??DataTable3
      12  ?Subroutine0
      12  ?Subroutine1
       8  ?Subroutine2
       8  ?Subroutine3
       4  emberAfAllowNetworkWriteAttributeCallback
       2  emberAfClusterInitCallback
       4  emberAfClusterSecurityCustomCallback
       4  emberAfConfigureReportingResponseCallback
       4  emberAfDefaultResponseCallback
       2  emberAfDeliveryStatusCallback
       4  emberAfDiscoverAttributesResponseCallback
       4  emberAfDiscoverCommandsGeneratedResponseCallback
       4  emberAfDiscoverCommandsReceivedResponseCallback
       4  emberAfExternalAttributeReadCallback
       4  emberAfExternalAttributeWriteCallback
       4  emberAfGetCurrentTimeCallback
       4  emberAfGetSourceRouteOverheadCallback
       2  emberAfGroupsClusterClearGroupTableCallback
       4  emberAfGroupsClusterEndpointInGroupCallback
       4  emberAfInitiateInterPanKeyEstablishmentCallback
       4  emberAfInitiateKeyEstablishmentCallback
       4  emberAfInitiatePartnerLinkKeyExchangeCallback
       4  emberAfInterPanKeyEstablishmentCallback
       4  emberAfInterpanSendMessageCallback
       4  emberAfKeyEstablishmentCallback
       4  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       4  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       4  emberAfMainStartCallback
       2  emberAfMainTickCallback
       4  emberAfMessageSentCallback
       2  emberAfNcpInitCallback
       2  emberAfNetworkKeyUpdateCompleteCallback
       2  emberAfOnOffClusterLevelControlEffectCallback
       4  emberAfOnOffClusterSetValueCallback
      16  emberAfOtaBootloadCallback
       2  emberAfOtaClientBootloadCallback
       4  emberAfOtaClientCustomVerifyCallback
      20  emberAfOtaClientDownloadCompleteCallback
       4  emberAfOtaClientIncomingMessageRawCallback
       2  emberAfOtaClientStartCallback
       2  emberAfOtaClientVersionInfoCallback
       4  emberAfOtaPageRequestServerPolicyCallback
      48  emberAfOtaServerBlockSizeCallback
       4  emberAfOtaServerImageBlockRequestCallback
       4  emberAfOtaServerIncomingMessageRawCallback
       4  emberAfOtaServerQueryCallback
       4  emberAfOtaServerSendImageNotifyCallback
       8  emberAfOtaServerUpgradeEndRequestCallback
       4  emberAfOtaStorageCheckTempDataCallback
       4  emberAfOtaStorageClearTempDataCallback
       6  emberAfOtaStorageCloseCallback
       4  emberAfOtaStorageDriverDownloadFinishCallback
       8  emberAfOtaStorageDriverInitCallback
       8  emberAfOtaStorageDriverInvalidateImageCallback
       6  emberAfOtaStorageDriverPrepareToResumeDownloadCallback
       6  emberAfOtaStorageDriverReadCallback
       8  emberAfOtaStorageDriverRetrieveLastStoredOffsetCallback
       8  emberAfOtaStorageDriverWriteCallback
       4  emberAfOtaStorageFinishDownloadCallback
       4  emberAfOtaStorageGetCountCallback
       4  emberAfOtaStorageGetFullHeaderCallback
       4  emberAfOtaStorageGetTotalImageSizeCallback
       4  emberAfOtaStorageInitCallback
       2  emberAfOtaStorageIteratorFirstCallback
       2  emberAfOtaStorageIteratorNextCallback
       4  emberAfOtaStorageReadImageDataCallback
       2  emberAfOtaStorageSearchCallback
       4  emberAfOtaStorageWriteTempDataCallback
       4  emberAfPartnerLinkKeyExchangeRequestCallback
       2  emberAfPartnerLinkKeyExchangeResponseCallback
       4  emberAfPerformingKeyEstablishmentCallback
       2  emberAfPluginCountersRolloverCallback
       2  emberAfPluginEndDeviceSupportPollCompletedCallback
       2  emberAfPluginIdleSleepActiveCallback
       4  emberAfPluginIdleSleepOkToIdleCallback
       4  emberAfPluginIdleSleepOkToSleepCallback
       2  emberAfPluginIdleSleepWakeUpCallback
       4  emberAfPluginReportingConfiguredCallback
       2  emberAfPostAttributeChangeCallback
       2  emberAfPostWakeUpCallback
       2  emberAfPreAttributeChangeCallback
       4  emberAfPreCommandReceivedCallback
       4  emberAfPreGoToSleepCallback
       4  emberAfPreMessageReceivedCallback
       4  emberAfPreZDOMessageReceivedCallback
       4  emberAfReadAttributesResponseCallback
       4  emberAfReadReportingConfigurationResponseCallback
       2  emberAfRegistrationAbortCallback
       2  emberAfRegistrationCallback
       4  emberAfRegistrationStartCallback
       4  emberAfRemoteDeleteBindingPermissionCallback
       4  emberAfRemoteSetBindingPermissionCallback
       4  emberAfReportAttributesCallback
       2  emberAfScenesClusterClearSceneTableCallback
       4  emberAfScenesClusterMakeInvalidCallback
       4  emberAfScenesClusterRecallSavedSceneCallback
       2  emberAfScenesClusterRemoveScenesInGroupCallback
       4  emberAfScenesClusterStoreCurrentSceneCallback
       2  emberAfSecurityInitCallback
       2  emberAfSetSourceRouteOverheadCallback
       2  emberAfSetTimeCallback
       4  emberAfStackStatusCallback
       2  emberAfTrustCenterJoinCallback
       2  emberAfTrustCenterKeepaliveAbortCallback
       2  emberAfTrustCenterKeepaliveUpdateCallback
       4  emberAfWriteAttributesResponseCallback

 
 540 bytes in section .text
 
 540 bytes of CODE memory

Errors: none
Warnings: none
