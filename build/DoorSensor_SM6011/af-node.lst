###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:08 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\ #
#                    af-node.c                                                #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\ #
#                    af-node.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorS #
#                    ensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D            #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"af-node.c\"" -lC                    #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\ #
#                     -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSen #
#                    sor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\buil #
#                    der\DoorSensor_SM6011\..\..\..\ -I                       #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \af-node.lst                                             #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \af-node.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\security\af-node.c
      1          // *******************************************************************
      2          // * af-node.c
      3          // *
      4          // * Security code for a normal (non-Trust Center) node.
      5          // *
      6          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      7          // *******************************************************************
      8          
      9          #include "app/framework/include/af.h"
     10          #define USE_REAL_SECURITY_PROTOTYPES
     11          #include "app/framework/security/af-security.h"
     12          
     13          //------------------------------------------------------------------------------
     14          

   \                                 In section .text, align 2, keep-with-next
     15          EmberStatus zaNodeSecurityInit(void)
     16          {
   \                     zaNodeSecurityInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
     17            EmberInitialSecurityState state;
     18            EmberExtendedSecurityBitmask newExtended;
     19            EmberExtendedSecurityBitmask oldExtended;
     20            EmberStatus status;
     21            const EmberAfSecurityProfileData *data = emAfGetCurrentSecurityProfileData();
   \   00000004   0x.... 0x....      BL       emAfGetCurrentSecurityProfileData
   \   00000008   0x0004             MOVS     R4,R0
     22          
     23            if (data == NULL) {
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x2001             MOVEQ    R0,#+1
     24              return EMBER_ERR_FATAL;
   \   0000000E   0xD04A             BEQ.N    ??zaNodeSecurityInit_0
     25            }
     26          
     27            MEMSET(&state, 0, sizeof(EmberInitialSecurityState));
   \   00000010   0x222C             MOVS     R2,#+44
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       halCommonMemSet
     28            state.bitmask = data->nodeBitmask;
   \   0000001A   0x88E0             LDRH     R0,[R4, #+6]
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     29            newExtended = data->nodeExtendedBitmask;
   \   00000020   0x8920             LDRH     R0,[R4, #+8]
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     30            MEMCOPY(emberKeyContents(&state.preconfiguredKey),
     31                    emberKeyContents(&data->preconfiguredKey),
     32                    EMBER_ENCRYPTION_KEY_SIZE);
   \   00000026   0x2210             MOVS     R2,#+16
   \   00000028   0xF104 0x010C      ADD      R1,R4,#+12
   \   0000002C   0xF10D 0x0006      ADD      R0,SP,#+6
   \   00000030   0x.... 0x....      BL       halCommonMemCopy
     33          
     34          #if defined ZA_CLI_FULL
     35            // This function will only be used if the full CLI is enabled,
     36            // and a value has been previously set via the "changekey" command.
     37            getLinkKeyFromCli(&(state.preconfiguredKey));
   \   00000034   0xF10D 0x0006      ADD      R0,SP,#+6
   \   00000038   0x.... 0x....      BL       getLinkKeyFromCli
     38          #endif
     39          
     40            emberGetExtendedSecurityBitmask(&oldExtended);
   \   0000003C   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000040   0x.... 0x....      BL       emberGetExtendedSecurityBitmask
     41            if (oldExtended & EMBER_EXT_NO_FRAME_COUNTER_RESET){
   \   00000044   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000048   0x0680             LSLS     R0,R0,#+26
   \   0000004A   0xD505             BPL.N    ??zaNodeSecurityInit_1
     42              newExtended |= EMBER_EXT_NO_FRAME_COUNTER_RESET;
   \   0000004C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000050   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000054   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     43            }
     44            emberAfSecurityInitCallback(&state, &newExtended, FALSE); // trust center?
   \                     ??zaNodeSecurityInit_1:
   \   00000058   0x2200             MOVS     R2,#+0
   \   0000005A   0xA900             ADD      R1,SP,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       emberAfSecurityInitCallback
     45          
     46            emberAfSecurityPrintln("set state to: 0x%2x", state.bitmask);
   \   00000062   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000066   0x.... 0x....      ADR.W    R1,`?<Constant "set state to: 0x%2x">`
   \   0000006A   0x2008             MOVS     R0,#+8
   \   0000006C   0x.... 0x....      BL       emberAfPrintln
     47            status = emberSetInitialSecurityState(&state);
   \   00000070   0xA801             ADD      R0,SP,#+4
   \   00000072   0x.... 0x....      BL       emberSetInitialSecurityState
   \   00000076   0x0004             MOVS     R4,R0
     48            if (status != EMBER_SUCCESS) {
   \   00000078   0xD007             BEQ.N    ??zaNodeSecurityInit_2
     49              emberAfSecurityPrintln("security init node: 0x%x", status);
   \   0000007A   0x4622             MOV      R2,R4
   \   0000007C   0x.... 0x....      ADR.W    R1,`?<Constant "security init node: 0x%x">`
   \   00000080   0x2008             MOVS     R0,#+8
   \   00000082   0x.... 0x....      BL       emberAfPrintln
     50              return status;
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0xE00D             B.N      ??zaNodeSecurityInit_0
     51            }
     52          
     53            // Don't need to check on the status here, emberSetExtendedSecurityBitmask
     54            // always returns EMBER_SUCCESS.
     55            emberAfSecurityPrintln("set extended security to: 0x%2x", newExtended);
   \                     ??zaNodeSecurityInit_2:
   \   0000008A   0xF8BD 0x2000      LDRH     R2,[SP, #+0]
   \   0000008E   0x.... 0x....      ADR.W    R1,`?<Constant "set extended security...">`
   \   00000092   0x2008             MOVS     R0,#+8
   \   00000094   0x.... 0x....      BL       emberAfPrintln
     56            emberSetExtendedSecurityBitmask(newExtended);
   \   00000098   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000009C   0x.... 0x....      BL       emberSetExtendedSecurityBitmask
     57          
     58            emAfClearLinkKeyTable();
   \   000000A0   0x.... 0x....      BL       emAfClearLinkKeyTable
     59          
     60            return EMBER_SUCCESS;
   \   000000A4   0x2000             MOVS     R0,#+0
   \                     ??zaNodeSecurityInit_0:
   \   000000A6   0xB00C             ADD      SP,SP,#+48
   \   000000A8   0xBD10             POP      {R4,PC}          ;; return
     61          }

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "set state to: 0x%2x">`:
   \   00000000   0x73 0x65          DC8 "set state to: 0x%2x"
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "security init node: 0x%x">`:
   \   00000000   0x73 0x65          DC8 "security init node: 0x%x"
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x69    
   \              0x6E 0x69    
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "set extended security...">`:
   \   00000000   0x73 0x65          DC8 "set extended security to: 0x%2x"
   \              0x74 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x75 0x72    
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x74 0x6F    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       56  zaNodeSecurityInit
             56 -> emAfClearLinkKeyTable
             56 -> emAfGetCurrentSecurityProfileData
             56 -> emberAfPrintln
             56 -> emberAfSecurityInitCallback
             56 -> emberGetExtendedSecurityBitmask
             56 -> emberSetExtendedSecurityBitmask
             56 -> emberSetInitialSecurityState
             56 -> getLinkKeyFromCli
             56 -> halCommonMemCopy
             56 -> halCommonMemSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "security init node: 0x%x">
      32  ?<Constant "set extended security...">
      20  ?<Constant "set state to: 0x%2x">
     170  zaNodeSecurityInit

 
 250 bytes in section .text
 
 250 bytes of CODE memory

Errors: none
Warnings: none
