###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:49 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\core- #
#                    cli.c                                                    #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\core- #
#                    cli.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSenso #
#                    r_SM6011/DoorSensor_SM6011_tokens.h\"" -D                #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"core-cli.c\"" -lC                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\ -I   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \core-cli.lst                                            #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \core-cli.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\cli\core-cli.c
      1          // *****************************************************************************
      2          // * core-cli.c
      3          // *
      4          // * Core CLI commands used by all applications regardless of profile.
      5          // *
      6          // * Copyright 2010 by Ember Corporation. All rights reserved.              *80*
      7          // *****************************************************************************
      8          
      9          // common include file
     10          #include "app/framework/util/common.h"
     11          #include "app/framework/util/af-main.h"
     12          
     13          #include "app/util/serial/command-interpreter2.h"
     14          #include "stack/include/library.h"
     15          #include "app/framework/security/af-security.h"
     16          
     17          #if !defined(EZSP_HOST)
     18            #include "stack/include/cbke-crypto-engine.h"  // emberGetCertificate()
     19          #endif
     20          
     21          #include "app/framework/cli/core-cli.h"
     22          #include "app/framework/cli/custom-cli.h"
     23          #include "app/framework/cli/network-cli.h"
     24          #include "app/framework/cli/plugin-cli.h"
     25          #include "app/framework/cli/security-cli.h"
     26          #include "app/framework/cli/zdo-cli.h"
     27          #include "app/framework/cli/option-cli.h"
     28          #include "app/framework/plugin/test-harness/test-harness-cli.h"
     29          #if defined(EMBER_AF_PLUGIN_COUNTERS)
     30            #include "app/framework/plugin/counters/counters-cli.h"
     31            #include "app/framework/plugin/counters/counters.h"
     32          #endif
     33          
     34          #include "app/framework/util/af-event.h"
     35          
     36          #include "app/framework/plugin/gateway/gateway-support-cli.h"
     37          
     38          #include "app/util/common/library.h"
     39          
     40          #if !defined(XAP2B)
     41            #define PRINT_FULL_COUNTER_NAMES
     42          #endif
     43          
     44          //------------------------------------------------------------------------------
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void emberCommandActionHandler(const CommandAction action)
     47          {
   \                     emberCommandActionHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     48            emberAfPushNetworkIndex(emAfCliNetworkIndex);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable43_3
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       emberAfPushNetworkIndex
     49            (*action)();
   \   0000000E   0x47A0             BLX      R4
     50            emberAfPopNetworkIndex();
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x.... 0x....      B.W      emberAfPopNetworkIndex
     51          
     52          #if defined(EMBER_QA)
     53            emberSerialPrintfLine(APP_SERIAL, "CLI Finished");
     54          #endif
     55          }
     56          
     57          extern EmberCommandEntry cbkeCommands[];
     58          
     59          #if !defined(ZA_CLI_MINIMAL) && !defined(ZA_CLI_FULL) && !defined(EMBER_AF_GENERATE_CLI)
     60            // Define this to satisfy external references.
     61            EmberCommandEntry emberCommandTable[] = { { NULL } };
     62          #endif
     63          
     64          #if defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void printMfgString(void)
     67          {
   \                     printMfgString:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     68            int8u mfgString[MFG_STRING_MAX_LENGTH + 1];
     69            emberAfFormatMfgString(mfgString);
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      BL       emberAfFormatMfgString
     70            
     71            // Note:  We use '%s' here because this is a RAM string.  Normally
     72            // most strings are literals or constants in flash and use '%p'.
     73            emberAfAppPrintln("MFG String: %s", mfgString);
   \   0000000A   0xAA00             ADD      R2,SP,#+0
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "MFG String: %s">`
   \   00000010   0x2004             MOVS     R0,#+4
   \   00000012   0x.... 0x....      BL       emberAfPrintln
     74          }
   \   00000016   0xB005             ADD      SP,SP,#+20
   \   00000018   0xBD00             POP      {PC}             ;; return
     75          
     76          static void printPacketBuffers(void)
     77          {
     78            emberAfAppPrintln("Buffs: %d / %d",
     79                              emAfGetPacketBufferFreeCount(),
     80                              emAfGetPacketBufferTotalCount());
     81          }
     82          

   \                                 In section .text, align 2, keep-with-next
     83          boolean printSmartEnergySecurityInfo(void)
     84          {
     85          #ifdef EMBER_AF_HAS_SECURITY_PROFILE_SE
     86            boolean securityGood = TRUE;
     87            emberAfAppPrint("SE Security Info [");
     88            {
     89              // for SE security, print the state of ECC, CBKE, and the programmed Cert
     90              EmberCertificateData cert;
     91              EmberStatus status = emberGetCertificate(&cert);
     92          
     93              // check the status of the ECC library
     94              if (emberGetLibraryStatus(EMBER_ECC_LIBRARY_ID)
     95                  & EMBER_LIBRARY_PRESENT_MASK) {
     96                emberAfAppPrint("Real163k1ECC ");
     97              } else {
     98                emberAfAppPrint("No163k1ECC ");
     99                securityGood = FALSE;
    100              }
    101          
    102              // status of EMBER_LIBRARY_NOT_PRESENT means the CBKE is not present
    103              // in the image.  We don't know anything about the certificate.
    104              if (status == EMBER_LIBRARY_NOT_PRESENT) {
    105                emberAfAppPrint("No163k1Cbke UnknownCert ");
    106                securityGood = FALSE;
    107              } else {
    108                emberAfAppPrint("Real163k1Cbke ");
    109          
    110                // status of EMBER_SUCCESS means the cert is ok
    111                if (status == EMBER_SUCCESS) {
    112                  emberAfAppPrint("GoodCert");
    113                }
    114                // status of EMBER_ERR_FATAL means the cert failed
    115                else if (status == EMBER_ERR_FATAL) {
    116                  emberAfAppPrint("BadCert");
    117                  securityGood = FALSE;
    118                }
    119              }
    120              emberAfAppPrintln("]");
    121          
    122            }
    123            emberAfAppFlush();
    124            return securityGood;
    125          #else
    126            return FALSE;
   \                     printSmartEnergySecurityInfo:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    127          #endif
    128          }
    129          

   \                                 In section .text, align 2, keep-with-next
    130          boolean printSmartEnergySecurityInfo283k1(void)
    131          {
    132          #ifdef EMBER_AF_HAS_SECURITY_PROFILE_SE
    133            boolean securityGood = TRUE;
    134            emberAfAppPrint("SE Security 283k1 Info [");
    135            {
    136              // for SE security, print the state of ECC, CBKE, and the programmed Cert
    137              EmberCertificate283k1Data cert;
    138              // This is a temporary step until the EZSP frames are added
    139              // for the 283k CBKE library
    140              EmberStatus status = EMBER_LIBRARY_NOT_PRESENT;
    141              status = emberGetCertificate283k1(&cert);
    142              // check the status of the ECC library
    143              if (emberGetLibraryStatus(EMBER_ECC_LIBRARY_283K1_ID)
    144                  & EMBER_LIBRARY_PRESENT_MASK) {
    145                emberAfAppPrint("Real283k1ECC ");
    146              } else {
    147                emberAfAppPrint("No283k1ECC ");
    148                securityGood = FALSE;
    149              }
    150          
    151              // status of EMBER_LIBRARY_NOT_PRESENT means the CBKE is not present
    152              // in the image.  We don't know anything about the certificate.
    153              if (status == EMBER_LIBRARY_NOT_PRESENT) {
    154                emberAfAppPrint("No283k1Cbke UnknownCert");
    155                securityGood = FALSE;
    156              } else {
    157                emberAfAppPrint("Real283k1Cbke ");
    158          
    159                // status of EMBER_SUCCESS means the cert is ok
    160                if (status == EMBER_SUCCESS) {
    161                  emberAfAppPrint("GoodCert");
    162                }
    163                // status of EMBER_ERR_FATAL means the cert failed
    164                else if (status == EMBER_ERR_FATAL) {
    165                  emberAfAppPrint("BadCert");
    166                  securityGood = FALSE;
    167                }
    168              }
    169              emberAfAppPrintln("]");
    170            }
    171            emberAfAppFlush();
    172            return securityGood;
    173          #else
    174            return FALSE;
   \                     printSmartEnergySecurityInfo283k1:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    175          #endif
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void emAfCliInfoCommand(void)
    179          {
   \                     emAfCliInfoCommand:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
    180            EmberNodeType nodeTypeResult = 0xFF;
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0xF88D 0x0008      STRB     R0,[SP, #+8]
    181            int8u commandLength;
    182            EmberEUI64 myEui64;
    183            EmberNetworkParameters networkParams;
    184            emberStringCommandArgument(-1, &commandLength);
   \   0000000C   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000010   0xF04F 0x30FF      MOV      R0,#-1
   \   00000014   0x.... 0x....      BL       emberStringCommandArgument
    185            printMfgString();
   \   00000018   0x.... 0x....      BL       printMfgString
    186            emberAfAppPrintln("AppBuilder MFG Code: 0x%2X", EMBER_AF_MANUFACTURER_CODE);
   \   0000001C   0xF241 0x0202      MOVW     R2,#+4098
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant "AppBuilder MFG Code: ...">`
   \   00000024   0x.... 0x....      BL       ?Subroutine0
    187            emberAfGetEui64(myEui64);
   \                     ??CrossCallReturnLabel_5:
   \   00000028   0xA803             ADD      R0,SP,#+12
   \   0000002A   0x.... 0x....      BL       emberAfGetEui64
    188            emberAfGetNetworkParameters(&nodeTypeResult, &networkParams);
   \   0000002E   0xA905             ADD      R1,SP,#+20
   \   00000030   0xA802             ADD      R0,SP,#+8
   \   00000032   0x.... 0x....      BL       emberAfGetNetworkParameters
    189            emberAfAppPrint("node [");
   \   00000036   0x.... 0x....      ADR.W    R1,`?<Constant "node [">`
   \   0000003A   0x.... 0x....      BL       ?Subroutine1
    190            emberAfAppDebugExec(emberAfPrintBigEndianEui64(myEui64));
   \                     ??CrossCallReturnLabel_9:
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x.... 0x....      BL       emberAfPrintEnabled
   \   00000044   0xB110             CBZ.N    R0,??emAfCliInfoCommand_0
   \   00000046   0xA803             ADD      R0,SP,#+12
   \   00000048   0x.... 0x....      BL       emberAfPrintBigEndianEui64
    191            emberAfAppFlush();
    192            emberAfAppPrintln("] chan [%d] pwr [%d]",
    193                              networkParams.radioChannel,
    194                              networkParams.radioTxPower);
   \                     ??emAfCliInfoCommand_0:
   \   0000004C   0xF99D 0x301E      LDRSB    R3,[SP, #+30]
   \   00000050   0xF89D 0x201F      LDRB     R2,[SP, #+31]
   \   00000054   0x.... 0x....      ADR.W    R1,`?<Constant "] chan [%d] pwr [%d]">`
   \   00000058   0x2004             MOVS     R0,#+4
   \   0000005A   0x.... 0x....      BL       emberAfPrintln
    195            emberAfAppPrint("panID [0x%2x] nodeID [0x%2x] ",
    196                           networkParams.panId,
    197                           emberAfGetNodeId());
   \   0000005E   0x.... 0x....      BL       emberAfGetNodeId
   \   00000062   0x4603             MOV      R3,R0
   \   00000064   0xF8BD 0x201C      LDRH     R2,[SP, #+28]
   \   00000068   0x.... 0x....      ADR.W    R1,`?<Constant "panID [0x%2x] nodeID ...">`
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0x.... 0x....      BL       emberAfPrint
    198            emberAfAppFlush();
    199            emberAfAppPrint("xpan [0x");
   \   00000072   0x.... 0x....      ADR.W    R1,`?<Constant "xpan [0x">`
   \   00000076   0x.... 0x....      BL       ?Subroutine1
    200            emberAfAppDebugExec(emberAfPrintBigEndianEui64(networkParams.extendedPanId));
   \                     ??CrossCallReturnLabel_8:
   \   0000007A   0x2004             MOVS     R0,#+4
   \   0000007C   0x.... 0x....      BL       emberAfPrintEnabled
   \   00000080   0xB110             CBZ.N    R0,??emAfCliInfoCommand_1
   \   00000082   0xA805             ADD      R0,SP,#+20
   \   00000084   0x.... 0x....      BL       emberAfPrintBigEndianEui64
    201            emberAfAppPrintln("]");
   \                     ??emAfCliInfoCommand_1:
   \   00000088   0x.... 0x....      ADR.W    R9,??DataTable43  ;; "]"
   \   0000008C   0x.... 0x....      BL       ?Subroutine2
    202            emberAfAppFlush();
    203          
    204            emAfCliVersionCommand();
   \                     ??CrossCallReturnLabel_12:
   \   00000090   0x.... 0x....      BL       emAfCliVersionCommand
    205            emberAfAppFlush();
    206          
    207            emberAfAppPrint("nodeType [");
   \   00000094   0x.... 0x....      ADR.W    R1,`?<Constant "nodeType [">`
   \   00000098   0x.... 0x....      BL       ?Subroutine1
    208            if (nodeTypeResult != 0xFF) {
   \                     ??CrossCallReturnLabel_7:
   \   0000009C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000A0   0x28FF             CMP      R0,#+255
   \   000000A2   0xD006             BEQ.N    ??emAfCliInfoCommand_2
    209              emberAfAppPrint("0x%x", nodeTypeResult);
   \   000000A4   0x4602             MOV      R2,R0
   \   000000A6   0x.... 0x....      ADR.W    R1,`?<Constant "0x%x">`
   \   000000AA   0x2004             MOVS     R0,#+4
   \   000000AC   0x.... 0x....      BL       emberAfPrint
   \   000000B0   0xE003             B.N      ??CrossCallReturnLabel_6
    210            } else {
    211              emberAfAppPrint("unknown");
   \                     ??emAfCliInfoCommand_2:
   \   000000B2   0x.... 0x....      ADR.W    R1,`?<Constant "unknown">`
   \   000000B6   0x.... 0x....      BL       ?Subroutine1
    212            }
    213            emberAfAppPrintln("]");
   \                     ??CrossCallReturnLabel_6:
   \   000000BA   0x.... 0x....      BL       ?Subroutine2
    214            emberAfAppFlush();
    215          
    216            emberAfAppPrint("%p level [%x]", "Security", emberAfGetSecurityLevel());
   \                     ??CrossCallReturnLabel_11:
   \   000000BE   0x.... 0x....      BL       emberAfGetSecurityLevel
   \   000000C2   0x4603             MOV      R3,R0
   \   000000C4   0x.... 0x....      ADR.W    R2,`?<Constant "Security">`
   \   000000C8   0x.... 0x....      ADR.W    R1,`?<Constant "%p level [%x]">`
   \   000000CC   0x2004             MOVS     R0,#+4
   \   000000CE   0x.... 0x....      BL       emberAfPrint
    217          
    218            printSmartEnergySecurityInfo();
    219            printSmartEnergySecurityInfo283k1();
    220          
    221            emberAfAppPrint("network state [%x] ", emberNetworkState());
   \   000000D2   0x.... 0x....      BL       emberNetworkState
   \   000000D6   0x4602             MOV      R2,R0
   \   000000D8   0x.... 0x....      ADR.W    R1,`?<Constant "network state [%x] ">`
   \   000000DC   0x2004             MOVS     R0,#+4
   \   000000DE   0x.... 0x....      BL       emberAfPrint
    222            printPacketBuffers();
   \   000000E2   0x.... 0x....      BL       emAfGetPacketBufferTotalCount
   \   000000E6   0x4604             MOV      R4,R0
   \   000000E8   0x.... 0x....      BL       emAfGetPacketBufferFreeCount
   \   000000EC   0x4623             MOV      R3,R4
   \   000000EE   0x4602             MOV      R2,R0
   \   000000F0   0x.... 0x....      ADR.W    R1,`?<Constant "Buffs: %d / %d">`
   \   000000F4   0x2004             MOVS     R0,#+4
   \   000000F6   0x.... 0x....      BL       emberAfPrintln
    223            emberAfAppFlush();
    224          
    225            // print the endpoint information
    226            {
    227              int8u i, j;
    228              emberAfAppPrintln("Ep cnt: %d", emberAfEndpointCount());
   \   000000FA   0x.... 0x....      BL       emberAfEndpointCount
   \   000000FE   0x4602             MOV      R2,R0
   \   00000100   0x.... 0x....      ADR.W    R1,`?<Constant "Ep cnt: %d">`
   \   00000104   0x.... 0x....      BL       ?Subroutine0
    229              // loop for each endpoint
    230              for (i = 0; i < emberAfEndpointCount(); i++) {
   \                     ??CrossCallReturnLabel_4:
   \   00000108   0x2700             MOVS     R7,#+0
   \   0000010A   0x.... 0x....      ADR.W    R9,`?<Constant "out(client)">`
   \   0000010E   0x.... 0x....      ADR.W    R5,`?<Constant "disabled">`
   \   00000112   0x.... 0x....      ADR.W    R10,`?<Constant "enabled">`
   \   00000116   0xE001             B.N      ??emAfCliInfoCommand_3
   \                     ??emAfCliInfoCommand_4:
   \   00000118   0x1C7F             ADDS     R7,R7,#+1
   \   0000011A   0xB2FF             UXTB     R7,R7
   \                     ??emAfCliInfoCommand_3:
   \   0000011C   0x.... 0x....      BL       emberAfEndpointCount
   \   00000120   0x4287             CMP      R7,R0
   \   00000122   0xDA4E             BGE.N    ??emAfCliInfoCommand_5
    231                EmberAfEndpointType *et = emAfEndpoints[i].endpointType;
   \   00000124   0x....             LDR.N    R0,??DataTable43_4
   \   00000126   0xEB00 0x1407      ADD      R4,R0,R7, LSL #+4
   \   0000012A   0xF8D4 0x8008      LDR      R8,[R4, #+8]
    232                emberAfAppPrint("ep %d [endpoint %p, device %p] ",
    233                                emberAfEndpointFromIndex(i),
    234                                (emberAfEndpointIndexIsEnabled(i)
    235                                 ? "enabled"
    236                                 : "disabled"),
    237                                emberAfIsDeviceEnabled(emberAfEndpointFromIndex(i))
    238                                ? "enabled" 
    239                                : "disabled");
   \   0000012E   0x4638             MOV      R0,R7
   \   00000130   0x.... 0x....      BL       emberAfEndpointFromIndex
   \   00000134   0x.... 0x....      BL       emberAfIsDeviceEnabled
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xBF14             ITE      NE 
   \   0000013C   0x4656             MOVNE    R6,R10
   \   0000013E   0x462E             MOVEQ    R6,R5
   \   00000140   0x4638             MOV      R0,R7
   \   00000142   0x.... 0x....      BL       emberAfEndpointIndexIsEnabled
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xBF14             ITE      NE 
   \   0000014A   0x46D3             MOVNE    R11,R10
   \   0000014C   0x46AB             MOVEQ    R11,R5
   \   0000014E   0x4638             MOV      R0,R7
   \   00000150   0x.... 0x....      BL       emberAfEndpointFromIndex
   \   00000154   0x9600             STR      R6,[SP, #+0]
   \   00000156   0x465B             MOV      R3,R11
   \   00000158   0x4602             MOV      R2,R0
   \   0000015A   0x.... 0x....      ADR.W    R1,`?<Constant "ep %d [endpoint %p, d...">`
   \   0000015E   0x2004             MOVS     R0,#+4
   \   00000160   0x.... 0x....      BL       emberAfPrint
    240                emberAfAppPrintln("nwk [%d] profile [0x%2x] devId [0x%2x] ver [0x%x]",
    241                                  emberAfNetworkIndexFromEndpointIndex(i),
    242                                  emberAfProfileIdFromIndex(i),
    243                                  emberAfDeviceIdFromIndex(i),
    244                                  emberAfDeviceVersionFromIndex(i));    
   \   00000164   0x79A0             LDRB     R0,[R4, #+6]
   \   00000166   0x9001             STR      R0,[SP, #+4]
   \   00000168   0x88A0             LDRH     R0,[R4, #+4]
   \   0000016A   0x9000             STR      R0,[SP, #+0]
   \   0000016C   0x8863             LDRH     R3,[R4, #+2]
   \   0000016E   0x7B22             LDRB     R2,[R4, #+12]
   \   00000170   0x.... 0x....      ADR.W    R1,`?<Constant "nwk [%d] profile [0x%...">`
   \   00000174   0x2004             MOVS     R0,#+4
   \   00000176   0x.... 0x....      BL       emberAfPrintln
    245                // loop for the clusters within the endpoint
    246                for (j = 0; j < et->clusterCount; j++) {
   \   0000017A   0x2400             MOVS     R4,#+0
   \   0000017C   0xE010             B.N      ??emAfCliInfoCommand_6
    247                  EmberAfCluster *zc = &(et->cluster[j]);
    248                  emberAfAppPrint("    %p cluster: 0x%2x ", 
    249                                 (emberAfClusterIsClient(zc)
    250                                  ? "out(client)"
    251                                  : "in (server)" ),
    252                                 zc->clusterId);
   \                     ??emAfCliInfoCommand_7:
   \   0000017E   0x8833             LDRH     R3,[R6, #+0]
   \   00000180   0x.... 0x....      ADR.W    R1,`?<Constant "    %p cluster: 0x%2x ">`
   \   00000184   0x2004             MOVS     R0,#+4
   \   00000186   0x.... 0x....      BL       emberAfPrint
    253                  emberAfAppDebugExec(emberAfDecodeAndPrintCluster(zc->clusterId));
   \   0000018A   0x2004             MOVS     R0,#+4
   \   0000018C   0x.... 0x....      BL       emberAfPrintEnabled
   \   00000190   0xB110             CBZ.N    R0,??emAfCliInfoCommand_8
   \   00000192   0x8830             LDRH     R0,[R6, #+0]
   \   00000194   0x.... 0x....      BL       emberAfDecodeAndPrintCluster
    254                  emberAfAppPrintln("");
   \                     ??emAfCliInfoCommand_8:
   \   00000198   0x....             ADR.N    R1,??DataTable43_1  ;; ""
   \   0000019A   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_10:
   \   0000019E   0x1C64             ADDS     R4,R4,#+1
   \                     ??emAfCliInfoCommand_6:
   \   000001A0   0xF898 0x0004      LDRB     R0,[R8, #+4]
   \   000001A4   0xB2E4             UXTB     R4,R4
   \   000001A6   0x4284             CMP      R4,R0
   \   000001A8   0xD2B6             BCS.N    ??emAfCliInfoCommand_4
   \   000001AA   0x2014             MOVS     R0,#+20
   \   000001AC   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \   000001B0   0xFB00 0x1604      MLA      R6,R0,R4,R1
   \   000001B4   0x7B30             LDRB     R0,[R6, #+12]
   \   000001B6   0x0600             LSLS     R0,R0,#+24
   \   000001B8   0xBF4C             ITE      MI 
   \   000001BA   0x464A             MOVMI    R2,R9
   \   000001BC   0x.... 0x....      ADRPL.W  R2,`?<Constant "in (server)">`
   \   000001C0   0xE7DD             B.N      ??emAfCliInfoCommand_7
    255                  emberAfAppFlush();
    256                }
    257                emberAfAppFlush();
    258              }
    259            }
    260          
    261            {
    262              PGM_P names[] = {
    263                EMBER_AF_GENERATED_NETWORK_STRINGS
    264              };
   \                     ??emAfCliInfoCommand_5:
   \   000001C2   0xA800             ADD      R0,SP,#+0
   \   000001C4   0x.... 0x....      ADR.W    R1,`?<Constant {&"Primary (pro)"}>`
   \   000001C8   0x680A             LDR      R2,[R1, #0]
   \   000001CA   0x6002             STR      R2,[R0, #+0]
    265              int8u i;
    266              emberAfAppPrintln("Nwk cnt: %d", EMBER_SUPPORTED_NETWORKS);
   \   000001CC   0x2201             MOVS     R2,#+1
   \   000001CE   0x.... 0x....      ADR.W    R1,`?<Constant "Nwk cnt: %d">`
   \   000001D2   0x.... 0x....      BL       ?Subroutine0
    267              for (i = 0; i < EMBER_SUPPORTED_NETWORKS; i++) {
   \                     ??CrossCallReturnLabel_3:
   \   000001D6   0x.... 0x....      ADR.W    R4,`?<Constant "  nodeType [0x%x]">`
   \   000001DA   0x....             LDR.N    R5,??DataTable43_5
    268                emberAfAppPrintln("nwk %d [%p]", i, names[i]);
   \   000001DC   0x9B00             LDR      R3,[SP, #+0]
   \   000001DE   0x2200             MOVS     R2,#+0
   \   000001E0   0x.... 0x....      ADR.W    R1,`?<Constant "nwk %d [%p]">`
   \   000001E4   0x2004             MOVS     R0,#+4
   \   000001E6   0x.... 0x....      BL       emberAfPrintln
    269                switch (emAfNetworks[i].type) {
   \   000001EA   0x7828             LDRB     R0,[R5, #+0]
   \   000001EC   0xB110             CBZ.N    R0,??emAfCliInfoCommand_9
   \   000001EE   0x2801             CMP      R0,#+1
   \   000001F0   0xD008             BEQ.N    ??emAfCliInfoCommand_10
   \   000001F2   0xE00B             B.N      ??CrossCallReturnLabel_1
    270                case EM_AF_NETWORK_TYPE_ZIGBEE_PRO:
    271                  emberAfAppPrintln("  nodeType [0x%x]", emAfNetworks[i].variant.pro.nodeType);
   \                     ??emAfCliInfoCommand_9:
   \   000001F4   0x786A             LDRB     R2,[R5, #+1]
   \   000001F6   0x4621             MOV      R1,R4
   \   000001F8   0x.... 0x....      BL       ?Subroutine0
    272                  emberAfAppPrintln("  securityProfile [0x%x]", emAfNetworks[i].variant.pro.securityProfile);
   \                     ??CrossCallReturnLabel_2:
   \   000001FC   0x78AA             LDRB     R2,[R5, #+2]
   \   000001FE   0x.... 0x....      ADR.W    R1,`?<Constant "  securityProfile [0x%x]">`
   \   00000202   0xE001             B.N      ??emAfCliInfoCommand_11
    273                  break;
    274                case EM_AF_NETWORK_TYPE_ZIGBEE_RF4CE:
    275                  emberAfAppPrintln("  nodeType [0x%x]", emAfNetworks[i].variant.rf4ce.nodeType);
   \                     ??emAfCliInfoCommand_10:
   \   00000204   0x786A             LDRB     R2,[R5, #+1]
   \   00000206   0x4621             MOV      R1,R4
   \                     ??emAfCliInfoCommand_11:
   \   00000208   0x.... 0x....      BL       ?Subroutine0
    276                  break;
    277                }
    278              }
    279            }
    280          }
   \                     ??CrossCallReturnLabel_1:
   \   0000020C   0xB00B             ADD      SP,SP,#+44
   \   0000020E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x4649             MOV      R1,R9
   \                     ??Subroutine2_0:
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x.... 0x....      B.W      emberAfPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    281          #endif
    282          
    283          #if defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)
    284          
    285          //------------------------------------------------------------------------------
    286          // "debugprint" commands.
    287          
    288          #ifdef ZA_CLI_FULL
    289          

   \                                 In section .text, align 2, keep-with-next
    290          void printOnCommand(void)
    291          {
   \                     printOnCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    292            int16u area = (int16u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    293            emberAfPrintOn(area);
   \                     ??CrossCallReturnLabel_17:
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000C   0x.... 0x....      B.W      emberAfPrintOn
    294          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      B.W      emberUnsignedCommandArgument
    295          

   \                                 In section .text, align 2, keep-with-next
    296          void printOffCommand(void)
    297          {
   \                     printOffCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    298            int16u area = (int16u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    299            emberAfPrintOff(area);
   \                     ??CrossCallReturnLabel_16:
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000C   0x.... 0x....      B.W      emberAfPrintOff
    300          }
    301          
    302          #ifndef EMBER_AF_GENERATE_CLI
    303          
    304          static PGM_P debugPrintOnOffCommandArguments[] = {
    305            "Number of the specified print area.",
    306            NULL,
    307          };
    308          
    309          static EmberCommandEntry debugPrintCommands[] = {
    310            emberCommandEntryAction("status", 
    311                                    emberAfPrintStatus,
    312                                    "",
    313                                    "Print the status of all the debug print areas."),
    314            emberCommandEntryAction("all_on",
    315                                    emberAfPrintAllOn, 
    316                                    "",
    317                                    "Turn all debug print areas on."),
    318          
    319            emberCommandEntryAction("all_off",
    320                                    emberAfPrintAllOff, 
    321                                    "",
    322                                    "Turn all debug print areas off."),
    323          
    324            emberCommandEntryActionWithDetails("on",
    325                                               printOnCommand, 
    326                                               "v",
    327                                               "Turn on the printing for the specified area.",
    328                                               debugPrintOnOffCommandArguments),
    329          
    330            emberCommandEntryActionWithDetails("off",
    331                                               printOffCommand, 
    332                                               "v",
    333                                               "Turn off the printing for the specified area.",
    334                                               debugPrintOnOffCommandArguments),
    335            emberCommandEntryTerminator(),
    336          };
    337          #endif // EMBER_AF_GENERATE_CLI
    338          
    339          #endif
    340          
    341          //------------------------------------------------------------------------------
    342          // Miscellaneous commands.
    343          

   \                                 In section .text, align 2, keep-with-next
    344          void helpCommand(void)
    345          {
   \                     helpCommand:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    346          
    347          #if defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    348            EmberCommandEntry *commandFinger = emberCommandTable;
   \   00000002   0x....             LDR.N    R4,??DataTable43_6
   \   00000004   0x....             ADR.N    R5,??DataTable43_2  ;; 0x25, 0x70, 0x00, 0x00
   \   00000006   0xE004             B.N      ??CrossCallReturnLabel_0
    349            for (; commandFinger->name != NULL; commandFinger++) {
    350              emberAfAppPrintln("%p", commandFinger->name);
   \                     ??helpCommand_0:
   \   00000008   0xF854 0x2B14      LDR      R2,[R4], #+20
   \   0000000C   0x4629             MOV      R1,R5
   \   0000000E   0x.... 0x....      BL       ?Subroutine0
    351              emberAfAppFlush();
    352            }
   \                     ??CrossCallReturnLabel_0:
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F7             BNE.N    ??helpCommand_0
    353          #endif //defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    354          }
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    355          

   \                                 In section .text, align 2, keep-with-next
    356          void resetCommand(void)
    357          {
    358            halReboot();
   \                     resetCommand:
   \   00000000   0x.... 0x....      B.W      halReboot
    359          }
    360          

   \                                 In section .text, align 2, keep-with-next
    361          void echoCommand(void)
    362          {
   \                     echoCommand:
   \   00000000   0xB580             PUSH     {R7,LR}
    363            int8u echoOn = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    364            if ( echoOn ) {
   \                     ??CrossCallReturnLabel_15:
   \   00000006   0x....             LDR.N    R1,??DataTable43_7
   \   00000008   0x780A             LDRB     R2,[R1, #+0]
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xBF14             ITE      NE 
   \   00000010   0xF042 0x0001      ORRNE    R0,R2,#0x1
   \   00000014   0xF002 0x00FE      ANDEQ    R0,R2,#0xFE
    365              emberCommandInterpreterEchoOn();
    366            } else {
    367              emberCommandInterpreterEchoOff();
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    368            }
    369          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    370          

   \                                 In section .text, align 2, keep-with-next
    371          void printEvents(void)
    372          {
   \                     printEvents:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    373            int8u i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    374            int32u nowMS32 = halCommonGetInt32uMillisecondTick();
   \   00000006   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000000A   0x4605             MOV      R5,R0
   \   0000000C   0x.... 0x....      ADR.W    R6,`?<Constant "%l ms">`
   \   00000010   0x.... 0x....      ADR.W    R11,`?<Constant "inactive">`
   \   00000014   0x.... 0x....      ADR.W    R8,`?<Constant "%p  : ">`
   \   00000018   0x.... 0x....      LDR.W    R9,??DataTable43_8
   \   0000001C   0x.... 0x....      LDR.W    R10,??DataTable43_9
   \   00000020   0xE007             B.N      ??printEvents_0
    375            while (emAfEvents[i].control != NULL) {
    376              emberAfCorePrint("%p  : ", emAfEventStrings[i]);
    377              if (emAfEvents[i].control->status == EMBER_EVENT_INACTIVE) {
    378                emberAfCorePrintln("inactive");
    379              } else {
    380                emberAfCorePrintln("%l ms", emAfEvents[i].control->timeToExecute - nowMS32);
   \                     ??printEvents_1:
   \   00000022   0x6878             LDR      R0,[R7, #+4]
   \   00000024   0x1B42             SUBS     R2,R0,R5
   \   00000026   0x4631             MOV      R1,R6
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       emberAfPrintln
    381              }
    382              i++;
   \                     ??printEvents_2:
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \   00000030   0xB2E4             UXTB     R4,R4
   \                     ??printEvents_0:
   \   00000032   0xF85A 0x7034      LDR      R7,[R10, R4, LSL #+3]
   \   00000036   0xB16F             CBZ.N    R7,??printEvents_3
   \   00000038   0xF859 0x2024      LDR      R2,[R9, R4, LSL #+2]
   \   0000003C   0x4641             MOV      R1,R8
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       emberAfPrint
   \   00000044   0x7838             LDRB     R0,[R7, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1EB             BNE.N    ??printEvents_1
   \   0000004A   0x4659             MOV      R1,R11
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      BL       emberAfPrintln
   \   00000052   0xE7EC             B.N      ??printEvents_2
    383            }
    384          }
   \                     ??printEvents_3:
   \   00000054   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    385          
    386          //------------------------------------------------------------------------------
    387          // "endpoint" commands
    388          

   \                                 In section .text, align 2, keep-with-next
    389          void endpointPrint(void)
    390          {
   \                     endpointPrint:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    391            int8u endpoint = (int8u)emberUnsignedCommandArgument(0);
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    392            int8u i;
    393            for (i = 0; i < emberAfEndpointCount(); i++) {
   \                     ??CrossCallReturnLabel_14:
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x....             ADR.N    R5,??DataTable43_1  ;; ""
   \   0000000C   0x.... 0x....      ADR.W    R10,`?<Constant "EP %d: %p ">`
   \   00000010   0x....             LDR.N    R7,??DataTable43_4
   \   00000012   0x.... 0x....      ADR.W    R8,`?<Constant "Disabled">`
   \   00000016   0x.... 0x....      ADR.W    R9,`?<Constant "Enabled">`
   \   0000001A   0xE00D             B.N      ??endpointPrint_0
    394              emberAfCorePrint("EP %d: %p ", 
    395                               emAfEndpoints[i].endpoint,
    396                               (emberAfEndpointIndexIsEnabled(i)
    397                                ? "Enabled"
    398                                : "Disabled"));
   \                     ??endpointPrint_1:
   \   0000001C   0x0126             LSLS     R6,R4,#+4
   \   0000001E   0x5DF2             LDRB     R2,[R6, R7]
   \   00000020   0x4651             MOV      R1,R10
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       emberAfPrint
    399              emAfPrintEzspEndpointFlags(emAfEndpoints[i].endpoint);
   \   00000028   0x5DF0             LDRB     R0,[R6, R7]
   \   0000002A   0x.... 0x....      BL       emAfPrintEzspEndpointFlags
    400              emberAfCorePrintln("");
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       emberAfPrintln
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \                     ??endpointPrint_0:
   \   00000038   0x.... 0x....      BL       emberAfEndpointCount
   \   0000003C   0xB2E4             UXTB     R4,R4
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD207             BCS.N    ??endpointPrint_2
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       emberAfEndpointIndexIsEnabled
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xBF14             ITE      NE 
   \   0000004C   0x464B             MOVNE    R3,R9
   \   0000004E   0x4643             MOVEQ    R3,R8
   \   00000050   0xE7E4             B.N      ??endpointPrint_1
    401            }
    402          }
   \                     ??endpointPrint_2:
   \   00000052   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    403          

   \                                 In section .text, align 2, keep-with-next
    404          void enableDisableEndpoint(void)
    405          {
   \                     enableDisableEndpoint:
   \   00000000   0xB580             PUSH     {R7,LR}
    406            int8u endpoint = (int8u)emberUnsignedCommandArgument(0);
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    407            boolean enable = (emberCurrentCommand->name[0] == 'e'
    408                              ? TRUE
    409                              : FALSE);
   \                     ??CrossCallReturnLabel_13:
   \   00000006   0x....             LDR.N    R1,??DataTable43_10
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x7809             LDRB     R1,[R1, #+0]
   \   0000000E   0x2965             CMP      R1,#+101
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0x2101             MOVEQ    R1,#+1
   \   00000014   0x2100             MOVNE    R1,#+0
    410            if (!emberAfEndpointEnableDisable(endpoint, 
    411                                              enable)) {
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       emberAfEndpointEnableDisable
   \   0000001C   0xB930             CBNZ.N   R0,??enableDisableEndpoint_0
    412              emberAfCorePrintln("Error:  Unknown endpoint.");
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "Error:  Unknown endpo...">`
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE8BD 0x4004      POP      {R2,LR}
   \   00000028   0x.... 0x....      B.W      emberAfPrintln
    413            }
    414          }
   \                     ??enableDisableEndpoint_0:
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \   00000000   0x5D 0x00          DC8      "]",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_1:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_2:
   \   00000000   0x25 0x70          DC8      0x25, 0x70, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_3:
   \   00000000   0x........         DC32     emAfCliNetworkIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_4:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_5:
   \   00000000   0x........         DC32     emAfNetworks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_6:
   \   00000000   0x........         DC32     emberCommandTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_7:
   \   00000000   0x........         DC32     emberCommandInterpreter2Configuration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_8:
   \   00000000   0x........         DC32     emAfEventStrings

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_9:
   \   00000000   0x........         DC32     emAfEvents

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_10:
   \   00000000   0x........         DC32     emberCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MFG String: %s">`:
   \   00000000   0x4D 0x46          DC8 "MFG String: %s"
   \              0x47 0x20    
   \              0x53 0x74    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Buffs: %d / %d">`:
   \   00000000   0x42 0x75          DC8 "Buffs: %d / %d"
   \              0x66 0x66    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x2F 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AppBuilder MFG Code: ...">`:
   \   00000000   0x41 0x70          DC8 "AppBuilder MFG Code: 0x%2X"
   \              0x70 0x42    
   \              0x75 0x69    
   \              0x6C 0x64    
   \              0x65 0x72    
   \              0x20 0x4D    
   \              0x46 0x47    
   \              0x20 0x43    
   \              0x6F 0x64    
   \              0x65 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "]">`:
   \   00000000   0x5D 0x00          DC8 "]"

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Primary (pro)">`:
   \   00000000   0x50 0x72          DC8 "Primary (pro)"
   \              0x69 0x6D    
   \              0x61 0x72    
   \              0x79 0x20    
   \              0x28 0x70    
   \              0x72 0x6F    
   \              0x29 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%p">`:
   \   00000000   0x25 0x70          DC8 "%p"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "node [">`:
   \   00000000   0x6E 0x6F          DC8 "node ["
   \              0x64 0x65    
   \              0x20 0x5B    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "] chan [%d] pwr [%d]">`:
   \   00000000   0x5D 0x20          DC8 "] chan [%d] pwr [%d]"
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x20 0x5B    
   \              0x25 0x64    
   \              0x5D 0x20    
   \              0x70 0x77    
   \              0x72 0x20    
   \              0x5B 0x25    
   \              0x64 0x5D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "panID [0x%2x] nodeID ...">`:
   \   00000000   0x70 0x61          DC8 "panID [0x%2x] nodeID [0x%2x] "
   \              0x6E 0x49    
   \              0x44 0x20    
   \              0x5B 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x5D 0x20    
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x49 0x44    
   \              0x20 0x5B    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x5D    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "xpan [0x">`:
   \   00000000   0x78 0x70          DC8 "xpan [0x"
   \              0x61 0x6E    
   \              0x20 0x5B    
   \              0x30 0x78    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "nodeType [">`:
   \   00000000   0x6E 0x6F          DC8 "nodeType ["
   \              0x64 0x65    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x20 0x5B    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "0x%x">`:
   \   00000000   0x30 0x78          DC8 "0x%x"
   \              0x25 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "unknown">`:
   \   00000000   0x75 0x6E          DC8 "unknown"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p level [%x]">`:
   \   00000000   0x25 0x70          DC8 "%p level [%x]"
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x5B    
   \              0x25 0x78    
   \              0x5D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Security">`:
   \   00000000   0x53 0x65          DC8 "Security"
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "network state [%x] ">`:
   \   00000000   0x6E 0x65          DC8 "network state [%x] "
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x5B 0x25    
   \              0x78 0x5D    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Ep cnt: %d">`:
   \   00000000   0x45 0x70          DC8 "Ep cnt: %d"
   \              0x20 0x63    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ep %d [endpoint %p, d...">`:
   \   00000000   0x65 0x70          DC8 "ep %d [endpoint %p, device %p] "
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x5B 0x65    
   \              0x6E 0x64    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x25 0x70    
   \              0x2C 0x20    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x25    
   \              0x70 0x5D    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "enabled">`:
   \   00000000   0x65 0x6E          DC8 "enabled"
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "disabled">`:
   \   00000000   0x64 0x69          DC8 "disabled"
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "nwk [%d] profile [0x%...">`:
   \   00000000   0x6E 0x77          DC8 "nwk [%d] profile [0x%2x] devId [0x%2x] ver [0x%x]"
   \              0x6B 0x20    
   \              0x5B 0x25    
   \              0x64 0x5D    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x5B    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x5D    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x49 0x64    
   \              0x20 0x5B    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x5D    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x20 0x5B    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x5D 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    %p cluster: 0x%2x ">`:
   \   00000000   0x20 0x20          DC8 "    %p cluster: 0x%2x "
   \              0x20 0x20    
   \              0x25 0x70    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x78 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "out(client)">`:
   \   00000000   0x6F 0x75          DC8 "out(client)"
   \              0x74 0x28    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "in (server)">`:
   \   00000000   0x69 0x6E          DC8 "in (server)"
   \              0x20 0x28    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {&"Primary (pro)"}>`:
   \   00000000   0x........         DC32 `?<Constant "Primary (pro)">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Nwk cnt: %d">`:
   \   00000000   0x4E 0x77          DC8 "Nwk cnt: %d"
   \              0x6B 0x20    
   \              0x63 0x6E    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "nwk %d [%p]">`:
   \   00000000   0x6E 0x77          DC8 "nwk %d [%p]"
   \              0x6B 0x20    
   \              0x25 0x64    
   \              0x20 0x5B    
   \              0x25 0x70    
   \              0x5D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  nodeType [0x%x]">`:
   \   00000000   0x20 0x20          DC8 "  nodeType [0x%x]"
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x20 0x5B    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x5D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  securityProfile [0x%x]">`:
   \   00000000   0x20 0x20          DC8 "  securityProfile [0x%x]"
   \              0x73 0x65    
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x50 0x72    
   \              0x6F 0x66    
   \              0x69 0x6C    
   \              0x65 0x20    
   \              0x5B 0x30    
   \              0x78 0x25    
   \              0x78 0x5D    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p  : ">`:
   \   00000000   0x25 0x70          DC8 "%p  : "
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "inactive">`:
   \   00000000   0x69 0x6E          DC8 "inactive"
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%l ms">`:
   \   00000000   0x25 0x6C          DC8 "%l ms"
   \              0x20 0x6D    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EP %d: %p ">`:
   \   00000000   0x45 0x50          DC8 "EP %d: %p "
   \              0x20 0x25    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Enabled">`:
   \   00000000   0x45 0x6E          DC8 "Enabled"
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Disabled">`:
   \   00000000   0x44 0x69          DC8 "Disabled"
   \              0x73 0x61    
   \              0x62 0x6C    
   \              0x65 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error:  Unknown endpo...">`:
   \   00000000   0x45 0x72          DC8 "Error:  Unknown endpoint."
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x20    
   \              0x55 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x65 0x6E    
   \              0x64 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x2E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0
    415          
    416          #ifndef EMBER_AF_GENERATE_CLI
    417          static EmberCommandEntry endpointCommands[] = {
    418            emberCommandEntryAction("print",  endpointPrint, "",
    419                                    "Print the status of all the endpoints."),
    420            emberCommandEntryAction("enable", enableDisableEndpoint, "u",
    421                                    "Enables the endpoint for processing ZCL messages."),
    422            emberCommandEntryAction("disable", enableDisableEndpoint, "u",
    423                                    "Disable the endpoint from processing ZCL messages."),
    424            
    425            emberCommandEntryTerminator(),
    426          };
    427          
    428          //------------------------------------------------------------------------------
    429          // Commands
    430          
    431          static PGM_P readCommandArguments[] = {
    432            "Endpoint",
    433            "Cluster ID",
    434            "Attribute ID",
    435            "Server Attribute (boolean)",
    436            NULL,
    437          };
    438          
    439          static PGM_P timeSyncCommandArguments[] = {
    440            "Node ID",
    441            "source endpoint",
    442            "dest endpoint",
    443            NULL,
    444          };
    445          
    446          static PGM_P writeCommandArguments[] = {
    447            "Endpoint",
    448            "Cluster ID",
    449            "Attribute ID",
    450            "Server Attribute (boolean)",
    451            "Data Bytes",
    452            NULL,
    453          };
    454          
    455          static PGM_P bindSendCommandArguments[] = {
    456            "Source Endpoint",
    457            NULL,
    458          };
    459          
    460          static PGM_P rawCommandArguments[] = {
    461            "Cluster ID",
    462            "Data Bytes",
    463            NULL,
    464          };
    465          
    466          static PGM_P sendCommandArguments[] = {
    467            "Node ID",
    468            "Source Endpoint",
    469            "Dest Endpoint",
    470            NULL,
    471          };
    472          
    473          static PGM_P sendMulticastCommandArguments[] = {
    474            "Broadcast address",
    475            "Group Address",
    476            "Source Endpoint",
    477            NULL,
    478          };
    479          
    480          EmberCommandEntry emberCommandTable[] = {
    481          
    482          #ifdef ZA_CLI_FULL
    483          
    484              #if (defined(ZCL_USING_KEY_ESTABLISHMENT_CLUSTER_CLIENT) \
    485                   && defined(ZCL_USING_KEY_ESTABLISHMENT_CLUSTER_SERVER))
    486                emberCommandEntrySubMenu("cbke",
    487                                         emberAfPluginKeyEstablishmentCommands, 
    488                                         "Commands to initiate CBKE"),
    489              #endif
    490          
    491              #ifdef EMBER_AF_PRINT_ENABLE
    492                emberCommandEntrySubMenu("print",      printCommands, ""),
    493                emberCommandEntrySubMenu("debugprint", debugPrintCommands, ""),
    494              #endif
    495          
    496              #if defined(EMBER_AF_PRINT_ENABLE) && defined(EMBER_AF_PRINT_APP)
    497                emberCommandEntryAction("version",
    498                                        emAfCliVersionCommand, 
    499                                        "",
    500                                        "Print the version number of the ZNet software."),
    501          
    502                LIBRARY_COMMANDS       // Defined in app/util/common/library.h
    503              #endif
    504          
    505              emberCommandEntrySubMenu("cha",      
    506                                       changeKeyCommands,
    507                                       "Commands to change the default NWK or Link Key"),
    508              emberCommandEntrySubMenu("interpan",
    509                                       interpanCommands,
    510                                       "Commands to send interpan ZCL messages."),
    511              emberCommandEntrySubMenu("option",
    512                                       emAfOptionCommands,
    513                                       "Commands to change the application options"),
    514          
    515              emberCommandEntryActionWithDetails("read",
    516                                                 emAfCliReadCommand, 
    517                                                 "uvvu",
    518                                                 "Construct a read attributes command to be sent.",
    519                                                 readCommandArguments),
    520          
    521              emberCommandEntryActionWithDetails("time",
    522                                                 emAfCliTimesyncCommand,           
    523                                                 "vuu",
    524                                                 "Send a read attribute for the current time",
    525                                                 timeSyncCommandArguments),
    526          
    527              emberCommandEntryActionWithDetails("write",            
    528                                                 emAfCliWriteCommand,              
    529                                                 "uvvuub",
    530                                                 "Construct a write attributes command to send.",
    531                                                 writeCommandArguments),
    532          
    533              emberCommandEntrySubMenu("zcl",
    534                                       zclCommands,
    535                                       "Commands for constructing ZCL cluster commands."),
    536          
    537          #endif // ZA_CLI_FULL
    538          
    539            emberCommandEntryActionWithDetails("bsend",
    540                                               emAfCliBsendCommand,              
    541                                               "u",
    542                                               "Send using a binding.",
    543                                               bindSendCommandArguments),
    544          
    545            emberCommandEntrySubMenu("keys",
    546                                     keysCommands,
    547                                     "Commands to print or set the security keys"),
    548          
    549            emberCommandEntrySubMenu("network",
    550                                     networkCommands,
    551                                     "Commands to form or join a network."),
    552          
    553            emberCommandEntryActionWithDetails("raw",
    554                                               emAfCliRawCommand,                
    555                                               "vb",
    556                                               "Create a manually formatted message.",
    557                                               rawCommandArguments),
    558          
    559            emberCommandEntryActionWithDetails("send",
    560                                               emAfCliSendCommand,               
    561                                               "vuu",
    562                                               "Send the previously constructed command via unicast.",
    563                                               sendCommandArguments),
    564          
    565            emberCommandEntryActionWithDetails("send_multicast",
    566                                               emAfCliSendCommand,               
    567                                               "vu",
    568                                               "Send the previously constructed command via multicast.",
    569                                               sendMulticastCommandArguments),
    570          
    571            emberCommandEntrySubMenu("security", emAfSecurityCommands, 
    572                                     "Commands for setting/getting security parameters."),
    573          #if defined(EMBER_AF_PLUGIN_COUNTERS)
    574            emberCommandEntryAction("cnt_print",     emberAfPluginCountersPrintCommand,    "", \
    575                                    "Print all stack counters"),                  \
    576            emberCommandEntryAction("cnt_clear",     emberAfPluginCountersClear,    "" ,\
    577                                    "Clear all stack counters"),\
    578            emberCommandEntryAction("cnt_threshold_print",emberAfPluginCountersPrintThresholdsCommand,"",\
    579                                    "Print all stack counter thresholds"),\
    580            emberCommandEntryAction("set_counter_threshold", emberAfPluginCountersSetThresholdCommand, "uu",\
    581                                    "Set Counter Threshold"), \
    582            emberCommandEntryAction("reset_counter_thresholds", emberAfPluginCountersResetThresholds, "",\
    583                                    "Reset_counter_thresholds"),
    584          #endif
    585          
    586          #if defined(EMBER_AF_PLUGIN_COUNTERS_COUNTERSOTA)
    587            emberCommandEntryAction("cnt_req",       sendCountersRequestCommand,  "vu" , \
    588                                    "Request stack counters from remote device"),
    589          #endif
    590          
    591            emberCommandEntryAction("help",     helpCommand, "",
    592                                    "Print the list of commands."),
    593            emberCommandEntryAction("reset", resetCommand, "",
    594                                    "Perform a software reset of the device."),
    595            emberCommandEntryAction("echo",  echoCommand, "u",
    596                                    "Turn on/off command interpreter echoing."),
    597            emberCommandEntryAction("events",  printEvents, "",
    598                                    "Print the list of timer events."),
    599            emberCommandEntrySubMenu("endpoint", endpointCommands,
    600                                     "Commands to manipulate the endpoints."),
    601            
    602          #ifndef EMBER_AF_CLI_DISABLE_INFO
    603            emberCommandEntryAction("info", emAfCliInfoCommand, "", \
    604                                    "Print infomation about the network state, clusters, and endpoints"),
    605          #endif
    606            
    607            EMBER_AF_PLUGIN_COMMANDS
    608            ZDO_COMMANDS
    609            CUSTOM_COMMANDS
    610            TEST_HARNESS_CLI_COMMANDS
    611            EMBER_AF_PLUGIN_GATEWAY_COMMANDS
    612          
    613            emberCommandEntryTerminator(),
    614          };
    615          
    616          #endif // EMBER_AF_GENERATE_CLI
    617          
    618          #else 
    619          // Stubs
    620          void enableDisableEndpoint(void)
    621          {
    622          }
    623          
    624          void endpointPrint(void)
    625          {
    626          }
    627          
    628          void printOffCommand(void)
    629          {
    630          }
    631          
    632          void printOnCommand(void)
    633          {
    634          }
    635          
    636          void echoCommand(void)
    637          {
    638          }
    639          
    640          void emAfCliCountersCommand(void)
    641          {
    642          }
    643          
    644          void emAfCliInfoCommand(void)
    645          {
    646          }
    647          
    648          void helpCommand(void)
    649          {
    650          }
    651          
    652          void resetCommand(void)
    653          {
    654          }
    655          #endif // defined(ZA_CLI_MINIMAL) || defined(ZA_CLI_FULL)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  echoCommand
              8 -> emberUnsignedCommandArgument
       80  emAfCliInfoCommand
             80 -> emAfCliVersionCommand
             80 -> emAfGetPacketBufferFreeCount
             80 -> emAfGetPacketBufferTotalCount
             80 -> emberAfDecodeAndPrintCluster
             80 -> emberAfEndpointCount
             80 -> emberAfEndpointFromIndex
             80 -> emberAfEndpointIndexIsEnabled
             80 -> emberAfGetEui64
             80 -> emberAfGetNetworkParameters
             80 -> emberAfGetNodeId
             80 -> emberAfGetSecurityLevel
             80 -> emberAfIsDeviceEnabled
             80 -> emberAfPrint
             80 -> emberAfPrintBigEndianEui64
             80 -> emberAfPrintEnabled
             80 -> emberAfPrintln
             80 -> emberNetworkState
             80 -> emberStringCommandArgument
             80 -> printMfgString
        8  emberCommandActionHandler
              8 -- Indirect call
              0 -> emberAfPopNetworkIndex
              8 -> emberAfPushNetworkIndex
        8  enableDisableEndpoint
              8 -> emberAfEndpointEnableDisable
              0 -> emberAfPrintln
              8 -> emberUnsignedCommandArgument
       32  endpointPrint
             32 -> emAfPrintEzspEndpointFlags
             32 -> emberAfEndpointCount
             32 -> emberAfEndpointIndexIsEnabled
             32 -> emberAfPrint
             32 -> emberAfPrintln
             32 -> emberUnsignedCommandArgument
       16  helpCommand
             16 -> emberAfPrintln
       40  printEvents
             40 -> emberAfPrint
             40 -> emberAfPrintln
             40 -> halCommonGetInt32uMillisecondTick
       24  printMfgString
             24 -> emberAfFormatMfgString
             24 -> emberAfPrintln
        8  printOffCommand
              0 -> emberAfPrintOff
              8 -> emberUnsignedCommandArgument
        8  printOnCommand
              0 -> emberAfPrintOn
              8 -> emberUnsignedCommandArgument
        0  printSmartEnergySecurityInfo
        0  printSmartEnergySecurityInfo283k1
        0  resetCommand
              0 -> halReboot


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "    %p cluster: 0x%2x ">
      20  ?<Constant "  nodeType [0x%x]">
      28  ?<Constant "  securityProfile [0x%x]">
       1  ?<Constant "">
       8  ?<Constant "%l ms">
       8  ?<Constant "%p  : ">
      16  ?<Constant "%p level [%x]">
       4  ?<Constant "%p">
       8  ?<Constant "0x%x">
      28  ?<Constant "AppBuilder MFG Code: ...">
      16  ?<Constant "Buffs: %d / %d">
      12  ?<Constant "Disabled">
      12  ?<Constant "EP %d: %p ">
       8  ?<Constant "Enabled">
      12  ?<Constant "Ep cnt: %d">
      28  ?<Constant "Error:  Unknown endpo...">
      16  ?<Constant "MFG String: %s">
      12  ?<Constant "Nwk cnt: %d">
      16  ?<Constant "Primary (pro)">
      12  ?<Constant "Security">
      24  ?<Constant "] chan [%d] pwr [%d]">
       2  ?<Constant "]">
      12  ?<Constant "disabled">
       8  ?<Constant "enabled">
      32  ?<Constant "ep %d [endpoint %p, d...">
      12  ?<Constant "in (server)">
      12  ?<Constant "inactive">
      20  ?<Constant "network state [%x] ">
       8  ?<Constant "node [">
      12  ?<Constant "nodeType [">
      12  ?<Constant "nwk %d [%p]">
      52  ?<Constant "nwk [%d] profile [0x%...">
      12  ?<Constant "out(client)">
      32  ?<Constant "panID [0x%2x] nodeID ...">
       8  ?<Constant "unknown">
      12  ?<Constant "xpan [0x">
       4  ?<Constant {&"Primary (pro)"}>
       4  ??DataTable43
       4  ??DataTable43_1
       4  ??DataTable43_10
       4  ??DataTable43_2
       4  ??DataTable43_3
       4  ??DataTable43_4
       4  ??DataTable43_5
       4  ??DataTable43_6
       4  ??DataTable43_7
       4  ??DataTable43_8
       4  ??DataTable43_9
       6  ?Subroutine0
       6  ?Subroutine1
       8  ?Subroutine2
       6  ?Subroutine3
      28  echoCommand
     530  emAfCliInfoCommand
      24  emberCommandActionHandler
      46  enableDisableEndpoint
      86  endpointPrint
      26  helpCommand
      88  printEvents
      26  printMfgString
      16  printOffCommand
      16  printOnCommand
       4  printSmartEnergySecurityInfo
       4  printSmartEnergySecurityInfo283k1
       4  resetCommand

 
    23 bytes in section .rodata
 1 508 bytes in section .text
 
 1 508 bytes of CODE  memory
    23 bytes of CONST memory

Errors: none
Warnings: none
