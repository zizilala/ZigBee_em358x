###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:27 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\ #
#                    em_usbdep.c                                              #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\ #
#                    em_usbdep.c -D "GENERATED_TOKEN_HEADER=\"app/builder/Doo #
#                    rSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D          #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"em_usbdep.c\"" -lC                  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\ #
#                     -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSen #
#                    sor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\buil #
#                    der\DoorSensor_SM6011\..\..\..\ -I                       #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \em_usbdep.lst                                           #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \em_usbdep.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\em_usbdep.c
      1          /**************************************************************************//**
      2           * @file
      3           * @brief USB protocol stack library, USB device endpoint handlers.
      4           * @author Nathaniel Ting
      5           * @version 3.20.3
      6           * <!-- Copyright 2013 by Silicon Laboratories. All rights reserved.     *80*-->
      7           *****************************************************************************/
      8          
      9          #include PLATFORM_HEADER
     10          #include "stack/include/ember.h"
     11          #include "hal/hal.h"
     12          
     13          #if defined(CORTEXM3_EM35X_USB)
     14          #include "em_usb.h"
     15          #include "em_usbhal.h"
     16          #include "em_usbtypes.h"
     17          #include "em_usbd.h"
     18          
     19          
     20          /*
     21           * USBDEP_Ep0Handler() is called each time a packet has been transmitted
     22           * or recieved on the default endpoint.
     23           * A state machine navigate us through the phases of a control transfer
     24           * according to "chapter 9" in the USB spec.
     25           */
     26          void USBDEP_Ep0Handler( USBD_Device_TypeDef *device )
     27          {
     28            // halToggleLed(BOARDLED0);
     29            int status;
     30            USBD_Ep_TypeDef *ep;
     31            static bool statusIn;
     32            static uint32_t xferred;
     33            static USB_XferCompleteCb_TypeDef callback;
     34            ep = &device->ep[ 0 ];
     35            
     36            #ifdef USB_DEBUG_EP0
     37            DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "ep->state = ");
     38            #endif
     39           
     40          
     41            switch ( ep->state )
     42            {
     43              case D_EP_IDLE:
     44                ep->remaining = 0;
     45                ep->zlp = 0;
     46                callback = NULL;
     47                statusIn = false;
     48                #ifdef USB_DEBUG_EP0
     49                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "IDLE\r\n");
     50                #endif
     51          
     52                if (*EPOUTBUFSIZE[0] == 0)
     53                {
     54          
     55                  #ifdef USB_DEBUG_EP0
     56                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "0 byte ack\r\n");
     57                  #endif
     58                  break;
     59                }
     60                status = USBDCH9_SetupCmd( device );
     61          
     62                if ( status == USB_STATUS_REQ_ERR )
     63                {
     64                  // ignore error for now since this can be triggered by requests we don't
     65                  // need to handle
     66                  // halSetLed(BOARDLED1);
     67                  ep->in = true;
     68                  USBDHAL_StallEp( ep );              /* Stall Ep0 IN                 */
     69                  ep->in = false;                     /* OUT for next SETUP           */
     70                  // USBDHAL_StallEp( ep );              /* Stall Ep0 OUT                */
     71                  USBDHAL_ReenableEp0Setup( device ); /* Prepare for next SETUP packet*/
     72                }
     73                else /* ( Status == USB_STATUS_OK ) */
     74                {
     75                  if ( (ep->state == D_EP_RECEIVING) || (ep->state == D_EP_TRANSMITTING) )
     76                  {
     77                    callback = ep->xferCompleteCb;
     78                  }
     79          
     80                  if ( ep->state != D_EP_RECEIVING )
     81                  {
     82                    // enable with care. since setup involves lots of transfers, the debug
     83                    // buffer will fill up very quickly.
     84                    // #ifdef USB_DEBUG_EP0
     85                    // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "ep->remaining = %d\r\n",ep->remaining);
     86                    // #endif
     87          
     88                    if ( ep->remaining )
     89                    {
     90                      /* Data will be sent to host, check if a ZLP must be appended */
     91                      if ( ( ep->remaining < device->setup->wLength ) &&
     92                           ( ep->remaining % ep->packetSize == 0    )    )
     93                      {
     94                        ep->zlp = 1;
     95                      }
     96                    }
     97                    else
     98                    {
     99                      /* Prepare for next SETUP packet*/
    100                      USBDHAL_ReenableEp0Setup( device );
    101          
    102                      /* No data stage, a ZLP may have been sent. If not, send one */
    103                      if ( ep->zlp == 0 )
    104                      {
    105                        #ifdef USB_DEBUG_EP0
    106                        DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "no ack\r\n");
    107                        #endif
    108                        ep->state = D_EP_IDLE;
    109                        // ack is already handled by hardware
    110                        // USBD_Write( 0, NULL, 0, NULL );             /* ACK to host */
    111                        ep->zlp = 2;
    112                        ep->state = D_EP_STATUS;
    113                      }
    114                      else
    115                      {
    116                        ep->state = D_EP_IDLE;
    117                        ep->in = false;                      /* OUT for next SETUP */
    118                      }
    119                    }
    120                  }
    121                }
    122                break; //D_EP_IDLE
    123                case D_EP_TRANSMITTING:
    124                  #ifdef USB_DEBUG_EP0
    125                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "TX\r\n");
    126                  #endif
    127                  if ( ep->remaining )
    128                  {
    129                    /* There is more data to transmit */
    130                    USBD_ReArmEp0( ep );
    131          
    132          
    133                    // enable with care. since setup involves lots of transfers, the debug
    134                    // buffer will fill up very quickly.
    135                    // #ifdef USB_DEBUG_EP0
    136                    // DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "ep->remaining = %d\r\n",ep->remaining);
    137                    // #endif
    138                  }
    139                  else
    140                  {
    141                    #ifdef USB_DEBUG_EP0
    142                    DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "TX done\r\n");
    143                    #endif
    144                    /* All data transferred, is a ZLP packet needed ? */
    145                    if ( ep->zlp == 1 )
    146                    {
    147                      #ifdef USB_DEBUG_EP0
    148                      DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"ack\r\n");
    149                      #endif
    150                      xferred   = ep->xferred;
    151                      ep->state = D_EP_IDLE;          /* USBD_Write() sets state back */
    152                                                      /* to EP_TRANSMITTING           */
    153                      USBD_Write( 0, NULL, 0, NULL ); /* Send ZLP                     */
    154                      ep->zlp = 2;
    155                    }
    156                    else
    157                    {
    158                      if ( ep->zlp == 0 )
    159                      {
    160                        xferred = ep->xferred;
    161                        ep->zlp = 1;
    162                      }
    163          
    164          
    165                      // host will send ack, which will be handled by hardware
    166                      // ep->state = D_EP_IDLE;
    167                      // USBD_Read( 0, NULL, 0, NULL );  /* Get ZLP packet (ACK) from host */
    168                      statusIn = true;
    169                      ep->state = D_EP_STATUS;
    170                    }
    171                  }
    172                  break;
    173                case D_EP_STATUS:
    174                  #ifdef USB_DEBUG_EP0
    175                  DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "STATUS\r\n");
    176                  #endif
    177                  if ( statusIn )
    178                  {
    179                    USBDHAL_ReenableEp0Setup( device );
    180                  }
    181          
    182                  if ( callback != NULL )
    183                  {
    184                    callback( USB_STATUS_OK, xferred, 0 );
    185                  }
    186          
    187                  ep->state = D_EP_IDLE;
    188                  ep->in = false;                     /* OUT for next SETUP */
    189                  break;
    190              }
    191          }
    192          
    193          void USBDEP_EpHandler( uint8_t epAddr )
    194          {
    195            USB_XferCompleteCb_TypeDef callback;
    196            
    197            USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr( epAddr );
    198          
    199            #if defined(USB_DEBUG_READ) || defined(USB_DEBUG_WRITE) || defined(USB_DEBUG_EP)
    200            DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "EP%dHandler\tep->state = %d\r\n",ep->num,ep->state);
    201            #endif
    202          
    203          
    204            if ( ep->state == D_EP_TRANSMITTING ) 
    205            {
    206              #ifdef USB_DEBUG_EP
    207              DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "ep->xferred=%d \tep->remaining = %d\r\n",ep->xferred, ep->remaining);
    208              #endif
    209              if ( ep->remaining )
    210              {
    211                // int8u txSize = (ep->remaining > ep->packetSize) ? ep->packetSize : ep->remaining;
    212                /* There is more data to transmit */
    213                USBD_ArmEp( ep );
    214                // ep->buf += ep->xferred;
    215                // ep->buf += txSize;
    216              }
    217              else // Done transmitting
    218              {
    219                // Put ep back into idle state
    220                ep->state = D_EP_IDLE;
    221          
    222                // If there's a callback, call it
    223                if ( ep->xferCompleteCb )
    224                {
    225                  callback = ep->xferCompleteCb;
    226                  ep->xferCompleteCb = NULL;
    227                  callback( USB_STATUS_OK, ep->xferred, ep->remaining );
    228                }
    229                #if EM_SERIAL3_ENABLED
    230                  usbTxData();
    231                #endif
    232              }
    233            }
    234            else if ( ep->state == D_EP_RECEIVING )
    235            {
    236              #ifdef USB_DEBUG_EP
    237              DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "ep->remaining = %d\r\n",ep->remaining);
    238              #endif
    239          
    240              if ( ep->remaining )
    241              {
    242                /* Short Packet */
    243                if (ep->packetSize>(ep->remaining + *EPOUTBUFSIZE[ep->num]))
    244                {
    245                  
    246                  
    247                  if ( ep->xferCompleteCb )
    248                  {
    249                    callback = ep->xferCompleteCb;
    250                    ep->xferCompleteCb = NULL;
    251                    callback( USB_STATUS_TIMEOUT, ep->xferred, ep->remaining );
    252                  }
    253                }
    254                else
    255                {
    256                  /* There is more data to transmit */
    257                  USBD_ArmEp( ep );
    258                  ep->buf += *EPOUTBUFSIZE[ep->num];  // move buffer pointer
    259                }
    260                
    261              }
    262              
    263              else
    264              {
    265                // Put ep back into idle state
    266                ep->state = D_EP_IDLE;
    267                // If there's a callback, call it
    268                if ( ep->xferCompleteCb )
    269                {
    270                  callback = ep->xferCompleteCb;
    271                  ep->xferCompleteCb = NULL;
    272                  callback( USB_STATUS_OK, ep->xferred, ep->remaining );
    273                }
    274              }
    275            }
    276            else
    277            {
    278              // EpHandler should only be called if the endpoint is in use
    279              // ep->state set in read/write
    280              // assert( 0 );
    281            }
    282          }
    283          
    284          #endif //CORTEXM3_EM35X_USB


 

 


Errors: none
Warnings: none
