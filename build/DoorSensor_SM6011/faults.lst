###############################################################################
#                                                                             #
#     IAR Assembler V6.40.2.53884/W32 for ARM 06/Feb/2015  13:52:56           #
#     Copyright 1999-2012 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\faults.s79#
#           List file     =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011\faults.lst#
#           Object file   =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011\faults.o#
#           Command line  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\faults.s79 #
#                            -OC:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -DGENERATED_TOKEN_HEADER="app/builder/DoorSensor_SM6011/DoorSensor_SM6011_tokens.h" #
#                            -DZA_GENERATED_HEADER="app/builder/DoorSensor_SM6011/DoorSensor_SM6011.h" #
#                            -DLOCAL_STORAGE_BTL                              #
#                            -DBOARD_HEADER="app\builder\DoorSensor_SM6011\DoorSensor_SM6011_board.h" #
#                            -DPLATFORM_HEADER="hal/micro/cortexm3/compiler/iar.h" #
#                            -DCORTEXM3 -DCORTEXM3_EMBER_MICRO                #
#                            -DCORTEXM3_EM3585 -DPHY_EM3XX                    #
#                            -DAPPLICATION_TOKEN_HEADER="app/framework/util/tokens.h" #
#                            -DCONFIGURATION_HEADER="app/framework/util/config.h" #
#                            -DATTRIBUTE_STORAGE_CONFIGURATION="app/builder/DoorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h" #
#                            -LC:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011\ #
#                            -t2 --cpu Cortex-M3 --fpu None                   #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\ #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\ #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\..\..\..\ #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\..\..\..\ #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\..\..\..\stack\ #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\..\..\..\hal\ #
#                            -IC:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\..\..\..\hal\..\ #
#                                                                             #
###############################################################################

    1                           //--------------------------------------------
                                ----------------------------------
    2                           // @file hal/micro/cortexm3/faults.s79
    3                           // @brief PRIV
    4                           // 
    5                           //
    6                           // Copyright 2009 by Ember Corporation. All
                                 rights reserved.                *80*
    7                           //--------------------------------------------
                                ----------------------------------
    8                           
    9                           #include "compiler/asm.h"
   10                           
   11                                   __IMPORT__ halInternalCrashHandler
   12                                   __IMPORT__ halInternalSysReset
   13                           
   14                           // define the values the link register can
                                 have on entering an exception
   15                           __EQU__(EXC_RETURN_HANDLER_MSP, 0xFFFFFFF1)
   16                           __EQU__(EXC_RETURN_THREAD_MSP,  0xFFFFFFF9)
   17                           __EQU__(EXC_RETURN_THREAD_PSP,  0xFFFFFFFD)
   18                           
   19                           // define stack bytes needed by halCrashHandle
                                r()
   20                           __EQU__(CRASH_STACK_SIZE, 64)
   21                           
   22                           //--------------------------------------------
                                ----------------------------------
   23                           //
   24                           // Various types of crashes generate NMIs,
                                 hard, bus, memory, usage and debug 
   25                           // monitor faults that vector to the routines
                                 defined here. 
   26                           //
   27                           // Although all of these could vector directly
                                 to the common fault handler,
   28                           // each is given its own entry point to allow
                                 setting a breakpoint for a 
   29                           // particular type of crash.
   30                           //
   31                           //--------------------------------------------
                                ----------------------------------
   32                           
   33                                   __CODE__
   34                                   __THUMB__
   35                           
   36                           #ifndef EMBER_INTERRUPT_TEST
   37                           
   38                                   __EXPORT__ halNmiIsr
   39                           halNmiIsr:
   40    00000000 05E0                  b.n fault
   41                           #endif
   42                           
   43                           #ifndef EMBER_ACCESS_TEST
   44                           
   45                                   __EXPORT__ halHardFaultIsr
   46                           halHardFaultIsr:
   47    00000002 04E0                  b.n fault
   48                           
   49                                   __EXPORT__ halBusFaultIsr
   50                           halBusFaultIsr:
   51    00000004 03E0                  b.n fault
   52                           
   53                                   __EXPORT__ halMemoryFaultIsr
   54                           halMemoryFaultIsr:
   55    00000006 02E0                  b.n fault
   56                           
   57                                   __EXPORT__ halUsageFaultIsr
   58                           halUsageFaultIsr:
   59    00000008 01E0                  b.n fault
   60                           
   61                           #endif
   62                           
   63                                   __EXPORT__ halDebugMonitorIsr
   64                           halDebugMonitorIsr:
   65    0000000A 00E0                  b.n fault
   66                           
   67                                   __EXPORT__ uninitializedIsr
   68                           uninitializedIsr:
   69    0000000C FFE7                  b.n fault
   70                           
   71                           
   72                           //--------------------------------------------
                                ----------------------------------
   73                           // Common fault handler prolog processing
   74                           //
   75                           //   determines which of the three possible
                                 EXC_RETURN values is in lr,
   76                           //   then uses lr to save processor registers
                                 r0-r12 to the crash info area
   77                           //
   78                           //   restores lr's value, and then saves lr,
                                 msp and psp to the crash info area
   79                           //
   80                           //   checks the stack pointer to see if it is
                                 valid and won't overwrite the crash
   81                           //   info area - if needed, resets the stack
                                 pointer to the top of the stack
   82                           //   
   83                           //   calls halInternalCrashHandler() to
                                 continue saving crash data. This 
   84                           //   C function can finish crash processing
                                 without risking further faults.
   85                           //   It returns the fault reason, and this is
                                 passed to halInternalSysReset() 
   86                           //   that forces a processor reset.
   87                           //
   88                           //--------------------------------------------
                                ----------------------------------
   89                           
   90                                   __EXPORT__ fault
   91                           fault:
   92    0000000E 72B6                  cpsid   i               // in case the
                                                 fault priority is low
   93    00000010 1EF0080F              tst     lr, #8          // test
                                                 EXC_RETURN for handler vs
                                                 thread mode
   94    00000014 08D0                  beq.n   fault_handler_msp
   95    00000016 1EF0040F              tst     lr, #4          // thread mode:
                                                 test for msp versus psp
   96    0000001A 0BD0                  beq.n   fault_thread_msp
   97                           
   98                           fault_thread_psp:
   99    0000001C DFF848E0              ldr     lr, =__BEGIN_RESETINFO__(4)
  100    00000020 AEE8FF1F              stmia.w lr!, {r0-r12}
  101    00000024 1148                  ldr     r0, =EXC_RETURN_THREAD_PSP
  102    00000026 0AE0                  b.n     fault_continue
  103                           
  104                           fault_handler_msp:
  105    00000028 DFF83CE0              ldr     lr, =__BEGIN_RESETINFO__(4)
  106    0000002C AEE8FF1F              stmia.w lr!, {r0-r12}
  107    00000030 0F48                  ldr     r0, =EXC_RETURN_HANDLER_MSP
  108    00000032 04E0                  b.n     fault_continue
  109                           
  110                           fault_thread_msp:
  111    00000034 DFF830E0              ldr     lr, =__BEGIN_RESETINFO__(4)
  112    00000038 AEE8FF1F              stmia.w lr!, {r0-r12}
  113    0000003C 0D48                  ldr     r0, =EXC_RETURN_THREAD_MSP
  114                           //        b.n     fault_continue
  115                           
  116                           fault_continue:
  117    0000003E 6946                  mov     r1, sp
  118    00000040 EFF30982              mrs     r2, PSP
  119    00000044 8EE80700              stm     lr, {r0-r2}     // save lr, msp
                                                 and psp
  120    00000048 8646                  mov     lr, r0          // restore
                                                 lr
  121                           
  122                           fault_check_sp:
  123                                   //  make sure that the current stack
                                 pointer is within the minimum region
  124                                   //  that must be occupied by the stack
                                 and that there is some headroom
  125                                   //  for the crash handler's stack.
  126    0000004A 0B48                  ldr     r0, =__BEGIN_STACK__(CRASH_STAC
                                                K_SIZE)
  127    0000004C 0B4C                  ldr     r4, =__END_STACK__(0)
  128    0000004E 8545                  cmp     sp, r0
  129    00000050 01D3                  blo.n   fault_fix_sp
  130                                   // compare to make sure SP otherwise
                                 looks valid
  131    00000052 A545                  cmp     sp, r4
  132    00000054 01D3                  blo.n   fault_sp_okay
  133                           fault_fix_sp:
  134    00000056 84F30888              msr     msp, r4
  135                           fault_sp_okay:
  136    0000005A ........              bl.w    halInternalCrashHandler //
                                            saves rest of data, returns
                                            reason
  137    0000005E 84F30888              msr     msp, r4                 // set
                                                 sp to top of stack segment
  138    00000062 ........              bl.w    halInternalSysReset     // call
                                            with reset reason in R0    
                                            
  139                           
  140                                   __END__
  140.1  00000066 0000                   TABLE
  140.2  00000068 ........              Reference on line 99,105,111 
  140.3  0000006C FDFFFFFF              Reference on line 101 
  140.4  00000070 F1FFFFFF              Reference on line 107 
  140.5  00000074 F9FFFFFF              Reference on line 113 
  140.6  00000078 ........              Reference on line 126 
  140.7  0000007C ........              Reference on line 127 
  140.8                                 END (including table)
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 128         #
##############################



