###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:20 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\call-command-handler.c                            #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\call-command-handler.c -D                         #
#                    "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_SM6011/ #
#                    DoorSensor_SM6011_tokens.h\"" -D                         #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"call-command-handler.c\"" -lC       #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\a #
#                    pp\builder\DoorSensor_SM6011\..\..\..\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \call-command-handler.lst                                #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \call-command-handler.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_SM6011\call-command-handler.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This is a set of generated functions that parse the
      6          // the incomming message, and call appropriate command handler.
      7          
      8          
      9          
     10          #include PLATFORM_HEADER
     11          #ifdef EZSP_HOST
     12          // Includes needed for ember related functions for the EZSP host
     13          #include "stack/include/error.h"
     14          #include "stack/include/ember-types.h"
     15          #include "app/util/ezsp/ezsp-protocol.h"
     16          #include "app/util/ezsp/ezsp.h"
     17          #include "app/util/ezsp/ezsp-utils.h"
     18          #include "app/util/ezsp/serial-interface.h"
     19          #else
     20          // Includes needed for ember related functions for the EM250
     21          #include "stack/include/ember.h"
     22          #endif // EZSP_HOST
     23          
     24          #include "app/framework/util/util.h"
     25          #include "af-structs.h"
     26          #include "call-command-handler.h"
     27          #include "command-id.h"
     28          #include "callback.h"
     29          
     30          static EmberAfStatus status(boolean wasHandled, boolean mfgSpecific)
     31          {
     32            if (wasHandled) {
     33              return EMBER_ZCL_STATUS_SUCCESS;
     34            } else if (mfgSpecific) {
     35              return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
     36            } else {
     37              return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
     38            }
     39          }
     40          
     41          // Main command parsing controller.

   \                                 In section .text, align 2, keep-with-next
     42          EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand *cmd)
     43          {
   \                     emberAfClusterSpecificCommandParse:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     44            if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER
     45                && emberAfContainsServer(cmd->apsFrame->destinationEndpoint,
     46                                         cmd->apsFrame->clusterId)) {
   \   00000004   0x7D60             LDRB     R0,[R4, #+21]
   \   00000006   0xB9A8             CBNZ.N   R0,??emberAfClusterSpecificCommandParse_0
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x8841             LDRH     R1,[R0, #+2]
   \   0000000C   0x7940             LDRB     R0,[R0, #+5]
   \   0000000E   0x.... 0x....      BL       emberAfContainsServer
   \   00000012   0xB178             CBZ.N    R0,??emberAfClusterSpecificCommandParse_0
     47              switch (cmd->apsFrame->clusterId) {
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x8840             LDRH     R0,[R0, #+2]
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD003             BEQ.N    ??emberAfClusterSpecificCommandParse_1
   \   0000001C   0xF5B0 0x6FA0      CMP      R0,#+1280
   \   00000020   0xD004             BEQ.N    ??emberAfClusterSpecificCommandParse_2
   \   00000022   0xE007             B.N      ??emberAfClusterSpecificCommandParse_0
     48              case ZCL_IDENTIFY_CLUSTER_ID:
     49                return emberAfIdentifyClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_1:
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x....             B.N      emberAfIdentifyClusterServerCommandParse
     50              case ZCL_IAS_ZONE_CLUSTER_ID:
     51                return emberAfIasZoneClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_2:
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000032   0x....             B.N      emberAfIasZoneClusterServerCommandParse
     52              }
     53            }
     54            return status(FALSE, cmd->mfgSpecific);
   \                     ??emberAfClusterSpecificCommandParse_0:
   \   00000034   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000036   0xB108             CBZ.N    R0,??emberAfClusterSpecificCommandParse_3
   \   00000038   0x2083             MOVS     R0,#+131
   \   0000003A   0xBD10             POP      {R4,PC}
   \                     ??emberAfClusterSpecificCommandParse_3:
   \   0000003C   0x2081             MOVS     R0,#+129
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
     55          }
     56          
     57          // Cluster: Identify, server

   \                                 In section .text, align 2, keep-with-next
     58          EmberAfStatus emberAfIdentifyClusterServerCommandParse(EmberAfClusterCommand *cmd)
     59          {
   \                     emberAfIdentifyClusterServerCommandParse:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     60            boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
     61            if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0xB9A9             CBNZ.N   R1,??emberAfIdentifyClusterServerCommandParse_0
     62              switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0xB121             CBZ.N    R1,??emberAfIdentifyClusterServerCommandParse_1
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xBF08             IT       EQ 
   \   00000012   0x.... 0x....      BLEQ     emberAfIdentifyClusterIdentifyQueryCallback
   \   00000016   0xE00B             B.N      ??emberAfIdentifyClusterServerCommandParse_2
     63              case ZCL_IDENTIFY_COMMAND_ID:
     64                {
     65                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfIdentifyClusterServerCommandParse_1:
   \   00000018   0x7D21             LDRB     R1,[R4, #+20]
     66                  int16u identifyTime;  // Ver.: always
     67                  // Command is fixed length: 2
     68                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001A   0x89A2             LDRH     R2,[R4, #+12]
   \   0000001C   0x1C88             ADDS     R0,R1,#+2
   \   0000001E   0x4282             CMP      R2,R0
   \   00000020   0xDA01             BGE.N    ??emberAfIdentifyClusterServerCommandParse_3
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0xBD10             POP      {R4,PC}
     69                  identifyTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfIdentifyClusterServerCommandParse_3:
   \   00000026   0x68A0             LDR      R0,[R4, #+8]
   \   00000028   0x.... 0x....      BL       emberAfGetInt16u
     70                  wasHandled = emberAfIdentifyClusterIdentifyCallback(identifyTime);
   \   0000002C   0x.... 0x....      BL       emberAfIdentifyClusterIdentifyCallback
     71                  break;
     72                }
     73              case ZCL_IDENTIFY_QUERY_COMMAND_ID:
     74                {
     75                  // Command is fixed length: 0
     76                  wasHandled = emberAfIdentifyClusterIdentifyQueryCallback();
     77                  break;
     78                }
     79              }
     80            }
     81            return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterServerCommandParse_2:
   \   00000030   0xB108             CBZ.N    R0,??emberAfIdentifyClusterServerCommandParse_0
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD10             POP      {R4,PC}
   \                     ??emberAfIdentifyClusterServerCommandParse_0:
   \   00000036   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000038   0xB108             CBZ.N    R0,??emberAfIdentifyClusterServerCommandParse_4
   \   0000003A   0x2083             MOVS     R0,#+131
   \   0000003C   0xBD10             POP      {R4,PC}
   \                     ??emberAfIdentifyClusterServerCommandParse_4:
   \   0000003E   0x2081             MOVS     R0,#+129
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     82          }
     83          
     84          // Cluster: IAS Zone, server

   \                                 In section .text, align 2, keep-with-next
     85          EmberAfStatus emberAfIasZoneClusterServerCommandParse(EmberAfClusterCommand *cmd)
     86          {
   \                     emberAfIasZoneClusterServerCommandParse:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     87            boolean wasHandled = FALSE;
     88            if (!cmd->mfgSpecific) {
   \   00000004   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000006   0xB990             CBNZ.N   R0,??emberAfIasZoneClusterServerCommandParse_0
     89              switch (cmd->commandId) {
   \   00000008   0x7CE0             LDRB     R0,[R4, #+19]
   \   0000000A   0xB9A0             CBNZ.N   R0,??emberAfIasZoneClusterServerCommandParse_1
     90              case ZCL_ZONE_ENROLL_RESPONSE_COMMAND_ID:
     91                {
     92                  int16u payloadOffset = cmd->payloadStartIndex;
   \   0000000C   0x7D20             LDRB     R0,[R4, #+20]
     93                  int8u enrollResponseCode;  // Ver.: always
     94                  int8u zoneId;  // Ver.: always
     95                  // Command is fixed length: 2
     96                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000000E   0x89A1             LDRH     R1,[R4, #+12]
   \   00000010   0x1C82             ADDS     R2,R0,#+2
   \   00000012   0x4291             CMP      R1,R2
   \   00000014   0xDA01             BGE.N    ??emberAfIasZoneClusterServerCommandParse_2
   \   00000016   0x2080             MOVS     R0,#+128
   \   00000018   0xBD10             POP      {R4,PC}
     97                  enrollResponseCode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
     98                  payloadOffset += 1;
     99                  zoneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    100                  wasHandled = emberAfIasZoneClusterZoneEnrollResponseCallback(enrollResponseCode,
    101                                                                               zoneId);
    102                  break;
    103                }
    104              }
    105            }
    106            return status(wasHandled, cmd->mfgSpecific);
   \                     ??emberAfIasZoneClusterServerCommandParse_2:
   \   0000001A   0x68A2             LDR      R2,[R4, #+8]
   \   0000001C   0x1C41             ADDS     R1,R0,#+1
   \   0000001E   0xB289             UXTH     R1,R1
   \   00000020   0x5C89             LDRB     R1,[R1, R2]
   \   00000022   0x5C80             LDRB     R0,[R0, R2]
   \   00000024   0x.... 0x....      BL       emberAfIasZoneClusterZoneEnrollResponseCallback
   \   00000028   0xB108             CBZ.N    R0,??emberAfIasZoneClusterServerCommandParse_0
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD10             POP      {R4,PC}
   \                     ??emberAfIasZoneClusterServerCommandParse_0:
   \   0000002E   0x7BE0             LDRB     R0,[R4, #+15]
   \   00000030   0xB108             CBZ.N    R0,??emberAfIasZoneClusterServerCommandParse_1
   \   00000032   0x2083             MOVS     R0,#+131
   \   00000034   0xBD10             POP      {R4,PC}
   \                     ??emberAfIasZoneClusterServerCommandParse_1:
   \   00000036   0x2081             MOVS     R0,#+129
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    107          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  emberAfClusterSpecificCommandParse
             8 -> emberAfContainsServer
             0 -> emberAfIasZoneClusterServerCommandParse
             0 -> emberAfIdentifyClusterServerCommandParse
        8  emberAfIasZoneClusterServerCommandParse
             8 -> emberAfIasZoneClusterZoneEnrollResponseCallback
        8  emberAfIdentifyClusterServerCommandParse
             8 -> emberAfGetInt16u
             8 -> emberAfIdentifyClusterIdentifyCallback
             8 -> emberAfIdentifyClusterIdentifyQueryCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      64  emberAfClusterSpecificCommandParse
      58  emberAfIasZoneClusterServerCommandParse
      66  emberAfIdentifyClusterServerCommandParse

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
