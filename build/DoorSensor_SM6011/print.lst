###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:17 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\prin #
#                    t.c                                                      #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\prin #
#                    t.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_ #
#                    SM6011/DoorSensor_SM6011_tokens.h\"" -D                  #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"print.c\"" -lC                      #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \print.lst                                               #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \print.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\util\print.c
      1          // *******************************************************************
      2          // * print.c
      3          // *
      4          // * Utilities and command line interface for printing, and enabling/disabling
      5          // * printing to different areas.
      6          // *
      7          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      8          // *******************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          
     12          //------------------------------------------------------------------------------
     13          // Globals
     14          
     15          // Enable this if you want area names printed. It proved annoying
     16          // so we're disabling it here.
     17          //#define EMBER_AF_PRINT_AREA_NAME
     18          
     19          #ifdef EMBER_AF_PRINT_AREA_NAME
     20            static void reallyPrintAreaName(int16u area);
     21            #define printAreaName(area) reallyPrintAreaName(area)
     22          #else
     23            #define printAreaName(area)
     24          #endif //EMBER_AF_PRINT_AREA_NAME
     25          
     26          #ifdef EMBER_AF_PRINT_NAMES

   \                                 In section .data, align 4
     27          static PGM_P areaNames[] = EMBER_AF_PRINT_NAMES;
   \                     areaNames:
   \   00000000   0x........         DC32 `?<Constant "Core">`, `?<Constant "Debug">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "Application">`, `?<Constant "Security">`
   \              0x........   
   \   00000010   0x........         DC32 `?<Constant "Attributes">`, `?<Constant "Reporting">`
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "Service discovery">`, `?<Constant "Registration">`
   \              0x........   
   \   00000020   0x........         DC32 `?<Constant "ZDO (ZigBee Device Ob...">`
   \   00000024   0x........         DC32 `?<Constant "Custom messages (1)">`
   \   00000028   0x........         DC32 `?<Constant "Custom messages (2)">`
   \   0000002C   0x........         DC32 `?<Constant "Custom messages (3)">`, `?<Constant "Basic">`
   \              0x........   
   \   00000034   0x........         DC32 `?<Constant "Identify">`, `?<Constant "Over the Air Bootloading">`
   \              0x........   
   \   0000003C   0x........         DC32 `?<Constant "IAS Zone">`, 0H
   \              0x00000000   
     28          #endif
     29          
     30          #ifdef EMBER_AF_PRINT_BITS

   \                                 In section .data, align 2
     31          static int8u enablementBytes[] = EMBER_AF_PRINT_BITS;
   \                     enablementBytes:
   \   00000000   0xFD 0xFF          DC8 253, 255
     32          #endif
     33          

   \                                 In section .bss, align 2
     34          int16u emberAfPrintActiveArea = 0;
   \                     emberAfPrintActiveArea:
   \   00000000                      DS8 2
     35          
     36          //------------------------------------------------------------------------------
     37          
     38          // Returns true if the area print is enabled

   \                                 In section .text, align 2, keep-with-next
     39          boolean emberAfPrintEnabled(int16u area) 
     40          {
     41          #ifndef EMBER_AF_PRINT_BITS
     42            return FALSE;
     43          #else 
     44            int8u index = (int8u)(area >> 8);
   \                     emberAfPrintEnabled:
   \   00000000   0x0A01             LSRS     R1,R0,#+8
     45            if ( area == 0xFFFF ) {
   \   00000002   0xF64F 0x72FF      MOVW     R2,#+65535
   \   00000006   0x4290             CMP      R0,R2
   \   00000008   0xD007             BEQ.N    ??emberAfPrintEnabled_0
     46              return TRUE;
     47            }
     48            if ( index >= sizeof(enablementBytes) ) {
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xD301             BCC.N    ??emberAfPrintEnabled_1
     49              return FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4770             BX       LR
     50            } else {
     51              int8u byte = enablementBytes[index];
     52              return ( ( byte & (int8u)(area & 0xFF) ) != 0x00 );
   \                     ??emberAfPrintEnabled_1:
   \   00000012   0x....             LDR.N    R2,??DataTable24_3
   \   00000014   0x5C89             LDRB     R1,[R1, R2]
   \   00000016   0x4008             ANDS     R0,R0,R1
   \   00000018   0xD000             BEQ.N    ??emberAfPrintEnabled_2
   \                     ??emberAfPrintEnabled_0:
   \   0000001A   0x2001             MOVS     R0,#+1
   \                     ??emberAfPrintEnabled_2:
   \   0000001C   0x4770             BX       LR               ;; return
     53            }
     54          #endif // EMBER_AF_PRINT_BITS
     55          }
     56          

   \                                 In section .text, align 2, keep-with-next
     57          static void printEnable(int16u area, boolean on) 
     58          {
     59          #ifdef EMBER_AF_PRINT_BITS
     60            int8u index = (int8u)(area >> 8);
   \                     printEnable:
   \   00000000   0x0A02             LSRS     R2,R0,#+8
     61            if ( index < sizeof(enablementBytes) ) {
   \   00000002   0x2A02             CMP      R2,#+2
   \   00000004   0xD300             BCC.N    ??printEnable_0
     62              if ( on ) {
   \   00000006   0x4770             BX       LR
   \                     ??printEnable_0:
   \   00000008   0xB510             PUSH     {R4,LR}
   \   0000000A   0x....             LDR.N    R3,??DataTable24_3
   \   0000000C   0x5CD4             LDRB     R4,[R2, R3]
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xBF14             ITE      NE 
   \   00000012   0x4320             ORRNE    R0,R0,R4
   \   00000014   0xEA24 0x0000      BICEQ    R0,R4,R0
     63                enablementBytes[index] |= (int8u)(area & 0xFF);
     64              } else {
     65                enablementBytes[index] &= ~(int8u)(area & 0xFF);
   \   00000018   0x54D0             STRB     R0,[R2, R3]
     66              }
     67            }
     68          #endif // EMBER_AF_PRINT_BITS
     69          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     70          

   \                                 In section .text, align 2, keep-with-next
     71          static int16u convertUserNumberAreaToInternalArea(int16u userNumberedArea)
     72          {
     73            int16u index = userNumberedArea / 8;
     74            index = (int16u)(index << 8 ) 
     75              + (int16u)( ((int16u)0x0001) << ( userNumberedArea % 8 ) );
     76            return index;
   \                     convertUserNumberAreaToInternalArea:
   \   00000000   0x08C1             LSRS     R1,R0,#+3
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0xF000 0x0007      AND      R0,R0,#0x7
   \   00000008   0xFA02 0xF000      LSL      R0,R2,R0
   \   0000000C   0xEB00 0x2001      ADD      R0,R0,R1, LSL #+8
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0x4770             BX       LR               ;; return
     77          }
     78          
     79          #if defined EMBER_AF_PRINT_AREA_NAME
     80          static void reallyPrintAreaName(int16u area)
     81          {
     82          #ifdef EMBER_AF_PRINT_NAMES
     83            int8u hi,lo,count;
     84            int16u index;
     85          
     86            hi = (int8u)(area >> 8);
     87            lo = (int8u)(area & 0xFF);
     88            count = 0;
     89            
     90            if ( lo != 0 ) {
     91              while ( !(lo & 0x01) ) {
     92                lo >>= 1;
     93                count++;
     94              }
     95            }
     96            index = ((8 * hi) + count);
     97          
     98            if (area != 0xFFFF 
     99                && index < EMBER_AF_PRINT_NAME_NUMBER) {
    100              emberSerialPrintf(EMBER_AF_PRINT_OUTPUT, "%p:", areaNames[index]);
    101            }
    102          #endif // EMBER_AF_PRINT_NAMES
    103          }
    104          #endif //EMBER_AF_PRINT_AREA_NAME
    105          
    106          // Prints the trace if trace is enabled

   \                                 In section .text, align 2, keep-with-next
    107          static void emAfPrintInternalVarArg(int16u area, 
    108                                              boolean newLine, 
    109                                              PGM_P formatString, 
    110                                              va_list ap) {
   \                     emAfPrintInternalVarArg:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    111            if ( !emberAfPrintEnabled(area) ) {
   \   0000000A   0x.... 0x....      BL       emberAfPrintEnabled
   \   0000000E   0xB158             CBZ.N    R0,??emAfPrintInternalVarArg_0
    112              return;
    113            }
    114            printAreaName(area);
    115          
    116            emberSerialPrintfVarArg(EMBER_AF_PRINT_OUTPUT, formatString, ap);
   \   00000010   0x463A             MOV      R2,R7
   \   00000012   0x4631             MOV      R1,R6
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       emberSerialPrintfVarArg
    117          
    118            if (newLine) {
   \   0000001A   0xB11D             CBZ.N    R5,??emAfPrintInternalVarArg_1
    119              emberSerialPrintf(EMBER_AF_PRINT_OUTPUT, "\r\n");
   \   0000001C   0x....             ADR.N    R1,??DataTable24  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       emberSerialPrintf
    120            }
    121            emberAfPrintActiveArea = area;
   \                     ??emAfPrintInternalVarArg_1:
   \   00000024   0x....             LDR.N    R0,??DataTable24_4
   \   00000026   0x8004             STRH     R4,[R0, #+0]
    122          }
   \                     ??emAfPrintInternalVarArg_0:
   \   00000028   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    123          

   \                                 In section .text, align 2, keep-with-next
    124          void emberAfFlush(int16u area) 
    125          {
   \                     emberAfFlush:
   \   00000000   0xB580             PUSH     {R7,LR}
    126            if ( emberAfPrintEnabled(area) ) {
   \   00000002   0x.... 0x....      BL       emberAfPrintEnabled
   \   00000006   0xB120             CBZ.N    R0,??emberAfFlush_0
    127              emberSerialWaitSend(EMBER_AF_PRINT_OUTPUT);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000E   0x.... 0x....      B.W      emberSerialWaitSend
    128            }
    129          }
   \                     ??emberAfFlush_0:
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void emberAfPrintln(int16u area, PGM_P formatString, ...) 
    132          {
   \                     emberAfPrintln:
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    133            va_list ap;
    134            va_start (ap, formatString);
   \   00000004   0xAB02             ADD      R3,SP,#+8
    135            emAfPrintInternalVarArg(area, TRUE, formatString, ap);
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             B.N      ?Subroutine0
    136            va_end(ap);
    137          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      BL       emAfPrintInternalVarArg
   \   00000004   0xBC01             POP      {R0}
   \   00000006   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void emberAfPrint(int16u area, PGM_P formatString, ...) 
    140          {
   \                     emberAfPrint:
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB580             PUSH     {R7,LR}
    141            va_list ap;
    142            va_start (ap, formatString);
   \   00000004   0xAB02             ADD      R3,SP,#+8
    143            emAfPrintInternalVarArg(area, FALSE, formatString, ap);
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A                      REQUIRE ?Subroutine0
   \   0000000A                      ;; // Fall through to label ?Subroutine0
    144            va_end(ap);
    145          }
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void emberAfPrintStatus(void)
    148          {
   \                     emberAfPrintStatus:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    149          #ifdef EMBER_AF_PRINT_NAMES
    150            int8u i;
    151            for (i = 0; i < EMBER_AF_PRINT_NAME_NUMBER; i++) {
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x.... 0x....      ADR.W    R5,`?<Constant "[%d] %p : %p">`
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable24_5
   \   00000010   0x....             ADR.N    R7,??DataTable24_1  ;; 0x6E, 0x6F, 0x00, 0x00
   \   00000012   0x....             ADR.N    R6,??DataTable24_2  ;; "YES"
    152              emberSerialPrintfLine(EMBER_AF_PRINT_OUTPUT, "[%d] %p : %p",
    153                                    i,
    154                                    areaNames[i],
    155                                    (emberAfPrintEnabled(
    156                                      convertUserNumberAreaToInternalArea(i)) 
    157                                     ? "YES" 
    158                                     : "no"));
   \                     ??emberAfPrintStatus_0:
   \   00000014   0xB2E0             UXTB     R0,R4
   \   00000016   0x.... 0x....      BL       convertUserNumberAreaToInternalArea
   \   0000001A   0x.... 0x....      BL       emberAfPrintEnabled
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xBF14             ITE      NE 
   \   00000022   0x4630             MOVNE    R0,R6
   \   00000024   0x4638             MOVEQ    R0,R7
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0xF858 0x3024      LDR      R3,[R8, R4, LSL #+2]
   \   0000002C   0x4622             MOV      R2,R4
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       emberSerialPrintfLine
    159              emberSerialWaitSend(EMBER_AF_PRINT_OUTPUT);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       emberSerialWaitSend
    160            }
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0x2C10             CMP      R4,#+16
   \   00000040   0xDBE8             BLT.N    ??emberAfPrintStatus_0
    161          #endif // EMBER_AF_PRINT_NAMES
    162          }
   \   00000042   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void emberAfPrintAllOn(void)
    165          {
    166          #ifdef EMBER_AF_PRINT_BITS
    167            MEMSET(enablementBytes, 0xFF, sizeof(enablementBytes));
   \                     emberAfPrintAllOn:
   \   00000000   0x2202             MOVS     R2,#+2
   \   00000002   0x21FF             MOVS     R1,#+255
   \   00000004   0x....             B.N      ?Subroutine1
    168          #endif
    169          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x....             LDR.N    R0,??DataTable24_3
   \   00000002   0x.... 0x....      B.W      halCommonMemSet
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void emberAfPrintAllOff(void) 
    172          {
    173          #ifdef EMBER_AF_PRINT_BITS
    174            MEMSET(enablementBytes, 0x00, sizeof(enablementBytes));
   \                     emberAfPrintAllOff:
   \   00000000   0x2202             MOVS     R2,#+2
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004                      REQUIRE ?Subroutine1
   \   00000004                      ;; // Fall through to label ?Subroutine1
    175          #endif
    176          }
    177          
    178          // These are CLI functions where a user will supply a sequential numbered
    179          // area; as opposed to the bitmask area number that we keep track
    180          // of internally.
    181          

   \                                 In section .text, align 2, keep-with-next
    182          void emberAfPrintOn(int16u userArea) 
    183          {
   \                     emberAfPrintOn:
   \   00000000   0xB580             PUSH     {R7,LR}
    184            printEnable(convertUserNumberAreaToInternalArea(userArea), 
    185                        TRUE);   // enable?
   \   00000002   0x.... 0x....      BL       convertUserNumberAreaToInternalArea
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x....             B.N      ?Subroutine2
    186          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0xE8BD 0x4004      POP      {R2,LR}
   \   00000004   0x....             B.N      printEnable
    187          

   \                                 In section .text, align 2, keep-with-next
    188          void emberAfPrintOff(int16u userArea) 
    189          {
   \                     emberAfPrintOff:
   \   00000000   0xB580             PUSH     {R7,LR}
    190            printEnable(convertUserNumberAreaToInternalArea(userArea), 
    191                        FALSE);  // enable?
   \   00000002   0x.... 0x....      BL       convertUserNumberAreaToInternalArea
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008                      REQUIRE ?Subroutine2
   \   00000008                      ;; // Fall through to label ?Subroutine2
    192          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x6E 0x6F          DC8      0x6E, 0x6F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x59 0x45          DC8      "YES"
   \              0x53 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x........         DC32     enablementBytes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     emberAfPrintActiveArea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x........         DC32     areaNames

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Core">`:
   \   00000000   0x43 0x6F          DC8 "Core"
   \              0x72 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Debug">`:
   \   00000000   0x44 0x65          DC8 "Debug"
   \              0x62 0x75    
   \              0x67 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Application">`:
   \   00000000   0x41 0x70          DC8 "Application"
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Security">`:
   \   00000000   0x53 0x65          DC8 "Security"
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Attributes">`:
   \   00000000   0x41 0x74          DC8 "Attributes"
   \              0x74 0x72    
   \              0x69 0x62    
   \              0x75 0x74    
   \              0x65 0x73    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Reporting">`:
   \   00000000   0x52 0x65          DC8 "Reporting"
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Service discovery">`:
   \   00000000   0x53 0x65          DC8 "Service discovery"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x64 0x69    
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x79 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Registration">`:
   \   00000000   0x52 0x65          DC8 "Registration"
   \              0x67 0x69    
   \              0x73 0x74    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ZDO (ZigBee Device Ob...">`:
   \   00000000   0x5A 0x44          DC8 "ZDO (ZigBee Device Object)"
   \              0x4F 0x20    
   \              0x28 0x5A    
   \              0x69 0x67    
   \              0x42 0x65    
   \              0x65 0x20    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x4F    
   \              0x62 0x6A    
   \              0x65 0x63    
   \              0x74 0x29    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Custom messages (1)">`:
   \   00000000   0x43 0x75          DC8 "Custom messages (1)"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x73 0x20    
   \              0x28 0x31    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Custom messages (2)">`:
   \   00000000   0x43 0x75          DC8 "Custom messages (2)"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x73 0x20    
   \              0x28 0x32    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Custom messages (3)">`:
   \   00000000   0x43 0x75          DC8 "Custom messages (3)"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x73 0x20    
   \              0x28 0x33    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Basic">`:
   \   00000000   0x42 0x61          DC8 "Basic"
   \              0x73 0x69    
   \              0x63 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Identify">`:
   \   00000000   0x49 0x64          DC8 "Identify"
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Over the Air Bootloading">`:
   \   00000000   0x4F 0x76          DC8 "Over the Air Bootloading"
   \              0x65 0x72    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x41    
   \              0x69 0x72    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x6C    
   \              0x6F 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IAS Zone">`:
   \   00000000   0x49 0x41          DC8 "IAS Zone"
   \              0x53 0x20    
   \              0x5A 0x6F    
   \              0x6E 0x65    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[%d] %p : %p">`:
   \   00000000   0x5B 0x25          DC8 "[%d] %p : %p"
   \              0x64 0x5D    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "YES">`:
   \   00000000   0x59 0x45          DC8 "YES"
   \              0x53 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "no">`:
   \   00000000   0x6E 0x6F          DC8 "no"
   \              0x00         
   \   00000003   0x00               DC8 0
    193          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  convertUserNumberAreaToInternalArea
       24  emAfPrintInternalVarArg
             24 -> emberAfPrintEnabled
             24 -> emberSerialPrintf
             24 -> emberSerialPrintfVarArg
        8  emberAfFlush
              8 -> emberAfPrintEnabled
              0 -> emberSerialWaitSend
       16  emberAfPrint
             16 -> emAfPrintInternalVarArg
        0  emberAfPrintAllOff
              0 -> halCommonMemSet
        0  emberAfPrintAllOn
              0 -> halCommonMemSet
        0  emberAfPrintEnabled
        8  emberAfPrintOff
              8 -> convertUserNumberAreaToInternalArea
              0 -> printEnable
        8  emberAfPrintOn
              8 -> convertUserNumberAreaToInternalArea
              0 -> printEnable
       32  emberAfPrintStatus
             32 -> convertUserNumberAreaToInternalArea
             32 -> emberAfPrintEnabled
             32 -> emberSerialPrintfLine
             32 -> emberSerialWaitSend
       16  emberAfPrintln
             16 -> emAfPrintInternalVarArg
        8  printEnable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "Application">
      12  ?<Constant "Attributes">
       8  ?<Constant "Basic">
       8  ?<Constant "Core">
      20  ?<Constant "Custom messages (1)">
      20  ?<Constant "Custom messages (2)">
      20  ?<Constant "Custom messages (3)">
       8  ?<Constant "Debug">
      12  ?<Constant "IAS Zone">
      12  ?<Constant "Identify">
      28  ?<Constant "Over the Air Bootloading">
      16  ?<Constant "Registration">
      12  ?<Constant "Reporting">
      12  ?<Constant "Security">
      20  ?<Constant "Service discovery">
       4  ?<Constant "YES">
      28  ?<Constant "ZDO (ZigBee Device Ob...">
      16  ?<Constant "[%d] %p : %p">
       4  ?<Constant "\r\n">
       4  ?<Constant "no">
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
      10  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
      68  areaNames
      20  convertUserNumberAreaToInternalArea
      42  emAfPrintInternalVarArg
      20  emberAfFlush
      10  emberAfPrint
       2  emberAfPrintActiveArea
       4  emberAfPrintAllOff
       6  emberAfPrintAllOn
      30  emberAfPrintEnabled
       8  emberAfPrintOff
      10  emberAfPrintOn
      70  emberAfPrintStatus
      12  emberAfPrintln
       2  enablementBytes
      28  printEnable

 
   2 bytes in section .bss
  70 bytes in section .data
 260 bytes in section .rodata
 322 bytes in section .text
 
 322 bytes of CODE  memory
 260 bytes of CONST memory
  72 bytes of DATA  memory

Errors: none
Warnings: none
