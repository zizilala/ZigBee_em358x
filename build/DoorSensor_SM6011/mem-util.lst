###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:38:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\mem-u #
#                    til.c                                                    #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\mem-u #
#                    til.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSenso #
#                    r_SM6011/DoorSensor_SM6011_tokens.h\"" -D                #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"mem-util.c\"" -lC                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\ -I   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \mem-util.lst                                            #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \mem-util.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\mem-util.c
      1          /*
      2           * File: hal/micro/generic/mem-util.c
      3           * Description: generic memory manipulation routines.
      4           *
      5           * Author(s): Lee Taylor, lee@ember.com,
      6           *            Jeff Mathews, jm@ember.com
      7           *
      8           * Copyright 2004 by Ember Corporation. All rights reserved.                *80*
      9           */
     10          
     11          #include PLATFORM_HEADER
     12          #include "stack/include/ember-types.h"
     13          #include "include/error.h"
     14          
     15          #include "hal/hal.h"
     16          
     17          #if !defined(XAP2B) && !defined(UNIX)
     18          // A version of memcopy that can handle overlapping source and
     19          // destination regions.
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void halCommonMemCopy(void *dest, const void *src, int16u bytes)
     22          {
     23            int8u *d = (int8u *)dest;
     24            int8u *s = (int8u *)src;
     25          
     26            if (d > s) {
   \                     halCommonMemCopy:
   \   00000000   0x4281             CMP      R1,R0
   \   00000002   0xD233             BCS.N    ??halCommonMemCopy_0
     27              d += bytes - 1;
   \   00000004   0x1810             ADDS     R0,R2,R0
   \   00000006   0x1E40             SUBS     R0,R0,#+1
     28              s += bytes - 1;
   \   00000008   0x1851             ADDS     R1,R2,R1
   \   0000000A   0x1E49             SUBS     R1,R1,#+1
   \   0000000C   0xE010             B.N      ??halCommonMemCopy_1
     29              #ifndef _HAL_SMALL_MEMUTILS_
     30                while(bytes >= 4) {
     31                  bytes -= 4;
   \                     ??halCommonMemCopy_2:
   \   0000000E   0x1F12             SUBS     R2,R2,#+4
     32                  *d-- = *s--;
   \   00000010   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   00000014   0xF800 0x3901      STRB     R3,[R0], #-1
     33                  *d-- = *s--;
   \   00000018   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   0000001C   0xF800 0x3901      STRB     R3,[R0], #-1
     34                  *d-- = *s--;
   \   00000020   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   00000024   0xF800 0x3901      STRB     R3,[R0], #-1
     35                  *d-- = *s--;
   \   00000028   0xF811 0x3901      LDRB     R3,[R1], #-1
   \   0000002C   0xF800 0x3901      STRB     R3,[R0], #-1
     36                }
   \                     ??halCommonMemCopy_1:
   \   00000030   0xB292             UXTH     R2,R2
   \   00000032   0x2A04             CMP      R2,#+4
   \   00000034   0xD2EB             BCS.N    ??halCommonMemCopy_2
     37              #endif // _HAL_SMALL_MEMUTILS_
     38              for(; bytes; bytes--) {
   \                     ??halCommonMemCopy_3:
   \   00000036   0xB292             UXTH     R2,R2
   \   00000038   0x2A00             CMP      R2,#+0
   \   0000003A   0xBF1E             ITTT     NE 
   \   0000003C   0xF811 0x3901      LDRBNE   R3,[R1], #-1
   \   00000040   0xF800 0x3901      STRBNE   R3,[R0], #-1
   \   00000044   0x1E52             SUBNE    R2,R2,#+1
     39                *d-- = *s--;
   \   00000046   0xD1F6             BNE.N    ??halCommonMemCopy_3
   \   00000048   0x4770             BX       LR
     40              }
     41            } else {
     42              #ifndef _HAL_SMALL_MEMUTILS_
     43                while(bytes >= 4) {
     44                  bytes -= 4;
   \                     ??halCommonMemCopy_4:
   \   0000004A   0x1F12             SUBS     R2,R2,#+4
     45                  *d++ = *s++;
   \   0000004C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000050   0xF800 0x3B01      STRB     R3,[R0], #+1
     46                  *d++ = *s++;
   \   00000054   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000058   0xF800 0x3B01      STRB     R3,[R0], #+1
     47                  *d++ = *s++;
   \   0000005C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000060   0xF800 0x3B01      STRB     R3,[R0], #+1
     48                  *d++ = *s++;
   \   00000064   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000068   0xF800 0x3B01      STRB     R3,[R0], #+1
     49                }
   \                     ??halCommonMemCopy_0:
   \   0000006C   0xB292             UXTH     R2,R2
   \   0000006E   0x2A04             CMP      R2,#+4
   \   00000070   0xD2EB             BCS.N    ??halCommonMemCopy_4
     50              #endif // _HAL_SMALL_MEMUTILS_
     51              for(; bytes; bytes--) {
   \                     ??halCommonMemCopy_5:
   \   00000072   0xB292             UXTH     R2,R2
   \   00000074   0x2A00             CMP      R2,#+0
   \   00000076   0xBF1E             ITTT     NE 
   \   00000078   0xF811 0x3B01      LDRBNE   R3,[R1], #+1
   \   0000007C   0xF800 0x3B01      STRBNE   R3,[R0], #+1
   \   00000080   0x1E52             SUBNE    R2,R2,#+1
     52                *d++ = *s++;
   \   00000082   0xD1F6             BNE.N    ??halCommonMemCopy_5
     53              }
     54            }
     55          }
   \   00000084   0x4770             BX       LR               ;; return
     56          
     57          // Same as above except copies from Program space to RAM.
     58          // This routine never has to worry about overlapping source and dest

   \                                 In section .text, align 2, keep-with-next
     59          void halCommonMemPGMCopy(void* dest, const void PGM_NO_CONST *source, int16u bytes)
     60          {
     61            int8u *d = (int8u *)dest;
     62            PGM_PU s = (PGM_PU)source;
   \                     halCommonMemPGMCopy:
   \   00000000   0xE010             B.N      ??halCommonMemPGMCopy_0
     63          
     64            #ifndef _HAL_SMALL_MEMUTILS_
     65              while(bytes >= 4) {
     66                bytes -= 4;
   \                     ??halCommonMemPGMCopy_1:
   \   00000002   0x1F12             SUBS     R2,R2,#+4
     67                *d++ = *s++;
   \   00000004   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000008   0xF800 0x3B01      STRB     R3,[R0], #+1
     68                *d++ = *s++;
   \   0000000C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000010   0xF800 0x3B01      STRB     R3,[R0], #+1
     69                *d++ = *s++;
   \   00000014   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000018   0xF800 0x3B01      STRB     R3,[R0], #+1
     70                *d++ = *s++;
   \   0000001C   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \   00000020   0xF800 0x3B01      STRB     R3,[R0], #+1
     71              }
   \                     ??halCommonMemPGMCopy_0:
   \   00000024   0xB292             UXTH     R2,R2
   \   00000026   0x2A04             CMP      R2,#+4
   \   00000028   0xD2EB             BCS.N    ??halCommonMemPGMCopy_1
     72            #endif // _HAL_SMALL_MEMUTILS_
     73            for(; bytes; bytes--) {
   \                     ??halCommonMemPGMCopy_2:
   \   0000002A   0xB292             UXTH     R2,R2
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xBF1E             ITTT     NE 
   \   00000030   0xF811 0x3B01      LDRBNE   R3,[R1], #+1
   \   00000034   0xF800 0x3B01      STRBNE   R3,[R0], #+1
   \   00000038   0x1E52             SUBNE    R2,R2,#+1
     74              *d++ = *s++;
   \   0000003A   0xD1F6             BNE.N    ??halCommonMemPGMCopy_2
     75            }
     76          }
   \   0000003C   0x4770             BX       LR               ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void halCommonMemSet(void *dest, int8u val, int16u bytes)
     79          {
   \                     halCommonMemSet:
   \   00000000   0x0013             MOVS     R3,R2
     80            int8u *d=(int8u *)dest;
     81          
     82            for(;bytes;bytes--) {
   \   00000002   0xD003             BEQ.N    ??halCommonMemSet_0
     83              *d++ = val;
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x4619             MOV      R1,R3
   \   00000008   0x.... 0x....      B.W      __aeabi_memset
     84            }
     85          }
   \                     ??halCommonMemSet_0:
   \   0000000C   0x4770             BX       LR               ;; return
     86          

   \                                 In section .text, align 2, keep-with-next
     87          int8s halCommonMemCompare(const void *source0, const void *source1, int16u bytes)
     88          {
   \                     halCommonMemCompare:
   \   00000000   0xB510             PUSH     {R4,LR}
     89            int8u *s0 = (int8u *)source0;
     90            int8u *s1 = (int8u *)source1;
   \   00000002   0xE000             B.N      ??halCommonMemCompare_0
     91          
     92            for(; 0 < bytes; bytes--, s0++, s1++) {
   \                     ??halCommonMemCompare_1:
   \   00000004   0x1E52             SUBS     R2,R2,#+1
   \                     ??halCommonMemCompare_0:
   \   00000006   0xB292             UXTH     R2,R2
   \   00000008   0xB132             CBZ.N    R2,??halCommonMemCompare_2
     93              int8u b0 = *s0;
   \   0000000A   0xF810 0x3B01      LDRB     R3,[R0], #+1
     94              int8u b1 = *s1;
   \   0000000E   0xF811 0x4B01      LDRB     R4,[R1], #+1
     95              if (b0 != b1)
   \   00000012   0x42A3             CMP      R3,R4
   \   00000014   0xD0F6             BEQ.N    ??halCommonMemCompare_1
     96                return b0 - b1;
   \   00000016   0x....             B.N      ?Subroutine0
     97            }
     98            return 0;
   \                     ??halCommonMemCompare_2:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     99          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x1B18             SUBS     R0,R3,R4
   \   00000002   0xB240             SXTB     R0,R0
   \   00000004   0xBD10             POP      {R4,PC}
    100          
    101          // Test code for halCommonMemCompare().  There is no good place for unit tests
    102          // for this file.  If you change the function you should probably rerun the
    103          // test.
    104          //  {
    105          //    int8u s0[3] = { 0, 0, 0};
    106          //    int8u s1[3] = { 0, 0, 0};
    107          //    int8u i;
    108          //    assert(halCommonMemCompare(s0, s1, 0) == 0);
    109          //    assert(halCommonMemCompare(s0, s1, 3) == 0);
    110          //    for (i = 0; i < 3; i++) {
    111          //      s0[i] = 1;
    112          //      assert(halCommonMemCompare(s0, s1, 3) > 0);
    113          //      s1[i] = 2;
    114          //      assert(halCommonMemCompare(s0, s1, 3) < 0);
    115          //      s0[i] = 2;
    116          //    }
    117          //  }
    118          
    119          // Same again, except that the second source is in program space.
    120          

   \                                 In section .text, align 2, keep-with-next
    121          int8s halCommonMemPGMCompare(const void *source0, const void PGM_NO_CONST *source1, int16u bytes)
    122          {
   \                     halCommonMemPGMCompare:
   \   00000000   0xB510             PUSH     {R4,LR}
    123            int8u *s0 = (int8u *)source0;
    124            int8u PGM *s1 = (int8u PGM *)source1;
   \   00000002   0xE000             B.N      ??halCommonMemPGMCompare_0
    125          
    126            for(; 0 < bytes; bytes--, s0++, s1++) {
   \                     ??halCommonMemPGMCompare_1:
   \   00000004   0x1E52             SUBS     R2,R2,#+1
   \                     ??halCommonMemPGMCompare_0:
   \   00000006   0xB292             UXTH     R2,R2
   \   00000008   0xB132             CBZ.N    R2,??halCommonMemPGMCompare_2
    127              int8u b0 = *s0;
   \   0000000A   0xF810 0x3B01      LDRB     R3,[R0], #+1
    128              int8u b1 = *s1;
   \   0000000E   0xF811 0x4B01      LDRB     R4,[R1], #+1
    129              if (b0 != b1)
   \   00000012   0x42A3             CMP      R3,R4
   \   00000014   0xD0F6             BEQ.N    ??halCommonMemPGMCompare_1
    130                return b0 - b1;
   \   00000016   0x....             B.N      ?Subroutine0
    131            }
    132            return 0;
   \                     ??halCommonMemPGMCompare_2:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    133          }
    134          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  halCommonMemCompare
        0  halCommonMemCopy
        8  halCommonMemPGMCompare
        0  halCommonMemPGMCopy
        0  halCommonMemSet
             0 -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?Subroutine0
      28  halCommonMemCompare
     134  halCommonMemCopy
      28  halCommonMemPGMCompare
      62  halCommonMemPGMCopy
      14  halCommonMemSet

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none
