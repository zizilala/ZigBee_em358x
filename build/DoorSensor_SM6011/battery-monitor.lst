###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:14 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\ba #
#                    ttery-monitor\battery-monitor.c                          #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\ba #
#                    ttery-monitor\battery-monitor.c -D                       #
#                    "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_SM6011/ #
#                    DoorSensor_SM6011_tokens.h\"" -D                         #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"battery-monitor.c\"" -lC            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\ba #
#                    ttery-monitor\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\b #
#                    uilder\DoorSensor_SM6011\ -I                             #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\app\framework\includ #
#                    e\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorS #
#                    ensor_SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em3 #
#                    5x\app\builder\DoorSensor_SM6011\..\..\..\stack\ -I      #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \battery-monitor.lst                                     #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \battery-monitor.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\battery-monitor\battery-monitor.c
      1          // *****************************************************************************
      2          // * battery-monitor.c
      3          // *
      4          // * Code to implement a battery monitor.
      5          // *
      6          // * This code will read the battery voltage during a transmission (in theory 
      7          // * when we are burning the most current), and update the battery voltage 
      8          // * attribute in the power configuration cluster.
      9          // *
     10          // *
     11          // * Copyright 2014 by Silicon Labs. All rights reserved.                   *80*
     12          // *****************************************************************************
     13          
     14          #include "app/framework/include/af.h"
     15          #include "app/framework/util/af-main.h"
     16          
     17          
     18          //------------------------------------------------------------------------------
     19          // Forward Declaration
     20          void initializeTxActiveIrq( void );
     21          
     22          //------------------------------------------------------------------------------
     23          // Globals
     24          
     25          EmberEventControl emberAfPluginBatteryMonitorBatteryMonitorEventControl;
     26          
     27          #define batteryEvent         emberAfPluginBatteryMonitorBatteryMonitorEventControl
     28          
     29          #define BATTERY_MONITOR_TIMEOUT  EMBER_AF_PLUGIN_BATTERY_MONITOR_MONITOR_TIMEOUT
     30          
     31          // init event

   \                                 In section .text, align 2, keep-with-next
     32          void emberAfPluginBatteryMonitorInitCallback(void)
     33          {
     34            initializeTxActiveIrq();
   \                     emberAfPluginBatteryMonitorInitCallback:
   \   00000000   0x....             B.N      initializeTxActiveIrq
     35          }

   \                                 In section .data, align 4
   \                     emberAfPluginBatteryMonitorBatteryMonitorEventControl:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000008   0xE0000000         DC32 3758096384
     36          
     37          // battery monitor code
     38          // This code will grab the battery voltage during a transmit event.  
     39          // Note:  for this to work, PC5 must be set to be an alt-out push/pull,
     40          // and the PHY_CONFIG token needs to be set to 0xFFFB (if there is no
     41          // PA, or if the PA is on the bidirectional port) or 0xFFFD (if there 
     42          // is a PA).  
     43          /* 
     44           * need PC5 to be alternate output, push/pull
     45           * need to set PHY_CONFIG token to eitehr 0xFFFB (for non-PA) or 0xFFFD
     46             (for PA).
     47           * need to set up PC5 as button 2.
     48           * need to set up PC5 as a wake from sleep interrupt (to overcome a 
     49             strange behavior in the HAL layer where non-wake interrupts get
     50             unset).
     51           * need to have the battry voltage 
     52           */
     53          static int32u lastBatteryMeasureTick = 0xe0000000; // take reading after reset.
     54          #define MS_BETWEEN_BATTERY_CHECK (60 * 1000 * BATTERY_MONITOR_TIMEOUT)  // convert to milliseconds
     55          //#define MS_BETWEEN_BATTERY_CHECK 1000 // whenever we transmit poll.  can get annyoing.
     56          
     57          // implement 16 sample fifo
     58          #define FIFO_SIZE 16

   \                                 In section .bss, align 4
     59          static int8u samplePtr = 0;
   \                     samplePtr:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \   00000004                      DS8 32
     60          static int16u voltageFifo[FIFO_SIZE];
     61          static boolean fifoInitialized = FALSE;
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void printFifo( void )
     64          {
   \                     printFifo:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     65            int8u i;
     66          
     67            for(i=0; i<FIFO_SIZE; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x....             ADR.N    R5,??DataTable11  ;; "%d "
     68              emberSerialPrintf(APP_SERIAL,"%d ", voltageFifo[i]);
   \                     ??printFifo_0:
   \   00000006   0x....             LDR.N    R0,??DataTable11_2
   \   00000008   0xEB00 0x0044      ADD      R0,R0,R4, LSL #+1
   \   0000000C   0x8882             LDRH     R2,[R0, #+4]
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       emberSerialPrintf
     69            }
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \   00000018   0x2C10             CMP      R4,#+16
   \   0000001A   0xD3F4             BCC.N    ??printFifo_0
     70            emberSerialPrintf(APP_SERIAL,"\r\n");
   \   0000001C   0x....             ADR.N    R1,??DataTable11_1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000024   0x.... 0x....      B.W      emberSerialPrintf
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          int16u filterVoltageSample(int16u sample)
     74          {
   \                     filterVoltageSample:
   \   00000000   0xB510             PUSH     {R4,LR}
     75            int16u voltageSum;
     76            int8u i;
     77          
     78            if(fifoInitialized) {
   \   00000002   0x....             LDR.N    R1,??DataTable11_2
   \   00000004   0x780A             LDRB     R2,[R1, #+0]
   \   00000006   0x784B             LDRB     R3,[R1, #+1]
   \   00000008   0xB19B             CBZ.N    R3,??filterVoltageSample_0
     79              voltageFifo[samplePtr++] = sample;
   \   0000000A   0xEB01 0x0342      ADD      R3,R1,R2, LSL #+1
   \   0000000E   0x8098             STRH     R0,[R3, #+4]
   \   00000010   0x1C52             ADDS     R2,R2,#+1
     80          
     81              if(samplePtr >= FIFO_SIZE) {
   \   00000012   0xB2D2             UXTB     R2,R2
   \   00000014   0x2A10             CMP      R2,#+16
   \   00000016   0xBF28             IT       CS 
   \   00000018   0x2200             MOVCS    R2,#+0
     82                samplePtr = 0;
     83              }
     84              voltageSum = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
     85              for(i=0; i<FIFO_SIZE; i++) {
   \   0000001C   0x2300             MOVS     R3,#+0
     86                voltageSum += voltageFifo[i];
   \                     ??filterVoltageSample_1:
   \   0000001E   0xEB01 0x0443      ADD      R4,R1,R3, LSL #+1
   \   00000022   0x88A4             LDRH     R4,[R4, #+4]
   \   00000024   0x1820             ADDS     R0,R4,R0
   \   00000026   0xB280             UXTH     R0,R0
     87              }
   \   00000028   0x1C5B             ADDS     R3,R3,#+1
   \   0000002A   0x2B10             CMP      R3,#+16
   \   0000002C   0xD3F7             BCC.N    ??filterVoltageSample_1
     88              sample = voltageSum / FIFO_SIZE;
   \   0000002E   0x0900             LSRS     R0,R0,#+4
   \   00000030   0xE007             B.N      ??filterVoltageSample_2
     89            } else {
     90              for(i=0; i<FIFO_SIZE; i++) {
     91                voltageFifo[i] = sample;
   \                     ??filterVoltageSample_0:
   \   00000032   0xEB01 0x0443      ADD      R4,R1,R3, LSL #+1
   \   00000036   0x80A0             STRH     R0,[R4, #+4]
     92              }
   \   00000038   0x1C5B             ADDS     R3,R3,#+1
   \   0000003A   0x2B10             CMP      R3,#+16
   \   0000003C   0xD3F9             BCC.N    ??filterVoltageSample_0
     93              fifoInitialized = TRUE;
   \   0000003E   0x2301             MOVS     R3,#+1
   \   00000040   0x704B             STRB     R3,[R1, #+1]
   \                     ??filterVoltageSample_2:
   \   00000042   0x700A             STRB     R2,[R1, #+0]
     94            } 
     95          
     96            //printFifo();
     97          
     98            return sample;
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void emberAfPluginBatteryMonitorBatteryMonitorEventHandler( void )
    102          {
   \                     emberAfPluginBatteryMonitorBatteryMonitorEventHandler:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    103            emberEventControlSetInactive( batteryEvent );
   \   00000004   0x....             LDR.N    R4,??DataTable11_3
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7020             STRB     R0,[R4, #+0]
    104          
    105          //	  int16u voltage, filteredVoltage;      //By Ray 150203
    106            int16u voltage;
    107            int8u voltage8u;
    108            int32u currentMsTick = halCommonGetInt32uMillisecondTick();
   \   0000000A   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000000E   0x4605             MOV      R5,R0
    109            int32u timeSinceLastMeasure = currentMsTick - lastBatteryMeasureTick;
   \   00000010   0x68A3             LDR      R3,[R4, #+8]
   \   00000012   0x1AEE             SUBS     R6,R5,R3
    110          
    111          //	  int32u voltageAccumulator = 0;        //By Ray 150203
    112          //	  int8u i;                              //By Ray 150203
    113          
    114          emberSerialPrintf(APP_SERIAL,"current tick %4x, last tick %4x, delta %4x\r\n",
    115          currentMsTick, lastBatteryMeasureTick, timeSinceLastMeasure);
   \   00000014   0x9600             STR      R6,[SP, #+0]
   \   00000016   0x462A             MOV      R2,R5
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "current tick %4x, las...">`
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       emberSerialPrintf
    116          
    117            if(timeSinceLastMeasure < MS_BETWEEN_BATTERY_CHECK) {
   \   00000022   0x....             LDR.N    R0,??DataTable11_4  ;; 0x1b7740
   \   00000024   0x4286             CMP      R6,R0
   \   00000026   0xD31C             BCC.N    ??emberAfPluginBatteryMonitorBatteryMonitorEven_0
    118            } else {
    119              // length of a data poll = 512 uS
    120              voltage = halMeasureVdd(ADC_CONVERSION_TIME_US_256);  
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0x.... 0x....      BL       halMeasureVdd
    121          
    122              // filter the voltage
    123              voltage = filterVoltageSample(voltage);
   \   0000002E   0x.... 0x....      BL       filterVoltageSample
   \   00000032   0x4606             MOV      R6,R0
    124              
    125              emberSerialPrintf(APP_SERIAL,"Transmit battery sample:%d %d\r\n", 
    126                voltage, currentMsTick);
   \   00000034   0x462B             MOV      R3,R5
   \   00000036   0x4632             MOV      R2,R6
   \   00000038   0x.... 0x....      ADR.W    R1,`?<Constant "Transmit battery samp...">`
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       emberSerialPrintf
    127          
    128              // convert from mV to 100 mV.  Also, change number of bits from 16 to 8
    129              voltage8u = ((int8u) (voltage / 100));
   \   00000042   0x2064             MOVS     R0,#+100
   \   00000044   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   00000048   0xF88D 0x0008      STRB     R0,[SP, #+8]
    130              emberAfWriteAttribute(1, // endpoint
    131                                    ZCL_POWER_CONFIG_CLUSTER_ID,
    132                                    ZCL_BATTERY_VOLTAGE_ATTRIBUTE_ID,
    133                                    CLUSTER_MASK_SERVER,
    134                                    &voltage8u,
    135                                    ZCL_INT8U_ATTRIBUTE_TYPE);
   \   0000004C   0x2020             MOVS     R0,#+32
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0xA802             ADD      R0,SP,#+8
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x2340             MOVS     R3,#+64
   \   00000056   0x2220             MOVS     R2,#+32
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       emberAfWriteAttribute
    136          
    137              lastBatteryMeasureTick = currentMsTick;
   \   00000060   0x60A5             STR      R5,[R4, #+8]
    138            }
    139          }
   \                     ??emberAfPluginBatteryMonitorBatteryMonitorEven_0:
   \   00000062   0xBD7F             POP      {R0-R6,PC}       ;; return
    140          
    141          // ******  battery read ISR handling

   \                                 In section .text, align 2, keep-with-next
    142          void isrBatteryIface( void )
    143          {
    144            emberEventControlSetActive( batteryEvent );
   \                     isrBatteryIface:
   \   00000000   0x....             LDR.N    R0,??DataTable11_3
   \   00000002   0x.... 0x....      B.W      emEventControlSetActive
    145          }
    146          
    147          #define TX_ACTIVE_PIN PORTC_PIN(5)
    148          #define TX_ACTIVE_IN  GPIO_PCIN
    149          #define TX_ACTIVE_INTCFG      GPIO_INTCFGD
    150          #define TX_ACTIVE_INT_EN_BIT  INT_IRQD
    151          #define TX_ACTIVE_FLAG_BIT    INT_IRQDFLAG
    152          #define TX_ACTIVE_MISS_BIT    INT_MISSIRQD
    153          

   \                                 In section .text, align 2, keep-with-next
    154          int8u batteryGPIOPinState(int8u button) 
    155          {
    156            return (TX_ACTIVE_IN & BIT(TX_ACTIVE_PIN&7));
   \                     batteryGPIOPinState:
   \   00000000   0x....             LDR.N    R0,??DataTable11_5  ;; 0x4000b408
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF000 0x0020      AND      R0,R0,#0x20
   \   00000008   0x4770             BX       LR               ;; return
    157          }
    158          

   \                                 In section .text, align 2, keep-with-next
    159          void initializeTxActiveIrq( void )
    160          {
   \                     initializeTxActiveIrq:
   \   00000000   0xB580             PUSH     {R7,LR}
    161            emberSerialPrintf(APP_SERIAL,"Init IRQD\r\n");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "Init IRQD\\r\\n">`
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       emberSerialPrintf
    162          
    163            //start from a fresh state just in case
    164            TX_ACTIVE_INTCFG = 0;              //disable TX_ACTIVE triggering
   \   0000000C   0x....             LDR.N    R0,??DataTable11_6  ;; 0x4000a814
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6581             STR      R1,[R0, #+88]
    165            INT_CFGCLR = TX_ACTIVE_INT_EN_BIT; //clear TX_ACTIVE top level int enable
   \   00000012   0xF44F 0x4100      MOV      R1,#+32768
   \   00000016   0x....             LDR.N    R2,??DataTable11_7  ;; 0xe000e180
   \   00000018   0x6011             STR      R1,[R2, #+0]
    166            INT_GPIOFLAG = TX_ACTIVE_FLAG_BIT; //clear stale TX_ACTIVE interrupt
   \   0000001A   0x2208             MOVS     R2,#+8
   \   0000001C   0x6002             STR      R2,[R0, #+0]
    167            INT_MISS = TX_ACTIVE_MISS_BIT;     //clear stale missed TX_ACTIVE interrupt
   \   0000001E   0x60C1             STR      R1,[R0, #+12]
    168            //configure TX_ACTIVE
    169            do { GPIO_IRQDSEL = TX_ACTIVE_PIN; } while(0);     //point IRQ at the desired pin
   \   00000020   0x....             LDR.N    R2,??DataTable11_8  ;; 0x4000bc24
   \   00000022   0x2315             MOVS     R3,#+21
   \   00000024   0x6013             STR      R3,[R2, #+0]
    170          
    171            TX_ACTIVE_INTCFG  = (0 << GPIO_INTFILT_BIT); //no filter
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x6582             STR      R2,[R0, #+88]
    172            TX_ACTIVE_INTCFG |= (3 << GPIO_INTMOD_BIT);  //3 = both edges
   \   0000002A   0x6D82             LDR      R2,[R0, #+88]
   \   0000002C   0xF042 0x0260      ORR      R2,R2,#0x60
   \   00000030   0x6582             STR      R2,[R0, #+88]
    173          
    174            INT_CFGSET = TX_ACTIVE_INT_EN_BIT; //set top level interrupt enable
   \   00000032   0x....             LDR.N    R0,??DataTable11_9  ;; 0xe000e100
   \   00000034   0x6001             STR      R1,[R0, #+0]
    175          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    176          

   \                                 In section .text, align 2, keep-with-next
    177          void halIrqDIsr(void)
    178          {
   \                     halIrqDIsr:
   \   00000000   0xB580             PUSH     {R7,LR}
    179          halToggleLed(BOARDLED0);
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0x.... 0x....      BL       halToggleLed
    180          
    181            //clear int before read to avoid potential of missing interrupt
    182            INT_MISS = TX_ACTIVE_MISS_BIT;     //clear missed BUTTON2 interrupt flag
   \   00000008   0x....             LDR.N    R0,??DataTable11_6  ;; 0x4000a814
   \   0000000A   0xF44F 0x4100      MOV      R1,#+32768
   \   0000000E   0x60C1             STR      R1,[R0, #+12]
    183            INT_GPIOFLAG = TX_ACTIVE_FLAG_BIT; //clear top level BUTTON2 interrupt flag
   \   00000010   0x2108             MOVS     R1,#+8
   \   00000012   0x6001             STR      R1,[R0, #+0]
    184          
    185            if(batteryGPIOPinState(TX_ACTIVE_PIN)) {
   \   00000014   0x....             LDR.N    R0,??DataTable11_5  ;; 0x4000b408
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x0680             LSLS     R0,R0,#+26
   \   0000001A   0xD504             BPL.N    ??halIrqDIsr_0
    186              // pin is high, time to call the ISR
    187              isrBatteryIface();
   \   0000001C   0x....             LDR.N    R0,??DataTable11_3
   \   0000001E   0xE8BD 0x4002      POP      {R1,LR}
   \   00000022   0x.... 0x....      B.W      emEventControlSetActive
    188            }
    189          }
   \                     ??halIrqDIsr_0:
   \   00000026   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x25 0x64          DC8      "%d "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     samplePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     emberAfPluginBatteryMonitorBatteryMonitorEventControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x001B7740         DC32     0x1b7740

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x4000A814         DC32     0x4000a814

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x4000BC24         DC32     0x4000bc24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d ">`:
   \   00000000   0x25 0x64          DC8 "%d "
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "current tick %4x, las...">`:
   \   00000000   0x63 0x75          DC8 "current tick %4x, last tick %4x, delta %4x\015\012"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x74 0x69    
   \              0x63 0x6B    
   \              0x20 0x25    
   \              0x34 0x78    
   \              0x2C 0x20    
   \              0x6C 0x61    
   \              0x73 0x74    
   \              0x20 0x74    
   \              0x69 0x63    
   \              0x6B 0x20    
   \              0x25 0x34    
   \              0x78 0x2C    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x74 0x61    
   \              0x20 0x25    
   \              0x34 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Transmit battery samp...">`:
   \   00000000   0x54 0x72          DC8 "Transmit battery sample:%d %d\015\012"
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x74    
   \              0x20 0x62    
   \              0x61 0x74    
   \              0x74 0x65    
   \              0x72 0x79    
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x70 0x6C    
   \              0x65 0x3A    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Init IRQD\\r\\n">`:
   \   00000000   0x49 0x6E          DC8 "Init IRQD\015\012"
   \              0x69 0x74    
   \              0x20 0x49    
   \              0x52 0x51    
   \              0x44 0x0D    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  batteryGPIOPinState
       32  emberAfPluginBatteryMonitorBatteryMonitorEventHandler
             32 -> emberAfWriteAttribute
             32 -> emberSerialPrintf
             32 -> filterVoltageSample
             32 -> halCommonGetInt32uMillisecondTick
             32 -> halMeasureVdd
        0  emberAfPluginBatteryMonitorInitCallback
              0 -> initializeTxActiveIrq
        8  filterVoltageSample
        8  halIrqDIsr
              0 -> emEventControlSetActive
              8 -> halToggleLed
        8  initializeTxActiveIrq
              8 -> emberSerialPrintf
        0  isrBatteryIface
              0 -> emEventControlSetActive
       16  printFifo
              0 -> emberSerialPrintf
             16 -> emberSerialPrintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d ">
      12  ?<Constant "Init IRQD\r\n">
      32  ?<Constant "Transmit battery samp...">
       4  ?<Constant "\r\n">
      48  ?<Constant "current tick %4x, las...">
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      10  batteryGPIOPinState
      12  emberAfPluginBatteryMonitorBatteryMonitorEventControl
          lastBatteryMeasureTick
     100  emberAfPluginBatteryMonitorBatteryMonitorEventHandler
       2  emberAfPluginBatteryMonitorInitCallback
      70  filterVoltageSample
      40  halIrqDIsr
      56  initializeTxActiveIrq
       6  isrBatteryIface
      40  printFifo
      36  samplePtr
          fifoInitialized
          voltageFifo

 
  36 bytes in section .bss
  12 bytes in section .data
   8 bytes in section .rodata
 456 bytes in section .text
 
 456 bytes of CODE  memory
   8 bytes of CONST memory
  48 bytes of DATA  memory

Errors: none
Warnings: none
