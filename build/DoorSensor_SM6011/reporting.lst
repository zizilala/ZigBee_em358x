###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:50 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\re #
#                    porting\reporting.c                                      #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\re #
#                    porting\reporting.c -D "GENERATED_TOKEN_HEADER=\"app/bui #
#                    lder/DoorSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D  #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"reporting.c\"" -lC                  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\re #
#                    porting\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder #
#                    \DoorSensor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\ #
#                    app\builder\DoorSensor_SM6011\..\..\..\ -I               #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \reporting.lst                                           #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \reporting.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\reporting\reporting.c
      1          // *******************************************************************
      2          // * reporting.c
      3          // *
      4          // *
      5          // * Copyright 2013 Silicon Laboratories, Inc.                              *80*
      6          // *******************************************************************
      7          
      8          #include "app/framework/include/af.h"
      9          #include "app/framework/util/common.h"
     10          #include "app/framework/util/attribute-storage.h"
     11          #include "reporting.h"
     12          
     13          #ifdef ATTRIBUTE_LARGEST
     14          #define READ_DATA_SIZE ATTRIBUTE_LARGEST
     15          #else
     16          #define READ_DATA_SIZE 8 // max size if attributes aren't present
     17          #endif
     18          
     19          #define NULL_INDEX 0xFF
     20          
     21          static void conditionallySendReport(int8u endpoint, EmberAfClusterId clusterId);
     22          static void scheduleTick(void);
     23          static void removeConfiguration(int8u index);
     24          static void removeConfigurationAndScheduleTick(int8u index);
     25          static EmberAfStatus configureReceivedAttribute(const EmberAfClusterCommand *cmd,
     26                                                          EmberAfAttributeId attributeId,
     27                                                          int8u mask,
     28                                                          int16u timeout);
     29          static void putReportableChangeInResp(const EmberAfPluginReportingEntry *entry,
     30                                                EmberAfAttributeType dataType);
     31          static void retrySendReport(EmberOutgoingMessageType type,
     32                                      int16u indexOrDestination,
     33                                      EmberApsFrame *apsFrame,
     34                                      int16u msgLen,
     35                                      int8u *message,
     36                                      EmberStatus status);
     37          

   \                                 In section .bss, align 4
     38          EmberEventControl emberAfPluginReportingTickEventControl;
   \                     emberAfPluginReportingTickEventControl:
   \   00000000                      DS8 8
     39          
     40          typedef struct {
     41            int32u lastReportTimeMs;
     42            int32u lastReportValue;
     43            boolean reportableChange;
     44          } VolatileData;

   \                                 In section .bss, align 4
     45          static VolatileData volatileData[EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE];
   \                     volatileData:
   \   00000000                      DS8 60
     46          

   \                                 In section .text, align 2, keep-with-next
     47          static void retrySendReport(EmberOutgoingMessageType type,
     48                                      int16u indexOrDestination,
     49                                      EmberApsFrame *apsFrame,
     50                                      int16u msgLen,
     51                                      int8u *message,
     52                                      EmberStatus status)
     53          {
   \                     retrySendReport:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x9D04             LDR      R5,[SP, #+16]
   \   00000004   0x9C05             LDR      R4,[SP, #+20]
     54            // Retry once, and do so by unicasting without a pointer to this callback
     55            if (status != EMBER_SUCCESS) {
   \   00000006   0xB114             CBZ.N    R4,??retrySendReport_0
     56              emberAfSendUnicast(type, indexOrDestination, apsFrame, msgLen, message);
   \   00000008   0x9500             STR      R5,[SP, #+0]
   \   0000000A   0x.... 0x....      BL       emberAfSendUnicast
     57            }
     58          }
   \                     ??retrySendReport_0:
   \   0000000E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     59          
     60          #ifdef EZSP_HOST
     61          static EmberAfPluginReportingEntry table[EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE];
     62          void emAfPluginReportingGetEntry(int8u index, EmberAfPluginReportingEntry *result)
     63          {
     64            MEMCOPY(result, &table[index], sizeof(EmberAfPluginReportingEntry));
     65          }
     66          void emAfPluginReportingSetEntry(int8u index, EmberAfPluginReportingEntry *value)
     67          {
     68            MEMCOPY(&table[index], value, sizeof(EmberAfPluginReportingEntry));
     69          }
     70          #else

   \                                 In section .text, align 2, keep-with-next
     71          void emAfPluginReportingGetEntry(int8u index, EmberAfPluginReportingEntry *result)
     72          {
   \                     emAfPluginReportingGetEntry:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
     73            halCommonGetIndexedToken(result, TOKEN_REPORT_TABLE, index);
   \   00000004   0x2314             MOVS     R3,#+20
   \   00000006   0x4602             MOV      R2,R0
   \   00000008   0x211C             MOVS     R1,#+28
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      halInternalGetTokenData
     74          }

   \                                 In section .text, align 2, keep-with-next
     75          void emAfPluginReportingSetEntry(int8u index, EmberAfPluginReportingEntry *value)
     76          {
     77            halCommonSetIndexedToken(TOKEN_REPORT_TABLE, index, value);
   \                     emAfPluginReportingSetEntry:
   \   00000000   0x2314             MOVS     R3,#+20
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x201C             MOVS     R0,#+28
   \   00000008   0x.... 0x....      B.W      halInternalSetTokenData
     78          }
     79          #endif
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void emberAfPluginReportingInitCallback(void)
     82          {
     83            scheduleTick();
   \                     emberAfPluginReportingInitCallback:
   \   00000000   0x....             B.N      scheduleTick
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void emberAfPluginReportingTickEventHandler(void)
     87          {
   \                     emberAfPluginReportingTickEventHandler:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08D             SUB      SP,SP,#+52
     88            EmberApsFrame *apsFrame = NULL;
   \   00000006   0x2700             MOVS     R7,#+0
     89            EmberAfStatus status;
     90            EmberAfAttributeType dataType;
     91            int32u currentTimeMs = halCommonGetInt32uMillisecondTick();
   \   00000008   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   0000000C   0x4604             MOV      R4,R0
     92            int16u manufacturerCode;
     93            int8u readData[READ_DATA_SIZE];
     94            int8u i, dataSize;
     95            boolean clientToServer;
     96          
     97            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x.... 0x....      LDR.W    R8,??DataTable17
     98              EmberAfPluginReportingEntry entry;
     99              int32u elapsedMs;
    100              emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfPluginReportingTickEventHandler_0:
   \   00000014   0xA905             ADD      R1,SP,#+20
   \   00000016   0xB2E8             UXTB     R0,R5
   \   00000018   0x.... 0x....      BL       emAfPluginReportingGetEntry
    101          
    102              // We will only send reports for active reported attributes and only if a
    103              // reportable change has occurred and the minimum interval has elapsed or
    104              // if the maximum interval is set and has elapsed.
    105              elapsedMs = elapsedTimeInt32u(volatileData[i].lastReportTimeMs,
    106                                            currentTimeMs);
   \   0000001C   0x200C             MOVS     R0,#+12
   \   0000001E   0xFB00 0xF905      MUL      R9,R0,R5
   \   00000022   0xF859 0x0008      LDR      R0,[R9, R8]
   \   00000026   0x1A21             SUBS     R1,R4,R0
    107              if (entry.endpoint == EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    108                  || entry.direction != EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    109                  || (elapsedMs
    110                      < entry.data.reported.minInterval * MILLISECOND_TICKS_PER_SECOND)
    111                  || (!volatileData[i].reportableChange
    112                      && (elapsedMs
    113                          < (entry.data.reported.maxInterval
    114                             * MILLISECOND_TICKS_PER_SECOND)))) {
   \   00000028   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD02D             BEQ.N    ??emberAfPluginReportingTickEventHandler_1
   \   00000030   0xF89D 0x2014      LDRB     R2,[SP, #+20]
   \   00000034   0x2A00             CMP      R2,#+0
   \   00000036   0xD129             BNE.N    ??emberAfPluginReportingTickEventHandler_1
   \   00000038   0xF8BD 0x2020      LDRH     R2,[SP, #+32]
   \   0000003C   0xEBB1 0x2F82      CMP      R1,R2, LSL #+10
   \   00000040   0xD324             BCC.N    ??emberAfPluginReportingTickEventHandler_1
   \   00000042   0xEB09 0x0608      ADD      R6,R9,R8
   \   00000046   0x7A32             LDRB     R2,[R6, #+8]
   \   00000048   0xB922             CBNZ.N   R2,??emberAfPluginReportingTickEventHandler_2
   \   0000004A   0xF8BD 0x2022      LDRH     R2,[SP, #+34]
   \   0000004E   0xEBB1 0x2F82      CMP      R1,R2, LSL #+10
   \   00000052   0xD31B             BCC.N    ??emberAfPluginReportingTickEventHandler_1
    115                continue;
    116              }
    117          
    118              status = emAfReadAttribute(entry.endpoint,
    119                                         entry.clusterId,
    120                                         entry.attributeId,
    121                                         entry.mask,
    122                                         entry.manufacturerCode,
    123                                         (int8u *)&readData,
    124                                         READ_DATA_SIZE,
    125                                         &dataType);
   \                     ??emberAfPluginReportingTickEventHandler_2:
   \   00000054   0xA904             ADD      R1,SP,#+16
   \   00000056   0x9103             STR      R1,[SP, #+12]
   \   00000058   0x2108             MOVS     R1,#+8
   \   0000005A   0x9102             STR      R1,[SP, #+8]
   \   0000005C   0xA90A             ADD      R1,SP,#+40
   \   0000005E   0x9101             STR      R1,[SP, #+4]
   \   00000060   0xF8BD 0x101C      LDRH     R1,[SP, #+28]
   \   00000064   0x9100             STR      R1,[SP, #+0]
   \   00000066   0xF89D 0x301A      LDRB     R3,[SP, #+26]
   \   0000006A   0xF8BD 0x2018      LDRH     R2,[SP, #+24]
   \   0000006E   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   00000072   0x.... 0x....      BL       emAfReadAttribute
    126              if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   00000076   0xB150             CBZ.N    R0,??emberAfPluginReportingTickEventHandler_3
    127                emberAfReportingPrintln("ERR: reading cluster 0x%2x attribute 0x%2x: 0x%x",
    128                                        entry.clusterId,
    129                                        entry.attributeId,
    130                                        status);
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0xF8BD 0x3018      LDRH     R3,[SP, #+24]
   \   0000007E   0xF8BD 0x2016      LDRH     R2,[SP, #+22]
   \   00000082   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: reading cluster ...">`
   \   00000086   0x2020             MOVS     R0,#+32
   \   00000088   0x.... 0x....      BL       emberAfPrintln
    131                continue;
   \                     ??emberAfPluginReportingTickEventHandler_1:
   \   0000008C   0xE06B             B.N      ??emberAfPluginReportingTickEventHandler_4
    132              }
    133          
    134              // If we have already started a report for a different attribute or
    135              // destination, send it and create a new one.
    136              if (apsFrame != NULL &&
    137                  !(entry.endpoint == apsFrame->sourceEndpoint
    138                    && entry.clusterId == apsFrame->clusterId
    139                    && emberAfClusterIsClient(&entry) == clientToServer
    140                    && entry.manufacturerCode == manufacturerCode)) {
   \                     ??emberAfPluginReportingTickEventHandler_3:
   \   0000008E   0xB30F             CBZ.N    R7,??emberAfPluginReportingTickEventHandler_5
   \   00000090   0xF8B7 0xA002      LDRH     R10,[R7, #+2]
   \   00000094   0x7938             LDRB     R0,[R7, #+4]
   \   00000096   0xF89D 0x1015      LDRB     R1,[SP, #+21]
   \   0000009A   0x4281             CMP      R1,R0
   \   0000009C   0xBF04             ITT      EQ 
   \   0000009E   0xF8BD 0x1016      LDRHEQ   R1,[SP, #+22]
   \   000000A2   0x4551             CMPEQ    R1,R10
   \   000000A4   0xD10C             BNE.N    ??emberAfPluginReportingTickEventHandler_6
   \   000000A6   0xF89D 0x101A      LDRB     R1,[SP, #+26]
   \   000000AA   0x09C9             LSRS     R1,R1,#+7
   \   000000AC   0xF89D 0x2011      LDRB     R2,[SP, #+17]
   \   000000B0   0x4291             CMP      R1,R2
   \   000000B2   0xBF02             ITTT     EQ 
   \   000000B4   0xF8BD 0x101C      LDRHEQ   R1,[SP, #+28]
   \   000000B8   0xF8BD 0x2012      LDRHEQ   R2,[SP, #+18]
   \   000000BC   0x4291             CMPEQ    R1,R2
   \   000000BE   0xD027             BEQ.N    ??emberAfPluginReportingTickEventHandler_7
    141                conditionallySendReport(apsFrame->sourceEndpoint, apsFrame->clusterId);
   \                     ??emberAfPluginReportingTickEventHandler_6:
   \   000000C0   0x.... 0x....      BL       emberAfIsDeviceEnabled
   \   000000C4   0xB910             CBNZ.N   R0,??emberAfPluginReportingTickEventHandler_8
   \   000000C6   0xF1BA 0x0F03      CMP      R10,#+3
   \   000000CA   0xD103             BNE.N    ??emberAfPluginReportingTickEventHandler_5
   \                     ??emberAfPluginReportingTickEventHandler_8:
   \   000000CC   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   000000D0   0x.... 0x....      BL       emberAfSendCommandUnicastToBindingsWithCallback
    142                apsFrame = NULL;
    143              }
    144          
    145              // If we haven't made the message header, make it.
    146              if (apsFrame == NULL) {
    147                apsFrame = emberAfGetCommandApsFrame();
   \                     ??emberAfPluginReportingTickEventHandler_5:
   \   000000D4   0x.... 0x....      BL       emberAfGetCommandApsFrame
   \   000000D8   0x4607             MOV      R7,R0
    148                clientToServer = emberAfClusterIsClient(&entry);
   \   000000DA   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   000000DE   0x09C0             LSRS     R0,R0,#+7
   \   000000E0   0xF88D 0x0011      STRB     R0,[SP, #+17]
    149                // The manufacturer-specfic version of the fill API only creates a
    150                // manufacturer-specfic command if the manufacturer code is set.  For
    151                // non-manufacturer-specfic reports, the manufacturer code is unset, so
    152                // we can get away with using this API for both cases.
    153                emberAfFillExternalManufacturerSpecificBuffer((clientToServer
    154                                                               ? (ZCL_PROFILE_WIDE_COMMAND
    155                                                                  | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    156                                                                  | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS)
    157                                                               : (ZCL_PROFILE_WIDE_COMMAND
    158                                                                  | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    159                                                                  | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS)),
    160                                                              entry.clusterId,
    161                                                              entry.manufacturerCode,
    162                                                              ZCL_REPORT_ATTRIBUTES_COMMAND_ID,
    163                                                              "");
   \   000000E4   0xBF14             ITE      NE 
   \   000000E6   0x2000             MOVNE    R0,#+0
   \   000000E8   0x2008             MOVEQ    R0,#+8
   \   000000EA   0x....             ADR.N    R1,??DataTable13  ;; ""
   \   000000EC   0x9100             STR      R1,[SP, #+0]
   \   000000EE   0x230A             MOVS     R3,#+10
   \   000000F0   0xF8BD 0x201C      LDRH     R2,[SP, #+28]
   \   000000F4   0xF8BD 0x1016      LDRH     R1,[SP, #+22]
   \   000000F8   0x.... 0x....      BL       emberAfFillExternalManufacturerSpecificBuffer
    164                apsFrame->sourceEndpoint = entry.endpoint;
   \   000000FC   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   00000100   0x7138             STRB     R0,[R7, #+4]
    165                apsFrame->options = EMBER_AF_DEFAULT_APS_OPTIONS;
   \   00000102   0xF44F 0x508A      MOV      R0,#+4416
   \   00000106   0x80F8             STRH     R0,[R7, #+6]
    166                manufacturerCode = entry.manufacturerCode;
   \   00000108   0xF8BD 0x001C      LDRH     R0,[SP, #+28]
   \   0000010C   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    167              }
    168          
    169              // Payload is [attribute id:2] [type:1] [data:N].
    170              emberAfPutInt16uInResp(entry.attributeId);
   \                     ??emberAfPluginReportingTickEventHandler_7:
   \   00000110   0xF8BD 0x0018      LDRH     R0,[SP, #+24]
   \   00000114   0x.... 0x....      BL       emberAfPutInt16uInResp
    171              emberAfPutInt8uInResp(dataType);
   \   00000118   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000011C   0x.... 0x....      BL       emberAfPutInt8uInResp
    172          
    173              dataSize = (emberAfIsThisDataTypeAStringType(dataType)
    174                          ? emberAfStringLength(readData) + 1
    175                          : emberAfGetDataSize(dataType));
   \   00000120   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000124   0x.... 0x....      BL       emberAfIsThisDataTypeAStringType
   \   00000128   0xB128             CBZ.N    R0,??emberAfPluginReportingTickEventHandler_9
   \   0000012A   0xA80A             ADD      R0,SP,#+40
   \   0000012C   0x.... 0x....      BL       emberAfStringLength
   \   00000130   0xF100 0x0B01      ADD      R11,R0,#+1
   \   00000134   0xE004             B.N      ??emberAfPluginReportingTickEventHandler_10
   \                     ??emberAfPluginReportingTickEventHandler_9:
   \   00000136   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000013A   0x.... 0x....      BL       emberAfGetDataSize
   \   0000013E   0x4683             MOV      R11,R0
   \                     ??emberAfPluginReportingTickEventHandler_10:
   \   00000140   0xFA5F 0xFB8B      UXTB     R11,R11
    176          #if (BIGENDIAN_CPU)
    177              if (isThisDataTypeSentLittleEndianOTA(dataType)) {
    178                int8u i;
    179                for (i = 0; i < dataSize; i++) {
    180                  emberAfPutInt8uInResp(readData[dataSize - i - 1]);
    181                }
    182              } else {
    183                emberAfPutBlockInResp(readData, dataSize);
    184              }
    185          #else
    186              emberAfPutBlockInResp(readData, dataSize);
   \   00000144   0x4659             MOV      R1,R11
   \   00000146   0xA80A             ADD      R0,SP,#+40
   \   00000148   0x.... 0x....      BL       emberAfPutBlockInResp
    187          #endif
    188          
    189              // Store the last reported time and value so that we can track intervals
    190              // and changes.  We only track changes for data types that are small enough
    191              // for us to compare.
    192              volatileData[i].reportableChange = FALSE;
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x7230             STRB     R0,[R6, #+8]
    193              volatileData[i].lastReportTimeMs = currentTimeMs;
   \   00000150   0xF849 0x4008      STR      R4,[R9, R8]
    194              if (dataSize <= sizeof(volatileData[i].lastReportValue)) {
   \   00000154   0xF1BB 0x0F05      CMP      R11,#+5
   \   00000158   0xD205             BCS.N    ??emberAfPluginReportingTickEventHandler_4
    195                volatileData[i].lastReportValue = 0;
   \   0000015A   0x6070             STR      R0,[R6, #+4]
    196          #if (BIGENDIAN_CPU)
    197                MEMCOPY(((int8u *)&volatileData[i].lastReportValue
    198                         + sizeof(volatileData[i].lastReportValue)
    199                         - dataSize),
    200                        readData,
    201                        dataSize);
    202          #else
    203                MEMCOPY(&volatileData[i].lastReportValue, readData, dataSize);
   \   0000015C   0x465A             MOV      R2,R11
   \   0000015E   0xA90A             ADD      R1,SP,#+40
   \   00000160   0x1D30             ADDS     R0,R6,#+4
   \   00000162   0x.... 0x....      BL       halCommonMemCopy
    204          #endif
    205              }
    206            }
   \                     ??emberAfPluginReportingTickEventHandler_4:
   \   00000166   0x1C6D             ADDS     R5,R5,#+1
   \   00000168   0x2D05             CMP      R5,#+5
   \   0000016A   0xF6FF 0xAF53      BLT.W    ??emberAfPluginReportingTickEventHandler_0
    207          
    208            if (apsFrame != NULL) {
   \   0000016E   0xB157             CBZ.N    R7,??emberAfPluginReportingTickEventHandler_11
    209              conditionallySendReport(apsFrame->sourceEndpoint, apsFrame->clusterId);
   \   00000170   0x887C             LDRH     R4,[R7, #+2]
   \   00000172   0x7938             LDRB     R0,[R7, #+4]
   \   00000174   0x.... 0x....      BL       emberAfIsDeviceEnabled
   \   00000178   0xB908             CBNZ.N   R0,??emberAfPluginReportingTickEventHandler_12
   \   0000017A   0x2C03             CMP      R4,#+3
   \   0000017C   0xD103             BNE.N    ??emberAfPluginReportingTickEventHandler_11
   \                     ??emberAfPluginReportingTickEventHandler_12:
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable17_1
   \   00000182   0x.... 0x....      BL       emberAfSendCommandUnicastToBindingsWithCallback
    210            }
    211            scheduleTick();
   \                     ??emberAfPluginReportingTickEventHandler_11:
   \   00000186   0x.... 0x....      BL       scheduleTick
    212          }
   \   0000018A   0xB00D             ADD      SP,SP,#+52
   \   0000018C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    213          
    214          static void conditionallySendReport(int8u endpoint, EmberAfClusterId clusterId)
    215          {
    216            if (emberAfIsDeviceEnabled(endpoint)
    217                || clusterId == ZCL_IDENTIFY_CLUSTER_ID) {
    218              emberAfSendCommandUnicastToBindingsWithCallback((EmberAfMessageSentFunction)(&retrySendReport));
    219            }
    220          }
    221          

   \                                 In section .text, align 2, keep-with-next
    222          boolean emberAfConfigureReportingCommandCallback(const EmberAfClusterCommand *cmd)
    223          {
   \                     emberAfConfigureReportingCommandCallback:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4604             MOV      R4,R0
    224            int16u bufIndex = cmd->payloadStartIndex;
   \   00000008   0x7D27             LDRB     R7,[R4, #+20]
    225            int8u frameControl, mask;
    226            boolean failures = FALSE;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0006      STRB     R0,[SP, #+6]
    227          
    228            emberAfReportingPrint("%p: ", "CFG_RPT");
   \   00000010   0x.... 0x....      ADR.W    R2,`?<Constant "CFG_RPT">`
   \   00000014   0x.... 0x....      BL       ?Subroutine2
    229            emberAfReportingDebugExec(emberAfDecodeAndPrintCluster(cmd->apsFrame->clusterId));
   \                     ??CrossCallReturnLabel_1:
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0x.... 0x....      BL       emberAfPrintEnabled
   \   0000001E   0xB118             CBZ.N    R0,??emberAfConfigureReportingCommandCallback_0
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x8840             LDRH     R0,[R0, #+2]
   \   00000024   0x.... 0x....      BL       emberAfDecodeAndPrintCluster
   \                     ??emberAfConfigureReportingCommandCallback_0:
   \   00000028   0x.... 0x....      BL       ?Subroutine5
    230            emberAfReportingPrintln("");
    231            emberAfReportingFlush();
    232          
    233            if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER) {
   \                     ??CrossCallReturnLabel_8:
   \   0000002C   0x7D60             LDRB     R0,[R4, #+21]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xBF07             ITTEE    EQ 
   \   00000032   0x2008             MOVEQ    R0,#+8
   \   00000034   0x2140             MOVEQ    R1,#+64
   \   00000036   0x2000             MOVNE    R0,#+0
   \   00000038   0x2180             MOVNE    R1,#+128
    234              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    235                              | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    236                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
    237              mask = CLUSTER_MASK_SERVER;
    238            } else {
    239              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    240                              | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    241                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
    242              mask = CLUSTER_MASK_CLIENT;
   \   0000003A   0xF88D 0x1005      STRB     R1,[SP, #+5]
    243            }
    244          
    245            // The manufacturer-specfic version of the fill API only creates a
    246            // manufacturer-specfic command if the manufacturer code is set.  For non-
    247            // manufacturer-specfic reports, the manufacturer code is unset, so we can
    248            // get away with using this API for both cases.
    249            emberAfFillExternalManufacturerSpecificBuffer(frameControl,
    250                                                          cmd->apsFrame->clusterId,
    251                                                          cmd->mfgCode,
    252                                                          ZCL_CONFIGURE_REPORTING_RESPONSE_COMMAND_ID,
    253                                                          "");
   \   0000003E   0x....             ADR.N    R1,??DataTable13  ;; ""
   \   00000040   0x9100             STR      R1,[SP, #+0]
   \   00000042   0x2307             MOVS     R3,#+7
   \   00000044   0x.... 0x....      BL       ?Subroutine3
    254          
    255            // Each record in the command has at least a one-byte direction and a two-
    256            // byte attribute id.  Additional fields are present depending on the value
    257            // of the direction field.
    258            while (bufIndex + 3 < cmd->bufLen) {
   \                     ??CrossCallReturnLabel_3:
   \   00000048   0x89A2             LDRH     R2,[R4, #+12]
   \   0000004A   0xB2BF             UXTH     R7,R7
   \   0000004C   0x1CF8             ADDS     R0,R7,#+3
   \   0000004E   0x4290             CMP      R0,R2
   \   00000050   0xF280 0x80A1      BGE.W    ??emberAfConfigureReportingCommandCallback_1
    259              EmberAfAttributeId attributeId;
    260              EmberAfReportingDirection direction;
    261              EmberAfStatus status;
    262          
    263              direction = (EmberAfReportingDirection)emberAfGetInt8u(cmd->buffer,
    264                                                                     bufIndex,
    265                                                                     cmd->bufLen);
   \   00000054   0x68A0             LDR      R0,[R4, #+8]
   \   00000056   0x5C3D             LDRB     R5,[R7, R0]
    266              bufIndex++;
   \   00000058   0x1C7F             ADDS     R7,R7,#+1
    267              attributeId = (EmberAfAttributeId)emberAfGetInt16u(cmd->buffer,
    268                                                                 bufIndex,
    269                                                                 cmd->bufLen);
   \   0000005A   0xB2B9             UXTH     R1,R7
   \   0000005C   0x.... 0x....      BL       emberAfGetInt16u
   \   00000060   0x4680             MOV      R8,R0
    270              bufIndex += 2;
   \   00000062   0x1CBF             ADDS     R7,R7,#+2
    271          
    272              emberAfReportingPrintln(" - direction:%x, attr:%2x", direction, attributeId);
   \   00000064   0x4643             MOV      R3,R8
   \   00000066   0x462A             MOV      R2,R5
   \   00000068   0x.... 0x....      ADR.W    R1,`?<Constant " - direction:%x, attr...">`
   \   0000006C   0x2020             MOVS     R0,#+32
   \   0000006E   0x.... 0x....      BL       emberAfPrintln
    273          
    274              switch (direction) {
   \   00000072   0xB115             CBZ.N    R5,??emberAfConfigureReportingCommandCallback_2
   \   00000074   0x2D01             CMP      R5,#+1
   \   00000076   0xD07A             BEQ.N    ??emberAfConfigureReportingCommandCallback_3
   \   00000078   0xE08B             B.N      ??emberAfConfigureReportingCommandCallback_4
    275              case EMBER_ZCL_REPORTING_DIRECTION_REPORTED:
    276                {
    277                  EmberAfAttributeMetadata* metadata;
    278                  EmberAfAttributeType dataType;
    279                  int16u minInterval, maxInterval;
    280                  int32u reportableChange = 0;
   \                     ??emberAfConfigureReportingCommandCallback_2:
   \   0000007A   0x2600             MOVS     R6,#+0
    281                  EmberAfPluginReportingEntry newEntry;
    282          
    283                  dataType = emberAfGetInt8u(cmd->buffer, bufIndex, cmd->bufLen);
   \   0000007C   0x68A0             LDR      R0,[R4, #+8]
   \   0000007E   0xB2BF             UXTH     R7,R7
   \   00000080   0x5C39             LDRB     R1,[R7, R0]
   \   00000082   0xF88D 0x1004      STRB     R1,[SP, #+4]
    284                  bufIndex++;
   \   00000086   0x1C7F             ADDS     R7,R7,#+1
    285                  minInterval = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
   \   00000088   0x89A2             LDRH     R2,[R4, #+12]
   \   0000008A   0xB2B9             UXTH     R1,R7
   \   0000008C   0x.... 0x....      BL       emberAfGetInt16u
   \   00000090   0x4681             MOV      R9,R0
    286                  bufIndex += 2;
   \   00000092   0x1CBF             ADDS     R7,R7,#+2
    287                  maxInterval = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
   \   00000094   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_5:
   \   00000098   0x4682             MOV      R10,R0
    288                  bufIndex += 2;
   \   0000009A   0x1CBF             ADDS     R7,R7,#+2
    289          
    290                  emberAfReportingPrintln("   type:%x, min:%2x, max:%2x",
    291                                          dataType,
    292                                          minInterval,
    293                                          maxInterval);
   \   0000009C   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   000000A0   0x464B             MOV      R3,R9
   \   000000A2   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   000000A6   0x.... 0x....      ADR.W    R1,`?<Constant "   type:%x, min:%2x, ...">`
   \   000000AA   0x2020             MOVS     R0,#+32
   \   000000AC   0x.... 0x....      BL       emberAfPrintln
    294                  emberAfReportingFlush();
    295          
    296                  if (emberAfGetAttributeAnalogOrDiscreteType(dataType)
    297                      == EMBER_AF_DATA_TYPE_ANALOG) {
   \   000000B0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000B4   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
   \   000000B8   0xB9D8             CBNZ.N   R0,??emberAfConfigureReportingCommandCallback_5
    298                    int8u dataSize = emberAfGetDataSize(dataType);
   \   000000BA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000BE   0x.... 0x....      BL       emberAfGetDataSize
   \   000000C2   0x4683             MOV      R11,R0
    299                    reportableChange = emberAfGetInt(cmd->buffer,
    300                                                     bufIndex,
    301                                                     cmd->bufLen,
    302                                                     dataSize);
   \   000000C4   0x465B             MOV      R3,R11
   \   000000C6   0x89A2             LDRH     R2,[R4, #+12]
   \   000000C8   0xB2B9             UXTH     R1,R7
   \   000000CA   0x68A0             LDR      R0,[R4, #+8]
   \   000000CC   0x.... 0x....      BL       emberAfGetInt
   \   000000D0   0x4606             MOV      R6,R0
    303          
    304                    emberAfReportingPrint("   change:");
   \   000000D2   0x.... 0x....      ADR.W    R1,`?<Constant "   change:">`
   \   000000D6   0x2020             MOVS     R0,#+32
   \   000000D8   0x.... 0x....      BL       emberAfPrint
    305                    emberAfReportingPrintBuffer(cmd->buffer + bufIndex, dataSize, FALSE);
   \   000000DC   0x2300             MOVS     R3,#+0
   \   000000DE   0x465A             MOV      R2,R11
   \   000000E0   0xB2BF             UXTH     R7,R7
   \   000000E2   0x68A0             LDR      R0,[R4, #+8]
   \   000000E4   0x1839             ADDS     R1,R7,R0
   \   000000E6   0x2020             MOVS     R0,#+32
   \   000000E8   0x.... 0x....      BL       emberAfPrintBuffer
    306                    emberAfReportingPrintln("");
   \   000000EC   0x.... 0x....      BL       ?Subroutine5
    307          
    308                    bufIndex += dataSize;
   \                     ??CrossCallReturnLabel_7:
   \   000000F0   0x445F             ADD      R7,R11,R7
    309                  }
    310          
    311                  // emberAfPluginReportingConfigureReportedAttribute handles non-
    312                  // existent attributes, but does not verify the attribute data type, so
    313                  // we need to check it here.
    314                  metadata = emberAfLocateAttributeMetadata(cmd->apsFrame->destinationEndpoint,
    315                                                            cmd->apsFrame->clusterId,
    316                                                            attributeId,
    317                                                            mask,
    318                                                            cmd->mfgCode);
   \                     ??emberAfConfigureReportingCommandCallback_5:
   \   000000F2   0x6820             LDR      R0,[R4, #+0]
   \   000000F4   0x8A21             LDRH     R1,[R4, #+16]
   \   000000F6   0x9100             STR      R1,[SP, #+0]
   \   000000F8   0xF89D 0x3005      LDRB     R3,[SP, #+5]
   \   000000FC   0x4642             MOV      R2,R8
   \   000000FE   0x8841             LDRH     R1,[R0, #+2]
   \   00000100   0x7940             LDRB     R0,[R0, #+5]
   \   00000102   0x.... 0x....      BL       emberAfLocateAttributeMetadata
    319                  if (metadata != NULL && metadata->attributeType != dataType) {
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xBF1F             ITTTT    NE 
   \   0000010A   0x7880             LDRBNE   R0,[R0, #+2]
   \   0000010C   0xF89D 0x1004      LDRBNE   R1,[SP, #+4]
   \   00000110   0x4288             CMPNE    R0,R1
   \   00000112   0x268D             MOVNE    R6,#+141
    320                    status = EMBER_ZCL_STATUS_INVALID_DATA_TYPE;
   \   00000114   0xD11B             BNE.N    ??emberAfConfigureReportingCommandCallback_6
    321                  } else {
    322                    // Add a reporting entry for a reported attribute.  The reports will
    323                    // be sent from us to the source of the Configure Reporting command.
    324                    newEntry.endpoint = cmd->apsFrame->destinationEndpoint;
   \   00000116   0x6820             LDR      R0,[R4, #+0]
   \   00000118   0x7940             LDRB     R0,[R0, #+5]
   \   0000011A   0xF88D 0x0009      STRB     R0,[SP, #+9]
    325                    newEntry.clusterId = cmd->apsFrame->clusterId;
   \   0000011E   0x6820             LDR      R0,[R4, #+0]
   \   00000120   0x8840             LDRH     R0,[R0, #+2]
   \   00000122   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    326                    newEntry.attributeId = attributeId;
   \   00000126   0xF8AD 0x800C      STRH     R8,[SP, #+12]
    327                    newEntry.mask = mask;
   \   0000012A   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000012E   0xF88D 0x000E      STRB     R0,[SP, #+14]
    328                    newEntry.manufacturerCode = EMBER_AF_NULL_MANUFACTURER_CODE;
   \   00000132   0x2000             MOVS     R0,#+0
   \   00000134   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    329                    newEntry.data.reported.minInterval = minInterval;
   \   00000138   0xF8AD 0x9014      STRH     R9,[SP, #+20]
    330                    newEntry.data.reported.maxInterval = maxInterval;
   \   0000013C   0xF8AD 0xA016      STRH     R10,[SP, #+22]
    331                    newEntry.data.reported.reportableChange = reportableChange;
   \   00000140   0x9606             STR      R6,[SP, #+24]
    332                    status = emberAfPluginReportingConfigureReportedAttribute(&newEntry);
   \   00000142   0xA802             ADD      R0,SP,#+8
   \   00000144   0x.... 0x....      BL       emberAfPluginReportingConfigureReportedAttribute
   \                     ??emberAfConfigureReportingCommandCallback_7:
   \   00000148   0x0006             MOVS     R6,R0
    333                  }
    334                  break;
    335                }
    336              case EMBER_ZCL_REPORTING_DIRECTION_RECEIVED:
    337                {
    338                  int16u timeout = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
    339                  bufIndex += 2;
    340          
    341                  emberAfReportingPrintln("   timeout:%2x", timeout);
    342          
    343                  // Add a reporting entry from a received attribute.  The reports
    344                  // will be sent to us from the source of the Configure Reporting
    345                  // command.
    346                  status = configureReceivedAttribute(cmd,
    347                                                      attributeId,
    348                                                      mask,
    349                                                      timeout);
    350                  break;
    351                }
    352              default:
    353                // This will abort the processing (see below).
    354                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    355                break;
    356              }
    357          
    358              // If a report cannot be configured, the status, direction, and
    359              // attribute are added to the response.  If the failure was due to an
    360              // invalid field, we have to abort after this record because we don't
    361              // know how to interpret the rest of the data in the request.
    362              if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000014A   0xF43F 0xAF7D      BEQ.W    ??CrossCallReturnLabel_3
    363                emberAfPutInt8uInResp(status);
   \                     ??emberAfConfigureReportingCommandCallback_6:
   \   0000014E   0x4630             MOV      R0,R6
   \   00000150   0x.... 0x....      BL       emberAfPutInt8uInResp
    364                emberAfPutInt8uInResp(direction);
   \   00000154   0x4628             MOV      R0,R5
   \   00000156   0x.... 0x....      BL       emberAfPutInt8uInResp
    365                emberAfPutInt16uInResp(attributeId);
   \   0000015A   0x4640             MOV      R0,R8
   \   0000015C   0x.... 0x....      BL       emberAfPutInt16uInResp
    366                failures = TRUE;
   \   00000160   0x2001             MOVS     R0,#+1
   \   00000162   0xF88D 0x0006      STRB     R0,[SP, #+6]
    367                if (status == EMBER_ZCL_STATUS_INVALID_FIELD) {
   \   00000166   0x2E85             CMP      R6,#+133
   \   00000168   0xF47F 0xAF6E      BNE.W    ??CrossCallReturnLabel_3
   \   0000016C   0xE018             B.N      ??emberAfConfigureReportingCommandCallback_8
    368                  break;
    369                }
    370              }
   \                     ??emberAfConfigureReportingCommandCallback_3:
   \   0000016E   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_4:
   \   00000172   0x4606             MOV      R6,R0
   \   00000174   0x1CBF             ADDS     R7,R7,#+2
   \   00000176   0x4632             MOV      R2,R6
   \   00000178   0x.... 0x....      ADR.W    R1,`?<Constant "   timeout:%2x">`
   \   0000017C   0x2020             MOVS     R0,#+32
   \   0000017E   0x.... 0x....      BL       emberAfPrintln
   \   00000182   0x4633             MOV      R3,R6
   \   00000184   0xF89D 0x2005      LDRB     R2,[SP, #+5]
   \   00000188   0x4641             MOV      R1,R8
   \   0000018A   0x4620             MOV      R0,R4
   \   0000018C   0x.... 0x....      BL       configureReceivedAttribute
   \   00000190   0xE7DA             B.N      ??emberAfConfigureReportingCommandCallback_7
   \                     ??emberAfConfigureReportingCommandCallback_4:
   \   00000192   0x2685             MOVS     R6,#+133
   \   00000194   0xE7DB             B.N      ??emberAfConfigureReportingCommandCallback_6
    371            }
    372          
    373            // We just respond with SUCCESS if we made it through without failures.
    374            if (!failures) {
   \                     ??emberAfConfigureReportingCommandCallback_1:
   \   00000196   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000019A   0xB908             CBNZ.N   R0,??emberAfConfigureReportingCommandCallback_8
    375              emberAfPutInt8uInResp(EMBER_ZCL_STATUS_SUCCESS);
   \   0000019C   0x.... 0x....      BL       emberAfPutInt8uInResp
    376            }
    377          
    378            emberAfSendResponse();
   \                     ??emberAfConfigureReportingCommandCallback_8:
   \   000001A0   0x....             B.N      ?Subroutine0
    379            return TRUE;
    380          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x....             ADR.N    R1,??DataTable13  ;; ""
   \                     ??Subroutine5_0:
   \   00000002   0x2020             MOVS     R0,#+32
   \   00000004   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x89A2             LDRH     R2,[R4, #+12]
   \   00000002   0xB2B9             UXTH     R1,R7
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      BL       emberAfSendResponse
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xB007             ADD      SP,SP,#+28
   \   00000008   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x8A22             LDRH     R2,[R4, #+16]
   \   00000002   0x6821             LDR      R1,[R4, #+0]
   \   00000004   0x8849             LDRH     R1,[R1, #+2]
   \   00000006   0x.... 0x....      B.W      emberAfFillExternalManufacturerSpecificBuffer

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "%p: ">`
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      B.W      emberAfPrint
    381          

   \                                 In section .text, align 2, keep-with-next
    382          boolean emberAfReadReportingConfigurationCommandCallback(const EmberAfClusterCommand *cmd)
    383          {
   \                     emberAfReadReportingConfigurationCommandCallback:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4604             MOV      R4,R0
    384            int16u bufIndex = cmd->payloadStartIndex;
   \   00000008   0x7D25             LDRB     R5,[R4, #+20]
    385            int8u frameControl, mask;
    386          
    387            emberAfReportingPrint("%p: ", "READ_RPT_CFG");
   \   0000000A   0x.... 0x....      ADR.W    R2,`?<Constant "READ_RPT_CFG">`
   \   0000000E   0x.... 0x....      BL       ?Subroutine2
    388            emberAfReportingDebugExec(emberAfDecodeAndPrintCluster(cmd->apsFrame->clusterId));
   \                     ??CrossCallReturnLabel_0:
   \   00000012   0x2020             MOVS     R0,#+32
   \   00000014   0x.... 0x....      BL       emberAfPrintEnabled
   \   00000018   0xB118             CBZ.N    R0,??emberAfReadReportingConfigurationCommandCallb_0
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x8840             LDRH     R0,[R0, #+2]
   \   0000001E   0x.... 0x....      BL       emberAfDecodeAndPrintCluster
    389            emberAfReportingPrintln("");
   \                     ??emberAfReadReportingConfigurationCommandCallb_0:
   \   00000022   0x....             ADR.N    R7,??DataTable16  ;; ""
   \   00000024   0x4639             MOV      R1,R7
   \   00000026   0x.... 0x....      BL       ??Subroutine5_0
    390            emberAfReportingFlush();
    391          
    392            if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER) {
   \                     ??CrossCallReturnLabel_6:
   \   0000002A   0x7D60             LDRB     R0,[R4, #+21]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xBF07             ITTEE    EQ 
   \   00000030   0x2008             MOVEQ    R0,#+8
   \   00000032   0xF04F 0x0940      MOVEQ    R9,#+64
   \   00000036   0x2000             MOVNE    R0,#+0
   \   00000038   0xF04F 0x0980      MOVNE    R9,#+128
    393              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    394                              | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    395                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
    396              mask = CLUSTER_MASK_SERVER;
    397            } else {
    398              frameControl = (ZCL_PROFILE_WIDE_COMMAND
    399                              | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER
    400                              | EMBER_AF_DEFAULT_RESPONSE_POLICY_REQUESTS);
    401              mask = CLUSTER_MASK_CLIENT;
    402            }
    403          
    404            // The manufacturer-specfic version of the fill API only creates a
    405            // manufacturer-specfic command if the manufacturer code is set.  For non-
    406            // manufacturer-specfic reports, the manufacturer code is unset, so we can
    407            // get away with using this API for both cases.
    408            emberAfFillExternalManufacturerSpecificBuffer(frameControl,
    409                                                          cmd->apsFrame->clusterId,
    410                                                          cmd->mfgCode,
    411                                                          ZCL_READ_REPORTING_CONFIGURATION_RESPONSE_COMMAND_ID,
    412                                                          "");
   \   0000003C   0x9700             STR      R7,[SP, #+0]
   \   0000003E   0x2309             MOVS     R3,#+9
   \   00000040   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_2:
   \   00000044   0xE014             B.N      ??emberAfReadReportingConfigurationCommandCallb_1
    413          
    414            // Each record in the command has a one-byte direction and a two-byte
    415            // attribute id.
    416            while (bufIndex + 3 <= cmd->bufLen) {
    417              EmberAfAttributeId attributeId;
    418              EmberAfAttributeMetadata *metadata;
    419              EmberAfPluginReportingEntry entry;
    420              EmberAfReportingDirection direction;
    421              int8u i;
    422              boolean found = FALSE;
    423          
    424              direction = emberAfGetInt8u(cmd->buffer, bufIndex, cmd->bufLen);
                               ^
Warning[Pe188]: enumerated type mixed with another type
    425              bufIndex++;
    426              attributeId = emberAfGetInt16u(cmd->buffer, bufIndex, cmd->bufLen);
    427              bufIndex += 2;
    428          
    429              switch (direction) {
    430              case EMBER_ZCL_REPORTING_DIRECTION_REPORTED:
    431                metadata = emberAfLocateAttributeMetadata(cmd->apsFrame->destinationEndpoint,
    432                                                          cmd->apsFrame->clusterId,
    433                                                          attributeId,
    434                                                          mask,
    435                                                          cmd->mfgCode);
   \                     ??emberAfReadReportingConfigurationCommandCallb_2:
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x8A21             LDRH     R1,[R4, #+16]
   \   0000004A   0x9100             STR      R1,[SP, #+0]
   \   0000004C   0x464B             MOV      R3,R9
   \   0000004E   0x4652             MOV      R2,R10
   \   00000050   0x8841             LDRH     R1,[R0, #+2]
   \   00000052   0x7940             LDRB     R0,[R0, #+5]
   \   00000054   0x.... 0x....      BL       emberAfLocateAttributeMetadata
   \   00000058   0xEA5F 0x0800      MOVS     R8,R0
    436                if (metadata == NULL) {
   \   0000005C   0xD120             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_3
    437                  emberAfPutInt8uInResp(EMBER_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE);
   \   0000005E   0x2086             MOVS     R0,#+134
   \   00000060   0x.... 0x....      BL       emberAfPutInt8uInResp
    438                  emberAfPutInt8uInResp(direction);
   \   00000064   0x2000             MOVS     R0,#+0
   \                     ??emberAfReadReportingConfigurationCommandCallb_4:
   \   00000066   0x.... 0x....      BL       emberAfPutInt8uInResp
    439                  emberAfPutInt16uInResp(attributeId);
   \   0000006A   0x4650             MOV      R0,R10
   \                     ??emberAfReadReportingConfigurationCommandCallb_5:
   \   0000006C   0x.... 0x....      BL       emberAfPutInt16uInResp
    440                  continue;
    441                }
   \                     ??emberAfReadReportingConfigurationCommandCallb_1:
   \   00000070   0x89A2             LDRH     R2,[R4, #+12]
   \   00000072   0xB2AD             UXTH     R5,R5
   \   00000074   0x1CE8             ADDS     R0,R5,#+3
   \   00000076   0x4282             CMP      R2,R0
   \   00000078   0xF2C0 0x809C      BLT.W    ??emberAfReadReportingConfigurationCommandCallb_6
   \   0000007C   0x2700             MOVS     R7,#+0
   \   0000007E   0x68A0             LDR      R0,[R4, #+8]
   \   00000080   0x5C2E             LDRB     R6,[R5, R0]
   \   00000082   0x1C6D             ADDS     R5,R5,#+1
   \   00000084   0xB2A9             UXTH     R1,R5
   \   00000086   0x.... 0x....      BL       emberAfGetInt16u
   \   0000008A   0x4682             MOV      R10,R0
   \   0000008C   0x1CAD             ADDS     R5,R5,#+2
   \   0000008E   0x2E00             CMP      R6,#+0
   \   00000090   0xD0D9             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_2
   \   00000092   0x2E01             CMP      R6,#+1
   \   00000094   0xD004             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_3
    442                break;
    443              case EMBER_ZCL_REPORTING_DIRECTION_RECEIVED:
    444                break;
    445              default:
    446                emberAfPutInt8uInResp(EMBER_ZCL_STATUS_INVALID_FIELD);
   \   00000096   0x2085             MOVS     R0,#+133
   \   00000098   0x.... 0x....      BL       emberAfPutInt8uInResp
    447                emberAfPutInt8uInResp(direction);
   \   0000009C   0x4630             MOV      R0,R6
   \   0000009E   0xE7E2             B.N      ??emberAfReadReportingConfigurationCommandCallb_4
    448                emberAfPutInt16uInResp(attributeId);
    449                continue;
    450              }
    451          
    452              // 075123r03 seems to suggest that SUCCESS is returned even if reporting
    453              // isn't configured for the requested attribute.  The individual fields
    454              // of the response for this attribute get populated with defaults.
    455              for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \                     ??emberAfReadReportingConfigurationCommandCallb_3:
   \   000000A0   0x46BB             MOV      R11,R7
    456                emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfReadReportingConfigurationCommandCallb_7:
   \   000000A2   0xA901             ADD      R1,SP,#+4
   \   000000A4   0x4658             MOV      R0,R11
   \   000000A6   0x.... 0x....      BL       emAfPluginReportingGetEntry
    457                if (entry.direction == direction
    458                    && entry.endpoint == cmd->apsFrame->destinationEndpoint
    459                    && entry.clusterId == cmd->apsFrame->clusterId
    460                    && entry.attributeId == attributeId
    461                    && entry.mask == mask
    462                    && entry.manufacturerCode == cmd->mfgCode
    463                    && (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    464                        || (entry.data.received.source == cmd->source
    465                            && entry.data.received.endpoint == cmd->apsFrame->sourceEndpoint))) {
   \   000000AA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000AE   0x42B0             CMP      R0,R6
   \   000000B0   0xBF01             ITTTT    EQ 
   \   000000B2   0x6820             LDREQ    R0,[R4, #+0]
   \   000000B4   0xF89D 0x1005      LDRBEQ   R1,[SP, #+5]
   \   000000B8   0x7942             LDRBEQ   R2,[R0, #+5]
   \   000000BA   0x4291             CMPEQ    R1,R2
   \   000000BC   0xD120             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
   \   000000BE   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   000000C2   0x8842             LDRH     R2,[R0, #+2]
   \   000000C4   0x4291             CMP      R1,R2
   \   000000C6   0xBF04             ITT      EQ 
   \   000000C8   0xF8BD 0x1008      LDRHEQ   R1,[SP, #+8]
   \   000000CC   0x4551             CMPEQ    R1,R10
   \   000000CE   0xD117             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
   \   000000D0   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   000000D4   0x4549             CMP      R1,R9
   \   000000D6   0xBF02             ITTT     EQ 
   \   000000D8   0xF8BD 0x100C      LDRHEQ   R1,[SP, #+12]
   \   000000DC   0x8A22             LDRHEQ   R2,[R4, #+16]
   \   000000DE   0x4291             CMPEQ    R1,R2
   \   000000E0   0xD10E             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
   \   000000E2   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000E6   0xB149             CBZ.N    R1,??emberAfReadReportingConfigurationCommandCallb_9
   \   000000E8   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   000000EC   0x88E2             LDRH     R2,[R4, #+6]
   \   000000EE   0x4291             CMP      R1,R2
   \   000000F0   0xBF02             ITTT     EQ 
   \   000000F2   0xF89D 0x1012      LDRBEQ   R1,[SP, #+18]
   \   000000F6   0x7900             LDRBEQ   R0,[R0, #+4]
   \   000000F8   0x4281             CMPEQ    R1,R0
   \   000000FA   0xD101             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_8
    466                  found = TRUE;
   \                     ??emberAfReadReportingConfigurationCommandCallb_9:
   \   000000FC   0x2701             MOVS     R7,#+1
    467                  break;
   \   000000FE   0xE006             B.N      ??emberAfReadReportingConfigurationCommandCallb_10
    468                }
    469              }
   \                     ??emberAfReadReportingConfigurationCommandCallb_8:
   \   00000100   0xF10B 0x0001      ADD      R0,R11,#+1
   \   00000104   0xFA5F 0xFB80      UXTB     R11,R0
   \   00000108   0xF1BB 0x0F05      CMP      R11,#+5
   \   0000010C   0xD3C9             BCC.N    ??emberAfReadReportingConfigurationCommandCallb_7
    470              emberAfPutInt8uInResp(EMBER_ZCL_STATUS_SUCCESS);
   \                     ??emberAfReadReportingConfigurationCommandCallb_10:
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       emberAfPutInt8uInResp
    471              emberAfPutInt8uInResp(direction);
   \   00000114   0x4630             MOV      R0,R6
   \   00000116   0x.... 0x....      BL       emberAfPutInt8uInResp
    472              emberAfPutInt16uInResp(attributeId);
   \   0000011A   0x4650             MOV      R0,R10
   \   0000011C   0x.... 0x....      BL       emberAfPutInt16uInResp
    473              switch (direction) {
   \   00000120   0xB116             CBZ.N    R6,??emberAfReadReportingConfigurationCommandCallb_11
   \   00000122   0x2E01             CMP      R6,#+1
   \   00000124   0xD03F             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_12
   \                     ??emberAfReadReportingConfigurationCommandCallb_13:
   \   00000126   0xE7A3             B.N      ??emberAfReadReportingConfigurationCommandCallb_1
    474                case EMBER_ZCL_REPORTING_DIRECTION_REPORTED:
    475                  emberAfPutInt8uInResp(metadata->attributeType);
   \                     ??emberAfReadReportingConfigurationCommandCallb_11:
   \   00000128   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   0000012C   0x.... 0x....      BL       emberAfPutInt8uInResp
    476                  emberAfPutInt16uInResp(found ? entry.data.reported.minInterval : 0xFFFF);
   \   00000130   0x2F00             CMP      R7,#+0
   \   00000132   0xBF14             ITE      NE 
   \   00000134   0xF8BD 0x0010      LDRHNE   R0,[SP, #+16]
   \   00000138   0xF64F 0x70FF      MOVWEQ   R0,#+65535
   \   0000013C   0x.... 0x....      BL       emberAfPutInt16uInResp
    477                  emberAfPutInt16uInResp(found ? entry.data.reported.maxInterval : 0xFFFF);
   \   00000140   0x2F00             CMP      R7,#+0
   \   00000142   0xBF14             ITE      NE 
   \   00000144   0xF8BD 0x0012      LDRHNE   R0,[SP, #+18]
   \   00000148   0xF64F 0x70FF      MOVWEQ   R0,#+65535
   \   0000014C   0x.... 0x....      BL       emberAfPutInt16uInResp
    478                  if (emberAfGetAttributeAnalogOrDiscreteType(metadata->attributeType)
    479                      == EMBER_AF_DATA_TYPE_ANALOG) {
   \   00000150   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   00000154   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD189             BNE.N    ??emberAfReadReportingConfigurationCommandCallb_1
    480                    putReportableChangeInResp(found ? &entry : NULL, metadata->attributeType);
   \   0000015C   0xB107             CBZ.N    R7,??emberAfReadReportingConfigurationCommandCallb_14
   \   0000015E   0xAF01             ADD      R7,SP,#+4
   \                     ??emberAfReadReportingConfigurationCommandCallb_14:
   \   00000160   0xF898 0x8002      LDRB     R8,[R8, #+2]
   \   00000164   0x4640             MOV      R0,R8
   \   00000166   0x.... 0x....      BL       emberAfGetDataSize
   \   0000016A   0x4606             MOV      R6,R0
   \   0000016C   0xB16F             CBZ.N    R7,??emberAfReadReportingConfigurationCommandCallb_15
   \   0000016E   0x693F             LDR      R7,[R7, #+16]
   \                     ??emberAfReadReportingConfigurationCommandCallb_16:
   \   00000170   0xB2F6             UXTB     R6,R6
   \   00000172   0x2E00             CMP      R6,#+0
   \   00000174   0xD0D7             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_13
   \   00000176   0xB2F8             UXTB     R0,R7
   \   00000178   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   0000017C   0x0A3F             LSRS     R7,R7,#+8
   \   0000017E   0x1E76             SUBS     R6,R6,#+1
   \   00000180   0xE7F6             B.N      ??emberAfReadReportingConfigurationCommandCallb_16
   \                     ??emberAfReadReportingConfigurationCommandCallb_17:
   \   00000182   0x4638             MOV      R0,R7
   \   00000184   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   00000188   0x1E76             SUBS     R6,R6,#+1
   \                     ??emberAfReadReportingConfigurationCommandCallb_15:
   \   0000018A   0xB2F6             UXTB     R6,R6
   \   0000018C   0x2E00             CMP      R6,#+0
   \   0000018E   0xD0CA             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_13
   \   00000190   0x27FF             MOVS     R7,#+255
   \   00000192   0x4640             MOV      R0,R8
   \   00000194   0x.... 0x....      BL       emberAfIsTypeSigned
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD0F2             BEQ.N    ??emberAfReadReportingConfigurationCommandCallb_17
   \   0000019C   0x2E01             CMP      R6,#+1
   \   0000019E   0xBF0C             ITE      EQ 
   \   000001A0   0x2780             MOVEQ    R7,#+128
   \   000001A2   0x2700             MOVNE    R7,#+0
   \   000001A4   0xE7ED             B.N      ??emberAfReadReportingConfigurationCommandCallb_17
    481                  }
    482                  break;
    483                case EMBER_ZCL_REPORTING_DIRECTION_RECEIVED:
    484                  emberAfPutInt16uInResp(found ? entry.data.received.timeout : 0xFFFF);
   \                     ??emberAfReadReportingConfigurationCommandCallb_12:
   \   000001A6   0x2F00             CMP      R7,#+0
   \   000001A8   0xBF0C             ITE      EQ 
   \   000001AA   0xF64F 0x70FF      MOVWEQ   R0,#+65535
   \   000001AE   0xF8BD 0x0014      LDRHNE   R0,[SP, #+20]
   \   000001B2   0xE75B             B.N      ??emberAfReadReportingConfigurationCommandCallb_5
    485                  break;
    486              }
    487            }
    488          
    489            emberAfSendResponse();
   \                     ??emberAfReadReportingConfigurationCommandCallb_6:
   \   000001B4                      REQUIRE ?Subroutine0
   \   000001B4                      ;; // Fall through to label ?Subroutine0
    490            return TRUE;
    491          }
    492          

   \                                 In section .text, align 2, keep-with-next
    493          EmberStatus emberAfClearReportTableCallback(void)
    494          {
   \                     emberAfClearReportTableCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
    495            int8u i;
    496            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000002   0x2400             MOVS     R4,#+0
    497              removeConfiguration(i);
   \                     ??emberAfClearReportTableCallback_0:
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       removeConfiguration
    498            }
   \   0000000A   0x1C64             ADDS     R4,R4,#+1
   \   0000000C   0x2C05             CMP      R4,#+5
   \   0000000E   0xD3F9             BCC.N    ??emberAfClearReportTableCallback_0
    499            emberEventControlSetInactive(emberAfPluginReportingTickEventControl);
   \   00000010   0x....             LDR.N    R0,??DataTable17_2
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    500            return EMBER_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    501          }
    502          

   \                                 In section .text, align 2, keep-with-next
    503          EmberStatus emAfPluginReportingRemoveEntry(int8u index)
    504          {
   \                     emAfPluginReportingRemoveEntry:
   \   00000000   0x4601             MOV      R1,R0
    505            EmberStatus status = EMBER_INDEX_OUT_OF_RANGE;
   \   00000002   0x20B1             MOVS     R0,#+177
    506            if (index < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE) {
   \   00000004   0x2905             CMP      R1,#+5
   \   00000006   0xD300             BCC.N    ??emAfPluginReportingRemoveEntry_0
    507              removeConfigurationAndScheduleTick(index);
   \   00000008   0x4770             BX       LR
   \                     ??emAfPluginReportingRemoveEntry_0:
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x.... 0x....      BL       removeConfiguration
   \   00000012   0x.... 0x....      BL       scheduleTick
    508              status = EMBER_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
    509            }
    510            return status;
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    511          }
    512          

   \                                 In section .text, align 2, keep-with-next
    513          void emberAfReportingAttributeChangeCallback(int8u endpoint,
    514                                                       EmberAfClusterId clusterId,
    515                                                       EmberAfAttributeId attributeId,
    516                                                       int8u mask,
    517                                                       int16u manufacturerCode,
    518                                                       EmberAfAttributeType type,
    519                                                       int8u *data)
    520          {
   \                     emberAfReportingAttributeChangeCallback:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4607             MOV      R7,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4691             MOV      R9,R2
   \   0000000C   0x469A             MOV      R10,R3
   \   0000000E   0x9D10             LDR      R5,[SP, #+64]
    521            int8u i;
    522            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000010   0x2600             MOVS     R6,#+0
   \   00000012   0x9C0E             LDR      R4,[SP, #+56]
   \   00000014   0xB2A4             UXTH     R4,R4
    523              EmberAfPluginReportingEntry entry;
    524              emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfReportingAttributeChangeCallback_0:
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x4630             MOV      R0,R6
   \   0000001A   0x.... 0x....      BL       emAfPluginReportingGetEntry
    525              if (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    526                  && entry.endpoint == endpoint
    527                  && entry.clusterId == clusterId
    528                  && entry.attributeId == attributeId
    529                  && entry.mask == mask
    530                  && entry.manufacturerCode == manufacturerCode) {
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xBF04             ITT      EQ 
   \   00000026   0xF89D 0x0001      LDRBEQ   R0,[SP, #+1]
   \   0000002A   0x42B8             CMPEQ    R0,R7
   \   0000002C   0xD12D             BNE.N    ??emberAfReportingAttributeChangeCallback_1
   \   0000002E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000032   0x4540             CMP      R0,R8
   \   00000034   0xBF04             ITT      EQ 
   \   00000036   0xF8BD 0x0004      LDRHEQ   R0,[SP, #+4]
   \   0000003A   0x4548             CMPEQ    R0,R9
   \   0000003C   0xD125             BNE.N    ??emberAfReportingAttributeChangeCallback_1
   \   0000003E   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000042   0x4550             CMP      R0,R10
   \   00000044   0xBF04             ITT      EQ 
   \   00000046   0xF8BD 0x0008      LDRHEQ   R0,[SP, #+8]
   \   0000004A   0x42A0             CMPEQ    R0,R4
   \   0000004C   0xD11D             BNE.N    ??emberAfReportingAttributeChangeCallback_1
   \   0000004E   0x9C0F             LDR      R4,[SP, #+60]
    531                // If we are reporting this particular attribute, we only care whether
    532                // the new value meets the reportable change criteria.  If it does, we
    533                // mark the entry as ready to report and reschedule the tick.  Whether
    534                // the tick will be scheduled for immediate or delayed execution depends
    535                // on the minimum reporting interval.  This is handled in the scheduler.
    536                int32u difference = emberAfGetDifference(data,
    537                                                         volatileData[i].lastReportValue,
    538                                                         emberAfGetDataSize(type));
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       emberAfGetDataSize
   \   00000056   0x210C             MOVS     R1,#+12
   \   00000058   0x....             LDR.N    R2,??DataTable17
   \   0000005A   0xFB01 0x2606      MLA      R6,R1,R6,R2
   \   0000005E   0x4602             MOV      R2,R0
   \   00000060   0x6871             LDR      R1,[R6, #+4]
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       emberAfGetDifference
   \   00000068   0x4605             MOV      R5,R0
    539                int8u analogOrDiscrete = emberAfGetAttributeAnalogOrDiscreteType(type);
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       emberAfGetAttributeAnalogOrDiscreteType
    540                if ((analogOrDiscrete == EMBER_AF_DATA_TYPE_DISCRETE && difference != 0)
    541                    || (analogOrDiscrete == EMBER_AF_DATA_TYPE_ANALOG
    542                        && entry.data.reported.reportableChange <= difference)) {
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD101             BNE.N    ??emberAfReportingAttributeChangeCallback_2
   \   00000074   0xB925             CBNZ.N   R5,??emberAfReportingAttributeChangeCallback_3
   \   00000076   0xE00C             B.N      ??emberAfReportingAttributeChangeCallback_4
   \                     ??emberAfReportingAttributeChangeCallback_2:
   \   00000078   0xB958             CBNZ.N   R0,??emberAfReportingAttributeChangeCallback_4
   \   0000007A   0x9804             LDR      R0,[SP, #+16]
   \   0000007C   0x4285             CMP      R5,R0
   \   0000007E   0xD308             BCC.N    ??emberAfReportingAttributeChangeCallback_4
    543                  volatileData[i].reportableChange = TRUE;
   \                     ??emberAfReportingAttributeChangeCallback_3:
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x7230             STRB     R0,[R6, #+8]
    544                  scheduleTick();
   \   00000084   0x.... 0x....      BL       scheduleTick
   \   00000088   0xE003             B.N      ??emberAfReportingAttributeChangeCallback_4
    545                }
    546                break;
    547              }
    548            }
   \                     ??emberAfReportingAttributeChangeCallback_1:
   \   0000008A   0x1C76             ADDS     R6,R6,#+1
   \   0000008C   0xB2F6             UXTB     R6,R6
   \   0000008E   0x2E05             CMP      R6,#+5
   \   00000090   0xD3C1             BCC.N    ??emberAfReportingAttributeChangeCallback_0
    549          }
   \                     ??emberAfReportingAttributeChangeCallback_4:
   \   00000092   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xB006             ADD      SP,SP,#+24
   \   00000002   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    550          

   \                                 In section .text, align 2, keep-with-next
    551          static void scheduleTick(void)
    552          {
   \                     scheduleTick:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
    553            int32u delayMs = MAX_INT32U_VALUE;
   \   00000006   0xF04F 0x38FF      MOV      R8,#-1
   \   0000000A   0x4644             MOV      R4,R8
    554            int32u currentTimeMs = halCommonGetInt32uMillisecondTick();
   \   0000000C   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   00000010   0x4605             MOV      R5,R0
    555            int8u i;
    556            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x....             LDR.N    R7,??DataTable17
    557              EmberAfPluginReportingEntry entry;
    558              emAfPluginReportingGetEntry(i, &entry);
   \                     ??scheduleTick_0:
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x4630             MOV      R0,R6
   \   0000001A   0x.... 0x....      BL       emAfPluginReportingGetEntry
    559              if (entry.endpoint != EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    560                  && entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED) {
   \   0000001E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000022   0xB1D0             CBZ.N    R0,??scheduleTick_1
   \   00000024   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000028   0xB9B8             CBNZ.N   R0,??scheduleTick_1
    561                int32u minIntervalMs = (entry.data.reported.minInterval
    562                                        * MILLISECOND_TICKS_PER_SECOND);
   \   0000002A   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   0000002E   0x0280             LSLS     R0,R0,#+10
    563                int32u elapsedMs = elapsedTimeInt32u(volatileData[i].lastReportTimeMs,
    564                                                     currentTimeMs);
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x4371             MULS     R1,R1,R6
   \   00000034   0x59CA             LDR      R2,[R1, R7]
   \   00000036   0x1AAA             SUBS     R2,R5,R2
    565                int32u remainingMs = MAX_INT32U_VALUE;
   \   00000038   0x4643             MOV      R3,R8
    566                if (volatileData[i].reportableChange) {
   \   0000003A   0x19C9             ADDS     R1,R1,R7
   \   0000003C   0x7A09             LDRB     R1,[R1, #+8]
   \   0000003E   0xB121             CBZ.N    R1,??scheduleTick_2
    567                  remainingMs = (minIntervalMs < elapsedMs
    568                                 ? 0
    569                                 : minIntervalMs - elapsedMs);
   \   00000040   0x4290             CMP      R0,R2
   \   00000042   0xBF2C             ITE      CS 
   \   00000044   0x1A83             SUBCS    R3,R0,R2
   \   00000046   0x2300             MOVCC    R3,#+0
   \   00000048   0xE004             B.N      ??scheduleTick_3
    570                } else if (entry.data.reported.maxInterval != 0x0000) {
   \                     ??scheduleTick_2:
   \   0000004A   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   0000004E   0xB108             CBZ.N    R0,??scheduleTick_3
    571                  remainingMs = (entry.data.reported.maxInterval
    572                                 * MILLISECOND_TICKS_PER_SECOND
    573                                 - elapsedMs);
   \   00000050   0xEBC2 0x2380      RSB      R3,R2,R0, LSL #+10
    574                }
    575                if (remainingMs < delayMs) {
   \                     ??scheduleTick_3:
   \   00000054   0x42A3             CMP      R3,R4
   \   00000056   0xBF98             IT       LS 
   \   00000058   0x461C             MOVLS    R4,R3
    576                  delayMs = remainingMs;
    577                }
    578              }
    579            }
   \                     ??scheduleTick_1:
   \   0000005A   0x1C76             ADDS     R6,R6,#+1
   \   0000005C   0x2E05             CMP      R6,#+5
   \   0000005E   0xD3DA             BCC.N    ??scheduleTick_0
    580            if (delayMs != MAX_INT32U_VALUE) {
   \   00000060   0x....             LDR.N    R5,??DataTable17_2
   \   00000062   0xF114 0x0F01      CMN      R4,#+1
   \   00000066   0xD00A             BEQ.N    ??scheduleTick_4
    581              emberAfDebugPrintln("sched report event for: 0x%4x", delayMs);
   \   00000068   0x4622             MOV      R2,R4
   \   0000006A   0x.... 0x....      ADR.W    R1,`?<Constant "sched report event fo...">`
   \   0000006E   0x2002             MOVS     R0,#+2
   \   00000070   0x.... 0x....      BL       emberAfPrintln
    582              emberAfEventControlSetDelay(&emberAfPluginReportingTickEventControl,
    583                                          delayMs);
   \   00000074   0x4621             MOV      R1,R4
   \   00000076   0x4628             MOV      R0,R5
   \   00000078   0x.... 0x....      BL       emberAfEventControlSetDelay
   \   0000007C   0xE006             B.N      ??scheduleTick_5
    584            } else {
    585              emberAfDebugPrintln("deactivate report event");
   \                     ??scheduleTick_4:
   \   0000007E   0x.... 0x....      ADR.W    R1,`?<Constant "deactivate report event">`
   \   00000082   0x2002             MOVS     R0,#+2
   \   00000084   0x.... 0x....      BL       emberAfPrintln
    586              emberEventControlSetInactive(emberAfPluginReportingTickEventControl);
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x7028             STRB     R0,[R5, #+0]
    587            }
    588          }
   \                     ??scheduleTick_5:
   \   0000008C   0xB006             ADD      SP,SP,#+24
   \   0000008E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    589          

   \                                 In section .text, align 2, keep-with-next
    590          static void removeConfiguration(int8u index)
    591          {
   \                     removeConfiguration:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
    592            EmberAfPluginReportingEntry entry;
    593            emAfPluginReportingGetEntry(index, &entry);
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x.... 0x....      BL       emAfPluginReportingGetEntry
    594            entry.endpoint = EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    595            emAfPluginReportingSetEntry(index, &entry);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emAfPluginReportingSetEntry
    596            emberAfPluginReportingConfiguredCallback(&entry);
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       emberAfPluginReportingConfiguredCallback
    597          }
   \   00000020   0xB006             ADD      SP,SP,#+24
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    598          
    599          static void removeConfigurationAndScheduleTick(int8u index)
    600          {
    601            removeConfiguration(index);
    602            scheduleTick();
    603          }
    604          

   \                                 In section .text, align 2, keep-with-next
    605          EmberAfStatus emberAfPluginReportingConfigureReportedAttribute(const EmberAfPluginReportingEntry* newEntry)
    606          {
   \                     emberAfPluginReportingConfigureReportedAttribute:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
    607            EmberAfAttributeMetadata *metadata;
    608            EmberAfPluginReportingEntry entry;
    609            EmberAfStatus status;
    610            int8u i, index = NULL_INDEX;
   \   00000006   0x25FF             MOVS     R5,#+255
    611            boolean initialize = TRUE;
   \   00000008   0x2601             MOVS     R6,#+1
    612          
    613            // Verify that we support the attribute and that the data type matches.
    614            metadata = emberAfLocateAttributeMetadata(newEntry->endpoint,
    615                                                      newEntry->clusterId,
    616                                                      newEntry->attributeId,
    617                                                      newEntry->mask,
    618                                                      newEntry->manufacturerCode);
    619            if (metadata == NULL) {
   \   0000000A   0x8920             LDRH     R0,[R4, #+8]
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x79A3             LDRB     R3,[R4, #+6]
   \   00000010   0x88A2             LDRH     R2,[R4, #+4]
   \   00000012   0x8861             LDRH     R1,[R4, #+2]
   \   00000014   0x7860             LDRB     R0,[R4, #+1]
   \   00000016   0x.... 0x....      BL       emberAfLocateAttributeMetadata
   \   0000001A   0xB908             CBNZ.N   R0,??emberAfPluginReportingConfigureReportedAttrib_0
    620              return EMBER_ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   0000001C   0x2086             MOVS     R0,#+134
   \   0000001E   0xE075             B.N      ??emberAfPluginReportingConfigureReportedAttrib_1
    621            }
    622          
    623            // Verify the minimum and maximum intervals make sense.
    624            if (newEntry->data.reported.maxInterval != 0
    625                && (newEntry->data.reported.maxInterval
    626                    < newEntry->data.reported.minInterval)) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_0:
   \   00000020   0x89E0             LDRH     R0,[R4, #+14]
   \   00000022   0xB120             CBZ.N    R0,??emberAfPluginReportingConfigureReportedAttrib_2
   \   00000024   0x89A1             LDRH     R1,[R4, #+12]
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xBF38             IT       CC 
   \   0000002A   0x2087             MOVCC    R0,#+135
    627              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \   0000002C   0xD36E             BCC.N    ??emberAfPluginReportingConfigureReportedAttrib_1
    628            }
    629          
    630            // Check the table for an entry that matches this request and also watch for
    631            // empty slots along the way.  If a report exists, it will be overwritten
    632            // with the new configuration.  Otherwise, a new entry will be created and
    633            // initialized.
    634            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_2:
   \   0000002E   0x2700             MOVS     R7,#+0
    635              emAfPluginReportingGetEntry(i, &entry);
   \                     ??emberAfPluginReportingConfigureReportedAttrib_3:
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0x4638             MOV      R0,R7
   \   00000034   0x.... 0x....      BL       emAfPluginReportingGetEntry
    636              if (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED
    637                  && entry.endpoint == newEntry->endpoint
    638                  && entry.clusterId == newEntry->clusterId
    639                  && entry.attributeId == newEntry->attributeId
    640                  && entry.mask == newEntry->mask
    641                  && entry.manufacturerCode == newEntry->manufacturerCode) {
   \   00000038   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000003C   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xBF04             ITT      EQ 
   \   00000044   0x7861             LDRBEQ   R1,[R4, #+1]
   \   00000046   0x4288             CMPEQ    R0,R1
   \   00000048   0xD116             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_4
   \   0000004A   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000004E   0x8862             LDRH     R2,[R4, #+2]
   \   00000050   0x4291             CMP      R1,R2
   \   00000052   0xBF02             ITTT     EQ 
   \   00000054   0xF8BD 0x1008      LDRHEQ   R1,[SP, #+8]
   \   00000058   0x88A2             LDRHEQ   R2,[R4, #+4]
   \   0000005A   0x4291             CMPEQ    R1,R2
   \   0000005C   0xD10C             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_4
   \   0000005E   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   00000062   0x79A2             LDRB     R2,[R4, #+6]
   \   00000064   0x4291             CMP      R1,R2
   \   00000066   0xBF02             ITTT     EQ 
   \   00000068   0xF8BD 0x100C      LDRHEQ   R1,[SP, #+12]
   \   0000006C   0x8922             LDRHEQ   R2,[R4, #+8]
   \   0000006E   0x4291             CMPEQ    R1,R2
   \   00000070   0xD102             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_4
    642                initialize = FALSE;
   \   00000072   0x2600             MOVS     R6,#+0
    643                index = i;
   \   00000074   0x463D             MOV      R5,R7
    644                break;
   \   00000076   0xE007             B.N      ??emberAfPluginReportingConfigureReportedAttrib_5
    645              } else if (entry.endpoint == EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    646                         && index == NULL_INDEX) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_4:
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xBF04             ITT      EQ 
   \   0000007C   0x2DFF             CMPEQ    R5,#+255
   \   0000007E   0x463D             MOVEQ    R5,R7
    647                index = i;
    648              }
    649            }
   \   00000080   0x1C7F             ADDS     R7,R7,#+1
   \   00000082   0xB2FF             UXTB     R7,R7
   \   00000084   0x2F05             CMP      R7,#+5
   \   00000086   0xD3D3             BCC.N    ??emberAfPluginReportingConfigureReportedAttrib_3
    650          
    651            // If the maximum reporting interval is 0xFFFF, the device shall not issue
    652            // reports for the attribute and the configuration information for that
    653            // attribute need not be maintained.
    654            if (newEntry->data.reported.maxInterval == 0xFFFF) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_5:
   \   00000088   0x89E0             LDRH     R0,[R4, #+14]
   \   0000008A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xD107             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_6
    655              if (!initialize) {
   \   00000092   0xB926             CBNZ.N   R6,??emberAfPluginReportingConfigureReportedAttrib_7
    656                removeConfigurationAndScheduleTick(index);
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0x.... 0x....      BL       removeConfiguration
   \   0000009A   0x.... 0x....      BL       scheduleTick
    657              }
    658              return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??emberAfPluginReportingConfigureReportedAttrib_7:
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xE034             B.N      ??emberAfPluginReportingConfigureReportedAttrib_1
    659            }
    660          
    661            if (index == NULL_INDEX) {
   \                     ??emberAfPluginReportingConfigureReportedAttrib_6:
   \   000000A2   0x2DFF             CMP      R5,#+255
   \   000000A4   0xBF08             IT       EQ 
   \   000000A6   0x2089             MOVEQ    R0,#+137
    662              return EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   000000A8   0xD030             BEQ.N    ??emberAfPluginReportingConfigureReportedAttrib_1
    663            } else if (initialize) {
   \   000000AA   0xB1DE             CBZ.N    R6,??emberAfPluginReportingConfigureReportedAttrib_8
    664              entry.direction = EMBER_ZCL_REPORTING_DIRECTION_REPORTED;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xF88D 0x0004      STRB     R0,[SP, #+4]
    665              entry.endpoint = newEntry->endpoint;
   \   000000B2   0x7860             LDRB     R0,[R4, #+1]
   \   000000B4   0xF88D 0x0005      STRB     R0,[SP, #+5]
    666              entry.clusterId = newEntry->clusterId;
   \   000000B8   0x8860             LDRH     R0,[R4, #+2]
   \   000000BA   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    667              entry.attributeId = newEntry->attributeId;
   \   000000BE   0x88A0             LDRH     R0,[R4, #+4]
   \   000000C0   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    668              entry.mask = newEntry->mask;
   \   000000C4   0x79A0             LDRB     R0,[R4, #+6]
   \   000000C6   0xF88D 0x000A      STRB     R0,[SP, #+10]
    669              entry.manufacturerCode = newEntry->manufacturerCode;
   \   000000CA   0x8920             LDRH     R0,[R4, #+8]
   \   000000CC   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   \   000000D0   0x200C             MOVS     R0,#+12
   \   000000D2   0xFB00 0xF605      MUL      R6,R0,R5
   \   000000D6   0x....             LDR.N    R7,??DataTable17
    670              volatileData[index].lastReportTimeMs = halCommonGetInt32uMillisecondTick();
   \   000000D8   0x.... 0x....      BL       halCommonGetInt32uMillisecondTick
   \   000000DC   0x51F0             STR      R0,[R6, R7]
    671              volatileData[index].lastReportValue = 0;
   \   000000DE   0x19F0             ADDS     R0,R6,R7
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0x6041             STR      R1,[R0, #+4]
    672            }
    673          
    674            // For new or updated entries, set the intervals and reportable change.
    675            // Updated entries will retain all other settings configured previously.
    676            entry.data.reported.minInterval = newEntry->data.reported.minInterval;
   \                     ??emberAfPluginReportingConfigureReportedAttrib_8:
   \   000000E4   0x89A0             LDRH     R0,[R4, #+12]
   \   000000E6   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    677            entry.data.reported.maxInterval = newEntry->data.reported.maxInterval;
   \   000000EA   0x89E0             LDRH     R0,[R4, #+14]
   \   000000EC   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    678            entry.data.reported.reportableChange = newEntry->data.reported.reportableChange;
   \   000000F0   0x6920             LDR      R0,[R4, #+16]
   \   000000F2   0x9005             STR      R0,[SP, #+20]
    679          
    680            // Give the application a chance to review the configuration that we have
    681            // been building up.  If the application rejects it, we just do not save the
    682            // record.  If we were supposed to add a new configuration, it will not be
    683            // created.  If we were supposed to update an existing configuration, we will
    684            // keep the old one and just discard any changes.  So, in either case, life
    685            // continues unchanged if the application rejects the configuration.
    686            status = emberAfPluginReportingConfiguredCallback(&entry);
   \   000000F4   0xA801             ADD      R0,SP,#+4
   \   000000F6   0x.... 0x....      BL       emberAfPluginReportingConfiguredCallback
   \   000000FA   0x0004             MOVS     R4,R0
    687            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   000000FC   0xD105             BNE.N    ??emberAfPluginReportingConfigureReportedAttrib_9
    688              emAfPluginReportingSetEntry(index, &entry);
   \   000000FE   0xA901             ADD      R1,SP,#+4
   \   00000100   0x4628             MOV      R0,R5
   \   00000102   0x.... 0x....      BL       emAfPluginReportingSetEntry
    689              scheduleTick();
   \   00000106   0x.... 0x....      BL       scheduleTick
    690            }
    691            return status;
   \                     ??emberAfPluginReportingConfigureReportedAttrib_9:
   \   0000010A   0x4620             MOV      R0,R4
   \                     ??emberAfPluginReportingConfigureReportedAttrib_1:
   \   0000010C   0xB007             ADD      SP,SP,#+28
   \   0000010E   0xBDF0             POP      {R4-R7,PC}       ;; return
    692          }
    693          

   \                                 In section .text, align 2, keep-with-next
    694          static EmberAfStatus configureReceivedAttribute(const EmberAfClusterCommand *cmd,
    695                                                          EmberAfAttributeId attributeId,
    696                                                          int8u mask,
    697                                                          int16u timeout)
    698          {
   \                     configureReceivedAttribute:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4691             MOV      R9,R2
   \   0000000C   0x469A             MOV      R10,R3
    699            EmberAfPluginReportingEntry entry;
    700            EmberAfStatus status;
    701            int8u i, index = NULL_INDEX;
   \   0000000E   0x25FF             MOVS     R5,#+255
    702            boolean initialize = TRUE;
   \   00000010   0x2601             MOVS     R6,#+1
    703          
    704            // Check the table for an entry that matches this request and also watch for
    705            // empty slots along the way.  If a report exists, it will be overwritten
    706            // with the new configuration.  Otherwise, a new entry will be created and
    707            // initialized.
    708            for (i = 0; i < EMBER_AF_PLUGIN_REPORTING_TABLE_SIZE; i++) {
   \   00000012   0x2700             MOVS     R7,#+0
    709              emAfPluginReportingGetEntry(i, &entry);
   \                     ??configureReceivedAttribute_0:
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x4638             MOV      R0,R7
   \   00000018   0x.... 0x....      BL       emAfPluginReportingGetEntry
    710              if (entry.direction == EMBER_ZCL_REPORTING_DIRECTION_RECEIVED
    711                  && entry.endpoint == cmd->apsFrame->destinationEndpoint
    712                  && entry.clusterId == cmd->apsFrame->clusterId
    713                  && entry.attributeId == attributeId
    714                  && entry.mask == mask
    715                  && entry.manufacturerCode == cmd->mfgCode
    716                  && entry.data.received.source == cmd->source
    717                  && entry.data.received.endpoint == cmd->apsFrame->sourceEndpoint) {
   \   0000001C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xBF01             ITTTT    EQ 
   \   00000024   0x6820             LDREQ    R0,[R4, #+0]
   \   00000026   0xF89D 0x1001      LDRBEQ   R1,[SP, #+1]
   \   0000002A   0x7942             LDRBEQ   R2,[R0, #+5]
   \   0000002C   0x4291             CMPEQ    R1,R2
   \   0000002E   0xD11E             BNE.N    ??configureReceivedAttribute_1
   \   00000030   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000034   0x8842             LDRH     R2,[R0, #+2]
   \   00000036   0x4291             CMP      R1,R2
   \   00000038   0xBF04             ITT      EQ 
   \   0000003A   0xF8BD 0x1004      LDRHEQ   R1,[SP, #+4]
   \   0000003E   0x4541             CMPEQ    R1,R8
   \   00000040   0xD115             BNE.N    ??configureReceivedAttribute_1
   \   00000042   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000046   0x4549             CMP      R1,R9
   \   00000048   0xBF02             ITTT     EQ 
   \   0000004A   0xF8BD 0x1008      LDRHEQ   R1,[SP, #+8]
   \   0000004E   0x8A22             LDRHEQ   R2,[R4, #+16]
   \   00000050   0x4291             CMPEQ    R1,R2
   \   00000052   0xD10C             BNE.N    ??configureReceivedAttribute_1
   \   00000054   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000058   0x88E2             LDRH     R2,[R4, #+6]
   \   0000005A   0x4291             CMP      R1,R2
   \   0000005C   0xBF02             ITTT     EQ 
   \   0000005E   0xF89D 0x100E      LDRBEQ   R1,[SP, #+14]
   \   00000062   0x7900             LDRBEQ   R0,[R0, #+4]
   \   00000064   0x4281             CMPEQ    R1,R0
   \   00000066   0xD102             BNE.N    ??configureReceivedAttribute_1
    718                initialize = FALSE;
   \   00000068   0x2600             MOVS     R6,#+0
    719                index = i;
   \   0000006A   0x463D             MOV      R5,R7
    720                break;
   \   0000006C   0xE009             B.N      ??configureReceivedAttribute_2
    721              } else if (entry.endpoint == EMBER_AF_PLUGIN_REPORTING_UNUSED_ENDPOINT_ID
    722                         && index == NULL_INDEX) {
   \                     ??configureReceivedAttribute_1:
   \   0000006E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xBF04             ITT      EQ 
   \   00000076   0x2DFF             CMPEQ    R5,#+255
   \   00000078   0x463D             MOVEQ    R5,R7
    723                index = i;
    724              }
    725            }
   \   0000007A   0x1C78             ADDS     R0,R7,#+1
   \   0000007C   0xB2C7             UXTB     R7,R0
   \   0000007E   0x2F05             CMP      R7,#+5
   \   00000080   0xD3C8             BCC.N    ??configureReceivedAttribute_0
    726          
    727            if (index == NULL_INDEX) {
   \                     ??configureReceivedAttribute_2:
   \   00000082   0x2DFF             CMP      R5,#+255
   \   00000084   0xBF08             IT       EQ 
   \   00000086   0x2089             MOVEQ    R0,#+137
    728              return EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   00000088   0xD025             BEQ.N    ??configureReceivedAttribute_3
    729            } else if (initialize) {
   \   0000008A   0xB1C6             CBZ.N    R6,??configureReceivedAttribute_4
    730              entry.direction = EMBER_ZCL_REPORTING_DIRECTION_RECEIVED;
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    731              entry.endpoint = cmd->apsFrame->destinationEndpoint;
   \   00000092   0x6820             LDR      R0,[R4, #+0]
   \   00000094   0x7940             LDRB     R0,[R0, #+5]
   \   00000096   0xF88D 0x0001      STRB     R0,[SP, #+1]
    732              entry.clusterId = cmd->apsFrame->clusterId;
   \   0000009A   0x6820             LDR      R0,[R4, #+0]
   \   0000009C   0x8840             LDRH     R0,[R0, #+2]
   \   0000009E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    733              entry.attributeId = attributeId;
   \   000000A2   0xF8AD 0x8004      STRH     R8,[SP, #+4]
    734              entry.mask = mask;
   \   000000A6   0xF88D 0x9006      STRB     R9,[SP, #+6]
    735              entry.manufacturerCode = cmd->mfgCode;
   \   000000AA   0x8A20             LDRH     R0,[R4, #+16]
   \   000000AC   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    736              entry.data.received.source = cmd->source;
   \   000000B0   0x88E0             LDRH     R0,[R4, #+6]
   \   000000B2   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    737              entry.data.received.endpoint = cmd->apsFrame->sourceEndpoint;
   \   000000B6   0x6820             LDR      R0,[R4, #+0]
   \   000000B8   0x7900             LDRB     R0,[R0, #+4]
   \   000000BA   0xF88D 0x000E      STRB     R0,[SP, #+14]
    738            }
    739          
    740            // For new or updated entries, set the timeout.  Updated entries will retain
    741            // all other settings configured previously.
    742            entry.data.received.timeout = timeout;
   \                     ??configureReceivedAttribute_4:
   \   000000BE   0xF8AD 0xA010      STRH     R10,[SP, #+16]
    743          
    744            // Give the application a chance to review the configuration that we have
    745            // been building up.  If the application rejects it, we just do not save the
    746            // record.  If we were supposed to add a new configuration, it will not be
    747            // created.  If we were supposed to update an existing configuration, we will
    748            // keep the old one and just discard any changes.  So, in either case, life
    749            // continues unchanged if the application rejects the configuration.  If the
    750            // application accepts the change, the tick does not have to be rescheduled
    751            // here because we don't do anything with received reports.
    752            status = emberAfPluginReportingConfiguredCallback(&entry);
   \   000000C2   0xA800             ADD      R0,SP,#+0
   \   000000C4   0x.... 0x....      BL       emberAfPluginReportingConfiguredCallback
   \   000000C8   0x0004             MOVS     R4,R0
    753            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   000000CA   0xD103             BNE.N    ??configureReceivedAttribute_5
    754              emAfPluginReportingSetEntry(index, &entry);
   \   000000CC   0xA900             ADD      R1,SP,#+0
   \   000000CE   0x4628             MOV      R0,R5
   \   000000D0   0x.... 0x....      BL       emAfPluginReportingSetEntry
    755            }
    756            return status;
   \                     ??configureReceivedAttribute_5:
   \   000000D4   0x4620             MOV      R0,R4
   \                     ??configureReceivedAttribute_3:
   \   000000D6                      REQUIRE ?Subroutine1
   \   000000D6                      ;; // Fall through to label ?Subroutine1
    757          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     volatileData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     retrySendReport

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x........         DC32     emberAfPluginReportingTickEventControl

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: reading cluster ...">`:
   \   00000000   0x45 0x52          DC8 "ERR: reading cluster 0x%2x attribute 0x%2x: 0x%x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x72 0x69    
   \              0x62 0x75    
   \              0x74 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: ">`:
   \   00000000   0x25 0x70          DC8 "%p: "
   \              0x3A 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "CFG_RPT">`:
   \   00000000   0x43 0x46          DC8 "CFG_RPT"
   \              0x47 0x5F    
   \              0x52 0x50    
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " - direction:%x, attr...">`:
   \   00000000   0x20 0x2D          DC8 " - direction:%x, attr:%2x"
   \              0x20 0x64    
   \              0x69 0x72    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3A 0x25    
   \              0x78 0x2C    
   \              0x20 0x61    
   \              0x74 0x74    
   \              0x72 0x3A    
   \              0x25 0x32    
   \              0x78 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   type:%x, min:%2x, ...">`:
   \   00000000   0x20 0x20          DC8 "   type:%x, min:%2x, max:%2x"
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x25 0x78    
   \              0x2C 0x20    
   \              0x6D 0x69    
   \              0x6E 0x3A    
   \              0x25 0x32    
   \              0x78 0x2C    
   \              0x20 0x6D    
   \              0x61 0x78    
   \              0x3A 0x25    
   \              0x32 0x78    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   change:">`:
   \   00000000   0x20 0x20          DC8 "   change:"
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x3A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   timeout:%2x">`:
   \   00000000   0x20 0x20          DC8 "   timeout:%2x"
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x3A 0x25    
   \              0x32 0x78    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "READ_RPT_CFG">`:
   \   00000000   0x52 0x45          DC8 "READ_RPT_CFG"
   \              0x41 0x44    
   \              0x5F 0x52    
   \              0x50 0x54    
   \              0x5F 0x43    
   \              0x46 0x47    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sched report event fo...">`:
   \   00000000   0x73 0x63          DC8 "sched report event for: 0x%4x"
   \              0x68 0x65    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x65    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x78 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "deactivate report event">`:
   \   00000000   0x64 0x65          DC8 "deactivate report event"
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x76 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x70    
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x00    
    758          
    759          static void putReportableChangeInResp(const EmberAfPluginReportingEntry *entry,
    760                                                EmberAfAttributeType dataType)
    761          {
    762            int8u bytes = emberAfGetDataSize(dataType);
    763            if (entry == NULL) { // default, 0xFF...UL or 0x80...L
    764              for (; bytes > 0; bytes--) {
    765                int8u b = 0xFF;
    766                if (emberAfIsTypeSigned(dataType)) {
    767                  b = (bytes == 1 ? 0x80 : 0x00);
    768                }
    769                emberAfPutInt8uInResp(b);
    770              }
    771            } else { // reportable change value
    772              int32u value = entry->data.reported.reportableChange;
    773              for (; bytes > 0; bytes--) {
    774                int8u b = BYTE_0(value);
    775                emberAfPutInt8uInResp(b);
    776                value >>= 8;
    777              }
    778            }
    779          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       56  configureReceivedAttribute
             56 -> emAfPluginReportingGetEntry
             56 -> emAfPluginReportingSetEntry
             56 -> emberAfPluginReportingConfiguredCallback
        8  emAfPluginReportingGetEntry
              0 -> halInternalGetTokenData
        8  emAfPluginReportingRemoveEntry
              8 -> removeConfiguration
              8 -> scheduleTick
        0  emAfPluginReportingSetEntry
              0 -> halInternalSetTokenData
        8  emberAfClearReportTableCallback
              8 -> removeConfiguration
       64  emberAfConfigureReportingCommandCallback
             64 -> configureReceivedAttribute
             64 -> emberAfDecodeAndPrintCluster
             64 -> emberAfFillExternalManufacturerSpecificBuffer
             64 -> emberAfGetAttributeAnalogOrDiscreteType
             64 -> emberAfGetDataSize
             64 -> emberAfGetInt
             64 -> emberAfGetInt16u
             64 -> emberAfLocateAttributeMetadata
             64 -> emberAfPluginReportingConfigureReportedAttribute
             64 -> emberAfPrint
             64 -> emberAfPrintBuffer
             64 -> emberAfPrintEnabled
             64 -> emberAfPrintln
             64 -> emberAfPutInt16uInResp
             64 -> emberAfPutInt8uInResp
             64 -> emberAfSendResponse
       48  emberAfPluginReportingConfigureReportedAttribute
             48 -> emAfPluginReportingGetEntry
             48 -> emAfPluginReportingSetEntry
             48 -> emberAfLocateAttributeMetadata
             48 -> emberAfPluginReportingConfiguredCallback
             48 -> halCommonGetInt32uMillisecondTick
             48 -> removeConfiguration
             48 -> scheduleTick
        0  emberAfPluginReportingInitCallback
              0 -> scheduleTick
       88  emberAfPluginReportingTickEventHandler
             88 -> emAfPluginReportingGetEntry
             88 -> emAfReadAttribute
             88 -> emberAfFillExternalManufacturerSpecificBuffer
             88 -> emberAfGetCommandApsFrame
             88 -> emberAfGetDataSize
             88 -> emberAfIsDeviceEnabled
             88 -> emberAfIsThisDataTypeAStringType
             88 -> emberAfPrintln
             88 -> emberAfPutBlockInResp
             88 -> emberAfPutInt16uInResp
             88 -> emberAfPutInt8uInResp
             88 -> emberAfSendCommandUnicastToBindingsWithCallback
             88 -> emberAfStringLength
             88 -> halCommonGetInt32uMillisecondTick
             88 -> halCommonMemCopy
             88 -> scheduleTick
       64  emberAfReadReportingConfigurationCommandCallback
             64 -> emAfPluginReportingGetEntry
             64 -> emberAfDecodeAndPrintCluster
             64 -> emberAfFillExternalManufacturerSpecificBuffer
             64 -> emberAfGetAttributeAnalogOrDiscreteType
             64 -> emberAfGetDataSize
             64 -> emberAfGetInt16u
             64 -> emberAfIsTypeSigned
             64 -> emberAfLocateAttributeMetadata
             64 -> emberAfPrint
             64 -> emberAfPrintEnabled
             64 -> emberAfPrintln
             64 -> emberAfPutInt16uInResp
             64 -> emberAfPutInt8uInResp
             64 -> emberAfSendResponse
       56  emberAfReportingAttributeChangeCallback
             56 -> emAfPluginReportingGetEntry
             56 -> emberAfGetAttributeAnalogOrDiscreteType
             56 -> emberAfGetDataSize
             56 -> emberAfGetDifference
             56 -> scheduleTick
       32  removeConfiguration
             32 -> emAfPluginReportingGetEntry
             32 -> emAfPluginReportingSetEntry
             32 -> emberAfPluginReportingConfiguredCallback
       16  retrySendReport
             16 -> emberAfSendUnicast
       48  scheduleTick
             48 -> emAfPluginReportingGetEntry
             48 -> emberAfEventControlSetDelay
             48 -> emberAfPrintln
             48 -> halCommonGetInt32uMillisecondTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "   change:">
      16  ?<Constant "   timeout:%2x">
      32  ?<Constant "   type:%x, min:%2x, ...">
      28  ?<Constant " - direction:%x, attr...">
       1  ?<Constant "">
       8  ?<Constant "%p: ">
       8  ?<Constant "CFG_RPT">
      52  ?<Constant "ERR: reading cluster ...">
      16  ?<Constant "READ_RPT_CFG">
      24  ?<Constant "deactivate report event">
      32  ?<Constant "sched report event fo...">
       4  ??DataTable13
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
      12  ?Subroutine0
       6  ?Subroutine1
      10  ?Subroutine2
      10  ?Subroutine3
      10  ?Subroutine4
       8  ?Subroutine5
     214  configureReceivedAttribute
      20  emAfPluginReportingGetEntry
      26  emAfPluginReportingRemoveEntry
      12  emAfPluginReportingSetEntry
      26  emberAfClearReportTableCallback
     418  emberAfConfigureReportingCommandCallback
     272  emberAfPluginReportingConfigureReportedAttribute
       2  emberAfPluginReportingInitCallback
       8  emberAfPluginReportingTickEventControl
     400  emberAfPluginReportingTickEventHandler
     436  emberAfReadReportingConfigurationCommandCallback
     148  emberAfReportingAttributeChangeCallback
      36  removeConfiguration
      16  retrySendReport
     146  scheduleTick
      60  volatileData

 
    68 bytes in section .bss
     1 byte  in section .rodata
 2 476 bytes in section .text
 
 2 476 bytes of CODE  memory
     1 byte  of CONST memory
    68 bytes of DATA  memory

Errors: none
Warnings: 1
