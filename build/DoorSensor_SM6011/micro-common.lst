###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:39 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\micr #
#                    o-common.c                                               #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\micr #
#                    o-common.c -D "GENERATED_TOKEN_HEADER=\"app/builder/Door #
#                    Sensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D           #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"micro-common.c\"" -lC               #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\ -I  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \micro-common.lst                                        #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \micro-common.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\micro-common.c
      1          /*
      2           * File: micro-common.c
      3           * Description: EM3XX micro specific HAL functions common to
      4           *  full and minimal hal
      5           *
      6           * Copyright 2013 Silicon Laboratories, Inc.                                *80*
      7           */
      8          
      9          #include PLATFORM_HEADER
     10          #include "include/error.h"
     11          #include "hal/micro/micro-common.h"
     12          #include "hal/micro/cortexm3/micro-common.h"
     13          #if defined(BOARD_HEADER) && !defined(MINIMAL_HAL)
     14            #include BOARD_HEADER
     15          #endif //defined(BOARD_HEADER)
     16          
     17          //NOTE:  The reason ENABLE_OSC32K gets translated into an int8u is so that
     18          //       haltest can override the build time configuration and force use of
     19          //       a different OSC32K mode when running the "RTC" command which is used
     20          //       to check proper connectivity of the 32kHz XTAL or external clock.
     21          #define DO_EXPAND(sym)  1 ## sym
     22          #define EXPAND(sym)     DO_EXPAND(sym)
     23          #define CHECK_BLANK_DEFINE(sym) (1 == EXPAND(sym))
     24          
     25          #ifdef  ENABLE_OSC32K
     26            #if CHECK_BLANK_DEFINE(ENABLE_OSC32K) // Empty #define => OSC32K_CRYSTAL
     27              #undef  ENABLE_OSC32K
     28              #define ENABLE_OSC32K OSC32K_CRYSTAL // Default if ENABLE_OSC32K is blank
     29            #endif
     30          #else//!ENABLE_OSC32K
     31            #define ENABLE_OSC32K OSC32K_DISABLE // Default if BOARD_HEADER doesn't say
     32          #endif//ENABLE_OSC32K

   \                                 In section .bss, align 1
     33          int8u useOsc32k = ENABLE_OSC32K;
   \                     useOsc32k:
   \   00000000                      DS8 1
     34          #ifndef OSC32K_STARTUP_DELAY_MS
     35            #define OSC32K_STARTUP_DELAY_MS (0) // Not all BOARD_HEADERs define this
     36          #endif//OSC32K_STARTUP_DELAY_MS
     37          
     38          #if     DISABLE_OSC24M
     39            // For compatibility, DISABLE_OSC24M takes precedence over ENABLE_OSC24M
     40            #undef  ENABLE_OSC24M
     41            #define ENABLE_OSC24M 0
     42          #endif//DISABLE_OSC24M
     43          
     44          #ifndef ENABLE_OSC24M
     45            #define  ENABLE_OSC24M 24 // Default is 24 MHz Xtal
     46          #endif//ENABLE_OSC24M
     47          
     48          
     49          
     50          
     51          
     52          
     53          
     54            #define HALF_SPEED_SYSCLK (FALSE)
     55          
     56          
     57          
     58          
     59          #if     BTL_SYSCLK_KNOWN
     60          
     61          // serial-ota-bootloader must use 24 MHz Xtal
     62          // This saves some much needed code space so serial-ota-bootloader fits
     63          
     64          #else//!BTL_SYSCLK_KNOWN
     65          
     66          // Expose configuration to library code

   \                                 In section .rodata, align 2, keep-with-next
     67          const int16s halSystemXtalKHz = ENABLE_OSC24M * 1000;
   \                     halSystemXtalKHz:
   \   00000000   0x5DC0             DC16 24000
     68          

   \                                 In section .text, align 2, keep-with-next
     69          int16u halSystemClockKHz(void)
     70          {
     71            if ((OSC24M_CTRL & OSC24M_CTRL_OSC24M_SEL) == 0) {
   \                     halSystemClockKHz:
   \   00000000   0x....             LDR.N    R0,??DataTable7  ;; 0x4000401c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x07C0             LSLS     R0,R0,#+31
   \   00000006   0xD402             BMI.N    ??halSystemClockKHz_0
     72              // Running off internal fast RC
     73              #if     (defined(DISABLE_RC_CALIBRATION) || (ENABLE_OSC24M == 0))
     74                // RC is uncalibrated -- estimate using OSCHF_TUNE,
     75                // assuming typical centered at 9 MHz and 0.5 MHz +/- tuning increments
     76                // (per Lipari-S-002-Lipari_analogue_specification.doc Table 25.5)
     77                // Use bitfield to make unsigned field within word into signed word
     78                struct { int16s bitfield : OSCHF_TUNE_FIELD_BITS; } offsetbf;
     79                offsetbf.bitfield = OSCHF_TUNE;
     80                int16s offset = offsetbf.bitfield;
     81                return (9 * 1000) - (offset * 500);
     82              #elif  (ENABLE_OSC24M < 0)
     83                // Assume calibrated to 1/2 of OSC24M
     84                return -(ENABLE_OSC24M) * (1000/2);
     85              #else//(ENABLE_OSC24M > 0)
     86                // Assume calibrated to 1/2 of OSC24M
     87                return ENABLE_OSC24M * (1000/2);
   \   00000008   0xF642 0x60E0      MOVW     R0,#+12000
   \   0000000C   0x4770             BX       LR
     88              #endif//(defined(DISABLE_RC_CALIBRATION) || (ENABLE_OSC24M == 0))
     89            } else {
     90              // Running off external Xtal or signal -- or want what that would be
     91              #if     (ENABLE_OSC24M == 0)
     92                // RC is uncalibrated -- estimate using OSCHF_TUNE_VALUE (or actual
     93                // if no tuning will be done),
     94                // assuming typical centered at 9 MHz and 0.5 MHz +/- tuning increments
     95                // (per Lipari-S-002-Lipari_analogue_specification.doc Table 25.5)
     96                #if     (defined(DISABLE_RC_CALIBRATION) || !defined(OSCHF_TUNE_VALUE))
     97                  // Use bitfield to make unsigned field within word into signed word
     98                  struct { int16s bitfield : OSCHF_TUNE_FIELD_BITS; } offsetbf;
     99                  offsetbf.bitfield = OSCHF_TUNE;
    100                  int16s offset = offsetbf.bitfield;
    101                #else//!(defined(DISABLE_RC_CALIBRATION) || !defined(OSCHF_TUNE_VALUE))
    102                  int16s offset = OSCHF_TUNE_VALUE;
    103                #endif//(defined(DISABLE_RC_CALIBRATION) || !defined(OSCHF_TUNE_VALUE))
    104                return (9 * 1000) - (offset * 500);
    105              #elif   (ENABLE_OSC24M < 0)
    106                return -(ENABLE_OSC24M) * 1000;
    107              #else//!(ENABLE_OSC24M < 0)
    108                return (ENABLE_OSC24M * (HALF_SPEED_SYSCLK ? 500 : 1000));
   \                     ??halSystemClockKHz_0:
   \   0000000E   0xF645 0x50C0      MOVW     R0,#+24000
   \   00000012   0x4770             BX       LR               ;; return
    109              #endif//(ENABLE_OSC24M < 0)
    110            }
    111          }
    112          

   \                                 In section .text, align 2, keep-with-next
    113          int16u halMcuClockKHz(void)
    114          {
   \                     halMcuClockKHz:
   \   00000000   0xB580             PUSH     {R7,LR}
    115            int16u clkKHz = halSystemClockKHz();
   \   00000002   0x.... 0x....      BL       halSystemClockKHz
    116            if (!CPU_CLKSEL && !HALF_SPEED_SYSCLK) {
   \   00000006   0x....             LDR.N    R1,??DataTable7_1  ;; 0x40004020
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xB901             CBNZ.N   R1,??halMcuClockKHz_0
    117              // MCU (FCLK) is running off PCLK = SYSCLK/2
    118              clkKHz /= 2;
   \   0000000C   0x0840             LSRS     R0,R0,#+1
    119            } else {
    120              // MCU (FCLK) is (or will be) running off SYSCLK directly
    121              // With HALF_SPEED_SYSCLK, PCLK == SYSCLK and CPU_CLKSEL doesn't matter
    122            }
    123            return clkKHz;
   \                     ??halMcuClockKHz_0:
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    124          }
    125          

   \                                 In section .text, align 2, keep-with-next
    126          int16u halPeripheralClockKHz()
    127          {
   \                     halPeripheralClockKHz:
   \   00000000   0xB580             PUSH     {R7,LR}
    128            int16u clkKHz = halSystemClockKHz();
    129            if (HALF_SPEED_SYSCLK) {
    130              // PCLK == SYSCLK
    131            } else {
    132              clkKHz /= 2; // PCLK == SYSLCK/2
    133            }
    134            return clkKHz;
   \   00000002   0x.... 0x....      BL       halSystemClockKHz
   \   00000006   0x0840             LSRS     R0,R0,#+1
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    135          }
    136          
    137          #endif//BTL_SYSCLK_KNOWN
    138          
    139          extern void halInternalClocksCalibrateFastRc(void); // Belongs in a clocks.h
    140          extern void halInternalClocksCalibrateSlowRc(void); // Belongs in a clocks.h
    141          

   \                                 In section .text, align 2, keep-with-next
    142          void halInternalCalibrateFastRc(void)
    143          {
    144            #ifndef DISABLE_RC_CALIBRATION
    145              #if     (ENABLE_OSC24M == 0)
    146                #ifdef  OSCHF_TUNE_VALUE
    147                  OSCHF_TUNE = (int32u) OSCHF_TUNE_VALUE;
    148                #endif//OSCHF_TUNE_VALUE
    149              #else//!(ENABLE_OSC24M == 0)
    150                halInternalClocksCalibrateFastRc();
   \                     halInternalCalibrateFastRc:
   \   00000000   0x.... 0x....      B.W      halInternalClocksCalibrateFastRc
    151              #endif//(ENABLE_OSC24M == 0)
    152            #endif//DISABLE_RC_CALIBRATION
    153          }
    154          

   \                                 In section .text, align 2, keep-with-next
    155          void halInternalCalibrateSlowRc(void)
    156          {
    157            #ifndef DISABLE_RC_CALIBRATION
    158              #if     (ENABLE_OSC24M != 0)
    159                halInternalClocksCalibrateSlowRc();
   \                     halInternalCalibrateSlowRc:
   \   00000000   0x.... 0x....      B.W      halInternalClocksCalibrateSlowRc
    160              #endif//(ENABLE_OSC24M == 0)
    161            #endif//DISABLE_RC_CALIBRATION
    162          }
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void halInternalEnableWatchDog(void)
    165          {
    166            //Just to be on the safe side, restart the watchdog before enabling it
    167            WDOG_RESET = 1;
   \                     halInternalEnableWatchDog:
   \   00000000   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40006000
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6081             STR      R1,[R0, #+8]
    168            WDOG_KEY = 0xEABE;
   \   00000006   0xF64E 0x21BE      MOVW     R1,#+60094
   \   0000000A   0x6041             STR      R1,[R0, #+4]
    169            WDOG_CFG = WDOG_ENABLE;
   \   0000000C   0x....             B.N      ?Subroutine0
    170          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x6001             STR      R1,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    171          

   \                                 In section .text, align 2, keep-with-next
    172          void halInternalResetWatchDog(void)
    173          {
    174            //Writing any value will restart the watchdog
    175            WDOG_RESET = 1;
   \                     halInternalResetWatchDog:
   \   00000000   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40006008
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void halInternalDisableWatchDog(int8u magicKey)
    179          {
    180            if (magicKey == MICRO_DISABLE_WATCH_DOG_KEY) {
   \                     halInternalDisableWatchDog:
   \   00000000   0x28A5             CMP      R0,#+165
   \   00000002   0xD105             BNE.N    ??halInternalDisableWatchDog_0
    181              WDOG_KEY = 0xDEAD;
   \   00000004   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40006000
   \   00000006   0xF64D 0x61AD      MOVW     R1,#+57005
   \   0000000A   0x6041             STR      R1,[R0, #+4]
    182              WDOG_CFG = WDOG_DISABLE;
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    183            }
    184          }
   \                     ??halInternalDisableWatchDog_0:
   \   00000010   0x4770             BX       LR               ;; return
    185          

   \                                 In section .text, align 2, keep-with-next
    186          boolean halInternalWatchDogEnabled(void)
    187          {
    188            if(WDOG_CFG&WDOG_ENABLE) {
   \                     halInternalWatchDogEnabled:
   \   00000000   0x....             LDR.N    R0,??DataTable7_2  ;; 0x40006000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x2001             MOVNE    R0,#+1
    189              return TRUE;
    190            } else {
    191              return FALSE;
   \   0000000C   0x4770             BX       LR               ;; return
    192            }
    193          }
    194          

   \                                 In section .text, align 2, keep-with-next
    195          void halGpioConfig(int32u io, int32u config)
    196          {
   \                     halGpioConfig:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0882             LSRS     R2,R0,#+2
   \   00000004   0x.... 0x....      ADR.W    R3,??configRegs
   \   00000008   0xF853 0x2022      LDR      R2,[R3, R2, LSL #+2]
   \   0000000C   0x6813             LDR      R3,[R2, #+0]
    197            static volatile int32u *const configRegs[] =
    198              { (volatile int32u *)GPIO_PACFGL_ADDR,
    199                (volatile int32u *)GPIO_PACFGH_ADDR,
    200                (volatile int32u *)GPIO_PBCFGL_ADDR,
    201                (volatile int32u *)GPIO_PBCFGH_ADDR,
    202                (volatile int32u *)GPIO_PCCFGL_ADDR,
    203                (volatile int32u *)GPIO_PCCFGH_ADDR };
    204            int32u portcfg;
    205            portcfg = *configRegs[io/4];                // get current config
    206            portcfg = portcfg & ~((0xF)<<((io&3)*4));   // mask out config of this pin
    207            *configRegs[io/4] = portcfg | (config <<((io&3)*4));
   \   0000000E   0xF000 0x0003      AND      R0,R0,#0x3
   \   00000012   0x0080             LSLS     R0,R0,#+2
   \   00000014   0x240F             MOVS     R4,#+15
   \   00000016   0x4084             LSLS     R4,R4,R0
   \   00000018   0x43A3             BICS     R3,R3,R4
   \   0000001A   0xFA01 0xF000      LSL      R0,R1,R0
   \   0000001E   0x4318             ORRS     R0,R0,R3
   \   00000020   0x6010             STR      R0,[R2, #+0]
    208          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??configRegs:
   \   00000000   0x4000B000         DC32 4000B000H, 4000B004H, 4000B200H, 4000B204H, 4000B400H, 4000B404H
   \              0x4000B004   
   \              0x4000B200   
   \              0x4000B204   
   \              0x4000B400   
   \              0x4000B404   
    209          
    210          
    211          
    212          
    213          
    214          
    215          

   \                                 In section .text, align 2, keep-with-next
    216          int16u halInternalStartSystemTimer(void)        //Ray
    217          {
   \                     halInternalStartSystemTimer:
   \   00000000   0xB580             PUSH     {R7,LR}
    218            //Since the SleepTMR is the only timer maintained during deep sleep, it is
    219            //used as the System Timer (RTC).  We maintain a 32 bit hardware timer
    220            //configured for a tick value time of 1024 ticks/second (0.9765625 ms/tick)
    221            //using either the 10 kHz internal SlowRC clock divided and calibrated to
    222            //1024 Hz or the external 32.768 kHz crystal divided to 1024 Hz.
    223            //With a tick time of ~1ms, this 32bit timer will wrap after ~48.5 days.
    224          
    225            //disable top-level interrupt while configuring
    226            INT_CFGCLR = INT_SLEEPTMR;
   \   00000002   0x....             LDR.N    R0,??DataTable7_4  ;; 0xe000e180
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0x6001             STR      R1,[R0, #+0]
    227          
    228            if (useOsc32k > OSC32K_DISABLE) {
   \   00000008   0x....             LDR.N    R0,??DataTable7_5
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable7_6  ;; 0x4000600c
   \   0000000E   0x....             LDR.N    R2,??DataTable7_7  ;; 0x40000008
   \   00000010   0xB158             CBZ.N    R0,??halInternalStartSystemTimer_0
    229              if (useOsc32k == OSC32K_DIGITAL) {
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xBF0C             ITE      EQ 
   \   00000016   0x2000             MOVEQ    R0,#+0
   \   00000018   0x2001             MOVNE    R0,#+1
    230                //Disable both OSC32K and SLOWRC if using external digital clock input
    231                SLEEPTMR_CLKEN = 0;
    232              } else { // OSC32K_CRYSTAL || OSC32K_SINE_1V
    233                //Enable the 32kHz XTAL (and disable SlowRC since it is not needed)
    234                SLEEPTMR_CLKEN = SLEEPTMR_CLK32KEN;
   \   0000001A   0x6010             STR      R0,[R2, #+0]
    235              }
    236              //Sleep timer configuration is the same for crystal and external clock
    237              SLEEPTMR_CFG = (SLEEPTMR_ENABLE            | //enable TMR
    238                             (0 << SLEEPTMR_DBGPAUSE_BIT)| //TMR not paused when halted
    239                             (5 << SLEEPTMR_CLKDIV_BIT)  | //divide down to 1024Hz
    240                             (1 << SLEEPTMR_CLKSEL_BIT)) ; //select CLK32K external clock
   \   0000001C   0xF640 0x0051      MOVW     R0,#+2129
   \   00000020   0x6008             STR      R0,[R1, #+0]
    241              halCommonDelayMilliseconds(OSC32K_STARTUP_DELAY_MS);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       halCommonDelayMilliseconds
   \   00000028   0xE006             B.N      ??halInternalStartSystemTimer_1
    242            } else {
    243              //Enable the SlowRC (and disable 32kHz XTAL since it is not needed)
    244              SLEEPTMR_CLKEN = SLEEPTMR_CLK10KEN;
   \                     ??halInternalStartSystemTimer_0:
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x6010             STR      R0,[R2, #+0]
    245              SLEEPTMR_CFG = (SLEEPTMR_ENABLE            | //enable TMR
    246                             (0 << SLEEPTMR_DBGPAUSE_BIT)| //TMR not paused when halted
    247                             (0 << SLEEPTMR_CLKDIV_BIT)  | //already 1024Hz
    248                             (0 << SLEEPTMR_CLKSEL_BIT)) ; //select CLK1K internal SlowRC
   \   0000002E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000032   0x6008             STR      R0,[R1, #+0]
    249              #ifndef DISABLE_RC_CALIBRATION
    250                halInternalCalibrateSlowRc(); //calibrate SlowRC to 1024Hz
   \   00000034   0x.... 0x....      BL       halInternalClocksCalibrateSlowRc
    251              #endif//DISABLE_RC_CALIBRATION
    252            }
    253          
    254            //clear out any stale interrupts
    255            INT_SLEEPTMRFLAG = (INT_SLEEPTMRWRAP | INT_SLEEPTMRCMPA | INT_SLEEPTMRCMPB);
   \                     ??halInternalStartSystemTimer_1:
   \   00000038   0x....             LDR.N    R0,??DataTable7_8  ;; 0x4000a014
   \   0000003A   0x2107             MOVS     R1,#+7
   \   0000003C   0x6001             STR      R1,[R0, #+0]
    256            //turn off second level interrupts.  they will be enabled elsewhere as needed
    257            INT_SLEEPTMRCFG = INT_SLEEPTMRCFG_RESET;
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6401             STR      R1,[R0, #+64]
    258            //enable top-level interrupt
    259            INT_CFGSET = INT_SLEEPTMR;
   \   00000042   0x....             LDR.N    R0,??DataTable7_9  ;; 0xe000e100
   \   00000044   0x2110             MOVS     R1,#+16
   \   00000046   0x6001             STR      R1,[R0, #+0]
    260          
    261            return 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBD02             POP      {R1,PC}          ;; return
    262          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x4000401C         DC32     0x4000401c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40004020         DC32     0x40004020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40006000         DC32     0x40006000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40006008         DC32     0x40006008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     useOsc32k

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x4000600C         DC32     0x4000600c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40000008         DC32     0x40000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x4000A014         DC32     0x4000a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0xE000E100         DC32     0xe000e100

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  halGpioConfig
        0  halInternalCalibrateFastRc
             0 -> halInternalClocksCalibrateFastRc
        0  halInternalCalibrateSlowRc
             0 -> halInternalClocksCalibrateSlowRc
        0  halInternalDisableWatchDog
        0  halInternalEnableWatchDog
        0  halInternalResetWatchDog
        8  halInternalStartSystemTimer
             8 -> halCommonDelayMilliseconds
             8 -> halInternalClocksCalibrateSlowRc
        0  halInternalWatchDogEnabled
        8  halMcuClockKHz
             8 -> halSystemClockKHz
        8  halPeripheralClockKHz
             8 -> halSystemClockKHz
        0  halSystemClockKHz


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       6  ?Subroutine0
      24  configRegs
      36  halGpioConfig
       4  halInternalCalibrateFastRc
       4  halInternalCalibrateSlowRc
      18  halInternalDisableWatchDog
      14  halInternalEnableWatchDog
       2  halInternalResetWatchDog
      76  halInternalStartSystemTimer
      14  halInternalWatchDogEnabled
      16  halMcuClockKHz
      10  halPeripheralClockKHz
      20  halSystemClockKHz
       2  halSystemXtalKHz
       1  useOsc32k

 
   1 byte  in section .bss
   2 bytes in section .rodata
 284 bytes in section .text
 
 284 bytes of CODE  memory
   2 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
