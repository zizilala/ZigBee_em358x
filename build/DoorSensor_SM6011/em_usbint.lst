###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:27 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\ #
#                    em_usbint.c                                              #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\ #
#                    em_usbint.c -D "GENERATED_TOKEN_HEADER=\"app/builder/Doo #
#                    rSensor_SM6011/DoorSensor_SM6011_tokens.h\"" -D          #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"em_usbint.c\"" -lC                  #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\ #
#                     -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSen #
#                    sor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\buil #
#                    der\DoorSensor_SM6011\..\..\..\ -I                       #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \em_usbint.lst                                           #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \em_usbint.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\usb\em_usbint.c
      1          /**************************************************************************//**
      2           * @file
      3           * @brief USB protocol stack library, USB device peripheral interrupt handlers.
      4           * @author Nathaniel Ting
      5           * @version 3.20.3
      6           * <!-- Copyright 2013 by Silicon Laboratories. All rights reserved.     *80*-->
      7           *****************************************************************************/
      8          
      9          
     10          #include PLATFORM_HEADER
     11          #include "stack/include/ember.h"
     12          #include "hal/hal.h"
     13          
     14          #if defined(CORTEXM3_EM35X_USB)
     15          // Only define this ISR if USB is on and EnergyMicro USB is enabled. When this
     16          // function is defined it will cause extra code to be pulled in even if the ISR
     17          // will never fire.
     18          
     19          #include "em_usb.h"
     20          #include "em_usbhal.h"
     21          #include "em_usbtypes.h"
     22          #include "em_usbd.h"
     23          #include "app/util/serial/serial.h"
     24           
     25          
     26          USBD_Ep_TypeDef *ep;
     27          
     28          void halUsbIsr(void)
     29          {
     30            #ifdef BOOTLOADER
     31            VBUSMON_ISR();
     32            #endif
     33            
     34            int32u status = INT_USBFLAG;
     35            INT_USBFLAG = status;
     36            
     37            if ( status == 0 )
     38            {
     39              return;
     40            }
     41            //Ensure EP0 IN is not stalled.  Refer to receiving getQualifierDescriptor
     42            //for more information.
     43            USB_STALLIN &= ~USB_STALLINEP0;
     44          
     45            if(status & INT_USBWAKEUP & INT_USBCFG) { 
     46              #ifdef USB_DEBUG_SUSPEND
     47                DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"INT_USBWAKEUP\r\n");
     48              #endif
     49          
     50              //The INT_USBWAKEUP interrupt triggers for a successful remote wakeup
     51              //This is essentially a resume only intiated by the device instaed of host
     52              //need INT_USBCFG mask to enable turning on/off remote wakeup interrupt
     53          
     54              #ifndef BOOTLOADER
     55                USBD_SetUsbState( USBD_STATE_POWERED );
     56                halResumeCallback();
     57                #ifndef EMBER_NO_STACK
     58                emberStackPowerUp();
     59                #endif // EMBER_NO_STACK
     60              #endif
     61            }
     62          
     63            if(status & INT_USBRESUME) {
     64              #ifdef USB_DEBUG_SUSPEND
     65                DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"INT_USBRESUME\r\n");
     66              #endif
     67              //The INT_USBRESUME interrupt pulls us out of suspend while the USB
     68              //core auto clears the USBSUSP_CLKSEL bit (used when entering suspend).
     69          
     70              #ifndef BOOTLOADER
     71                USBD_SetUsbState( USBD_STATE_POWERED );
     72                halResumeCallback();
     73                #ifndef EMBER_NO_STACK
     74                emberStackPowerUp();
     75                #endif // EMBER_NO_STACK
     76              #endif
     77          
     78            }
     79            
     80            if(status & INT_USBSUSPEND) {
     81              #ifdef USB_DEBUG_SUSPEND
     82                DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"INT_USBSUSPEND\r\n");
     83              #endif
     84              //If suspend if being supported, we now have 7ms to get down to
     85              //suspend current.  Setting usb state to USBD_STATE_SUSPENDED will allow
     86              //the usbSuspendDsr() function to place us in the appropriate low
     87              //power clocking and idle mode.
     88              //
     89              //NOTE:  The stack and HAL should be shutdown like deep sleeping before
     90              //       suspend is entered.  USB sleep involves slowing down peripheral
     91              //       clocking, but it does not stop the clocks.  This means
     92              //       peripherals will keep running if they're enabled.  Being at
     93              //       a slower clock speed can severely disrupt application behavior
     94              //       that depends on clean peripherial behavior at a desired clock
     95              //       rate.  For example, problems with the UART would be very obvious.
     96              
     97          
     98              #ifndef BOOTLOADER
     99              USBD_SetUsbState( USBD_STATE_SUSPENDED );
    100              #endif
    101              //USBTODO- Software needs to remember when INT_USBSUSPEND fires so that
    102              //  it can return to suspend if a non-USB event pulls us out of
    103              //  the USB sleep mode.  Only INT_USBRESUME is allowed to keep us
    104              //  out of suspend.
    105            }
    106            
    107          
    108            if(status & INT_USBRESET) {
    109              #ifdef USB_DEBUG_INT
    110                DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "\r\n\r\nINT_USBRESET\r\n");
    111              #endif
    112              //When a USB reset occurs it resets the core but not the DMA.  To ensure
    113              //transactions after a reset are fresh all buffers (DMA) need to be
    114              //cleared.
    115              USB_BUFCLR = (USB_BUFCLRINEP6 |
    116                            USB_BUFCLRINEP5 |
    117                            USB_BUFCLRINEP4 |
    118                            USB_BUFCLRINEP3 |
    119                            USB_BUFCLRINEP2 |
    120                            USB_BUFCLRINEP1 |
    121                            USB_BUFCLRINEP0 );
    122          
    123          
    124              /* Setup EP0 to receive SETUP packets */
    125              USBDHAL_StartEp0Setup( dev );
    126              USBD_Ep_TypeDef *ep;
    127              ep = &dev->ep[ 0 ];
    128              ep->state = D_EP_IDLE;
    129              ep->remaining = 0;
    130          
    131              ep->in = true;
    132              USBDHAL_UnStallEp( ep );              /* Stall Ep0 IN                 */
    133              ep->in = false;                     /* OUT for next SETUP           */
    134              USBDHAL_UnStallEp( ep );              /* Stall Ep0 OUT                */
    135              
    136              if ( dev->callbacks->usbReset )
    137              {
    138                dev->callbacks->usbReset();
    139              }
    140          
    141              // USBD_SetUsbState( USBD_STATE_DEFAULT );
    142              // USBDHAL_AbortAllTransfers( USB_STATUS_DEVICE_RESET );
    143            }
    144          
    145            
    146            if(USB_RXBUFSIZEEP0A == 0) {
    147              USB_BUFCLR = USB_BUFCLRINEP0;
    148              
    149              USBDHAL_StartEp0Setup( dev );
    150              USBD_Ep_TypeDef *ep;
    151              ep = &dev->ep[ 0 ];
    152              ep->state = D_EP_IDLE;
    153              ep->remaining = 0;
    154            }
    155          
    156            //==== RX functionality ====
    157            if (status & INT_USBRXVALID)
    158            {
    159              int epnum;
    160              uint16_t epmask;
    161          
    162              // sweep through eps to determine which EP the interrupt is on
    163              for ( epnum = 0,                epmask = INT_USBRXVALIDEP0;
    164                    epnum <= MAX_NUM_OUT_EPS;
    165                    epnum++,                  epmask <<= 1 )
    166              {
    167                if (status & epmask)
    168                {
    169          
    170                  // determine how many bytes were received
    171                  volatile int32u *bufsize = EPOUTBUFSIZE[epnum];
    172          
    173                  #ifdef USB_DEBUG_INT
    174                    #ifdef USB_DEBUG_VERBOSE
    175                      DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"RX%d-->",epnum);
    176                      int8u i;
    177                      for(i=0;i<*bufsize;i++) {
    178                        DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "%02X", EPOUTBUF[epnum][i]);
    179                      }
    180                      DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "  %d bytes\r\n", *bufsize);
    181                    #else
    182                      DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"RX%d-->%d bytes\r\n",epnum, *bufsize);
    183                    #endif
    184                  #endif
    185          
    186          
    187                  // update endpoint state
    188                  ep = USBD_GetEpFromAddr( epnum );
    189                  ep->remaining -= EFM32_MIN(ep->remaining,*bufsize);
    190                  ep->xferred += *bufsize;
    191          
    192                  // #ifdef USB_DEBUG_INT
    193                  //   DEBUG_BUFFER += sprintf(DEBUG_BUFFER, "  %d remaining, %d xferred\r\n", ep->remaining, ep->xferred);
    194                  // #endif
    195          
    196                  // dispatch endpoint handler, erase buffer, reenable endpoint RX
    197                  if (epnum ==0)
    198                  {
    199                    USBDEP_Ep0Handler( dev );
    200                  }
    201                  else
    202                  {
    203                    // copy buffer to endpoint specified buffer location before erasing
    204                    if (ep->state == D_EP_RECEIVING)
    205                    {
    206                      MEMCOPY(ep->buf,EPOUTBUF[ep->num], *bufsize);
    207                    }
    208                    #if EM_SERIAL3_ENABLED
    209                      halInternalUart3RxIsr(EPOUTBUF[ep->num], *bufsize);
    210                    #endif //EM_SERIAL3_ENABLED
    211          
    212                    USBDEP_EpHandler(ep->addr);
    213                  }
    214                  
    215                  MEMSET(EPOUTBUF[epnum], 0, *bufsize);
    216                  USB_RXVALID = ((USB_RXVALIDEP0A<<epnum) | (USB_RXVALIDEP0B<<epnum));
    217          
    218                }
    219              }
    220            }
    221          
    222          
    223            //==== TX functionality ====
    224            //NOTE: INT_USBTXACTIVEEPx interrupts fire on USB_TXACTIVEEPxy falling edge.
    225            if (status & INT_USBTXACTIVE)
    226            {
    227              int epnum;
    228              uint16_t epmask;
    229          
    230              // sweep through eps to determine which EP the interrupt is on
    231              for ( epnum = 0,                epmask = INT_USBTXACTIVEEP0;
    232                    epnum <= MAX_NUM_OUT_EPS;
    233                    epnum++,                  epmask <<= 1 )
    234              {
    235                if (status & epmask)
    236                {
    237                  #ifdef USB_DEBUG_INT
    238                    DEBUG_BUFFER += sprintf(DEBUG_BUFFER,"TX%d\r\n",epnum);
    239                  #endif
    240          
    241                  // dispatch endpoint handler
    242                  if (epnum == 0)
    243                  {
    244                    USBDEP_Ep0Handler( dev );
    245                  }
    246                  else
    247                  {
    248                    ep = USBD_GetEpFromAddr( USB_SETUP_DIR_MASK | epnum );
    249                    USBDEP_EpHandler(ep->addr);
    250                  }
    251          
    252                }
    253              }
    254            }
    255          }
    256          
    257          #ifdef VBUSMON
    258          void VBUSMON_ISR(void)
    259          {
    260            //VBUSMON is used for sensing VBUS indicating if USB is physically connected.
    261            //An IRQ is used to monitor for any edge change on VBUSMON.
    262            //For self-powered devices, VBUS monitoring is required for the EM358 device
    263            //to function cleanly across physical connect/disconnects of the USB.
    264            //The USB specification requires that the pull-up resistor for
    265            //enumerating is disconnected if VBUS is not connected.
    266            
    267            //clear int before read to avoid potential of missing interrupt
    268            INT_MISS = VBUSMON_MISS_BIT;     //clear missed interrupt flag
    269            INT_GPIOFLAG = VBUSMON_FLAG_BIT; //clear top level interrupt flag
    270            
    271            //Because this ISR/IRQ triggers on both edges, usbVbusPresent is used
    272            //to track the state of VBUS.
    273            //Always directly read VBUSMON to ensure this ISR is changing to the correct,
    274            //current state.
    275            //Falling edge: VBUS removed - Must set ENUMCTRL to input-low.
    276            //Rrising edge: VBUS applied - If usbConfigEnumerate() has been called and
    277            //this device is ready to enumerate, set ENUMCTRL to output-high and
    278            //perform enumeration.
    279            usbVbusPresent = ((VBUSMON_IN & VBUSMON) == VBUSMON);
    280            
    281            if(usbVbusPresent) {
    282              if (USBD_GetUsbState()==USBD_STATE_CONFIGURED)
    283                return;
    284              //Only attempt enumerate if usbConfigEnumerate has already been called.
    285              //Set ENUMCTRL ouput-high to enumerate.
    286              ENUMCTRL_SETCFG(GPIOCFG_OUT);
    287              ENUMCTRL_SET();
    288          
    289              // halSetLed(BOARDLED0);
    290              USBD_SetUsbState(USBD_STATE_DEFAULT);
    291            } else {
    292              //Configure ENUMCTRL as an input so the device de-enumurates and
    293              //the pin does not put any load on the bus.  (The spec says the
    294              //pull-up resistor used for enumeration should be tri-state.  On
    295              //EM358 devices the input configuration is the best available choice
    296              //since tri-state isn't possible.)
    297              //Clear down ENUMCTRL to be ready for the next time enumerating.
    298              ENUMCTRL_SETCFG(GPIOCFG_IN);
    299              ENUMCTRL_CLR();
    300              // halClearLed(BOARDLED0);
    301              USBD_SetUsbState(USBD_STATE_NONE);
    302            }
    303          }
    304          #endif // VBUSMON
    305          
    306          #endif // CORTEXM3_EM35X_USB


 

 


Errors: none
Warnings: none
