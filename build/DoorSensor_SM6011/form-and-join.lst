###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:31 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\common\form-an #
#                    d-join.c                                                 #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\common\form-an #
#                    d-join.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSe #
#                    nsor_SM6011/DoorSensor_SM6011_tokens.h\"" -D             #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"form-and-join.c\"" -lC              #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\common\ -I     #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \form-and-join.lst                                       #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \form-and-join.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\util\common\form-and-join.c
      1          // *****************************************************************************
      2          // * form-and-join.c
      3          // * 
      4          // * Utilities for forming and joining networks.
      5          // * See form-and-join.h for a description of the exported interface.
      6          // *
      7          // * Copyright 2008 by Ember Corporation. All rights reserved.              
      8          // **************************************************************************80*
      9          
     10          #include PLATFORM_HEADER     // Micro and compiler specific typedefs and macros
     11          
     12          #define __FORM_AND_JOIN_C__
     13          
     14          #include "stack/include/ember-types.h"
     15          #include "stack/include/error.h"
     16          #include "hal/hal.h" 
     17          #include "app/util/serial/serial.h"
     18          #include "form-and-join.h"
     19          #include "form-and-join-adapter.h"
     20          
     21          // We can't include ember.h or ezsp.h from this file since it is used
     22          // for both host and node-size libraries.  However the emberStartScan()
     23          // API is identical in both.
     24          extern EmberStatus emberStartScan(int8u scanType, 
     25                                            int32u channelMask, 
     26                                            int8u duraiton);
     27          
     28          enum {
     29            FORM_AND_JOIN_NOT_SCANNING,
     30            FORM_AND_JOIN_NEXT_NETWORK,
     31            FORM_AND_JOIN_ENERGY_SCAN,      
     32            FORM_AND_JOIN_PAN_ID_SCAN,      
     33            FORM_AND_JOIN_JOINABLE_SCAN,    
     34            FORM_AND_JOIN_DUAL_CHANNEL_SCAN 
     35          };
     36          

   \                                 In section .bss, align 4
     37          static int8u formAndJoinScanType = FORM_AND_JOIN_NOT_SCANNING;
   \                     formAndJoinScanType:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 8
     38          
     39          static int8u *dataContents;
     40          #define panIdCandidates ((int16u *) dataContents)
     41          #define channelEnergies (dataContents)
     42          
     43          static int8u extendedPanIdCache[8];
     44          static int32u channelMaskCache;
     45          static int8u channelCache;
     46          static boolean ignoreExtendedPanId;
     47          static int8u networkCount;  // The number of NetworkInfo records.
     48          
     49          // The dual channel code is only present on the EM250 and EM260.

   \                                 In section .data, align 1
     50          boolean emberEnableDualChannelScan = TRUE;
   \                     emberEnableDualChannelScan:
   \   00000000   0x01               DC8 1
     51          
     52          // The minimum significant difference between energy scan results.
     53          // Results that differ by less than this are treated as identical.
     54          #define ENERGY_SCAN_FUZZ 25
     55          
     56          #define NUM_PAN_ID_CANDIDATES 16  // Must fit into one packet buffer on the node
     57          
     58          #define INVALID_PAN_ID 0xFFFF
     59          
     60          // ZigBee specifies that active scans have a duration of 3 (138 msec).
     61          // See documentation for emberStartScan in include/network-formation.h
     62          // for more info on duration values.
     63          #define ACTIVE_SCAN_DURATION 3
     64          
     65          //------------------------------------------------------------------------------
     66          // Macros for enabling or disabling debug print messages.
     67          // #define SCAN_DEBUG_PRINT_ENABLE
     68          
     69          #ifdef SCAN_DEBUG_PRINT_ENABLE
     70             // define this if printing messages -- note serial port used is 1
     71             #define SCAN_DEBUG_MSG(x,y) emberSerialPrintf(1,x,y); emberSerialWaitSend(1)
     72             #define SCAN_DEBUG(x) emberSerialPrintf(1,x); emberSerialWaitSend(1)
     73          
     74             #define SCAN_DEBUG_XPAN_PRINT(xpan)  \
     75                do {                                     \
     76                       emberSerialPrintf(1, "%x%x%x%x%x%x%x%x", \
     77                          xpan[0], xpan[1], xpan[2], xpan[3], \
     78                          xpan[4], xpan[5], xpan[6], xpan[7]); \
     79                       emberSerialWaitSend(1);  \
     80                   } while (FALSE)
     81          
     82          #elif defined(EMBER_SCRIPTED_TEST) 
     83            void debug(const char* format, ...);
     84            boolean isTestFrameworkDebugOn(void);
     85            #define SCAN_DEBUG_MSG(x,y) debug(x,y)
     86            #define SCAN_DEBUG(x) debug(x )
     87            #define SCAN_DEBUG_XPAN_PRINT(xpan) \
     88                do {                                     \
     89                       debug("%x%x%x%x%x%x%x%x", \
     90                          xpan[0], xpan[1], xpan[2], xpan[3], \
     91                          xpan[4], xpan[5], xpan[6], xpan[7]); \
     92                   } while (FALSE)
     93          
     94          #else
     95             // define this to turn off printing messages
     96             #define SCAN_DEBUG_MSG(x, ...) 
     97             #define SCAN_DEBUG(x) 
     98             #define SCAN_DEBUG_XPAN_PRINT(x) 
     99          #endif
    100          
    101          //------------------------------------------------------------------------------
    102          // Forward declarations for the benefit of the compiler.
    103          
    104          static void saveNetwork(EmberZigbeeNetwork *network, int8u lqi, int8s rssi);
    105          static boolean setup(int8u scanType);
    106          static EmberStatus startScan(EmberNetworkScanType type, int32u mask, int8u duration);
    107          static void startPanIdScan(void);
    108          static boolean isArrayZero(int8u* array, int8u size);
    109          
    110          //------------------------------------------------------------------------------
    111          // Finding unused PAN ids.
    112          

   \                                 In section .text, align 2, keep-with-next
    113          EmberStatus emberScanForUnusedPanId(int32u channelMask, int8u duration)
    114          {
   \                     emberScanForUnusedPanId:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    115            EmberStatus status = EMBER_ERR_FATAL;
   \   00000006   0x2601             MOVS     R6,#+1
    116            if (setup(FORM_AND_JOIN_ENERGY_SCAN)) {
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       setup
   \   0000000E   0xB158             CBZ.N    R0,??emberScanForUnusedPanId_0
    117              MEMSET(channelEnergies, 0xFF, EMBER_NUM_802_15_4_CHANNELS);
   \   00000010   0x2210             MOVS     R2,#+16
   \   00000012   0x21FF             MOVS     R1,#+255
   \   00000014   0x....             LDR.N    R0,??DataTable8
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x.... 0x....      BL       halCommonMemSet
    118              status = startScan(EMBER_ENERGY_SCAN, channelMask, duration);
   \   0000001C   0x462A             MOV      R2,R5
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       startScan
   \   00000026   0x4606             MOV      R6,R0
    119            }
    120            return status;
   \                     ??emberScanForUnusedPanId_0:
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0xBD70             POP      {R4-R6,PC}       ;; return
    121          }
    122          
    123          // Pick a channel from among those with the lowest energy and then look for
    124          // a PAN ID not in use on that channel.
    125          // 
    126          // The energy scans are not particularly accurate, especially as we don't run
    127          // them for very long, so we add in some slop to the measurements and then pick
    128          // a random channel from the least noisy ones.  This avoids having several
    129          // coordinators pick the same slightly quieter channel.
    130          

   \                                 In section .text, align 2, keep-with-next
    131          static void energyScanComplete(void)
    132          {
   \                     energyScanComplete:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    133            int8u cutoff = 0xFF;
   \   00000002   0x24FF             MOVS     R4,#+255
    134            int8u candidateCount = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    135            int8u channelIndex;
    136            int8u i;
    137          
    138            for (i = 0; i < EMBER_NUM_802_15_4_CHANNELS; i++) {
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R5,??DataTable8
   \   0000000A   0x6869             LDR      R1,[R5, #+4]
    139              if (channelEnergies[i] < cutoff - ENERGY_SCAN_FUZZ) {
   \                     ??energyScanComplete_0:
   \   0000000C   0x5C42             LDRB     R2,[R0, R1]
   \   0000000E   0xF1A4 0x0319      SUB      R3,R4,#+25
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xBFBC             ITT      LT 
   \   00000016   0xF102 0x0419      ADDLT    R4,R2,#+25
   \   0000001A   0xB2E4             UXTBLT   R4,R4
    140                cutoff = channelEnergies[i] + ENERGY_SCAN_FUZZ;
    141              }
    142            }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xDBF4             BLT.N    ??energyScanComplete_0
    143          
    144            // There must be at least one channel,
    145            // so there will be at least one candidate.
    146            for (i = 0; i < EMBER_NUM_802_15_4_CHANNELS; i++) {
   \   00000022   0x2000             MOVS     R0,#+0
    147              if (channelEnergies[i] < cutoff) {
   \                     ??energyScanComplete_1:
   \   00000024   0x5C42             LDRB     R2,[R0, R1]
   \   00000026   0x42A2             CMP      R2,R4
   \   00000028   0xBFBC             ITT      LT 
   \   0000002A   0x1C76             ADDLT    R6,R6,#+1
   \   0000002C   0xB2F6             UXTBLT   R6,R6
    148                candidateCount += 1;
    149              }
    150            }
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xDBF7             BLT.N    ??energyScanComplete_1
    151          
    152            // If for some reason we never got any energy scan results
    153            // then our candidateCount will be 0.  We want to avoid that case and
    154            // bail out (since we will do a divide by 0 below)
    155            if (candidateCount == 0) {
   \   00000034   0x0030             MOVS     R0,R6
   \   00000036   0xD103             BNE.N    ??energyScanComplete_2
    156              emberFormAndJoinCleanup(EMBER_ERR_FATAL);
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003E   0x....             B.N      emberFormAndJoinCleanup
    157              return;
    158            }
    159          
    160            channelIndex = halCommonGetRandom() % candidateCount;
   \                     ??energyScanComplete_2:
   \   00000040   0x.... 0x....      BL       halCommonGetRandom
   \   00000044   0xFB90 0xF1F6      SDIV     R1,R0,R6
   \   00000048   0xFB06 0x0111      MLS      R1,R6,R1,R0
   \   0000004C   0xB2C9             UXTB     R1,R1
    161          
    162            for (i = 0; i < EMBER_NUM_802_15_4_CHANNELS; i++) {
   \   0000004E   0x2000             MOVS     R0,#+0
    163              if (channelEnergies[i] < cutoff) {
   \                     ??energyScanComplete_3:
   \   00000050   0x686A             LDR      R2,[R5, #+4]
   \   00000052   0x5C82             LDRB     R2,[R0, R2]
   \   00000054   0x42A2             CMP      R2,R4
   \   00000056   0xDA06             BGE.N    ??energyScanComplete_4
    164                if (channelIndex == 0) {
   \   00000058   0x000A             MOVS     R2,R1
   \   0000005A   0xD102             BNE.N    ??energyScanComplete_5
    165                  channelCache = EMBER_MIN_802_15_4_CHANNEL_NUMBER + i;
   \   0000005C   0x300B             ADDS     R0,R0,#+11
   \   0000005E   0x7068             STRB     R0,[R5, #+1]
    166                  break;
   \   00000060   0xE004             B.N      ??energyScanComplete_6
    167                }
    168                channelIndex -= 1;
   \                     ??energyScanComplete_5:
   \   00000062   0x1E49             SUBS     R1,R1,#+1
   \   00000064   0xB2C9             UXTB     R1,R1
    169              }
    170            }
   \                     ??energyScanComplete_4:
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x2810             CMP      R0,#+16
   \   0000006A   0xDBF1             BLT.N    ??energyScanComplete_3
    171          
    172            startPanIdScan();
   \                     ??energyScanComplete_6:
   \   0000006C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000070                      REQUIRE startPanIdScan
   \   00000070                      ;; // Fall through to label startPanIdScan
    173          }
    174          
    175          // PAN IDs can be 0..0xFFFE.  We pick some trial candidates and then do a scan
    176          // to find one that is not in use.
    177          

   \                                 In section .text, align 2, keep-with-next
    178          static void startPanIdScan(void)
    179          {
   \                     startPanIdScan:
   \   00000000   0xB510             PUSH     {R4,LR}
    180            int8u i;
    181          
    182            for (i = 0; i < NUM_PAN_ID_CANDIDATES;) {
   \   00000002   0x2400             MOVS     R4,#+0
    183              int16u panId = halCommonGetRandom() & 0xFFFF;
   \                     ??startPanIdScan_0:
   \   00000004   0x.... 0x....      BL       halCommonGetRandom
    184              if (panId != 0xFFFF) {
   \   00000008   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD0F9             BEQ.N    ??startPanIdScan_0
    185                SCAN_DEBUG_MSG("panIdCandidate: 0x%2X\n", panId);
    186                panIdCandidates[i] = panId;
   \   00000010   0x....             LDR.N    R1,??DataTable8
   \   00000012   0x684A             LDR      R2,[R1, #+4]
   \   00000014   0xF822 0x0014      STRH     R0,[R2, R4, LSL #+1]
    187                i++;
   \   00000018   0x1C64             ADDS     R4,R4,#+1
    188              }
    189            }
   \   0000001A   0x2C10             CMP      R4,#+16
   \   0000001C   0xD3F2             BCC.N    ??startPanIdScan_0
    190          
    191            formAndJoinScanType = FORM_AND_JOIN_PAN_ID_SCAN;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    192            startScan(EMBER_ACTIVE_SCAN, BIT32(channelCache), ACTIVE_SCAN_DURATION);
   \   00000022   0x2203             MOVS     R2,#+3
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x7849             LDRB     R1,[R1, #+1]
   \   00000028   0xFA00 0xF101      LSL      R1,R0,R1
   \   0000002C                      REQUIRE ?Subroutine0
   \   0000002C                      ;; // Fall through to label ?Subroutine0
    193          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x....             B.N      startScan
    194          
    195          // Form a network using one of the unused PAN IDs.  If we got unlucky we
    196          // pick some more and try again.
    197          
    198          static void panIdScanComplete(void)
    199          {
    200            int8u i;
    201          
    202            for (i = 0; i < NUM_PAN_ID_CANDIDATES; i++) {
    203              EmberStatus status = EMBER_SUCCESS;
    204              if (panIdCandidates[i] != 0xFFFF) {
    205                emberUnusedPanIdFoundHandler(panIdCandidates[i], channelCache);
    206                emberFormAndJoinCleanup(status);
    207                return;
    208              }
    209            }
    210          
    211            // XXX: Do we care this could keep happening forever?
    212            // In practice there couldn't be as many PAN IDs heard that
    213            // conflict with ALL our randomly selected set of candidate PANs.
    214            // But in theory we could get the same random set of numbers
    215            // (more likely due to a bug) and we could hear the same set of
    216            // PAN IDs that conflict with our random set.
    217          
    218            startPanIdScan();     // Start over with new candidates.
    219          }
    220          
    221          //------------------------------------------------------------------------------
    222          // Finding joinable networks
    223          

   \                                 In section .text, align 2, keep-with-next
    224          EmberStatus emberScanForJoinableNetwork(int32u channelMask, int8u* extendedPanId)
    225          {
   \                     emberScanForJoinableNetwork:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    226            if (! setup(FORM_AND_JOIN_NEXT_NETWORK)) {
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       setup
   \   0000000C   0xB908             CBNZ.N   R0,??emberScanForJoinableNetwork_0
    227              return EMBER_INVALID_CALL;
   \   0000000E   0x2070             MOVS     R0,#+112
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}
    228            }
    229            // Init the channel to 10, gets incremented in call to next joinable network.
    230            channelCache = EMBER_MIN_802_15_4_CHANNEL_NUMBER - 1;
   \                     ??emberScanForJoinableNetwork_0:
   \   00000012   0x....             LDR.N    R0,??DataTable8
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0x7041             STRB     R1,[R0, #+1]
    231            channelMaskCache = channelMask;
   \   00000018   0x6084             STR      R4,[R0, #+8]
    232            if (extendedPanId == NULL
    233                || isArrayZero(extendedPanId, EXTENDED_PAN_ID_SIZE)) {
   \   0000001A   0xB175             CBZ.N    R5,??emberScanForJoinableNetwork_1
   \   0000001C   0x2100             MOVS     R1,#+0
   \                     ??emberScanForJoinableNetwork_2:
   \   0000001E   0x5D4A             LDRB     R2,[R1, R5]
   \   00000020   0xB13A             CBZ.N    R2,??emberScanForJoinableNetwork_3
    234              ignoreExtendedPanId = TRUE;
    235            } else {
    236              ignoreExtendedPanId = FALSE;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x7081             STRB     R1,[R0, #+2]
    237              MEMCOPY(extendedPanIdCache, extendedPanId, EXTENDED_PAN_ID_SIZE);
   \   00000026   0x2208             MOVS     R2,#+8
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x300C             ADDS     R0,R0,#+12
   \   0000002C   0x.... 0x....      BL       halCommonMemCopy
   \   00000030   0xE005             B.N      ??emberScanForJoinableNetwork_4
    238            }
   \                     ??emberScanForJoinableNetwork_3:
   \   00000032   0x1C49             ADDS     R1,R1,#+1
   \   00000034   0xB2C9             UXTB     R1,R1
   \   00000036   0x2908             CMP      R1,#+8
   \   00000038   0xD3F1             BCC.N    ??emberScanForJoinableNetwork_2
   \                     ??emberScanForJoinableNetwork_1:
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x7081             STRB     R1,[R0, #+2]
    239          
    240            return emberScanForNextJoinableNetwork();
   \                     ??emberScanForJoinableNetwork_4:
   \   0000003E   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000042                      REQUIRE emberScanForNextJoinableNetwork
   \   00000042                      ;; // Fall through to label emberScanForNextJoinableNetwork
    241          }
    242          

   \                                 In section .text, align 2, keep-with-next
    243          EmberStatus emberScanForNextJoinableNetwork(void)
    244          {
   \                     emberScanForNextJoinableNetwork:
   \   00000000   0xB510             PUSH     {R4,LR}
    245            if (formAndJoinScanType != FORM_AND_JOIN_NEXT_NETWORK) {
   \   00000002   0x....             LDR.N    R4,??DataTable8
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD007             BEQ.N    ??emberScanForNextJoinableNetwork_0
    246              emberScanErrorHandler(EMBER_INVALID_CALL);
   \   0000000A   0x2070             MOVS     R0,#+112
   \   0000000C   0x.... 0x....      BL       emberScanErrorHandler
    247              return EMBER_INVALID_CALL;
   \   00000010   0x2070             MOVS     R0,#+112
   \   00000012   0xBD10             POP      {R4,PC}
    248            }
    249          
    250            // Check for cached networks first.
    251            while (networkCount) {
    252              NetworkInfo *finger = formAndJoinGetNetworkPointer(--networkCount);
    253              if (finger->network.panId != 0xFFFF) {
    254                emberJoinableNetworkFoundHandler(&(finger->network), finger->lqi, finger->rssi);
    255                formAndJoinSetBufferLength(networkCount);
    256                formAndJoinSetCleanupTimeout();
    257                return EMBER_SUCCESS;
    258              }
    259              formAndJoinSetBufferLength(networkCount);
   \                     ??emberScanForNextJoinableNetwork_1:
   \   00000014   0x78E0             LDRB     R0,[R4, #+3]
   \   00000016   0x.... 0x....      BL       formAndJoinSetBufferLength
   \                     ??emberScanForNextJoinableNetwork_0:
   \   0000001A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001C   0xB1A0             CBZ.N    R0,??emberScanForNextJoinableNetwork_2
   \   0000001E   0x1E40             SUBS     R0,R0,#+1
   \   00000020   0x70E0             STRB     R0,[R4, #+3]
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0x.... 0x....      BL       formAndJoinGetNetworkPointer
   \   00000028   0x8801             LDRH     R1,[R0, #+0]
   \   0000002A   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD0F0             BEQ.N    ??emberScanForNextJoinableNetwork_1
   \   00000032   0xF990 0x200F      LDRSB    R2,[R0, #+15]
   \   00000036   0x7B81             LDRB     R1,[R0, #+14]
   \   00000038   0x.... 0x....      BL       emberJoinableNetworkFoundHandler
   \   0000003C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000003E   0x.... 0x....      BL       formAndJoinSetBufferLength
   \   00000042   0x.... 0x....      BL       formAndJoinSetCleanupTimeout
   \   00000046   0xE012             B.N      ??emberScanForNextJoinableNetwork_3
    260            }
    261          
    262            // Find the next channel in the mask and start scanning.
    263            channelCache += 1;
   \                     ??emberScanForNextJoinableNetwork_2:
   \   00000048   0x7860             LDRB     R0,[R4, #+1]
    264            for (; channelCache <= EMBER_MAX_802_15_4_CHANNEL_NUMBER; channelCache++) {
   \                     ??emberScanForNextJoinableNetwork_4:
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x7060             STRB     R0,[R4, #+1]
   \   0000004E   0x7860             LDRB     R0,[R4, #+1]
   \   00000050   0x281B             CMP      R0,#+27
   \   00000052   0xD209             BCS.N    ??emberScanForNextJoinableNetwork_5
    265              int32u bitMask = BIT32(channelCache);
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x4081             LSLS     R1,R1,R0
    266              if (bitMask & channelMaskCache) {
   \   00000058   0x68A2             LDR      R2,[R4, #+8]
   \   0000005A   0x4211             TST      R1,R2
   \   0000005C   0xD0F5             BEQ.N    ??emberScanForNextJoinableNetwork_4
    267                formAndJoinScanType = FORM_AND_JOIN_JOINABLE_SCAN;
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x7020             STRB     R0,[R4, #+0]
    268                return startScan(EMBER_ACTIVE_SCAN, bitMask, ACTIVE_SCAN_DURATION);
   \   00000062   0x2203             MOVS     R2,#+3
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x....             B.N      ?Subroutine0
    269              }
    270            }
    271          
    272            // Notify the app we're completely out of networks.
    273            emberFormAndJoinCleanup(EMBER_NO_BEACONS);
   \                     ??emberScanForNextJoinableNetwork_5:
   \   00000068   0x20AB             MOVS     R0,#+171
   \   0000006A   0x.... 0x....      BL       emberFormAndJoinCleanup
    274            return EMBER_SUCCESS;
   \                     ??emberScanForNextJoinableNetwork_3:
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
    275          }
    276          
    277          //------------------------------------------------------------------------------
    278          // Callbacks
    279          

   \                                 In section .text, align 2, keep-with-next
    280          boolean emberFormAndJoinScanCompleteHandler(int8u channel, EmberStatus status)
    281          {
   \                     emberFormAndJoinScanCompleteHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    282            if (! emberFormAndJoinIsScanning()) {
   \   00000004   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   00000008   0xB120             CBZ.N    R0,??emberFormAndJoinScanCompleteHandler_0
    283              return FALSE;
    284            }
    285          
    286            if (FORM_AND_JOIN_ENERGY_SCAN != formAndJoinScanType) {
   \   0000000A   0x....             LDR.N    R0,??DataTable8
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD00B             BEQ.N    ??emberFormAndJoinScanCompleteHandler_1
    287              // This scan is an Active Scan.
    288              // Active Scans potentially report transmit failures through this callback.
    289              if (EMBER_SUCCESS != status) {
   \   00000012   0xB10C             CBZ.N    R4,??emberFormAndJoinScanCompleteHandler_2
    290                // The Active Scan is still in progress.  This callback is informing us
    291                // about a failure to transmit the beacon request on this channel.
    292                // If necessary we could save this failing channel number and start
    293                // another Active Scan on this channel later (after this current scan is
    294                // complete).
    295                return FALSE;
   \                     ??emberFormAndJoinScanCompleteHandler_0:
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD10             POP      {R4,PC}
    296              }
    297            }
    298          
    299            switch (formAndJoinScanType) {
   \                     ??emberFormAndJoinScanCompleteHandler_2:
   \   00000018   0x2902             CMP      R1,#+2
   \   0000001A   0xD006             BEQ.N    ??emberFormAndJoinScanCompleteHandler_1
   \   0000001C   0xD324             BCC.N    ??emberFormAndJoinScanCompleteHandler_3
   \   0000001E   0x2904             CMP      R1,#+4
   \   00000020   0xD01E             BEQ.N    ??emberFormAndJoinScanCompleteHandler_4
   \   00000022   0xD305             BCC.N    ??emberFormAndJoinScanCompleteHandler_5
   \   00000024   0x2905             CMP      R1,#+5
   \   00000026   0xD01B             BEQ.N    ??emberFormAndJoinScanCompleteHandler_4
   \   00000028   0xE01E             B.N      ??emberFormAndJoinScanCompleteHandler_3
    300          
    301            case FORM_AND_JOIN_ENERGY_SCAN:    
    302              energyScanComplete();    
   \                     ??emberFormAndJoinScanCompleteHandler_1:
   \   0000002A   0x.... 0x....      BL       energyScanComplete
    303              break;
   \   0000002E   0xE01B             B.N      ??emberFormAndJoinScanCompleteHandler_3
    304          
    305            case FORM_AND_JOIN_PAN_ID_SCAN:
    306              panIdScanComplete();
   \                     ??emberFormAndJoinScanCompleteHandler_5:
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x6843             LDR      R3,[R0, #+4]
   \   00000034   0xF64F 0x74FF      MOVW     R4,#+65535
   \                     ??emberFormAndJoinScanCompleteHandler_6:
   \   00000038   0xF833 0x1012      LDRH     R1,[R3, R2, LSL #+1]
   \   0000003C   0x42A1             CMP      R1,R4
   \   0000003E   0xD008             BEQ.N    ??emberFormAndJoinScanCompleteHandler_7
   \   00000040   0x7841             LDRB     R1,[R0, #+1]
   \   00000042   0xF833 0x0012      LDRH     R0,[R3, R2, LSL #+1]
   \   00000046   0x.... 0x....      BL       emberUnusedPanIdFoundHandler
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       emberFormAndJoinCleanup
   \   00000050   0xE00A             B.N      ??emberFormAndJoinScanCompleteHandler_3
   \                     ??emberFormAndJoinScanCompleteHandler_7:
   \   00000052   0x1C52             ADDS     R2,R2,#+1
   \   00000054   0xB2D2             UXTB     R2,R2
   \   00000056   0x2A10             CMP      R2,#+16
   \   00000058   0xD3EE             BCC.N    ??emberFormAndJoinScanCompleteHandler_6
   \   0000005A   0x.... 0x....      BL       startPanIdScan
   \   0000005E   0xE003             B.N      ??emberFormAndJoinScanCompleteHandler_3
    307              break;
    308          
    309            case FORM_AND_JOIN_JOINABLE_SCAN: 
    310              #if defined(XAP2B) || defined(EZSP_HOST) || defined(EMBER_TEST)
    311              if (emberEnableDualChannelScan 
    312                  && (channelCache < 15 || channelCache > 22)
    313                  && networkCount) {
    314                int8u dualChannel = (channelCache + (channelCache < 15 ? 12 : -12));
    315                formAndJoinScanType = FORM_AND_JOIN_DUAL_CHANNEL_SCAN;
    316                startScan(EMBER_ACTIVE_SCAN, BIT32(dualChannel), ACTIVE_SCAN_DURATION);
    317                break;
    318              }
    319              #endif
    320              // If no dual scan, fall through to save a little flash.
    321          
    322            case FORM_AND_JOIN_DUAL_CHANNEL_SCAN:   
    323              formAndJoinScanType = FORM_AND_JOIN_NEXT_NETWORK;
   \                     ??emberFormAndJoinScanCompleteHandler_4:
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x7001             STRB     R1,[R0, #+0]
    324              emberScanForNextJoinableNetwork(); 
   \   00000064   0x.... 0x....      BL       emberScanForNextJoinableNetwork
    325              break;
    326            }
    327            return TRUE;
   \                     ??emberFormAndJoinScanCompleteHandler_3:
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
    328          }
    329          
    330          // We are either looking for PAN IDs or for joinable networks.  In the first
    331          // case we just check the found PAN ID against our list of candidates. 
    332          

   \                                 In section .text, align 2, keep-with-next
    333          boolean emberFormAndJoinNetworkFoundHandler(EmberZigbeeNetwork *networkFound,
    334                                                      int8u lqi,
    335                                                      int8s rssi)
    336          {
   \                     emberFormAndJoinNetworkFoundHandler:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4690             MOV      R8,R2
    337            int8u i;
    338          
    339            SCAN_DEBUG_MSG("SCAN: nwk found ch %d, ", networkFound->channel);
    340            SCAN_DEBUG_MSG("panID 0x%2x, xpan: ", networkFound->panId);
    341            SCAN_DEBUG_XPAN_PRINT(networkFound->extendedPanId);
    342            SCAN_DEBUG_MSG(", lqi %d", lqi);
    343            SCAN_DEBUG_MSG(", profile: %d", networkFound->stackProfile);
    344            SCAN_DEBUG_MSG(", pjoin: %d", networkFound->allowingJoin);
    345            SCAN_DEBUG("\n");
    346            
    347            switch (formAndJoinScanType) {
   \   0000000A   0x....             LDR.N    R5,??DataTable8
   \   0000000C   0x7828             LDRB     R0,[R5, #+0]
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD002             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_0
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xD00F             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_1
   \   00000016   0xE042             B.N      ??emberFormAndJoinNetworkFoundHandler_2
    348          
    349            case FORM_AND_JOIN_PAN_ID_SCAN:
    350              for (i = 0; i < NUM_PAN_ID_CANDIDATES; i++)
   \                     ??emberFormAndJoinNetworkFoundHandler_0:
   \   00000018   0x2000             MOVS     R0,#+0
    351                if (panIdCandidates[i] == networkFound->panId)
   \                     ??emberFormAndJoinNetworkFoundHandler_3:
   \   0000001A   0x6869             LDR      R1,[R5, #+4]
   \   0000001C   0xF831 0x2010      LDRH     R2,[R1, R0, LSL #+1]
   \   00000020   0x8823             LDRH     R3,[R4, #+0]
   \   00000022   0x429A             CMP      R2,R3
   \   00000024   0xBF04             ITT      EQ 
   \   00000026   0xF64F 0x72FF      MOVWEQ   R2,#+65535
   \   0000002A   0xF821 0x2010      STRHEQ   R2,[R1, R0, LSL #+1]
    352                  panIdCandidates[i] = 0xFFFF;
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xDBF2             BLT.N    ??emberFormAndJoinNetworkFoundHandler_3
   \   00000034   0xE033             B.N      ??emberFormAndJoinNetworkFoundHandler_2
    353              break;
    354              
    355            case FORM_AND_JOIN_JOINABLE_SCAN:
    356          
    357              // check for a beacon with permit join on...
    358              if (networkFound->allowingJoin
    359                  // ...the same stack profile as this application...
    360                  && networkFound->stackProfile == formAndJoinStackProfile()
    361                  && (// ...and ignore the Extended PAN ID, or...
    362                      ignoreExtendedPanId
    363                      // ...a matching Extended PAN ID
    364                      || (MEMCOMPARE(extendedPanIdCache,
    365                                     networkFound->extendedPanId,
    366                                     EXTENDED_PAN_ID_SIZE) == 0))) {
   \                     ??emberFormAndJoinNetworkFoundHandler_1:
   \   00000036   0x78E0             LDRB     R0,[R4, #+3]
   \   00000038   0xB388             CBZ.N    R0,??emberFormAndJoinNetworkFoundHandler_2
   \   0000003A   0x7B27             LDRB     R7,[R4, #+12]
   \   0000003C   0x.... 0x....      BL       formAndJoinStackProfile
   \   00000040   0x4287             CMP      R7,R0
   \   00000042   0xD12C             BNE.N    ??emberFormAndJoinNetworkFoundHandler_2
   \   00000044   0x78A8             LDRB     R0,[R5, #+2]
   \   00000046   0xB930             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_4
   \   00000048   0x2208             MOVS     R2,#+8
   \   0000004A   0x1D21             ADDS     R1,R4,#+4
   \   0000004C   0xF105 0x000C      ADD      R0,R5,#+12
   \   00000050   0x.... 0x....      BL       halCommonMemCompare
   \   00000054   0xBB18             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_2
    367                saveNetwork(networkFound, lqi, rssi);
   \                     ??emberFormAndJoinNetworkFoundHandler_4:
   \   00000056   0x2700             MOVS     R7,#+0
   \   00000058   0xE009             B.N      ??emberFormAndJoinNetworkFoundHandler_5
   \                     ??emberFormAndJoinNetworkFoundHandler_6:
   \   0000005A   0x4638             MOV      R0,R7
   \   0000005C   0x.... 0x....      BL       formAndJoinGetNetworkPointer
   \   00000060   0x2208             MOVS     R2,#+8
   \   00000062   0x1D21             ADDS     R1,R4,#+4
   \   00000064   0x1D00             ADDS     R0,R0,#+4
   \   00000066   0x.... 0x....      BL       halCommonMemCompare
   \   0000006A   0xB1C0             CBZ.N    R0,??emberFormAndJoinNetworkFoundHandler_2
   \   0000006C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??emberFormAndJoinNetworkFoundHandler_5:
   \   0000006E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000070   0xB2FF             UXTB     R7,R7
   \   00000072   0x4287             CMP      R7,R0
   \   00000074   0xD3F1             BCC.N    ??emberFormAndJoinNetworkFoundHandler_6
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0xB2C0             UXTB     R0,R0
   \   0000007A   0x.... 0x....      BL       formAndJoinSetBufferLength
   \   0000007E   0xB970             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_2
   \   00000080   0x78E8             LDRB     R0,[R5, #+3]
   \   00000082   0x.... 0x....      BL       formAndJoinGetNetworkPointer
   \   00000086   0x4607             MOV      R7,R0
   \   00000088   0x78E8             LDRB     R0,[R5, #+3]
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x70E8             STRB     R0,[R5, #+3]
   \   0000008E   0x220E             MOVS     R2,#+14
   \   00000090   0x4621             MOV      R1,R4
   \   00000092   0x4638             MOV      R0,R7
   \   00000094   0x.... 0x....      BL       halCommonMemCopy
   \   00000098   0x73BE             STRB     R6,[R7, #+14]
   \   0000009A   0xF887 0x800F      STRB     R8,[R7, #+15]
    368                SCAN_DEBUG(": MATCH\r\n"); 
    369              } else {
    370                SCAN_DEBUG(": NO match\r\n"); 
    371              }
    372              break;
    373          
    374          #if defined(XAP2B) || defined(EZSP_HOST) || defined(EMBER_TEST)
    375            case FORM_AND_JOIN_DUAL_CHANNEL_SCAN: {
    376              NetworkInfo *finger;
    377              for (i = 0; i < networkCount; i++) {
    378                finger = formAndJoinGetNetworkPointer(i);
    379                if (MEMCOMPARE(finger->network.extendedPanId,
    380                               networkFound->extendedPanId,
    381                               EXTENDED_PAN_ID_SIZE) == 0) {
    382                  if (lqi > finger->lqi) {
    383                    finger->network.panId = 0xFFFF;  // Invalid network;
    384                  }
    385                }
    386              }
    387              break;
    388            }
    389          #endif
    390            }
    391            return emberFormAndJoinIsScanning();
   \                     ??emberFormAndJoinNetworkFoundHandler_2:
   \   0000009E   0xE8BD 0x41F3      POP      {R0,R1,R4-R8,LR}
   \   000000A2   0x....             B.N      emberFormAndJoinIsScanning
    392          }
    393          
    394          // Just remember the result.
    395          

   \                                 In section .text, align 2, keep-with-next
    396          boolean emberFormAndJoinEnergyScanResultHandler(int8u channel, int8s maxRssiValue)
    397          {
   \                     emberFormAndJoinEnergyScanResultHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    398            if (emberFormAndJoinIsScanning()) {
   \   00000006   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   0000000A   0xB128             CBZ.N    R0,??emberFormAndJoinEnergyScanResultHandler_0
    399              SCAN_DEBUG_MSG("SCAN: found energy %d dBm on ", maxRssiValue);
    400              SCAN_DEBUG_MSG("channel 0x%x\r\n", channel);
    401              channelEnergies[channel - EMBER_MIN_802_15_4_CHANNEL_NUMBER] = maxRssiValue;
   \   0000000C   0x....             LDR.N    R0,??DataTable8
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x1820             ADDS     R0,R4,R0
   \   00000012   0xF800 0x5C0B      STRB     R5,[R0, #-11]
    402              return TRUE;
   \   00000016   0x2001             MOVS     R0,#+1
    403            }
    404            return FALSE;
   \                     ??emberFormAndJoinEnergyScanResultHandler_0:
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    405          }
    406          
    407          //------------------------------------------------------------------------------
    408          // Helper functions
    409          
    410          static void saveNetwork(EmberZigbeeNetwork *network, int8u lqi, int8s rssi)
    411          {
    412            int8u i;
    413            NetworkInfo *finger;
    414          
    415            // See if we already have that network.
    416            for (i = 0; i < networkCount; i++) {
    417              finger = formAndJoinGetNetworkPointer(i);
    418              if (MEMCOMPARE(finger->network.extendedPanId,
    419                             network->extendedPanId,
    420                             EXTENDED_PAN_ID_SIZE) == 0) {
    421                return;
    422              }
    423            }
    424          
    425            if (formAndJoinSetBufferLength(networkCount + 1) != EMBER_SUCCESS) {
    426              return;
    427            }
    428            finger = formAndJoinGetNetworkPointer(networkCount);
    429            networkCount += 1;
    430            MEMCOPY(finger, network, sizeof(EmberZigbeeNetwork));
    431            finger->lqi = lqi;
    432            finger->rssi = rssi;
    433          }
    434          

   \                                 In section .text, align 2, keep-with-next
    435          boolean emberFormAndJoinIsScanning(void)
    436          {
    437            return (formAndJoinScanType > FORM_AND_JOIN_NEXT_NETWORK);
   \                     emberFormAndJoinIsScanning:
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2902             CMP      R1,#+2
   \   00000006   0x4180             SBCS     R0,R0,R0
   \   00000008   0x43C0             MVNS     R0,R0
   \   0000000A   0x0FC0             LSRS     R0,R0,#+31
   \   0000000C   0x4770             BX       LR               ;; return
    438          }
    439          

   \                                 In section .text, align 2, keep-with-next
    440          boolean emberFormAndJoinCanContinueJoinableNetworkScan(void)
    441          {
    442            return (formAndJoinScanType == FORM_AND_JOIN_NEXT_NETWORK);
   \                     emberFormAndJoinCanContinueJoinableNetworkScan:
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xBF18             IT       NE 
   \   00000008   0x2000             MOVNE    R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
    443          }
    444          

   \                                 In section .text, align 2, keep-with-next
    445          static boolean setup(int8u scanType)
    446          {
   \                     setup:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    447            if (emberFormAndJoinIsScanning()) {
   \   00000004   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   00000008   0xB118             CBZ.N    R0,??setup_0
    448              emberScanErrorHandler(EMBER_MAC_SCANNING);
   \   0000000A   0x203D             MOVS     R0,#+61
   \   0000000C   0x.... 0x....      BL       emberScanErrorHandler
    449              return FALSE;
   \   00000010   0xE00F             B.N      ??setup_1
    450            }
    451            
    452            // Case 12903: Need to reset the cleanup timeout when initiating a new scan
    453            // since a previous scan process may have concluded before the cleanup event
    454            // timer ran out, and we don't want it triggering in the middle of our new
    455            // scan and cleaning out legitimate data.  
    456            // This is a special cause because emberFormAndJoinCleanup is occurring 
    457            // directly rather than as a result of the cleanup event firing, so the 
    458            // cleanup event timer isn't being deactivated like it would from the event
    459            // handler.  Since our only interface to manipulate the cleanup event 
    460            // timer is to restart it (rather than deactivate it), we do that here.
    461            formAndJoinSetCleanupTimeout();
   \                     ??setup_0:
   \   00000012   0x.... 0x....      BL       formAndJoinSetCleanupTimeout
    462            emberFormAndJoinCleanup(EMBER_SUCCESS);  // In case we were in NEXT_NETWORK mode.
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       emberFormAndJoinCleanup
    463            networkCount = 0;
   \   0000001C   0x....             LDR.N    R5,??DataTable8
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x70E8             STRB     R0,[R5, #+3]
    464            formAndJoinScanType = scanType;
   \   00000022   0x702C             STRB     R4,[R5, #+0]
    465            dataContents = formAndJoinAllocateBuffer();
   \   00000024   0x.... 0x....      BL       formAndJoinAllocateBuffer
   \   00000028   0x6068             STR      R0,[R5, #+4]
    466            if (dataContents == NULL) {
   \   0000002A   0xB920             CBNZ.N   R0,??setup_2
    467              emberFormAndJoinCleanup(EMBER_NO_BUFFERS);
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x.... 0x....      BL       emberFormAndJoinCleanup
    468              return FALSE;
   \                     ??setup_1:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}
    469            }
    470            return TRUE;
   \                     ??setup_2:
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    471          }
    472          

   \                                 In section .text, align 2, keep-with-next
    473          void emberFormAndJoinCleanup(EmberStatus status)
    474          {
   \                     emberFormAndJoinCleanup:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    475            formAndJoinScanType = FORM_AND_JOIN_NOT_SCANNING;
   \   00000004   0x....             LDR.N    R0,??DataTable8
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7001             STRB     R1,[R0, #+0]
    476            SCAN_DEBUG("formAndJoinReleaseBuffer()\n");
    477            formAndJoinReleaseBuffer();
   \   0000000A   0x.... 0x....      BL       formAndJoinReleaseBuffer
    478            if (status != EMBER_SUCCESS) {
   \   0000000E   0xB124             CBZ.N    R4,??emberFormAndJoinCleanup_0
    479              emberScanErrorHandler(status);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xE8BD 0x4010      POP      {R4,LR}
   \   00000016   0x.... 0x....      B.W      emberScanErrorHandler
    480            }
    481          }
   \                     ??emberFormAndJoinCleanup_0:
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    482          

   \                                 In section .text, align 2, keep-with-next
    483          static EmberStatus startScan(EmberNetworkScanType type, int32u mask, int8u duration)
    484          {
   \                     startScan:
   \   00000000   0xB510             PUSH     {R4,LR}
    485            EmberStatus status = emberStartScan(type, mask, duration);
   \   00000002   0x.... 0x....      BL       emberStartScan
   \   00000006   0x0004             MOVS     R4,R0
    486            SCAN_DEBUG_MSG("SCAN: start scan, status 0x%x\r\n", status);
    487            if (status != EMBER_SUCCESS) {
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x.... 0x....      BLNE     emberFormAndJoinCleanup
    488              emberFormAndJoinCleanup(status);
    489            }
    490            return status;
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    491          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     formAndJoinScanType
    492          
    493          boolean isArrayZero(int8u* array, int8u size)
    494          {
    495            int8u i;
    496            for (i=0; i<size; i++) {
    497              if (array[i] != 0) {
    498                return FALSE;
    499              }
    500            }
    501            return TRUE;
    502          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  emberFormAndJoinCanContinueJoinableNetworkScan
        8  emberFormAndJoinCleanup
              0 -> emberScanErrorHandler
              8 -> formAndJoinReleaseBuffer
       16  emberFormAndJoinEnergyScanResultHandler
             16 -> emberFormAndJoinIsScanning
        0  emberFormAndJoinIsScanning
       32  emberFormAndJoinNetworkFoundHandler
              0 -> emberFormAndJoinIsScanning
             32 -> formAndJoinGetNetworkPointer
             32 -> formAndJoinSetBufferLength
             32 -> formAndJoinStackProfile
             32 -> halCommonMemCompare
             32 -> halCommonMemCopy
        8  emberFormAndJoinScanCompleteHandler
              8 -> emberFormAndJoinCleanup
              8 -> emberFormAndJoinIsScanning
              8 -> emberScanForNextJoinableNetwork
              8 -> emberUnusedPanIdFoundHandler
              8 -> energyScanComplete
              8 -> startPanIdScan
       16  emberScanForJoinableNetwork
              0 -> emberScanForNextJoinableNetwork
             16 -> halCommonMemCopy
             16 -> setup
        8  emberScanForNextJoinableNetwork
              8 -> emberFormAndJoinCleanup
              8 -> emberJoinableNetworkFoundHandler
              8 -> emberScanErrorHandler
              8 -> formAndJoinGetNetworkPointer
              8 -> formAndJoinSetBufferLength
              8 -> formAndJoinSetCleanupTimeout
              0 -> startScan
       16  emberScanForUnusedPanId
             16 -> halCommonMemSet
             16 -> setup
             16 -> startScan
       16  energyScanComplete
              0 -> emberFormAndJoinCleanup
             16 -> halCommonGetRandom
              0 -> startPanIdScan
       16  setup
             16 -> emberFormAndJoinCleanup
             16 -> emberFormAndJoinIsScanning
             16 -> emberScanErrorHandler
             16 -> formAndJoinAllocateBuffer
             16 -> formAndJoinSetCleanupTimeout
        8  startPanIdScan
              8 -> halCommonGetRandom
              0 -> startScan
        8  startScan
              8 -> emberFormAndJoinCleanup
              8 -> emberStartScan


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       6  ?Subroutine0
       1  emberEnableDualChannelScan
      12  emberFormAndJoinCanContinueJoinableNetworkScan
      28  emberFormAndJoinCleanup
      26  emberFormAndJoinEnergyScanResultHandler
      14  emberFormAndJoinIsScanning
     164  emberFormAndJoinNetworkFoundHandler
     108  emberFormAndJoinScanCompleteHandler
      66  emberScanForJoinableNetwork
     114  emberScanForNextJoinableNetwork
      44  emberScanForUnusedPanId
     112  energyScanComplete
      20  formAndJoinScanType
          channelCache
          ignoreExtendedPanId
          networkCount
          dataContents
          channelMaskCache
          extendedPanIdCache
      58  setup
      44  startPanIdScan
      18  startScan

 
  20 bytes in section .bss
   1 byte  in section .data
 818 bytes in section .text
 
 818 bytes of CODE memory
  21 bytes of DATA memory

Errors: none
Warnings: none
