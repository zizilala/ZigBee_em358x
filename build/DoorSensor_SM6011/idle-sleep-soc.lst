###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     04/Feb/2015  16:37:37 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\id #
#                    le-sleep\idle-sleep-soc.c                                #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\id #
#                    le-sleep\idle-sleep-soc.c -D                             #
#                    "GENERATED_TOKEN_HEADER=\"app/builder/DoorSensor_SM6011/ #
#                    DoorSensor_SM6011_tokens.h\"" -D                         #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"idle-sleep-soc.c\"" -lC             #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\id #
#                    le-sleep\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builde #
#                    r\DoorSensor_SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\ -I              #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \idle-sleep-soc.lst                                      #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \idle-sleep-soc.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\app\framework\plugin\idle-sleep\idle-sleep-soc.c
      1          // Copyright 2013 Silicon Laboratories, Inc.
      2          
      3          #include "app/framework/include/af.h"
      4          #include "app/framework/util/af-event.h"
      5          #include "idle-sleep.h"
      6          
      7          #if defined(EMBER_AF_HAS_RX_ON_WHEN_IDLE_NETWORK) && defined(EMBER_NO_IDLE_SUPPORT)
      8            #warning Idling and sleeping is not available on SoCs with RX-on-when-idle networks that do not support idling.
      9          #else
     10            #define IDLE_AND_SLEEP_SUPPORTED
     11          #endif
     12          
     13          #ifdef IDLE_AND_SLEEP_SUPPORTED
     14          
     15          enum {
     16            AWAKE,
     17            IDLE,
     18            SLEEP,
     19          };
     20          
     21          #ifndef EMBER_AF_HAS_RX_ON_WHEN_IDLE_NETWORK
     22          static int32u fullSleep(int32u sleepDurationMS, int8u eventIndex)
     23          {
     24            int32u sleepDurationAttemptedMS = sleepDurationMS;
     25          
     26            emAfPrintSleepDuration(sleepDurationMS, eventIndex);
     27          
     28            emberAfEepromShutdownCallback();
     29          
     30            // turn off the radio
     31            emberStackPowerDown();
     32          
     33            ATOMIC(
     34              // turn off board and peripherals
     35              halPowerDown();
     36              // turn micro to power save mode - wakes on external interrupt
     37              // or when the time specified expires
     38              halSleepForMilliseconds(&sleepDurationMS);
     39              // power up board and peripherals
     40              halPowerUp();
     41            );
     42            // power up radio
     43            emberStackPowerUp();
     44          
     45            emberAfEepromNoteInitializedStateCallback(FALSE);
     46          
     47            // Allow the stack to time out any of its events and check on its
     48            // own network state.
     49            emberTick();
     50          
     51            // Inform the application how long we have slept, sleepDuration has
     52            // been decremented by the call to halSleepForMilliseconds() by the amount
     53            // of time that we slept.  To get the actual sleep time we must determine
     54            // the delta between the amount we asked for and the amount of sleep time
     55            // LEFT in our request value.
     56            emberAfDebugPrintln("wakeup %l ms",
     57                                (sleepDurationAttemptedMS - sleepDurationMS));
     58          
     59            emAfPrintForceAwakeStatus();
     60          
     61            return (sleepDurationAttemptedMS - sleepDurationMS);
     62          }
     63          #endif
     64          

   \                                 In section .text, align 2, keep-with-next
     65          int32u emberAfCheckForSleepCallback(void)
     66          {
   \                     emberAfCheckForSleepCallback:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     67            if (emberOkToNap() && emAfOkToIdleOrSleep()) {
   \   00000004   0x.... 0x....      BL       emberCurrentStackTasks
   \   00000008   0x2107             MOVS     R1,#+7
   \   0000000A   0x4208             TST      R0,R1
   \   0000000C   0xD15F             BNE.N    ??emberAfCheckForSleepCallback_0
   \   0000000E   0x.... 0x....      BL       emAfOkToIdleOrSleep
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD05B             BEQ.N    ??emberAfCheckForSleepCallback_0
     68          #ifndef EMBER_AF_HAS_RX_ON_WHEN_IDLE_NETWORK
     69              // If the stack says not to hibernate, it is because it has events that
     70              // need to be serviced and therefore we need to consider those events in
     71              // our sleep calculation.
     72              int8u nextEventIndex;
     73              int32u durationMs = emberAfMsToNextEventExtended((emberOkToHibernate()
     74                                                                ? MAX_INT32U_VALUE
     75                                                                : emberMsToNextStackEvent()),
     76                                                               &nextEventIndex);
   \   00000016   0x.... 0x....      BL       emberCurrentStackTasks
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xBF0C             ITE      EQ 
   \   0000001E   0xF04F 0x30FF      MOVEQ    R0,#-1
   \   00000022   0x.... 0x....      BLNE     emberMsToNextStackEvent
   \   00000026   0xA901             ADD      R1,SP,#+4
   \   00000028   0x.... 0x....      BL       emberAfMsToNextEventExtended
   \   0000002C   0x0004             MOVS     R4,R0
     77              if (durationMs != 0
     78                  && emberAfPluginIdleSleepOkToSleepCallback(durationMs)
     79                  && !emberAfPreGoToSleepCallback(durationMs)) { // deprecated
   \   0000002E   0xD037             BEQ.N    ??emberAfCheckForSleepCallback_1
   \   00000030   0x.... 0x....      BL       emberAfPluginIdleSleepOkToSleepCallback
   \   00000034   0xB3A0             CBZ.N    R0,??emberAfCheckForSleepCallback_1
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       emberAfPreGoToSleepCallback
   \   0000003C   0xBB80             CBNZ.N   R0,??emberAfCheckForSleepCallback_1
     80                durationMs = fullSleep(durationMs, nextEventIndex);
   \   0000003E   0x9400             STR      R4,[SP, #+0]
   \   00000040   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       emAfPrintSleepDuration
   \   0000004A   0x.... 0x....      BL       emberAfEepromShutdownCallback
   \   0000004E   0x.... 0x....      BL       emberStackPowerDown
   \   00000052   0x.... 0x....      BL       _disableBasePri
   \   00000056   0x4605             MOV      R5,R0
   \   00000058   0x.... 0x....      BL       halPowerDown
   \   0000005C   0xA800             ADD      R0,SP,#+0
   \   0000005E   0x.... 0x....      BL       halSleepForMilliseconds
   \   00000062   0x.... 0x....      BL       halPowerUp
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       _writeBasePri
   \   0000006C   0x.... 0x....      BL       emberStackPowerUp
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x.... 0x....      BL       emberAfEepromNoteInitializedStateCallback
   \   00000076   0x.... 0x....      BL       emberTick
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x1A22             SUBS     R2,R4,R0
   \   0000007E   0x.... 0x....      ADR.W    R1,`?<Constant "wakeup %l ms">`
   \   00000082   0x2002             MOVS     R0,#+2
   \   00000084   0x.... 0x....      BL       emberAfPrintln
   \   00000088   0x.... 0x....      BL       emAfPrintForceAwakeStatus
   \   0000008C   0x9800             LDR      R0,[SP, #+0]
   \   0000008E   0x1A24             SUBS     R4,R4,R0
     81                emberAfPluginIdleSleepWakeUpCallback(durationMs);
   \   00000090   0x4620             MOV      R0,R4
   \   00000092   0x.... 0x....      BL       emberAfPluginIdleSleepWakeUpCallback
     82                emberAfPostWakeUpCallback(durationMs); // deprecated
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       emberAfPostWakeUpCallback
     83                return durationMs;
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0xBD3E             POP      {R1-R5,PC}
     84              }
     85          #endif
     86          #ifndef EMBER_NO_IDLE_SUPPORT
     87              ATOMIC(
     88                if (emberSerialReadAvailable(APP_SERIAL) == 0
     89                    && emberAfPluginIdleSleepOkToIdleCallback()) {
     90                  if (emberMarkTaskIdle(emAfTaskId)) {
     91                    emberAfPluginIdleSleepActiveCallback();
     92                  }
     93                }
     94              )
   \                     ??emberAfCheckForSleepCallback_1:
   \   000000A0   0x.... 0x....      BL       _disableBasePri
   \   000000A4   0x4604             MOV      R4,R0
   \   000000A6   0x....             LDR.N    R5,??DataTable1
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x.... 0x....      BL       emberSerialReadAvailable
   \   000000AE   0xB940             CBNZ.N   R0,??emberAfCheckForSleepCallback_2
   \   000000B0   0x.... 0x....      BL       emberAfPluginIdleSleepOkToIdleCallback
   \   000000B4   0xB128             CBZ.N    R0,??emberAfCheckForSleepCallback_2
   \   000000B6   0x7828             LDRB     R0,[R5, #+0]
   \   000000B8   0x.... 0x....      BL       emberMarkTaskIdle
   \   000000BC   0xB108             CBZ.N    R0,??emberAfCheckForSleepCallback_2
   \   000000BE   0x.... 0x....      BL       emberAfPluginIdleSleepActiveCallback
   \                     ??emberAfCheckForSleepCallback_2:
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       _writeBasePri
     95              emberMarkTaskActive(emAfTaskId);
   \   000000C8   0x7828             LDRB     R0,[R5, #+0]
   \   000000CA   0x.... 0x....      BL       emMarkTaskActive
     96          #endif
     97            }
     98            return 0;
   \                     ??emberAfCheckForSleepCallback_0:
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xBD3E             POP      {R1-R5,PC}       ;; return
     99          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     emAfTaskId

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "wakeup %l ms">`:
   \   00000000   0x77 0x61          DC8 "wakeup %l ms"
   \              0x6B 0x65    
   \              0x75 0x70    
   \              0x20 0x25    
   \              0x6C 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    100          
    101          #else // !IDLE_AND_SLEEP_SUPPORTED
    102          
    103          int32u emberAfCheckForSleepCallback(void)
    104          {
    105            return 0;
    106          }
    107          
    108          #endif // IDLE_AND_SLEEP_SUPPORTED

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  emberAfCheckForSleepCallback
             24 -> _disableBasePri
             24 -> _writeBasePri
             24 -> emAfOkToIdleOrSleep
             24 -> emAfPrintForceAwakeStatus
             24 -> emAfPrintSleepDuration
             24 -> emMarkTaskActive
             24 -> emberAfEepromNoteInitializedStateCallback
             24 -> emberAfEepromShutdownCallback
             24 -> emberAfMsToNextEventExtended
             24 -> emberAfPluginIdleSleepActiveCallback
             24 -> emberAfPluginIdleSleepOkToIdleCallback
             24 -> emberAfPluginIdleSleepOkToSleepCallback
             24 -> emberAfPluginIdleSleepWakeUpCallback
             24 -> emberAfPostWakeUpCallback
             24 -> emberAfPreGoToSleepCallback
             24 -> emberAfPrintln
             24 -> emberCurrentStackTasks
             24 -> emberMarkTaskIdle
             24 -> emberMsToNextStackEvent
             24 -> emberSerialReadAvailable
             24 -> emberStackPowerDown
             24 -> emberStackPowerUp
             24 -> emberTick
             24 -> halPowerDown
             24 -> halPowerUp
             24 -> halSleepForMilliseconds


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "wakeup %l ms">
       4  ??DataTable1
     210  emberAfCheckForSleepCallback

 
 230 bytes in section .text
 
 230 bytes of CODE memory

Errors: none
Warnings: none
