###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     06/Feb/2015  13:53:56 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\sim-e #
#                    eprom.c                                                  #
#    Command line =  C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\sim-e #
#                    eprom.c -D "GENERATED_TOKEN_HEADER=\"app/builder/DoorSen #
#                    sor_SM6011/DoorSensor_SM6011_tokens.h\"" -D              #
#                    "ZA_GENERATED_HEADER=\"app/builder/DoorSensor_SM6011/Doo #
#                    rSensor_SM6011.h\"" -D LOCAL_STORAGE_BTL -D              #
#                    "BOARD_HEADER=\"app\builder\DoorSensor_SM6011\DoorSensor #
#                    _SM6011_board.h\"" -D "PLATFORM_HEADER=\"hal/micro/corte #
#                    xm3/compiler/iar.h\"" -D CORTEXM3 -D                     #
#                    CORTEXM3_EMBER_MICRO -D CORTEXM3_EM3585 -D PHY_EM3XX -D  #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/D #
#                    oorSensor_SM6011/DoorSensor_SM6011_endpoint_config.h\""  #
#                    -D "__SOURCEFILE__=\"sim-eeprom.c\"" -lC                 #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \ --diag_suppress Pa050 -o C:\Ember\EmberZNet5.3.0-GA\em #
#                    35x\build\DoorSensor_SM6011\ --debug --endian=little     #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\ -I   #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\ #
#                    DoorSensor_SM6011\..\..\..\ -I                           #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\app\framework\include\ -I                #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\ -I C:\Ember\EmberZNet5.3.0-GA\em35x\app #
#                    \builder\DoorSensor_SM6011\..\..\..\stack\ -I            #
#                    C:\Ember\EmberZNet5.3.0-GA\em35x\app\builder\DoorSensor_ #
#                    SM6011\..\..\..\hal\ -I C:\Ember\EmberZNet5.3.0-GA\em35x #
#                    \app\builder\DoorSensor_SM6011\..\..\..\hal\..\ -Ohz     #
#                    --use_c++_inline                                         #
#    List file    =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \sim-eeprom.lst                                          #
#    Object file  =  C:\Ember\EmberZNet5.3.0-GA\em35x\build\DoorSensor_SM6011 #
#                    \sim-eeprom.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Ember\EmberZNet5.3.0-GA\em35x\hal\micro\generic\sim-eeprom.c
      1          #include PLATFORM_HEADER
      2          #include "stack/include/ember.h"
      3          #include "stack/include/error.h"
      4          #include "hal/hal.h"
      5          #include "app/util/serial/serial.h"
      6          
      7          #include "hal/micro/sim-eeprom.h"
      8          
      9          #ifdef CORTEXM3
     10            //On the Cortex-M3 chips we define a variable that holds the actual
     11            //SimEE storage and then place this storage at the proper location
     12            //in the linker.
     13            #ifdef EMBER_TEST
     14              int8u simulatedEepromStorage[SIMEE_SIZE_B];
     15            #else //EMBER_TEST

   \                                 In section SIMEE, align 4, root
     16              __root __no_init int8u simulatedEepromStorage[SIMEE_SIZE_B] @ __SIMEE__;
   \                     simulatedEepromStorage:
   \   00000000                      DS8 8192
     17            #endif //EMBER_TEST
     18            //sim-eeprom-internal.c uses a set of defines that parameterize its behavior.
     19            //Since the -internal file is precompiled, we must externally define the
     20            //parameters (as constants) so an application build can alter them.

   \                                 In section .rodata, align 1, keep-with-next
     21            const int8u REAL_PAGES_PER_VIRTUAL = ((SIMEE_SIZE_HW/FLASH_PAGE_SIZE_HW)/2);
   \                     REAL_PAGES_PER_VIRTUAL:
   \   00000000   0x02               DC8 2

   \                                 In section .rodata, align 2, keep-with-next
     22            const int16u REAL_PAGE_SIZE = FLASH_PAGE_SIZE_HW;
   \                     REAL_PAGE_SIZE:
   \   00000000   0x0400             DC16 1024

   \                                 In section .rodata, align 2, keep-with-next
     23            const int16u LEFT_BASE = SIMEE_BASE_ADDR_HW;
   \                     LEFT_BASE:
   \   00000000   0x0000             DC16 0

   \                                 In section .rodata, align 2, keep-with-next
     24            const int16u LEFT_TOP = ((SIMEE_BASE_ADDR_HW + (FLASH_PAGE_SIZE_HW *
   \                     LEFT_TOP:
   \   00000000   0x07FF             DC16 2047
     25                                    ((SIMEE_SIZE_HW / FLASH_PAGE_SIZE_HW) / 2))) - 1);

   \                                 In section .rodata, align 2, keep-with-next
     26            const int16u RIGHT_BASE = (SIMEE_BASE_ADDR_HW + (FLASH_PAGE_SIZE_HW *
   \                     RIGHT_BASE:
   \   00000000   0x0800             DC16 2048
     27                                      ((SIMEE_SIZE_HW / FLASH_PAGE_SIZE_HW) / 2)));

   \                                 In section .rodata, align 2, keep-with-next
     28            const int16u RIGHT_TOP = (SIMEE_BASE_ADDR_HW + (SIMEE_SIZE_HW - 1));
   \                     RIGHT_TOP:
   \   00000000   0x0FFF             DC16 4095

   \                                 In section .rodata, align 2, keep-with-next
     29            const int16u ERASE_CRITICAL_THRESHOLD = (SIMEE_SIZE_HW / 4);
   \                     ERASE_CRITICAL_THRESHOLD:
   \   00000000   0x0400             DC16 1024
     30          #endif //CORTEXM3
     31          

   \                                 In section .rodata, align 2, keep-with-next
     32          const int16u ID_COUNT = TOKEN_COUNT;
   \                     ID_COUNT:
   \   00000000   0x001D             DC16 29
     33          
     34          #define DEFINETOKENS
     35          //Manufacturing tokens do not exist in the SimEEPROM -define to nothing
     36          #define TOKEN_MFG(name,creator,iscnt,isidx,type,arraysize,...)
     37          
     38          //If the arraysize is exactly 1, we need only a single entry in the ptrCache
     39          //to hold this entry.  If the arraysize is not 1, we need +1 to hold
     40          //the redirection entry in the Primary Table and then arraysize entries in
     41          //the indexed table.  This works for all values of arraysize.
     42          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
     43            + arraysize + ((arraysize==1) ? 0 : 1)
     44            //value of all index counts added together

   \                                 In section .rodata, align 2, keep-with-next
     45            const int16u PTR_CACHE_SIZE = 0
   \                     PTR_CACHE_SIZE:
   \   00000000   0x003A             DC16 58
     46              #include "stack/config/token-stack.h"
     47            ;
     48            //the ptrCache definition - used to provide efficient access, based upon
     49            //ID and index, to the freshest data in the Simulated EEPROM.

   \                                 In section .bss, align 4
     50            int16u ptrCache[
   \                     ptrCache:
   \   00000000                      DS8 116
     51              #include "stack/config/token-stack.h"
     52            ];
     53          #undef TOKEN_DEF
     54          
     55          //The Size Cache definition.  Links the token to its size for efficient
     56          //calculations.  Indexed by compile ID.  Size is in words.  This Cache should
     57          //be used for all size calculations.  halInternalSimEeInit will guarantee that
     58          //the compiled sizes defining this cache match the stored sizes.

   \                                 In section .rodata, align 4, keep-with-next
     59          const int8u sizeCache[] = {
   \                     sizeCache:
   \   00000000   0x01 0x1B          DC8 1, 27, 9, 26, 27, 1, 9, 8, 13, 4, 5, 2, 9, 8, 9, 13, 4, 5, 27, 7, 6
   \              0x09 0x1A    
   \              0x1B 0x01    
   \              0x09 0x08    
   \              0x0D 0x04    
   \              0x05 0x02    
   \              0x09 0x08    
   \              0x09 0x0D    
   \              0x04 0x05    
   \              0x1B 0x07    
   \              0x06         
   \   00000015   0x0D 0x2E          DC8 13, 46, 8, 20, 22, 17, 1, 10, 0, 0, 0
   \              0x08 0x14    
   \              0x16 0x11    
   \              0x01 0x0A    
   \              0x00 0x00    
   \              0x00         
     60          #define TOKEN_DEF(name,creator,iscnt,isidx,type,arraysize,...) \
     61            (BYTES_TO_WORDS(sizeof(type))                                        \
     62               + (iscnt ? BYTES_TO_WORDS(COUNTER_TOKEN_PAD) : 0)),
     63              #include "stack/config/token-stack.h"
     64           };
     65          #undef TOKEN_DEF
     66          
     67          #undef TOKEN_MFG
     68          #undef DEFINETOKENS
     69          
     70          EmberStatus halInternalSimEeStartupCore(boolean forceRebuildAll, 
     71                                                  int8u *lookupCache);
     72          
     73          

   \                                 In section .text, align 2, keep-with-next
     74          EmberStatus halInternalSimEeStartup(boolean forceRebuildAll)
     75          {
   \                     halInternalSimEeStartup:
   \   00000000   0xE92D 0x47F9      PUSH     {R0,R3-R10,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
     76            // lookupCache must be declared here, outside the library so that it can
     77            //  be appropriately sized based on the number of tokens the application
     78            //  uses.
     79            int8u lookupCache[TOKEN_COUNT];
     80            
     81            //The value 0xFF is used as a trigger in both caches to indicate an
     82            //uninitialized entry.  Unitialized entries (i.e. missing tokens) will
     83            //trigger repairing.
     84            MEMSET(lookupCache, 0xFF, ID_COUNT);
   \   00000006   0x221D             MOVS     R2,#+29
   \   00000008   0x21FF             MOVS     R1,#+255
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x.... 0x....      BL       halCommonMemSet
     85            MEMSET(ptrCache, 0xFF, PTR_CACHE_SIZE*sizeof(int16u));
   \   00000010   0x.... 0x....      LDR.W    R9,??DataTable12
   \   00000014   0x2274             MOVS     R2,#+116
   \   00000016   0x21FF             MOVS     R1,#+255
   \   00000018   0x4648             MOV      R0,R9
   \   0000001A   0x.... 0x....      BL       halCommonMemSet
     86            
     87            //Fundamental limitations of the Simulated EEPROM design:
     88            //These limitations are forcefully enforced with asserts because
     89            //exceeding these limitations will cause fatal operation and data
     90            //corruption.
     91            //(1) The maximum number of tokens that can be stored is 254.
     92            //    (Tokens are identified by one-byte values, with 0xFF as invalid.)
     93            //(2) The maximum size, in bytes, of a token (element) is 254.
     94            //    (One byte, with 0xFF as invalid)
     95            //(3) The maximum number of elements in an indexed token is 126.
     96            //    (One byte, with MSB used as counter flag and 0x7F as non-indexed size.)
     97            //(4) The maximum total storage for tokens plus management is SIMEE_BTS_SIZE_B/2.
     98            //    (This limit is due to a Virtual Page only being a limited size and for
     99            //     the Simulated EEPROM to operate with any kind of efficiency, the
    100            //     Base Storage must be small enough to leave room for token copies.)
    101            //NOTE: Sadly, it's not possible to use compile time preprocessor checks on
    102            //      limitations 1, 2, 3, and 4.  Only runtime asserts can be used.
    103            assert(TOKEN_COUNT<255); //fundamental limit (1)
    104            {  
    105              int8u i;
    106              int32u totalTokenStorage = TOKEN_COUNT * 2;   // two words per creator
   \   0000001E   0x253A             MOVS     R5,#+58
    107              int32u indexSkip = TOKEN_COUNT;
   \   00000020   0xF04F 0x0A1D      MOV      R10,#+29
    108              for(i = 0; i < TOKEN_COUNT; i++) {
   \   00000024   0x2700             MOVS     R7,#+0
   \   00000026   0x.... 0x....      ADR.W    R8,`?<Constant "sim-eeprom.c">`
    109                int32u size = BYTES_TO_WORDS(tokenSize[i]);
   \                     ??halInternalSimEeStartup_0:
   \   0000002A   0x....             LDR.N    R0,??DataTable12_1
   \   0000002C   0x5C38             LDRB     R0,[R7, R0]
   \   0000002E   0x1C41             ADDS     R1,R0,#+1
   \   00000030   0xEB01 0x71D1      ADD      R1,R1,R1, LSR #+31
   \   00000034   0x104C             ASRS     R4,R1,#+1
    110                int32u arraySize = tokenArraySize[i];
   \   00000036   0x....             LDR.N    R1,??DataTable12_2
   \   00000038   0x5C7E             LDRB     R6,[R7, R1]
    111                assert(tokenSize[i] < 255); //fundamental limit (2)
   \   0000003A   0x28FF             CMP      R0,#+255
   \   0000003C   0xD103             BNE.N    ??halInternalSimEeStartup_1
   \   0000003E   0x216F             MOVS     R1,#+111
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0x.... 0x....      BL       halInternalAssertFailed
    112                assert(tokenArraySize[i] < 127); //fundamental limit (3)
   \                     ??halInternalSimEeStartup_1:
   \   00000046   0x2E7F             CMP      R6,#+127
   \   00000048   0xD303             BCC.N    ??halInternalSimEeStartup_2
   \   0000004A   0x2170             MOVS     R1,#+112
   \   0000004C   0x4640             MOV      R0,R8
   \   0000004E   0x.... 0x....      BL       halInternalAssertFailed
    113                if(tokenIsCnt[i])
   \                     ??halInternalSimEeStartup_2:
   \   00000052   0x....             LDR.N    R0,??DataTable12_3
   \   00000054   0x5C38             LDRB     R0,[R7, R0]
   \   00000056   0xB100             CBZ.N    R0,??halInternalSimEeStartup_3
    114                  size += BYTES_TO_WORDS(COUNTER_TOKEN_PAD);
   \   00000058   0x3419             ADDS     R4,R4,#+25
    115          
    116          
    117                emberDebugPrintf("Creator: 0x%2X, Words: %d\n",
    118                                 tokenCreators[i],
    119                                 // we cast this to 16-bit to make it readable in decimal
    120                                 // (var args default to 'int' which is 16-bit on xap)
    121                                 // there should be no token who's size is greater than 65k
    122                                 (int16u)(arraySize * (1 + size)));
    123          
    124                //The '1 +' is for the initial info word in each token.
    125                totalTokenStorage += arraySize * (1 + size);
   \                     ??halInternalSimEeStartup_3:
   \   0000005A   0x1C60             ADDS     R0,R4,#+1
   \   0000005C   0xFB00 0x5506      MLA      R5,R0,R6,R5
    126                //Install the indexed token ptrCache redirection value.  If a token is
    127                //indexed, set the ptrCache equal to the index number of where the
    128                //actual token addresses start in the ptrCache.
    129                if(arraySize != 1) {
   \   00000060   0x2E01             CMP      R6,#+1
   \   00000062   0xBF1C             ITT      NE 
   \   00000064   0xF829 0xA017      STRHNE   R10,[R9, R7, LSL #+1]
   \   00000068   0x44B2             ADDNE    R10,R6,R10
    130                  ptrCache[i] = indexSkip;
    131                  indexSkip += arraySize;
    132                }
    133              }
   \   0000006A   0x1C7F             ADDS     R7,R7,#+1
   \   0000006C   0x2F1D             CMP      R7,#+29
   \   0000006E   0xDBDC             BLT.N    ??halInternalSimEeStartup_0
    134          
    135              // Again, we force 32-bit into 16-bit for printing purposes.  The var args
    136              // default to 'int' which is 16-bit on the xap.  We should never exceed
    137              // 65k words for any of these values, so we are okay.
    138              emberDebugPrintf("SimEE data: %d words of %d max (%p), tokenCount: %d\n",
    139                               (int16u)totalTokenStorage,
    140                               (int16u)(SIMEE_BTS_SIZE_B/2),
    141                               (totalTokenStorage < (SIMEE_BTS_SIZE_B/2) 
    142                                ? "ok"
    143                                : "TOO LARGE"),
    144                               (int16u)TOKEN_COUNT);
    145          
    146              if(!(totalTokenStorage < (SIMEE_BTS_SIZE_B/2))) { //fundamental limit (4)
   \   00000070   0xF240 0x441C      MOVW     R4,#+1052
   \   00000074   0x42A5             CMP      R5,R4
   \   00000076   0xD30E             BCC.N    ??halInternalSimEeStartup_4
    147                #if !defined(EMBER_ASSERT_OUTPUT_DISABLED)
    148                  halResetWatchdog(); // In case we're close to running out.
   \   00000078   0x.... 0x....      BL       halInternalResetWatchDog
    149                  INTERRUPTS_OFF();
   \   0000007C   0x.... 0x....      BL       _disableBasePri
    150                  emberSerialGuaranteedPrintf(EMBER_ASSERT_SERIAL_PORT, 
    151                                            "\r\nERROR: SimEE data too large.  Compiling with %d words consumed.  Max allowed is %d.\r\n",
    152                                            totalTokenStorage,
    153                                            (SIMEE_BTS_SIZE_B/2));
   \   00000080   0x4623             MOV      R3,R4
   \   00000082   0x462A             MOV      R2,R5
   \   00000084   0x.... 0x....      ADR.W    R1,`?<Constant "\\r\\nERROR: SimEE data t...">`
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x.... 0x....      BL       emberSerialGuaranteedPrintf
    154                #endif
    155                assert(FALSE);
   \   0000008E   0x219B             MOVS     R1,#+155
   \   00000090   0x4640             MOV      R0,R8
   \   00000092   0x.... 0x....      BL       halInternalAssertFailed
    156              }
    157            }
    158            
    159            return halInternalSimEeStartupCore(forceRebuildAll, lookupCache);
   \                     ??halInternalSimEeStartup_4:
   \   00000096   0xA900             ADD      R1,SP,#+0
   \   00000098   0xF89D 0x0020      LDRB     R0,[SP, #+32]
   \   0000009C   0x.... 0x....      BL       halInternalSimEeStartupCore
   \   000000A0   0xB00A             ADD      SP,SP,#+40
   \   000000A2   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    160          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     ptrCache

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     tokenSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     tokenArraySize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     tokenIsCnt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "sim-eeprom.c">`:
   \   00000000   0x73 0x69          DC8 "sim-eeprom.c"
   \              0x6D 0x2D    
   \              0x65 0x65    
   \              0x70 0x72    
   \              0x6F 0x6D    
   \              0x2E 0x63    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nERROR: SimEE data t...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 45H, 52H, 52H, 4FH, 52H, 3AH
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \   00000008   0x20 0x53          DC8 20H, 53H, 69H, 6DH, 45H, 45H, 20H, 64H
   \              0x69 0x6D    
   \              0x45 0x45    
   \              0x20 0x64    
   \   00000010   0x61 0x74          DC8 61H, 74H, 61H, 20H, 74H, 6FH, 6FH, 20H
   \              0x61 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \   00000018   0x6C 0x61          DC8 6CH, 61H, 72H, 67H, 65H, 2EH, 20H, 20H
   \              0x72 0x67    
   \              0x65 0x2E    
   \              0x20 0x20    
   \   00000020   0x43 0x6F          DC8 43H, 6FH, 6DH, 70H, 69H, 6CH, 69H, 6EH
   \              0x6D 0x70    
   \              0x69 0x6C    
   \              0x69 0x6E    
   \   00000028   0x67 0x20          DC8 67H, 20H, 77H, 69H, 74H, 68H, 20H, 25H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x25    
   \   00000030   0x64 0x20          DC8 64H, 20H, 77H, 6FH, 72H, 64H, 73H, 20H
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x73 0x20    
   \   00000038   0x63 0x6F          DC8 63H, 6FH, 6EH, 73H, 75H, 6DH, 65H, 64H
   \              0x6E 0x73    
   \              0x75 0x6D    
   \              0x65 0x64    
   \   00000040   0x2E 0x20          DC8 2EH, 20H, 20H, 4DH, 61H, 78H, 20H, 61H
   \              0x20 0x4D    
   \              0x61 0x78    
   \              0x20 0x61    
   \   00000048   0x6C 0x6C          DC8 6CH, 6CH, 6FH, 77H, 65H, 64H, 20H, 69H
   \              0x6F 0x77    
   \              0x65 0x64    
   \              0x20 0x69    
   \   00000050   0x73 0x20          DC8 73H, 20H, 25H, 64H, 2EH, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       72  halInternalSimEeStartup
             72 -> _disableBasePri
             72 -> emberSerialGuaranteedPrintf
             72 -> halCommonMemSet
             72 -> halInternalAssertFailed
             72 -> halInternalResetWatchDog
             72 -> halInternalSimEeStartupCore


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      88  ?<Constant "\r\nERROR: SimEE data t...">
      16  ?<Constant "sim-eeprom.c">
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       2  ERASE_CRITICAL_THRESHOLD
       2  ID_COUNT
       2  LEFT_BASE
       2  LEFT_TOP
       2  PTR_CACHE_SIZE
       1  REAL_PAGES_PER_VIRTUAL
       2  REAL_PAGE_SIZE
       2  RIGHT_BASE
       2  RIGHT_TOP
     166  halInternalSimEeStartup
     116  ptrCache
    8192  simulatedEepromStorage
      32  sizeCache

 
   116 bytes in section .bss
    49 bytes in section .rodata
   286 bytes in section .text
 8 192 bytes in section SIMEE
 
   286 bytes of CODE  memory
    49 bytes of CONST memory
 8 308 bytes of DATA  memory

Errors: none
Warnings: none
